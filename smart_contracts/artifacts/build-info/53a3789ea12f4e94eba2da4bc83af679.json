{"id":"53a3789ea12f4e94eba2da4bc83af679","_format":"hh-sol-build-info-1","solcVersion":"0.8.19","solcLongVersion":"0.8.19+commit.7dd6d404","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/interfaces/IERC1271.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"},"@openzeppelin/contracts/interfaces/IERC5267.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.0;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"},"@openzeppelin/contracts/token/ERC1155/ERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    ) public view virtual override returns (uint256[] memory) {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/EIP712.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./ECDSA.sol\";\nimport \"../ShortStrings.sol\";\nimport \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * _Available since v3.4._\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant _TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {EIP-5267}.\n     *\n     * _Available since v4.9._\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        override\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _name.toStringWithFallback(_nameFallback),\n            _version.toStringWithFallback(_versionFallback),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        return\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\n            isValidERC1271SignatureNow(signer, hash, signature);\n    }\n\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\n     * against the signer smart contract using ERC1271.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidERC1271SignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success &&\n            result.length >= 32 &&\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/ShortStrings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(_FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/BasePaint.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n// Author: @w1nt3r_eth \n// To be clear, I (0xNader) didn't write this contract, keeping it here for reference.\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IBasePaintBrush} from \"./BasePaintBrush.sol\";\n\ncontract BasePaint is ERC1155, Ownable {\n    IBasePaintBrush public brushes;\n    uint256 public immutable epochDuration;\n\n    struct Canvas {\n        uint256 totalContributions;\n        uint256 totalRaised;\n        mapping(address => uint256) contributions;\n        mapping(uint256 => uint256) brushUsed;\n    }\n\n    mapping(uint256 => Canvas) public canvases;\n    uint256 public startedAt;\n\n    uint256 public openEditionPrice = 0.0026 ether;\n    uint256 public ownerFeePartsPerMillion = 100_000; // 10% fee\n    uint256 public ownerEarned;\n\n    event Started(uint256 timestamp);\n    event Painted(uint256 indexed day, uint256 tokenId, address author, bytes pixels);\n\n    event ArtistsEarned(uint256 indexed day, uint256 amount);\n    event ArtistWithdraw(uint256 indexed day, address author, uint256 amount);\n\n    event OpenEditionPriceUpdated(uint256 price);\n    event OwnerFeeUpdated(uint256 fee);\n    event OwnerWithdrew(uint256 amount, address to);\n\n    constructor(IBasePaintBrush _brushes, uint256 _epochDuration) ERC1155(\"https://basepaint.xyz/api/art/{id}\") {\n        brushes = _brushes;\n        epochDuration = _epochDuration;\n    }\n\n    function mint(uint256 day, uint256 count) public payable {\n        require(startedAt > 0, \"Not started\");\n        require(day + 1 == today(), \"Invalid day\");\n        require(msg.value >= openEditionPrice * count, \"Invalid price\");\n        require(canvases[day].totalContributions > 0, \"Empty canvas\");\n\n        _mint(msg.sender, day, count, \"\");\n\n        uint256 fee = msg.value * ownerFeePartsPerMillion / 1_000_000;\n        ownerEarned += fee;\n        canvases[day].totalRaised += msg.value - fee;\n        emit ArtistsEarned(day, msg.value - fee);\n    }\n\n    function paint(uint256 day, uint256 tokenId, bytes calldata pixels) public {\n        require(startedAt > 0, \"Not started\");\n        require(day == today(), \"Invalid day\");\n        require(brushes.ownerOf(tokenId) == msg.sender, \"You don't own this brush\");\n        require(pixels.length % 3 == 0, \"Invalid pixel data\");\n        require(pixels.length > 0, \"Invalid pixel data\");\n\n        uint256 painted = pixels.length / 3;\n\n        Canvas storage canvas = canvases[day];\n        canvas.contributions[msg.sender] += painted;\n        canvas.brushUsed[tokenId] += painted;\n        canvas.totalContributions += painted;\n\n        require(canvas.brushUsed[tokenId] <= brushes.strengths(tokenId), \"Brush used too much\");\n        emit Painted(day, tokenId, msg.sender, pixels);\n    }\n\n    function contribution(uint256 day, address author) public view returns (uint256) {\n        return canvases[day].contributions[author];\n    }\n\n    function brushUsed(uint256 day, uint256 tokenId) public view returns (uint256) {\n        return canvases[day].brushUsed[tokenId];\n    }\n\n    function today() public view returns (uint256) {\n        // Starts from day 1\n        return ((block.timestamp - startedAt) / epochDuration) + 1;\n    }\n\n    function authorWithdraw(uint256[] calldata indexes) public {\n        uint256 maxDay = today() - 1;\n        for (uint256 i = 0; i < indexes.length; i++) {\n            uint256 day = indexes[i];\n            require(day < maxDay, \"Invalid day\");\n\n            Canvas storage canvas = canvases[day];\n            require(canvas.totalRaised > 0, \"No funds to withdraw\");\n            require(canvas.totalContributions > 0, \"Empty canvas\");\n            require(canvas.contributions[msg.sender] > 0, \"No contributions\");\n\n            uint256 amount = canvas.totalRaised * canvas.contributions[msg.sender] / canvas.totalContributions;\n            canvas.totalRaised -= amount;\n            canvas.totalContributions -= canvas.contributions[msg.sender];\n            canvas.contributions[msg.sender] = 0;\n\n            (bool success,) = msg.sender.call{value: amount}(\"\");\n            require(success, \"Transfer failed\");\n            emit ArtistWithdraw(day, msg.sender, amount);\n        }\n    }\n\n    function start() public onlyOwner {\n        require(startedAt == 0, \"Already started\");\n\n        startedAt = block.timestamp;\n        emit Started(startedAt);\n    }\n\n    function setURI(string calldata newuri) public onlyOwner {\n        _setURI(newuri);\n    }\n\n    function setOwnerFee(uint256 newFee) public onlyOwner {\n        require(newFee < 1_000_000, \"Invalid fee\");\n        ownerFeePartsPerMillion = newFee;\n        emit OwnerFeeUpdated(newFee);\n    }\n\n    function setOpenEditionPrice(uint256 newPrice) public onlyOwner {\n        openEditionPrice = newPrice;\n        emit OpenEditionPriceUpdated(newPrice);\n    }\n\n    function withdraw(address to) public onlyOwner {\n        uint256 amount = ownerEarned;\n        ownerEarned = 0;\n\n        (bool success,) = to.call{value: amount}(\"\");\n        require(success, \"Transfer failed\");\n        emit OwnerWithdrew(amount, to);\n    }\n}\n"},"contracts/BasePaintBrush.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n// Author: @w1nt3r_eth\n// To be clear, I (0xNader) didn't write this contract, keeping it here for reference.\npragma solidity ^0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\n\ninterface IBasePaintBrush is IERC721 {\n    function strengths(uint256 tokenId) external view returns (uint256);\n}\n\ncontract BasePaintBrush is\n    ERC721(\"BasePaint Brush\", \"BPB\"),\n    EIP712(\"BasePaint Brush\", \"1\"),\n    IBasePaintBrush,\n    Ownable\n{\n    uint256 public totalSupply;\n    mapping(uint256 => uint256) public strengths;\n\n    address private signer;\n    mapping(uint256 => bool) private nonces;\n    string private baseURI = \"https://basepaint.xyz/api/brush/\";\n\n    function mint(uint256 strength) public payable onlyOwner {\n        totalSupply++;\n        _safeMint(msg.sender, totalSupply);\n        strengths[totalSupply] = strength;\n    }\n\n    function upgrade(uint256 tokenId, uint256 strength) public payable onlyOwner {\n        require(tokenId > 0 && tokenId <= totalSupply, \"Invalid tokenId\");\n\n        strengths[tokenId] = strength;\n    }\n\n    function _baseURI() internal view override returns (string memory) {\n        return baseURI;\n    }\n\n    function setSigner(address newSigner) public onlyOwner {\n        signer = newSigner;\n    }\n\n    function setBaseURI(string calldata newBaseURI) public onlyOwner {\n        baseURI = newBaseURI;\n    }\n\n    function setStrength(uint256 tokenId, uint256 strength) public onlyOwner {\n        strengths[tokenId] = strength;\n    }\n\n    function withdraw() public onlyOwner {\n        (bool success,) = owner().call{value: address(this).balance}(new bytes(0));\n        require(success, \"Transfer failed\");\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[3000],"Ownable":[112]},"id":113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":113,"sourceUnit":3001,"src":"127:30:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4,"name":"Context","nameLocations":["683:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":3000,"src":"683:7:0"},"id":5,"nodeType":"InheritanceSpecifier","src":"683:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"159:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":112,"linearizedBaseContracts":[112,3000],"name":"Ownable","nameLocation":"672:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":7,"mutability":"mutable","name":"_owner","nameLocation":"713:6:0","nodeType":"VariableDeclaration","scope":112,"src":"697:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":13,"name":"OwnershipTransferred","nameLocation":"732:20:0","nodeType":"EventDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:0","nodeType":"VariableDeclaration","scope":13,"src":"753:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:0","nodeType":"VariableDeclaration","scope":13,"src":"784:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:0"},"src":"726:84:0"},{"body":{"id":22,"nodeType":"Block","src":"926:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":18,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"955:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":19,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":17,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"936:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"936:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21,"nodeType":"ExpressionStatement","src":"936:32:0"}]},"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"816:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":23,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"923:2:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"926:0:0"},"scope":112,"src":"912:63:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":30,"nodeType":"Block","src":"1084:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":26,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1094:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":27,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1094:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":28,"nodeType":"ExpressionStatement","src":"1094:13:0"},{"id":29,"nodeType":"PlaceholderStatement","src":"1117:1:0"}]},"documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"981:77:0","text":" @dev Throws if called by any account other than the owner."},"id":31,"name":"onlyOwner","nameLocation":"1072:9:0","nodeType":"ModifierDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"1081:2:0"},"src":"1063:62:0","virtual":false,"visibility":"internal"},{"body":{"id":39,"nodeType":"Block","src":"1256:30:0","statements":[{"expression":{"id":37,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1273:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":36,"id":38,"nodeType":"Return","src":"1266:13:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1131:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":40,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:0","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1215:2:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":40,"src":"1247:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:0"},"scope":112,"src":"1201:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":53,"nodeType":"Block","src":"1404:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":45,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1422:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1422:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":47,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"1433:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1433:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":44,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1414:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1414:68:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"1292:62:0","text":" @dev Throws if the sender is not the owner."},"id":54,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:0","nodeType":"FunctionDefinition","parameters":{"id":42,"nodeType":"ParameterList","parameters":[],"src":"1379:2:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[],"src":"1404:0:0"},"scope":112,"src":"1359:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":67,"nodeType":"Block","src":"1878:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":63,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1915:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1907:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1907:7:0","typeDescriptions":{}}},"id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1907:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":60,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1888:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1888:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1888:30:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1495:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":68,"implemented":true,"kind":"function","modifiers":[{"id":58,"kind":"modifierInvocation","modifierName":{"id":57,"name":"onlyOwner","nameLocations":["1868:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1868:9:0"},"nodeType":"ModifierInvocation","src":"1868:9:0"}],"name":"renounceOwnership","nameLocation":"1833:17:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1850:2:0"},"returnParameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"1878:0:0"},"scope":112,"src":"1824:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":90,"nodeType":"Block","src":"2144:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":77,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2162:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":80,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2182:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":79,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2174:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"2174:7:0","typeDescriptions":{}}},"id":81,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2174:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2162:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2186:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":76,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2154:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2154:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":85,"nodeType":"ExpressionStatement","src":"2154:73:0"},{"expression":{"arguments":[{"id":87,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2256:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":86,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"2237:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2237:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":89,"nodeType":"ExpressionStatement","src":"2237:28:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1931:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":91,"implemented":true,"kind":"function","modifiers":[{"id":74,"kind":"modifierInvocation","modifierName":{"id":73,"name":"onlyOwner","nameLocations":["2134:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2134:9:0"},"nodeType":"ModifierInvocation","src":"2134:9:0"}],"name":"transferOwnership","nameLocation":"2083:17:0","nodeType":"FunctionDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"newOwner","nameLocation":"2109:8:0","nodeType":"VariableDeclaration","scope":91,"src":"2101:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"2101:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2100:18:0"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[],"src":"2144:0:0"},"scope":112,"src":"2074:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":110,"nodeType":"Block","src":"2489:124:0","statements":[{"assignments":[98],"declarations":[{"constant":false,"id":98,"mutability":"mutable","name":"oldOwner","nameLocation":"2507:8:0","nodeType":"VariableDeclaration","scope":110,"src":"2499:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"2499:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":100,"initialValue":{"id":99,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2518:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2499:25:0"},{"expression":{"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":101,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2534:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":102,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2543:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2534:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ExpressionStatement","src":"2534:17:0"},{"eventCall":{"arguments":[{"id":106,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"2587:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":107,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2597:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":105,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"2566:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2566:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":109,"nodeType":"EmitStatement","src":"2561:45:0"}]},"documentation":{"id":92,"nodeType":"StructuredDocumentation","src":"2278:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":111,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2435:18:0","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"newOwner","nameLocation":"2462:8:0","nodeType":"VariableDeclaration","scope":111,"src":"2454:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"2454:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2453:18:0"},"returnParameters":{"id":96,"nodeType":"ParameterList","parameters":[],"src":"2489:0:0"},"scope":112,"src":"2426:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":113,"src":"654:1961:0","usedErrors":[]}],"src":"102:2514:0"},"id":0},"@openzeppelin/contracts/interfaces/IERC1271.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC1271.sol","exportedSymbols":{"IERC1271":[126]},"id":127,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":114,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"92:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1271","contractDependencies":[],"contractKind":"interface","documentation":{"id":115,"nodeType":"StructuredDocumentation","src":"117:189:1","text":" @dev Interface of the ERC1271 standard signature validation method for\n contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n _Available since v4.1._"},"fullyImplemented":false,"id":126,"linearizedBaseContracts":[126],"name":"IERC1271","nameLocation":"317:8:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"332:220:1","text":" @dev Should return whether the signature provided is valid for the provided data\n @param hash      Hash of the data to be signed\n @param signature Signature byte array associated with _data"},"functionSelector":"1626ba7e","id":125,"implemented":false,"kind":"function","modifiers":[],"name":"isValidSignature","nameLocation":"566:16:1","nodeType":"FunctionDefinition","parameters":{"id":121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"mutability":"mutable","name":"hash","nameLocation":"591:4:1","nodeType":"VariableDeclaration","scope":125,"src":"583:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":117,"name":"bytes32","nodeType":"ElementaryTypeName","src":"583:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":120,"mutability":"mutable","name":"signature","nameLocation":"610:9:1","nodeType":"VariableDeclaration","scope":125,"src":"597:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":119,"name":"bytes","nodeType":"ElementaryTypeName","src":"597:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"582:38:1"},"returnParameters":{"id":124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":123,"mutability":"mutable","name":"magicValue","nameLocation":"651:10:1","nodeType":"VariableDeclaration","scope":125,"src":"644:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":122,"name":"bytes4","nodeType":"ElementaryTypeName","src":"644:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"643:19:1"},"scope":126,"src":"557:106:1","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":127,"src":"307:358:1","usedErrors":[]}],"src":"92:574:1"},"id":1},"@openzeppelin/contracts/interfaces/IERC5267.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC5267.sol","exportedSymbols":{"IERC5267":[151]},"id":152,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":128,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC5267","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":151,"linearizedBaseContracts":[151],"name":"IERC5267","nameLocation":"142:8:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":129,"nodeType":"StructuredDocumentation","src":"157:84:2","text":" @dev MAY be emitted to signal that the domain could have changed."},"eventSelector":"0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31","id":131,"name":"EIP712DomainChanged","nameLocation":"252:19:2","nodeType":"EventDefinition","parameters":{"id":130,"nodeType":"ParameterList","parameters":[],"src":"271:2:2"},"src":"246:28:2"},{"documentation":{"id":132,"nodeType":"StructuredDocumentation","src":"280:140:2","text":" @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n signature."},"functionSelector":"84b0196e","id":150,"implemented":false,"kind":"function","modifiers":[],"name":"eip712Domain","nameLocation":"434:12:2","nodeType":"FunctionDefinition","parameters":{"id":133,"nodeType":"ParameterList","parameters":[],"src":"446:2:2"},"returnParameters":{"id":149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":135,"mutability":"mutable","name":"fields","nameLocation":"516:6:2","nodeType":"VariableDeclaration","scope":150,"src":"509:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":134,"name":"bytes1","nodeType":"ElementaryTypeName","src":"509:6:2","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"},{"constant":false,"id":137,"mutability":"mutable","name":"name","nameLocation":"550:4:2","nodeType":"VariableDeclaration","scope":150,"src":"536:18:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":136,"name":"string","nodeType":"ElementaryTypeName","src":"536:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":139,"mutability":"mutable","name":"version","nameLocation":"582:7:2","nodeType":"VariableDeclaration","scope":150,"src":"568:21:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":138,"name":"string","nodeType":"ElementaryTypeName","src":"568:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":141,"mutability":"mutable","name":"chainId","nameLocation":"611:7:2","nodeType":"VariableDeclaration","scope":150,"src":"603:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":140,"name":"uint256","nodeType":"ElementaryTypeName","src":"603:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":143,"mutability":"mutable","name":"verifyingContract","nameLocation":"640:17:2","nodeType":"VariableDeclaration","scope":150,"src":"632:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":142,"name":"address","nodeType":"ElementaryTypeName","src":"632:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":145,"mutability":"mutable","name":"salt","nameLocation":"679:4:2","nodeType":"VariableDeclaration","scope":150,"src":"671:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":144,"name":"bytes32","nodeType":"ElementaryTypeName","src":"671:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":148,"mutability":"mutable","name":"extensions","nameLocation":"714:10:2","nodeType":"VariableDeclaration","scope":150,"src":"697:27:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":146,"name":"uint256","nodeType":"ElementaryTypeName","src":"697:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":147,"nodeType":"ArrayTypeName","src":"697:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"495:239:2"},"scope":151,"src":"425:310:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":152,"src":"132:605:2","usedErrors":[]}],"src":"107:631:2"},"id":2},"@openzeppelin/contracts/token/ERC1155/ERC1155.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol","exportedSymbols":{"Address":[2970],"Context":[3000],"ERC1155":[1374],"ERC165":[4248],"IERC1155":[1496],"IERC1155MetadataURI":[1552],"IERC1155Receiver":[1537],"IERC165":[4260]},"id":1375,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":153,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:3"},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","file":"./IERC1155.sol","id":154,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1375,"sourceUnit":1497,"src":"134:24:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol","file":"./IERC1155Receiver.sol","id":155,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1375,"sourceUnit":1538,"src":"159:32:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol","file":"./extensions/IERC1155MetadataURI.sol","id":156,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1375,"sourceUnit":1553,"src":"192:46:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":157,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1375,"sourceUnit":2971,"src":"239:33:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":158,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1375,"sourceUnit":3001,"src":"273:33:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":159,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1375,"sourceUnit":4249,"src":"307:46:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":161,"name":"Context","nameLocations":["590:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":3000,"src":"590:7:3"},"id":162,"nodeType":"InheritanceSpecifier","src":"590:7:3"},{"baseName":{"id":163,"name":"ERC165","nameLocations":["599:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":4248,"src":"599:6:3"},"id":164,"nodeType":"InheritanceSpecifier","src":"599:6:3"},{"baseName":{"id":165,"name":"IERC1155","nameLocations":["607:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":1496,"src":"607:8:3"},"id":166,"nodeType":"InheritanceSpecifier","src":"607:8:3"},{"baseName":{"id":167,"name":"IERC1155MetadataURI","nameLocations":["617:19:3"],"nodeType":"IdentifierPath","referencedDeclaration":1552,"src":"617:19:3"},"id":168,"nodeType":"InheritanceSpecifier","src":"617:19:3"}],"canonicalName":"ERC1155","contractDependencies":[],"contractKind":"contract","documentation":{"id":160,"nodeType":"StructuredDocumentation","src":"355:214:3","text":" @dev Implementation of the basic standard multi-token.\n See https://eips.ethereum.org/EIPS/eip-1155\n Originally based on code by Enjin: https://github.com/enjin/erc-1155\n _Available since v3.1._"},"fullyImplemented":true,"id":1374,"linearizedBaseContracts":[1374,1552,1496,4248,4260,3000],"name":"ERC1155","nameLocation":"579:7:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":171,"libraryName":{"id":169,"name":"Address","nameLocations":["649:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":2970,"src":"649:7:3"},"nodeType":"UsingForDirective","src":"643:26:3","typeName":{"id":170,"name":"address","nodeType":"ElementaryTypeName","src":"661:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"constant":false,"id":177,"mutability":"mutable","name":"_balances","nameLocation":"780:9:3","nodeType":"VariableDeclaration","scope":1374,"src":"724:65:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"typeName":{"id":176,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":172,"name":"uint256","nodeType":"ElementaryTypeName","src":"732:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"724:47:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":175,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":173,"name":"address","nodeType":"ElementaryTypeName","src":"751:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"743:27:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":174,"name":"uint256","nodeType":"ElementaryTypeName","src":"762:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":183,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"899:18:3","nodeType":"VariableDeclaration","scope":1374,"src":"846:71:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":182,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":178,"name":"address","nodeType":"ElementaryTypeName","src":"854:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"846:44:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":181,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":179,"name":"address","nodeType":"ElementaryTypeName","src":"873:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"865:24:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":180,"name":"bool","nodeType":"ElementaryTypeName","src":"884:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"constant":false,"id":185,"mutability":"mutable","name":"_uri","nameLocation":"1053:4:3","nodeType":"VariableDeclaration","scope":1374,"src":"1038:19:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":184,"name":"string","nodeType":"ElementaryTypeName","src":"1038:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":195,"nodeType":"Block","src":"1139:30:3","statements":[{"expression":{"arguments":[{"id":192,"name":"uri_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":188,"src":"1157:4:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":191,"name":"_setURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":707,"src":"1149:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1149:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":194,"nodeType":"ExpressionStatement","src":"1149:13:3"}]},"documentation":{"id":186,"nodeType":"StructuredDocumentation","src":"1064:38:3","text":" @dev See {_setURI}."},"id":196,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":188,"mutability":"mutable","name":"uri_","nameLocation":"1133:4:3","nodeType":"VariableDeclaration","scope":196,"src":"1119:18:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":187,"name":"string","nodeType":"ElementaryTypeName","src":"1119:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1118:20:3"},"returnParameters":{"id":190,"nodeType":"ParameterList","parameters":[],"src":"1139:0:3"},"scope":1374,"src":"1107:62:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[4247,4259],"body":{"id":226,"nodeType":"Block","src":"1344:197:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":207,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"1373:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":209,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"1393:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155_$1496_$","typeString":"type(contract IERC1155)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155_$1496_$","typeString":"type(contract IERC1155)"}],"id":208,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1388:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1388:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155_$1496","typeString":"type(contract IERC1155)"}},"id":211,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1403:11:3","memberName":"interfaceId","nodeType":"MemberAccess","src":"1388:26:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1373:41:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":213,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"1430:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":215,"name":"IERC1155MetadataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1552,"src":"1450:19:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155MetadataURI_$1552_$","typeString":"type(contract IERC1155MetadataURI)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155MetadataURI_$1552_$","typeString":"type(contract IERC1155MetadataURI)"}],"id":214,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1445:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1445:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155MetadataURI_$1552","typeString":"type(contract IERC1155MetadataURI)"}},"id":217,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1471:11:3","memberName":"interfaceId","nodeType":"MemberAccess","src":"1445:37:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1430:52:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1373:109:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":222,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"1522:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":220,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1498:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC1155_$1374_$","typeString":"type(contract super ERC1155)"}},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1504:17:3","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":4247,"src":"1498:23:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1498:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1373:161:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":206,"id":225,"nodeType":"Return","src":"1354:180:3"}]},"documentation":{"id":197,"nodeType":"StructuredDocumentation","src":"1175:56:3","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":227,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1245:17:3","nodeType":"FunctionDefinition","overrides":{"id":203,"nodeType":"OverrideSpecifier","overrides":[{"id":201,"name":"ERC165","nameLocations":["1312:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":4248,"src":"1312:6:3"},{"id":202,"name":"IERC165","nameLocations":["1320:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":4260,"src":"1320:7:3"}],"src":"1303:25:3"},"parameters":{"id":200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":199,"mutability":"mutable","name":"interfaceId","nameLocation":"1270:11:3","nodeType":"VariableDeclaration","scope":227,"src":"1263:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":198,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1263:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1262:20:3"},"returnParameters":{"id":206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":205,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":227,"src":"1338:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":204,"name":"bool","nodeType":"ElementaryTypeName","src":"1338:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1337:6:3"},"scope":1374,"src":"1236:305:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1551],"body":{"id":238,"nodeType":"Block","src":"2015:28:3","statements":[{"expression":{"id":236,"name":"_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"2032:4:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":235,"id":237,"nodeType":"Return","src":"2025:11:3"}]},"documentation":{"id":228,"nodeType":"StructuredDocumentation","src":"1547:388:3","text":" @dev See {IERC1155MetadataURI-uri}.\n This implementation returns the same URI for *all* token types. It relies\n on the token type ID substitution mechanism\n https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n Clients calling this function must replace the `\\{id\\}` substring with the\n actual token type ID."},"functionSelector":"0e89341c","id":239,"implemented":true,"kind":"function","modifiers":[],"name":"uri","nameLocation":"1949:3:3","nodeType":"FunctionDefinition","overrides":{"id":232,"nodeType":"OverrideSpecifier","overrides":[],"src":"1982:8:3"},"parameters":{"id":231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":230,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":239,"src":"1953:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":229,"name":"uint256","nodeType":"ElementaryTypeName","src":"1953:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1952:9:3"},"returnParameters":{"id":235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":234,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":239,"src":"2000:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":233,"name":"string","nodeType":"ElementaryTypeName","src":"2000:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1999:15:3"},"scope":1374,"src":"1940:103:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1434],"body":{"id":266,"nodeType":"Block","src":"2280:132:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":251,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"2298:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2317:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2309:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":252,"name":"address","nodeType":"ElementaryTypeName","src":"2309:7:3","typeDescriptions":{}}},"id":255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2309:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2298:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2321:44:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad","typeString":"literal_string \"ERC1155: address zero is not a valid owner\""},"value":"ERC1155: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad","typeString":"literal_string \"ERC1155: address zero is not a valid owner\""}],"id":250,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2290:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2290:76:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":259,"nodeType":"ExpressionStatement","src":"2290:76:3"},{"expression":{"baseExpression":{"baseExpression":{"id":260,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"2383:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":262,"indexExpression":{"id":261,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"2393:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2383:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":264,"indexExpression":{"id":263,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"2397:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2383:22:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":249,"id":265,"nodeType":"Return","src":"2376:29:3"}]},"documentation":{"id":240,"nodeType":"StructuredDocumentation","src":"2049:131:3","text":" @dev See {IERC1155-balanceOf}.\n Requirements:\n - `account` cannot be the zero address."},"functionSelector":"00fdd58e","id":267,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2194:9:3","nodeType":"FunctionDefinition","overrides":{"id":246,"nodeType":"OverrideSpecifier","overrides":[],"src":"2253:8:3"},"parameters":{"id":245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":242,"mutability":"mutable","name":"account","nameLocation":"2212:7:3","nodeType":"VariableDeclaration","scope":267,"src":"2204:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":241,"name":"address","nodeType":"ElementaryTypeName","src":"2204:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":244,"mutability":"mutable","name":"id","nameLocation":"2229:2:3","nodeType":"VariableDeclaration","scope":267,"src":"2221:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":243,"name":"uint256","nodeType":"ElementaryTypeName","src":"2221:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2203:29:3"},"returnParameters":{"id":249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":248,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":267,"src":"2271:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":247,"name":"uint256","nodeType":"ElementaryTypeName","src":"2271:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2270:9:3"},"scope":1374,"src":"2185:227:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1447],"body":{"id":330,"nodeType":"Block","src":"2720:335:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":282,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"2738:8:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2747:6:3","memberName":"length","nodeType":"MemberAccess","src":"2738:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":284,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":274,"src":"2757:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2761:6:3","memberName":"length","nodeType":"MemberAccess","src":"2757:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2738:29:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206163636f756e747320616e6420696473206c656e677468206d69736d61746368","id":287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:43:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5","typeString":"literal_string \"ERC1155: accounts and ids length mismatch\""},"value":"ERC1155: accounts and ids length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5","typeString":"literal_string \"ERC1155: accounts and ids length mismatch\""}],"id":281,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2730:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2730:83:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":289,"nodeType":"ExpressionStatement","src":"2730:83:3"},{"assignments":[294],"declarations":[{"constant":false,"id":294,"mutability":"mutable","name":"batchBalances","nameLocation":"2841:13:3","nodeType":"VariableDeclaration","scope":330,"src":"2824:30:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":292,"name":"uint256","nodeType":"ElementaryTypeName","src":"2824:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":293,"nodeType":"ArrayTypeName","src":"2824:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":301,"initialValue":{"arguments":[{"expression":{"id":298,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"2871:8:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2880:6:3","memberName":"length","nodeType":"MemberAccess","src":"2871:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":297,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2857:13:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":295,"name":"uint256","nodeType":"ElementaryTypeName","src":"2861:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":296,"nodeType":"ArrayTypeName","src":"2861:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2857:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"2824:63:3"},{"body":{"id":326,"nodeType":"Block","src":"2944:74:3","statements":[{"expression":{"id":324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":313,"name":"batchBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"2958:13:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":315,"indexExpression":{"id":314,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"2972:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2958:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":317,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"2987:8:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":319,"indexExpression":{"id":318,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"2996:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2987:11:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":320,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":274,"src":"3000:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":322,"indexExpression":{"id":321,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"3004:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3000:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":316,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":267,"src":"2977:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2977:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2958:49:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":325,"nodeType":"ExpressionStatement","src":"2958:49:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":306,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"2918:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":307,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"2922:8:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2931:6:3","memberName":"length","nodeType":"MemberAccess","src":"2922:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2918:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":327,"initializationExpression":{"assignments":[303],"declarations":[{"constant":false,"id":303,"mutability":"mutable","name":"i","nameLocation":"2911:1:3","nodeType":"VariableDeclaration","scope":327,"src":"2903:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":302,"name":"uint256","nodeType":"ElementaryTypeName","src":"2903:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":305,"initialValue":{"hexValue":"30","id":304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2915:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2903:13:3"},"loopExpression":{"expression":{"id":311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"2939:3:3","subExpression":{"id":310,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"2941:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":312,"nodeType":"ExpressionStatement","src":"2939:3:3"},"nodeType":"ForStatement","src":"2898:120:3"},{"expression":{"id":328,"name":"batchBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"3035:13:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":280,"id":329,"nodeType":"Return","src":"3028:20:3"}]},"documentation":{"id":268,"nodeType":"StructuredDocumentation","src":"2418:146:3","text":" @dev See {IERC1155-balanceOfBatch}.\n Requirements:\n - `accounts` and `ids` must have the same length."},"functionSelector":"4e1273f4","id":331,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"2578:14:3","nodeType":"FunctionDefinition","overrides":{"id":276,"nodeType":"OverrideSpecifier","overrides":[],"src":"2684:8:3"},"parameters":{"id":275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":271,"mutability":"mutable","name":"accounts","nameLocation":"2619:8:3","nodeType":"VariableDeclaration","scope":331,"src":"2602:25:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":269,"name":"address","nodeType":"ElementaryTypeName","src":"2602:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":270,"nodeType":"ArrayTypeName","src":"2602:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":274,"mutability":"mutable","name":"ids","nameLocation":"2654:3:3","nodeType":"VariableDeclaration","scope":331,"src":"2637:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":272,"name":"uint256","nodeType":"ElementaryTypeName","src":"2637:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":273,"nodeType":"ArrayTypeName","src":"2637:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2592:71:3"},"returnParameters":{"id":280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":279,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":331,"src":"2702:16:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":277,"name":"uint256","nodeType":"ElementaryTypeName","src":"2702:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":278,"nodeType":"ArrayTypeName","src":"2702:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2701:18:3"},"scope":1374,"src":"2569:486:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1455],"body":{"id":347,"nodeType":"Block","src":"3207:69:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":341,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"3236:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3236:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":343,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":334,"src":"3250:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":344,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"3260:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":340,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"3217:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3217:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":346,"nodeType":"ExpressionStatement","src":"3217:52:3"}]},"documentation":{"id":332,"nodeType":"StructuredDocumentation","src":"3061:57:3","text":" @dev See {IERC1155-setApprovalForAll}."},"functionSelector":"a22cb465","id":348,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"3132:17:3","nodeType":"FunctionDefinition","overrides":{"id":338,"nodeType":"OverrideSpecifier","overrides":[],"src":"3198:8:3"},"parameters":{"id":337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":334,"mutability":"mutable","name":"operator","nameLocation":"3158:8:3","nodeType":"VariableDeclaration","scope":348,"src":"3150:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":333,"name":"address","nodeType":"ElementaryTypeName","src":"3150:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":336,"mutability":"mutable","name":"approved","nameLocation":"3173:8:3","nodeType":"VariableDeclaration","scope":348,"src":"3168:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":335,"name":"bool","nodeType":"ElementaryTypeName","src":"3168:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3149:33:3"},"returnParameters":{"id":339,"nodeType":"ParameterList","parameters":[],"src":"3207:0:3"},"scope":1374,"src":"3123:153:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1465],"body":{"id":365,"nodeType":"Block","src":"3448:61:3","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":359,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"3465:18:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":361,"indexExpression":{"id":360,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":351,"src":"3484:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3465:27:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":363,"indexExpression":{"id":362,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"3493:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3465:37:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":358,"id":364,"nodeType":"Return","src":"3458:44:3"}]},"documentation":{"id":349,"nodeType":"StructuredDocumentation","src":"3282:56:3","text":" @dev See {IERC1155-isApprovedForAll}."},"functionSelector":"e985e9c5","id":366,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"3352:16:3","nodeType":"FunctionDefinition","overrides":{"id":355,"nodeType":"OverrideSpecifier","overrides":[],"src":"3424:8:3"},"parameters":{"id":354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":351,"mutability":"mutable","name":"account","nameLocation":"3377:7:3","nodeType":"VariableDeclaration","scope":366,"src":"3369:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":350,"name":"address","nodeType":"ElementaryTypeName","src":"3369:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":353,"mutability":"mutable","name":"operator","nameLocation":"3394:8:3","nodeType":"VariableDeclaration","scope":366,"src":"3386:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":352,"name":"address","nodeType":"ElementaryTypeName","src":"3386:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3368:35:3"},"returnParameters":{"id":358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":357,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":366,"src":"3442:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":356,"name":"bool","nodeType":"ElementaryTypeName","src":"3442:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3441:6:3"},"scope":1374,"src":"3343:166:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1479],"body":{"id":403,"nodeType":"Block","src":"3745:225:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":382,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":369,"src":"3776:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":383,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"3784:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3784:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3776:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":387,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":369,"src":"3817:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":388,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"3823:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3823:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":386,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"3800:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3800:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3776:60:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3850:48:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""},"value":"ERC1155: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""}],"id":381,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3755:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3755:153:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":394,"nodeType":"ExpressionStatement","src":"3755:153:3"},{"expression":{"arguments":[{"id":396,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":369,"src":"3936:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":397,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"3942:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":398,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"3946:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":399,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"3950:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":400,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"3958:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":395,"name":"_safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"3918:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,uint256,bytes memory)"}},"id":401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3918:45:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":402,"nodeType":"ExpressionStatement","src":"3918:45:3"}]},"documentation":{"id":367,"nodeType":"StructuredDocumentation","src":"3515:56:3","text":" @dev See {IERC1155-safeTransferFrom}."},"functionSelector":"f242432a","id":404,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3585:16:3","nodeType":"FunctionDefinition","overrides":{"id":379,"nodeType":"OverrideSpecifier","overrides":[],"src":"3736:8:3"},"parameters":{"id":378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":369,"mutability":"mutable","name":"from","nameLocation":"3619:4:3","nodeType":"VariableDeclaration","scope":404,"src":"3611:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":368,"name":"address","nodeType":"ElementaryTypeName","src":"3611:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":371,"mutability":"mutable","name":"to","nameLocation":"3641:2:3","nodeType":"VariableDeclaration","scope":404,"src":"3633:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":370,"name":"address","nodeType":"ElementaryTypeName","src":"3633:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":373,"mutability":"mutable","name":"id","nameLocation":"3661:2:3","nodeType":"VariableDeclaration","scope":404,"src":"3653:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":372,"name":"uint256","nodeType":"ElementaryTypeName","src":"3653:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":375,"mutability":"mutable","name":"amount","nameLocation":"3681:6:3","nodeType":"VariableDeclaration","scope":404,"src":"3673:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":374,"name":"uint256","nodeType":"ElementaryTypeName","src":"3673:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":377,"mutability":"mutable","name":"data","nameLocation":"3710:4:3","nodeType":"VariableDeclaration","scope":404,"src":"3697:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":376,"name":"bytes","nodeType":"ElementaryTypeName","src":"3697:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3601:119:3"},"returnParameters":{"id":380,"nodeType":"ParameterList","parameters":[],"src":"3745:0:3"},"scope":1374,"src":"3576:394:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1495],"body":{"id":443,"nodeType":"Block","src":"4236:232:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":422,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"4267:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":423,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"4275:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4275:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4267:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":427,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"4308:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":428,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"4314:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4314:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":426,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"4291:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4291:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4267:60:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4341:48:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""},"value":"ERC1155: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156","typeString":"literal_string \"ERC1155: caller is not token owner or approved\""}],"id":421,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4246:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4246:153:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":434,"nodeType":"ExpressionStatement","src":"4246:153:3"},{"expression":{"arguments":[{"id":436,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"4432:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":437,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"4438:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":438,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"4442:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":439,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"4447:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":440,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":417,"src":"4456:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":435,"name":"_safeBatchTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"4409:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4409:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":442,"nodeType":"ExpressionStatement","src":"4409:52:3"}]},"documentation":{"id":405,"nodeType":"StructuredDocumentation","src":"3976:61:3","text":" @dev See {IERC1155-safeBatchTransferFrom}."},"functionSelector":"2eb2c2d6","id":444,"implemented":true,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"4051:21:3","nodeType":"FunctionDefinition","overrides":{"id":419,"nodeType":"OverrideSpecifier","overrides":[],"src":"4227:8:3"},"parameters":{"id":418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":407,"mutability":"mutable","name":"from","nameLocation":"4090:4:3","nodeType":"VariableDeclaration","scope":444,"src":"4082:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":406,"name":"address","nodeType":"ElementaryTypeName","src":"4082:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":409,"mutability":"mutable","name":"to","nameLocation":"4112:2:3","nodeType":"VariableDeclaration","scope":444,"src":"4104:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":408,"name":"address","nodeType":"ElementaryTypeName","src":"4104:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":412,"mutability":"mutable","name":"ids","nameLocation":"4141:3:3","nodeType":"VariableDeclaration","scope":444,"src":"4124:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":410,"name":"uint256","nodeType":"ElementaryTypeName","src":"4124:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":411,"nodeType":"ArrayTypeName","src":"4124:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":415,"mutability":"mutable","name":"amounts","nameLocation":"4171:7:3","nodeType":"VariableDeclaration","scope":444,"src":"4154:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":413,"name":"uint256","nodeType":"ElementaryTypeName","src":"4154:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":414,"nodeType":"ArrayTypeName","src":"4154:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":417,"mutability":"mutable","name":"data","nameLocation":"4201:4:3","nodeType":"VariableDeclaration","scope":444,"src":"4188:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":416,"name":"bytes","nodeType":"ElementaryTypeName","src":"4188:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4072:139:3"},"returnParameters":{"id":420,"nodeType":"ParameterList","parameters":[],"src":"4236:0:3"},"scope":1374,"src":"4042:426:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":560,"nodeType":"Block","src":"5081:784:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":459,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"5099:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5113:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":461,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5105:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":460,"name":"address","nodeType":"ElementaryTypeName","src":"5105:7:3","typeDescriptions":{}}},"id":463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5105:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5099:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373","id":465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5117:39:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""},"value":"ERC1155: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""}],"id":458,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5091:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":467,"nodeType":"ExpressionStatement","src":"5091:66:3"},{"assignments":[469],"declarations":[{"constant":false,"id":469,"mutability":"mutable","name":"operator","nameLocation":"5176:8:3","nodeType":"VariableDeclaration","scope":560,"src":"5168:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":468,"name":"address","nodeType":"ElementaryTypeName","src":"5168:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":472,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":470,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"5187:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5187:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5168:31:3"},{"assignments":[477],"declarations":[{"constant":false,"id":477,"mutability":"mutable","name":"ids","nameLocation":"5226:3:3","nodeType":"VariableDeclaration","scope":560,"src":"5209:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":475,"name":"uint256","nodeType":"ElementaryTypeName","src":"5209:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":476,"nodeType":"ArrayTypeName","src":"5209:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":481,"initialValue":{"arguments":[{"id":479,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"5250:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":478,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"5232:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5232:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5209:44:3"},{"assignments":[486],"declarations":[{"constant":false,"id":486,"mutability":"mutable","name":"amounts","nameLocation":"5280:7:3","nodeType":"VariableDeclaration","scope":560,"src":"5263:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":484,"name":"uint256","nodeType":"ElementaryTypeName","src":"5263:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":485,"nodeType":"ArrayTypeName","src":"5263:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":490,"initialValue":{"arguments":[{"id":488,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"5308:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":487,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"5290:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5290:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5263:52:3"},{"expression":{"arguments":[{"id":492,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":469,"src":"5347:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":493,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"5357:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":494,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"5363:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":495,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"5367:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":496,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":486,"src":"5372:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":497,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"5381:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":491,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"5326:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5326:60:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":499,"nodeType":"ExpressionStatement","src":"5326:60:3"},{"assignments":[501],"declarations":[{"constant":false,"id":501,"mutability":"mutable","name":"fromBalance","nameLocation":"5405:11:3","nodeType":"VariableDeclaration","scope":560,"src":"5397:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":500,"name":"uint256","nodeType":"ElementaryTypeName","src":"5397:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":507,"initialValue":{"baseExpression":{"baseExpression":{"id":502,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"5419:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":504,"indexExpression":{"id":503,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"5429:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5419:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":506,"indexExpression":{"id":505,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"5433:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5419:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5397:41:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":509,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"5456:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":510,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"5471:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5456:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572","id":512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5479:44:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""},"value":"ERC1155: insufficient balance for transfer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""}],"id":508,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5448:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5448:76:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":514,"nodeType":"ExpressionStatement","src":"5448:76:3"},{"id":525,"nodeType":"UncheckedBlock","src":"5534:77:3","statements":[{"expression":{"id":523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":515,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"5558:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":518,"indexExpression":{"id":516,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"5568:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5558:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":519,"indexExpression":{"id":517,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"5572:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5558:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":520,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"5580:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":521,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"5594:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5580:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5558:42:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":524,"nodeType":"ExpressionStatement","src":"5558:42:3"}]},{"expression":{"id":532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":526,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"5620:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":529,"indexExpression":{"id":527,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"5630:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5620:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":530,"indexExpression":{"id":528,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"5634:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5620:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":531,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"5641:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5620:27:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":533,"nodeType":"ExpressionStatement","src":"5620:27:3"},{"eventCall":{"arguments":[{"id":535,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":469,"src":"5678:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":536,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"5688:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":537,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"5694:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":538,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"5698:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":539,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"5702:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":534,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1393,"src":"5663:14:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5663:46:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":541,"nodeType":"EmitStatement","src":"5658:51:3"},{"expression":{"arguments":[{"id":543,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":469,"src":"5740:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":544,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"5750:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":545,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"5756:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":546,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"5760:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":547,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":486,"src":"5765:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":548,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"5774:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":542,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"5720:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5720:59:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":550,"nodeType":"ExpressionStatement","src":"5720:59:3"},{"expression":{"arguments":[{"id":552,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":469,"src":"5821:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":553,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"5831:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":554,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"5837:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":555,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"5841:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":556,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"5845:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":557,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"5853:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":551,"name":"_doSafeTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"5790:30:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,uint256,bytes memory)"}},"id":558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5790:68:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":559,"nodeType":"ExpressionStatement","src":"5790:68:3"}]},"documentation":{"id":445,"nodeType":"StructuredDocumentation","src":"4474:439:3","text":" @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - `from` must have a balance of tokens of type `id` of at least `amount`.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"id":561,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransferFrom","nameLocation":"4927:17:3","nodeType":"FunctionDefinition","parameters":{"id":456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":447,"mutability":"mutable","name":"from","nameLocation":"4962:4:3","nodeType":"VariableDeclaration","scope":561,"src":"4954:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":446,"name":"address","nodeType":"ElementaryTypeName","src":"4954:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":449,"mutability":"mutable","name":"to","nameLocation":"4984:2:3","nodeType":"VariableDeclaration","scope":561,"src":"4976:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":448,"name":"address","nodeType":"ElementaryTypeName","src":"4976:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":451,"mutability":"mutable","name":"id","nameLocation":"5004:2:3","nodeType":"VariableDeclaration","scope":561,"src":"4996:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":450,"name":"uint256","nodeType":"ElementaryTypeName","src":"4996:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":453,"mutability":"mutable","name":"amount","nameLocation":"5024:6:3","nodeType":"VariableDeclaration","scope":561,"src":"5016:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":452,"name":"uint256","nodeType":"ElementaryTypeName","src":"5016:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":455,"mutability":"mutable","name":"data","nameLocation":"5053:4:3","nodeType":"VariableDeclaration","scope":561,"src":"5040:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":454,"name":"bytes","nodeType":"ElementaryTypeName","src":"5040:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4944:119:3"},"returnParameters":{"id":457,"nodeType":"ParameterList","parameters":[],"src":"5081:0:3"},"scope":1374,"src":"4918:947:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":695,"nodeType":"Block","src":"6399:927:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":578,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"6417:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6421:6:3","memberName":"length","nodeType":"MemberAccess","src":"6417:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":580,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"6431:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6439:6:3","memberName":"length","nodeType":"MemberAccess","src":"6431:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6417:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368","id":583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6447:42:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""},"value":"ERC1155: ids and amounts length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""}],"id":577,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6409:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6409:81:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":585,"nodeType":"ExpressionStatement","src":"6409:81:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":587,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"6508:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6522:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":589,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6514:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":588,"name":"address","nodeType":"ElementaryTypeName","src":"6514:7:3","typeDescriptions":{}}},"id":591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6514:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6508:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373","id":593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6526:39:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""},"value":"ERC1155: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d","typeString":"literal_string \"ERC1155: transfer to the zero address\""}],"id":586,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6500:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6500:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":595,"nodeType":"ExpressionStatement","src":"6500:66:3"},{"assignments":[597],"declarations":[{"constant":false,"id":597,"mutability":"mutable","name":"operator","nameLocation":"6585:8:3","nodeType":"VariableDeclaration","scope":695,"src":"6577:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":596,"name":"address","nodeType":"ElementaryTypeName","src":"6577:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":600,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":598,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"6596:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6596:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6577:31:3"},{"expression":{"arguments":[{"id":602,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"6640:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":603,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"6650:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":604,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"6656:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":605,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"6660:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":606,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"6665:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":607,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"6674:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":601,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"6619:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6619:60:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":609,"nodeType":"ExpressionStatement","src":"6619:60:3"},{"body":{"id":667,"nodeType":"Block","src":"6731:370:3","statements":[{"assignments":[622],"declarations":[{"constant":false,"id":622,"mutability":"mutable","name":"id","nameLocation":"6753:2:3","nodeType":"VariableDeclaration","scope":667,"src":"6745:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":621,"name":"uint256","nodeType":"ElementaryTypeName","src":"6745:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":626,"initialValue":{"baseExpression":{"id":623,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"6758:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":625,"indexExpression":{"id":624,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"6762:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6758:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6745:19:3"},{"assignments":[628],"declarations":[{"constant":false,"id":628,"mutability":"mutable","name":"amount","nameLocation":"6786:6:3","nodeType":"VariableDeclaration","scope":667,"src":"6778:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":627,"name":"uint256","nodeType":"ElementaryTypeName","src":"6778:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":632,"initialValue":{"baseExpression":{"id":629,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"6795:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":631,"indexExpression":{"id":630,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"6803:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6795:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6778:27:3"},{"assignments":[634],"declarations":[{"constant":false,"id":634,"mutability":"mutable","name":"fromBalance","nameLocation":"6828:11:3","nodeType":"VariableDeclaration","scope":667,"src":"6820:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":633,"name":"uint256","nodeType":"ElementaryTypeName","src":"6820:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":640,"initialValue":{"baseExpression":{"baseExpression":{"id":635,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"6842:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":637,"indexExpression":{"id":636,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":622,"src":"6852:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6842:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":639,"indexExpression":{"id":638,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"6856:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6842:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6820:41:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":642,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":634,"src":"6883:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":643,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"6898:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6883:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572","id":645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6906:44:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""},"value":"ERC1155: insufficient balance for transfer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf","typeString":"literal_string \"ERC1155: insufficient balance for transfer\""}],"id":641,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6875:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6875:76:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":647,"nodeType":"ExpressionStatement","src":"6875:76:3"},{"id":658,"nodeType":"UncheckedBlock","src":"6965:85:3","statements":[{"expression":{"id":656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":648,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"6993:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":651,"indexExpression":{"id":649,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":622,"src":"7003:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6993:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":652,"indexExpression":{"id":650,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"7007:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6993:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":653,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":634,"src":"7015:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":654,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"7029:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7015:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6993:42:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":657,"nodeType":"ExpressionStatement","src":"6993:42:3"}]},{"expression":{"id":665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":659,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"7063:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":662,"indexExpression":{"id":660,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":622,"src":"7073:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7063:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":663,"indexExpression":{"id":661,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"7077:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7063:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":664,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"7084:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7063:27:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":666,"nodeType":"ExpressionStatement","src":"7063:27:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":614,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"6710:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":615,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"6714:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6718:6:3","memberName":"length","nodeType":"MemberAccess","src":"6714:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6710:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":668,"initializationExpression":{"assignments":[611],"declarations":[{"constant":false,"id":611,"mutability":"mutable","name":"i","nameLocation":"6703:1:3","nodeType":"VariableDeclaration","scope":668,"src":"6695:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":610,"name":"uint256","nodeType":"ElementaryTypeName","src":"6695:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":613,"initialValue":{"hexValue":"30","id":612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6707:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6695:13:3"},"loopExpression":{"expression":{"id":619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"6726:3:3","subExpression":{"id":618,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"6728:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":620,"nodeType":"ExpressionStatement","src":"6726:3:3"},"nodeType":"ForStatement","src":"6690:411:3"},{"eventCall":{"arguments":[{"id":670,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"7130:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":671,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"7140:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":672,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"7146:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":673,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"7150:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":674,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"7155:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":669,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"7116:13:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7116:47:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":676,"nodeType":"EmitStatement","src":"7111:52:3"},{"expression":{"arguments":[{"id":678,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"7194:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":679,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"7204:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":680,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"7210:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":681,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"7214:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":682,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"7219:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":683,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"7228:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":677,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"7174:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7174:59:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":685,"nodeType":"ExpressionStatement","src":"7174:59:3"},{"expression":{"arguments":[{"id":687,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"7280:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":688,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"7290:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":689,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"7296:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":690,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"7300:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":691,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"7305:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":692,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"7314:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":686,"name":"_doSafeBatchTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"7244:35:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7244:75:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":694,"nodeType":"ExpressionStatement","src":"7244:75:3"}]},"documentation":{"id":562,"nodeType":"StructuredDocumentation","src":"5871:335:3","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n Emits a {TransferBatch} event.\n Requirements:\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"id":696,"implemented":true,"kind":"function","modifiers":[],"name":"_safeBatchTransferFrom","nameLocation":"6220:22:3","nodeType":"FunctionDefinition","parameters":{"id":575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":564,"mutability":"mutable","name":"from","nameLocation":"6260:4:3","nodeType":"VariableDeclaration","scope":696,"src":"6252:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":563,"name":"address","nodeType":"ElementaryTypeName","src":"6252:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":566,"mutability":"mutable","name":"to","nameLocation":"6282:2:3","nodeType":"VariableDeclaration","scope":696,"src":"6274:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":565,"name":"address","nodeType":"ElementaryTypeName","src":"6274:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":569,"mutability":"mutable","name":"ids","nameLocation":"6311:3:3","nodeType":"VariableDeclaration","scope":696,"src":"6294:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":567,"name":"uint256","nodeType":"ElementaryTypeName","src":"6294:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":568,"nodeType":"ArrayTypeName","src":"6294:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":572,"mutability":"mutable","name":"amounts","nameLocation":"6341:7:3","nodeType":"VariableDeclaration","scope":696,"src":"6324:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":570,"name":"uint256","nodeType":"ElementaryTypeName","src":"6324:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":571,"nodeType":"ArrayTypeName","src":"6324:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":574,"mutability":"mutable","name":"data","nameLocation":"6371:4:3","nodeType":"VariableDeclaration","scope":696,"src":"6358:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":573,"name":"bytes","nodeType":"ElementaryTypeName","src":"6358:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6242:139:3"},"returnParameters":{"id":576,"nodeType":"ParameterList","parameters":[],"src":"6399:0:3"},"scope":1374,"src":"6211:1115:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":706,"nodeType":"Block","src":"8205:30:3","statements":[{"expression":{"id":704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":702,"name":"_uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"8215:4:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":703,"name":"newuri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":699,"src":"8222:6:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"8215:13:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":705,"nodeType":"ExpressionStatement","src":"8215:13:3"}]},"documentation":{"id":697,"nodeType":"StructuredDocumentation","src":"7332:812:3","text":" @dev Sets a new URI for all token types, by relying on the token type ID\n substitution mechanism\n https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n URI or any of the amounts in the JSON file at said URI will be replaced by\n clients with the token type ID.\n For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n interpreted by clients as\n `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n for token type ID 0x4cce0.\n See {uri}.\n Because these URIs cannot be meaningfully represented by the {URI} event,\n this function emits no events."},"id":707,"implemented":true,"kind":"function","modifiers":[],"name":"_setURI","nameLocation":"8158:7:3","nodeType":"FunctionDefinition","parameters":{"id":700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":699,"mutability":"mutable","name":"newuri","nameLocation":"8180:6:3","nodeType":"VariableDeclaration","scope":707,"src":"8166:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":698,"name":"string","nodeType":"ElementaryTypeName","src":"8166:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8165:22:3"},"returnParameters":{"id":701,"nodeType":"ParameterList","parameters":[],"src":"8205:0:3"},"scope":1374,"src":"8149:86:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":807,"nodeType":"Block","src":"8699:580:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":720,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":710,"src":"8717:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8731:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":722,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8723:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":721,"name":"address","nodeType":"ElementaryTypeName","src":"8723:7:3","typeDescriptions":{}}},"id":724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8723:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8717:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206d696e7420746f20746865207a65726f2061646472657373","id":726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8735:35:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""},"value":"ERC1155: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""}],"id":719,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8709:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8709:62:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":728,"nodeType":"ExpressionStatement","src":"8709:62:3"},{"assignments":[730],"declarations":[{"constant":false,"id":730,"mutability":"mutable","name":"operator","nameLocation":"8790:8:3","nodeType":"VariableDeclaration","scope":807,"src":"8782:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":729,"name":"address","nodeType":"ElementaryTypeName","src":"8782:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":733,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":731,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"8801:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8801:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8782:31:3"},{"assignments":[738],"declarations":[{"constant":false,"id":738,"mutability":"mutable","name":"ids","nameLocation":"8840:3:3","nodeType":"VariableDeclaration","scope":807,"src":"8823:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":736,"name":"uint256","nodeType":"ElementaryTypeName","src":"8823:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":737,"nodeType":"ArrayTypeName","src":"8823:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":742,"initialValue":{"arguments":[{"id":740,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":712,"src":"8864:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":739,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"8846:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8846:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"8823:44:3"},{"assignments":[747],"declarations":[{"constant":false,"id":747,"mutability":"mutable","name":"amounts","nameLocation":"8894:7:3","nodeType":"VariableDeclaration","scope":807,"src":"8877:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":745,"name":"uint256","nodeType":"ElementaryTypeName","src":"8877:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":746,"nodeType":"ArrayTypeName","src":"8877:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":751,"initialValue":{"arguments":[{"id":749,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"8922:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":748,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"8904:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8904:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"8877:52:3"},{"expression":{"arguments":[{"id":753,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"8961:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8979:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":755,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8971:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":754,"name":"address","nodeType":"ElementaryTypeName","src":"8971:7:3","typeDescriptions":{}}},"id":757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8971:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":758,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":710,"src":"8983:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":759,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"8987:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":760,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"8992:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":761,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"9001:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":752,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"8940:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8940:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":763,"nodeType":"ExpressionStatement","src":"8940:66:3"},{"expression":{"id":770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":764,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"9017:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":767,"indexExpression":{"id":765,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":712,"src":"9027:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9017:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":768,"indexExpression":{"id":766,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":710,"src":"9031:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9017:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":769,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"9038:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9017:27:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":771,"nodeType":"ExpressionStatement","src":"9017:27:3"},{"eventCall":{"arguments":[{"id":773,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"9074:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9092:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":775,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9084:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":774,"name":"address","nodeType":"ElementaryTypeName","src":"9084:7:3","typeDescriptions":{}}},"id":777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9084:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":778,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":710,"src":"9096:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":779,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":712,"src":"9100:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":780,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"9104:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":772,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1393,"src":"9059:14:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9059:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":782,"nodeType":"EmitStatement","src":"9054:57:3"},{"expression":{"arguments":[{"id":784,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"9142:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9160:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":786,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9152:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":785,"name":"address","nodeType":"ElementaryTypeName","src":"9152:7:3","typeDescriptions":{}}},"id":788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9152:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":789,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":710,"src":"9164:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":790,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"9168:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":791,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"9173:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":792,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"9182:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":783,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"9122:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9122:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":794,"nodeType":"ExpressionStatement","src":"9122:65:3"},{"expression":{"arguments":[{"id":796,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"9229:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9247:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":798,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9239:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":797,"name":"address","nodeType":"ElementaryTypeName","src":"9239:7:3","typeDescriptions":{}}},"id":800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9239:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":801,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":710,"src":"9251:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":802,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":712,"src":"9255:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":803,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"9259:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":804,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":716,"src":"9267:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":795,"name":"_doSafeTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"9198:30:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,uint256,bytes memory)"}},"id":805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9198:74:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":806,"nodeType":"ExpressionStatement","src":"9198:74:3"}]},"documentation":{"id":708,"nodeType":"StructuredDocumentation","src":"8241:362:3","text":" @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"id":808,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8617:5:3","nodeType":"FunctionDefinition","parameters":{"id":717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":710,"mutability":"mutable","name":"to","nameLocation":"8631:2:3","nodeType":"VariableDeclaration","scope":808,"src":"8623:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":709,"name":"address","nodeType":"ElementaryTypeName","src":"8623:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":712,"mutability":"mutable","name":"id","nameLocation":"8643:2:3","nodeType":"VariableDeclaration","scope":808,"src":"8635:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":711,"name":"uint256","nodeType":"ElementaryTypeName","src":"8635:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":714,"mutability":"mutable","name":"amount","nameLocation":"8655:6:3","nodeType":"VariableDeclaration","scope":808,"src":"8647:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":713,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":716,"mutability":"mutable","name":"data","nameLocation":"8676:4:3","nodeType":"VariableDeclaration","scope":808,"src":"8663:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":715,"name":"bytes","nodeType":"ElementaryTypeName","src":"8663:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8622:59:3"},"returnParameters":{"id":718,"nodeType":"ParameterList","parameters":[],"src":"8699:0:3"},"scope":1374,"src":"8608:671:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":918,"nodeType":"Block","src":"9823:637:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":823,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"9841:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9855:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":825,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9847:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":824,"name":"address","nodeType":"ElementaryTypeName","src":"9847:7:3","typeDescriptions":{}}},"id":827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9847:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9841:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206d696e7420746f20746865207a65726f2061646472657373","id":829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9859:35:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""},"value":"ERC1155: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2","typeString":"literal_string \"ERC1155: mint to the zero address\""}],"id":822,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9833:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9833:62:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":831,"nodeType":"ExpressionStatement","src":"9833:62:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":833,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"9913:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9917:6:3","memberName":"length","nodeType":"MemberAccess","src":"9913:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":835,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"9927:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9935:6:3","memberName":"length","nodeType":"MemberAccess","src":"9927:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9913:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368","id":838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9943:42:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""},"value":"ERC1155: ids and amounts length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""}],"id":832,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9905:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9905:81:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":840,"nodeType":"ExpressionStatement","src":"9905:81:3"},{"assignments":[842],"declarations":[{"constant":false,"id":842,"mutability":"mutable","name":"operator","nameLocation":"10005:8:3","nodeType":"VariableDeclaration","scope":918,"src":"9997:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":841,"name":"address","nodeType":"ElementaryTypeName","src":"9997:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":845,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":843,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"10016:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":844,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10016:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"9997:31:3"},{"expression":{"arguments":[{"id":847,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"10060:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10078:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":849,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10070:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":848,"name":"address","nodeType":"ElementaryTypeName","src":"10070:7:3","typeDescriptions":{}}},"id":851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10070:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":852,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"10082:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":853,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"10086:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":854,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"10091:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":855,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"10100:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":846,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"10039:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10039:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":857,"nodeType":"ExpressionStatement","src":"10039:66:3"},{"body":{"id":881,"nodeType":"Block","src":"10157:60:3","statements":[{"expression":{"id":879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":869,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"10171:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":874,"indexExpression":{"baseExpression":{"id":870,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"10181:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":872,"indexExpression":{"id":871,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":859,"src":"10185:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10181:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10171:17:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":875,"indexExpression":{"id":873,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"10189:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10171:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"baseExpression":{"id":876,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"10196:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":878,"indexExpression":{"id":877,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":859,"src":"10204:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10196:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10171:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":880,"nodeType":"ExpressionStatement","src":"10171:35:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":862,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":859,"src":"10136:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":863,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"10140:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10144:6:3","memberName":"length","nodeType":"MemberAccess","src":"10140:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10136:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":882,"initializationExpression":{"assignments":[859],"declarations":[{"constant":false,"id":859,"mutability":"mutable","name":"i","nameLocation":"10129:1:3","nodeType":"VariableDeclaration","scope":882,"src":"10121:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":858,"name":"uint256","nodeType":"ElementaryTypeName","src":"10121:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":861,"initialValue":{"hexValue":"30","id":860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10133:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10121:13:3"},"loopExpression":{"expression":{"id":867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10152:3:3","subExpression":{"id":866,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":859,"src":"10152:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":868,"nodeType":"ExpressionStatement","src":"10152:3:3"},"nodeType":"ForStatement","src":"10116:101:3"},{"eventCall":{"arguments":[{"id":884,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"10246:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10264:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":886,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10256:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":885,"name":"address","nodeType":"ElementaryTypeName","src":"10256:7:3","typeDescriptions":{}}},"id":888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10256:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":889,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"10268:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":890,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"10272:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":891,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"10277:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":883,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"10232:13:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10232:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":893,"nodeType":"EmitStatement","src":"10227:58:3"},{"expression":{"arguments":[{"id":895,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"10316:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10334:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":897,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10326:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":896,"name":"address","nodeType":"ElementaryTypeName","src":"10326:7:3","typeDescriptions":{}}},"id":899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10326:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":900,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"10338:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":901,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"10342:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":902,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"10347:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":903,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"10356:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":894,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"10296:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10296:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":905,"nodeType":"ExpressionStatement","src":"10296:65:3"},{"expression":{"arguments":[{"id":907,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"10408:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10426:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":909,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10418:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":908,"name":"address","nodeType":"ElementaryTypeName","src":"10418:7:3","typeDescriptions":{}}},"id":911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10418:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":912,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"10430:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":913,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"10434:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":914,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"10439:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":915,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"10448:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":906,"name":"_doSafeBatchTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"10372:35:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10372:81:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":917,"nodeType":"ExpressionStatement","src":"10372:81:3"}]},"documentation":{"id":809,"nodeType":"StructuredDocumentation","src":"9285:379:3","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `amounts` must have the same length.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"id":919,"implemented":true,"kind":"function","modifiers":[],"name":"_mintBatch","nameLocation":"9678:10:3","nodeType":"FunctionDefinition","parameters":{"id":820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":811,"mutability":"mutable","name":"to","nameLocation":"9706:2:3","nodeType":"VariableDeclaration","scope":919,"src":"9698:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":810,"name":"address","nodeType":"ElementaryTypeName","src":"9698:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":814,"mutability":"mutable","name":"ids","nameLocation":"9735:3:3","nodeType":"VariableDeclaration","scope":919,"src":"9718:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":812,"name":"uint256","nodeType":"ElementaryTypeName","src":"9718:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":813,"nodeType":"ArrayTypeName","src":"9718:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":817,"mutability":"mutable","name":"amounts","nameLocation":"9765:7:3","nodeType":"VariableDeclaration","scope":919,"src":"9748:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":815,"name":"uint256","nodeType":"ElementaryTypeName","src":"9748:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":816,"nodeType":"ArrayTypeName","src":"9748:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":819,"mutability":"mutable","name":"data","nameLocation":"9795:4:3","nodeType":"VariableDeclaration","scope":919,"src":"9782:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":818,"name":"bytes","nodeType":"ElementaryTypeName","src":"9782:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9688:117:3"},"returnParameters":{"id":821,"nodeType":"ParameterList","parameters":[],"src":"9823:0:3"},"scope":1374,"src":"9669:791:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1023,"nodeType":"Block","src":"10820:682:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":930,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"10838:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10854:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":932,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10846:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":931,"name":"address","nodeType":"ElementaryTypeName","src":"10846:7:3","typeDescriptions":{}}},"id":934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10846:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10838:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373","id":936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10858:37:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""},"value":"ERC1155: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""}],"id":929,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10830:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10830:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":938,"nodeType":"ExpressionStatement","src":"10830:66:3"},{"assignments":[940],"declarations":[{"constant":false,"id":940,"mutability":"mutable","name":"operator","nameLocation":"10915:8:3","nodeType":"VariableDeclaration","scope":1023,"src":"10907:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":939,"name":"address","nodeType":"ElementaryTypeName","src":"10907:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":943,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":941,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"10926:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10926:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10907:31:3"},{"assignments":[948],"declarations":[{"constant":false,"id":948,"mutability":"mutable","name":"ids","nameLocation":"10965:3:3","nodeType":"VariableDeclaration","scope":1023,"src":"10948:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":946,"name":"uint256","nodeType":"ElementaryTypeName","src":"10948:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":947,"nodeType":"ArrayTypeName","src":"10948:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":952,"initialValue":{"arguments":[{"id":950,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"10989:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":949,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"10971:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10971:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10948:44:3"},{"assignments":[957],"declarations":[{"constant":false,"id":957,"mutability":"mutable","name":"amounts","nameLocation":"11019:7:3","nodeType":"VariableDeclaration","scope":1023,"src":"11002:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":955,"name":"uint256","nodeType":"ElementaryTypeName","src":"11002:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":956,"nodeType":"ArrayTypeName","src":"11002:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":961,"initialValue":{"arguments":[{"id":959,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"11047:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":958,"name":"_asSingletonArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"11029:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"}},"id":960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11029:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"11002:52:3"},{"expression":{"arguments":[{"id":963,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"11086:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":964,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"11096:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11110:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":966,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11102:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":965,"name":"address","nodeType":"ElementaryTypeName","src":"11102:7:3","typeDescriptions":{}}},"id":968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11102:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":969,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"11114:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":970,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"11119:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11128:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":962,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"11065:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11065:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":973,"nodeType":"ExpressionStatement","src":"11065:66:3"},{"assignments":[975],"declarations":[{"constant":false,"id":975,"mutability":"mutable","name":"fromBalance","nameLocation":"11150:11:3","nodeType":"VariableDeclaration","scope":1023,"src":"11142:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":974,"name":"uint256","nodeType":"ElementaryTypeName","src":"11142:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":981,"initialValue":{"baseExpression":{"baseExpression":{"id":976,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"11164:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":978,"indexExpression":{"id":977,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"11174:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11164:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":980,"indexExpression":{"id":979,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"11178:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11164:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11142:41:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":983,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"11201:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":984,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"11216:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11201:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365","id":986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11224:38:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""},"value":"ERC1155: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""}],"id":982,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11193:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11193:70:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":988,"nodeType":"ExpressionStatement","src":"11193:70:3"},{"id":999,"nodeType":"UncheckedBlock","src":"11273:77:3","statements":[{"expression":{"id":997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":989,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"11297:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":992,"indexExpression":{"id":990,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"11307:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11297:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":993,"indexExpression":{"id":991,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"11311:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11297:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":994,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"11319:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":995,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"11333:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11319:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11297:42:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":998,"nodeType":"ExpressionStatement","src":"11297:42:3"}]},{"eventCall":{"arguments":[{"id":1001,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"11380:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1002,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"11390:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11404:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1004,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11396:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1003,"name":"address","nodeType":"ElementaryTypeName","src":"11396:7:3","typeDescriptions":{}}},"id":1006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11396:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1007,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"11408:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1008,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"11412:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1000,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1393,"src":"11365:14:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11365:54:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1010,"nodeType":"EmitStatement","src":"11360:59:3"},{"expression":{"arguments":[{"id":1012,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"11450:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1013,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"11460:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11474:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1015,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11466:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1014,"name":"address","nodeType":"ElementaryTypeName","src":"11466:7:3","typeDescriptions":{}}},"id":1017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11466:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1018,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"11478:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1019,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"11483:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11492:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1011,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"11430:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11430:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1022,"nodeType":"ExpressionStatement","src":"11430:65:3"}]},"documentation":{"id":920,"nodeType":"StructuredDocumentation","src":"10466:275:3","text":" @dev Destroys `amount` tokens of token type `id` from `from`\n Emits a {TransferSingle} event.\n Requirements:\n - `from` cannot be the zero address.\n - `from` must have at least `amount` tokens of token type `id`."},"id":1024,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10755:5:3","nodeType":"FunctionDefinition","parameters":{"id":927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":922,"mutability":"mutable","name":"from","nameLocation":"10769:4:3","nodeType":"VariableDeclaration","scope":1024,"src":"10761:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":921,"name":"address","nodeType":"ElementaryTypeName","src":"10761:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":924,"mutability":"mutable","name":"id","nameLocation":"10783:2:3","nodeType":"VariableDeclaration","scope":1024,"src":"10775:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":923,"name":"uint256","nodeType":"ElementaryTypeName","src":"10775:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":926,"mutability":"mutable","name":"amount","nameLocation":"10795:6:3","nodeType":"VariableDeclaration","scope":1024,"src":"10787:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":925,"name":"uint256","nodeType":"ElementaryTypeName","src":"10787:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10760:42:3"},"returnParameters":{"id":928,"nodeType":"ParameterList","parameters":[],"src":"10820:0:3"},"scope":1374,"src":"10746:756:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1146,"nodeType":"Block","src":"11840:814:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1037,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1027,"src":"11858:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11874:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1039,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11866:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1038,"name":"address","nodeType":"ElementaryTypeName","src":"11866:7:3","typeDescriptions":{}}},"id":1041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11866:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11858:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373","id":1043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11878:37:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""},"value":"ERC1155: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_87fd4aee52f5758d127cd9704d5ffef70f36ed1e87eb99b6f40e37a25c79a76a","typeString":"literal_string \"ERC1155: burn from the zero address\""}],"id":1036,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11850:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11850:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1045,"nodeType":"ExpressionStatement","src":"11850:66:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1047,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"11934:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11938:6:3","memberName":"length","nodeType":"MemberAccess","src":"11934:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1049,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"11948:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11956:6:3","memberName":"length","nodeType":"MemberAccess","src":"11948:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11934:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368","id":1052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11964:42:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""},"value":"ERC1155: ids and amounts length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807","typeString":"literal_string \"ERC1155: ids and amounts length mismatch\""}],"id":1046,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11926:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11926:81:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1054,"nodeType":"ExpressionStatement","src":"11926:81:3"},{"assignments":[1056],"declarations":[{"constant":false,"id":1056,"mutability":"mutable","name":"operator","nameLocation":"12026:8:3","nodeType":"VariableDeclaration","scope":1146,"src":"12018:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1055,"name":"address","nodeType":"ElementaryTypeName","src":"12018:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1059,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1057,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"12037:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12037:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"12018:31:3"},{"expression":{"arguments":[{"id":1061,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"12081:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1062,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1027,"src":"12091:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12105:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1064,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12097:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1063,"name":"address","nodeType":"ElementaryTypeName","src":"12097:7:3","typeDescriptions":{}}},"id":1066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12097:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1067,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"12109:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1068,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"12114:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12123:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1060,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"12060:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12060:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1071,"nodeType":"ExpressionStatement","src":"12060:66:3"},{"body":{"id":1121,"nodeType":"Block","src":"12178:323:3","statements":[{"assignments":[1084],"declarations":[{"constant":false,"id":1084,"mutability":"mutable","name":"id","nameLocation":"12200:2:3","nodeType":"VariableDeclaration","scope":1121,"src":"12192:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1083,"name":"uint256","nodeType":"ElementaryTypeName","src":"12192:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1088,"initialValue":{"baseExpression":{"id":1085,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"12205:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1087,"indexExpression":{"id":1086,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1073,"src":"12209:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12205:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12192:19:3"},{"assignments":[1090],"declarations":[{"constant":false,"id":1090,"mutability":"mutable","name":"amount","nameLocation":"12233:6:3","nodeType":"VariableDeclaration","scope":1121,"src":"12225:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1089,"name":"uint256","nodeType":"ElementaryTypeName","src":"12225:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1094,"initialValue":{"baseExpression":{"id":1091,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"12242:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1093,"indexExpression":{"id":1092,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1073,"src":"12250:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12242:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12225:27:3"},{"assignments":[1096],"declarations":[{"constant":false,"id":1096,"mutability":"mutable","name":"fromBalance","nameLocation":"12275:11:3","nodeType":"VariableDeclaration","scope":1121,"src":"12267:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1095,"name":"uint256","nodeType":"ElementaryTypeName","src":"12267:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1102,"initialValue":{"baseExpression":{"baseExpression":{"id":1097,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"12289:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1099,"indexExpression":{"id":1098,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"12299:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12289:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1101,"indexExpression":{"id":1100,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1027,"src":"12303:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12289:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12267:41:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1104,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"12330:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1105,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"12345:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12330:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365","id":1107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12353:38:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""},"value":"ERC1155: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_294a5de01910e2350ff231c633ae2d453ed6b1b72c75506234b7aace63eae685","typeString":"literal_string \"ERC1155: burn amount exceeds balance\""}],"id":1103,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12322:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12322:70:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1109,"nodeType":"ExpressionStatement","src":"12322:70:3"},{"id":1120,"nodeType":"UncheckedBlock","src":"12406:85:3","statements":[{"expression":{"id":1118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1110,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"12434:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1113,"indexExpression":{"id":1111,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"12444:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12434:13:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1114,"indexExpression":{"id":1112,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1027,"src":"12448:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12434:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1115,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"12456:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1116,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"12470:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12456:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12434:42:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1119,"nodeType":"ExpressionStatement","src":"12434:42:3"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1076,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1073,"src":"12157:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1077,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"12161:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12165:6:3","memberName":"length","nodeType":"MemberAccess","src":"12161:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12157:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1122,"initializationExpression":{"assignments":[1073],"declarations":[{"constant":false,"id":1073,"mutability":"mutable","name":"i","nameLocation":"12150:1:3","nodeType":"VariableDeclaration","scope":1122,"src":"12142:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1072,"name":"uint256","nodeType":"ElementaryTypeName","src":"12142:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1075,"initialValue":{"hexValue":"30","id":1074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12154:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12142:13:3"},"loopExpression":{"expression":{"id":1081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"12173:3:3","subExpression":{"id":1080,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1073,"src":"12173:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1082,"nodeType":"ExpressionStatement","src":"12173:3:3"},"nodeType":"ForStatement","src":"12137:364:3"},{"eventCall":{"arguments":[{"id":1124,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"12530:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1125,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1027,"src":"12540:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12554:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1127,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12546:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1126,"name":"address","nodeType":"ElementaryTypeName","src":"12546:7:3","typeDescriptions":{}}},"id":1129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12546:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1130,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"12558:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1131,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"12563:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":1123,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"12516:13:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":1132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12516:55:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1133,"nodeType":"EmitStatement","src":"12511:60:3"},{"expression":{"arguments":[{"id":1135,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"12602:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1136,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1027,"src":"12612:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12626:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1138,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12618:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1137,"name":"address","nodeType":"ElementaryTypeName","src":"12618:7:3","typeDescriptions":{}}},"id":1140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12618:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1141,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"12630:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1142,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"12635:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12644:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1134,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"12582:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12582:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1145,"nodeType":"ExpressionStatement","src":"12582:65:3"}]},"documentation":{"id":1025,"nodeType":"StructuredDocumentation","src":"11508:228:3","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `amounts` must have the same length."},"id":1147,"implemented":true,"kind":"function","modifiers":[],"name":"_burnBatch","nameLocation":"11750:10:3","nodeType":"FunctionDefinition","parameters":{"id":1034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1027,"mutability":"mutable","name":"from","nameLocation":"11769:4:3","nodeType":"VariableDeclaration","scope":1147,"src":"11761:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1026,"name":"address","nodeType":"ElementaryTypeName","src":"11761:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1030,"mutability":"mutable","name":"ids","nameLocation":"11792:3:3","nodeType":"VariableDeclaration","scope":1147,"src":"11775:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1028,"name":"uint256","nodeType":"ElementaryTypeName","src":"11775:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1029,"nodeType":"ArrayTypeName","src":"11775:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1033,"mutability":"mutable","name":"amounts","nameLocation":"11814:7:3","nodeType":"VariableDeclaration","scope":1147,"src":"11797:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1031,"name":"uint256","nodeType":"ElementaryTypeName","src":"11797:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1032,"nodeType":"ArrayTypeName","src":"11797:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"11760:62:3"},"returnParameters":{"id":1035,"nodeType":"ParameterList","parameters":[],"src":"11840:0:3"},"scope":1374,"src":"11741:913:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1178,"nodeType":"Block","src":"12883:200:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1158,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"12901:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1159,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"12910:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12901:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a2073657474696e6720617070726f76616c2073746174757320666f722073656c66","id":1161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12920:43:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2","typeString":"literal_string \"ERC1155: setting approval status for self\""},"value":"ERC1155: setting approval status for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2","typeString":"literal_string \"ERC1155: setting approval status for self\""}],"id":1157,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12893:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12893:71:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1163,"nodeType":"ExpressionStatement","src":"12893:71:3"},{"expression":{"id":1170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1164,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"12974:18:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1167,"indexExpression":{"id":1165,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"12993:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12974:25:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1168,"indexExpression":{"id":1166,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"13000:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12974:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1169,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1154,"src":"13012:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12974:46:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1171,"nodeType":"ExpressionStatement","src":"12974:46:3"},{"eventCall":{"arguments":[{"id":1173,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"13050:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1174,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"13057:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1175,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1154,"src":"13067:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1172,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"13035:14:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13035:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1177,"nodeType":"EmitStatement","src":"13030:46:3"}]},"documentation":{"id":1148,"nodeType":"StructuredDocumentation","src":"12660:125:3","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":1179,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"12799:18:3","nodeType":"FunctionDefinition","parameters":{"id":1155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1150,"mutability":"mutable","name":"owner","nameLocation":"12826:5:3","nodeType":"VariableDeclaration","scope":1179,"src":"12818:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1149,"name":"address","nodeType":"ElementaryTypeName","src":"12818:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1152,"mutability":"mutable","name":"operator","nameLocation":"12841:8:3","nodeType":"VariableDeclaration","scope":1179,"src":"12833:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1151,"name":"address","nodeType":"ElementaryTypeName","src":"12833:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1154,"mutability":"mutable","name":"approved","nameLocation":"12856:8:3","nodeType":"VariableDeclaration","scope":1179,"src":"12851:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1153,"name":"bool","nodeType":"ElementaryTypeName","src":"12851:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12817:48:3"},"returnParameters":{"id":1156,"nodeType":"ParameterList","parameters":[],"src":"12883:0:3"},"scope":1374,"src":"12790:293:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1197,"nodeType":"Block","src":"14231:2:3","statements":[]},"documentation":{"id":1180,"nodeType":"StructuredDocumentation","src":"13089:925:3","text":" @dev Hook that is called before any token transfer. This includes minting\n and burning, as well as batched variants.\n The same hook is called on both single and batched variants. For single\n transfers, the length of the `ids` and `amounts` arrays will be 1.\n Calling conditions (for each `id` and `amount` pair):\n - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n of token type `id` will be  transferred to `to`.\n - When `from` is zero, `amount` tokens of token type `id` will be minted\n for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n will be burned.\n - `from` and `to` are never both zero.\n - `ids` and `amounts` have the same, non-zero length.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1198,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"14028:20:3","nodeType":"FunctionDefinition","parameters":{"id":1195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1182,"mutability":"mutable","name":"operator","nameLocation":"14066:8:3","nodeType":"VariableDeclaration","scope":1198,"src":"14058:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1181,"name":"address","nodeType":"ElementaryTypeName","src":"14058:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1184,"mutability":"mutable","name":"from","nameLocation":"14092:4:3","nodeType":"VariableDeclaration","scope":1198,"src":"14084:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1183,"name":"address","nodeType":"ElementaryTypeName","src":"14084:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1186,"mutability":"mutable","name":"to","nameLocation":"14114:2:3","nodeType":"VariableDeclaration","scope":1198,"src":"14106:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1185,"name":"address","nodeType":"ElementaryTypeName","src":"14106:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1189,"mutability":"mutable","name":"ids","nameLocation":"14143:3:3","nodeType":"VariableDeclaration","scope":1198,"src":"14126:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1187,"name":"uint256","nodeType":"ElementaryTypeName","src":"14126:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1188,"nodeType":"ArrayTypeName","src":"14126:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1192,"mutability":"mutable","name":"amounts","nameLocation":"14173:7:3","nodeType":"VariableDeclaration","scope":1198,"src":"14156:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1190,"name":"uint256","nodeType":"ElementaryTypeName","src":"14156:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1191,"nodeType":"ArrayTypeName","src":"14156:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1194,"mutability":"mutable","name":"data","nameLocation":"14203:4:3","nodeType":"VariableDeclaration","scope":1198,"src":"14190:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1193,"name":"bytes","nodeType":"ElementaryTypeName","src":"14190:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14048:165:3"},"returnParameters":{"id":1196,"nodeType":"ParameterList","parameters":[],"src":"14231:0:3"},"scope":1374,"src":"14019:214:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1216,"nodeType":"Block","src":"15377:2:3","statements":[]},"documentation":{"id":1199,"nodeType":"StructuredDocumentation","src":"14239:922:3","text":" @dev Hook that is called after any token transfer. This includes minting\n and burning, as well as batched variants.\n The same hook is called on both single and batched variants. For single\n transfers, the length of the `id` and `amount` arrays will be 1.\n Calling conditions (for each `id` and `amount` pair):\n - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n of token type `id` will be  transferred to `to`.\n - When `from` is zero, `amount` tokens of token type `id` will be minted\n for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n will be burned.\n - `from` and `to` are never both zero.\n - `ids` and `amounts` have the same, non-zero length.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1217,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"15175:19:3","nodeType":"FunctionDefinition","parameters":{"id":1214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1201,"mutability":"mutable","name":"operator","nameLocation":"15212:8:3","nodeType":"VariableDeclaration","scope":1217,"src":"15204:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1200,"name":"address","nodeType":"ElementaryTypeName","src":"15204:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1203,"mutability":"mutable","name":"from","nameLocation":"15238:4:3","nodeType":"VariableDeclaration","scope":1217,"src":"15230:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1202,"name":"address","nodeType":"ElementaryTypeName","src":"15230:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1205,"mutability":"mutable","name":"to","nameLocation":"15260:2:3","nodeType":"VariableDeclaration","scope":1217,"src":"15252:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1204,"name":"address","nodeType":"ElementaryTypeName","src":"15252:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1208,"mutability":"mutable","name":"ids","nameLocation":"15289:3:3","nodeType":"VariableDeclaration","scope":1217,"src":"15272:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1206,"name":"uint256","nodeType":"ElementaryTypeName","src":"15272:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1207,"nodeType":"ArrayTypeName","src":"15272:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1211,"mutability":"mutable","name":"amounts","nameLocation":"15319:7:3","nodeType":"VariableDeclaration","scope":1217,"src":"15302:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1209,"name":"uint256","nodeType":"ElementaryTypeName","src":"15302:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1210,"nodeType":"ArrayTypeName","src":"15302:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1213,"mutability":"mutable","name":"data","nameLocation":"15349:4:3","nodeType":"VariableDeclaration","scope":1217,"src":"15336:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1212,"name":"bytes","nodeType":"ElementaryTypeName","src":"15336:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15194:165:3"},"returnParameters":{"id":1215,"nodeType":"ParameterList","parameters":[],"src":"15377:0:3"},"scope":1374,"src":"15166:213:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1279,"nodeType":"Block","src":"15578:532:3","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1232,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"15592:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15595:10:3","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2658,"src":"15592:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":1234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15592:15:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1278,"nodeType":"IfStatement","src":"15588:516:3","trueBody":{"id":1277,"nodeType":"Block","src":"15609:495:3","statements":[{"clauses":[{"block":{"id":1259,"nodeType":"Block","src":"15726:184:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1248,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"15748:8:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":1249,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"15760:16:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$1537_$","typeString":"type(contract IERC1155Receiver)"}},"id":1250,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15777:17:3","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":1518,"src":"15760:34:3","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155Receiver.onERC1155Received(address,address,uint256,uint256,bytes calldata) returns (bytes4)"}},"id":1251,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15795:8:3","memberName":"selector","nodeType":"MemberAccess","src":"15760:43:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"15748:55:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1258,"nodeType":"IfStatement","src":"15744:152:3","trueBody":{"id":1257,"nodeType":"Block","src":"15805:91:3","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73","id":1254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15834:42:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""},"value":"ERC1155: ERC1155Receiver rejected tokens"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""}],"id":1253,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"15827:6:3","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15827:50:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1256,"nodeType":"ExpressionStatement","src":"15827:50:3"}]}}]},"errorName":"","id":1260,"nodeType":"TryCatchClause","parameters":{"id":1247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1246,"mutability":"mutable","name":"response","nameLocation":"15716:8:3","nodeType":"VariableDeclaration","scope":1260,"src":"15709:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1245,"name":"bytes4","nodeType":"ElementaryTypeName","src":"15709:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"15708:17:3"},"src":"15700:210:3"},{"block":{"id":1268,"nodeType":"Block","src":"15945:47:3","statements":[{"expression":{"arguments":[{"id":1265,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1262,"src":"15970:6:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1264,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"15963:6:3","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15963:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1267,"nodeType":"ExpressionStatement","src":"15963:14:3"}]},"errorName":"Error","id":1269,"nodeType":"TryCatchClause","parameters":{"id":1263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1262,"mutability":"mutable","name":"reason","nameLocation":"15937:6:3","nodeType":"VariableDeclaration","scope":1269,"src":"15923:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1261,"name":"string","nodeType":"ElementaryTypeName","src":"15923:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"15922:22:3"},"src":"15911:81:3"},{"block":{"id":1274,"nodeType":"Block","src":"15999:95:3","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2d45524331313535526563656976657220696d706c656d656e746572","id":1271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16024:54:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d","typeString":"literal_string \"ERC1155: transfer to non-ERC1155Receiver implementer\""},"value":"ERC1155: transfer to non-ERC1155Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d","typeString":"literal_string \"ERC1155: transfer to non-ERC1155Receiver implementer\""}],"id":1270,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16017:6:3","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16017:62:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1273,"nodeType":"ExpressionStatement","src":"16017:62:3"}]},"errorName":"","id":1275,"nodeType":"TryCatchClause","src":"15993:101:3"}],"externalCall":{"arguments":[{"id":1239,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"15666:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1240,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"15676:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1241,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1225,"src":"15682:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1242,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"15686:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1243,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1229,"src":"15694:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1236,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"15644:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1235,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"15627:16:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$1537_$","typeString":"type(contract IERC1155Receiver)"}},"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15627:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Receiver_$1537","typeString":"contract IERC1155Receiver"}},"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15648:17:3","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":1518,"src":"15627:38:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,uint256,bytes memory) external returns (bytes4)"}},"id":1244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15627:72:3","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1276,"nodeType":"TryStatement","src":"15623:471:3"}]}}]},"id":1280,"implemented":true,"kind":"function","modifiers":[],"name":"_doSafeTransferAcceptanceCheck","nameLocation":"15394:30:3","nodeType":"FunctionDefinition","parameters":{"id":1230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1219,"mutability":"mutable","name":"operator","nameLocation":"15442:8:3","nodeType":"VariableDeclaration","scope":1280,"src":"15434:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1218,"name":"address","nodeType":"ElementaryTypeName","src":"15434:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1221,"mutability":"mutable","name":"from","nameLocation":"15468:4:3","nodeType":"VariableDeclaration","scope":1280,"src":"15460:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1220,"name":"address","nodeType":"ElementaryTypeName","src":"15460:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1223,"mutability":"mutable","name":"to","nameLocation":"15490:2:3","nodeType":"VariableDeclaration","scope":1280,"src":"15482:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1222,"name":"address","nodeType":"ElementaryTypeName","src":"15482:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1225,"mutability":"mutable","name":"id","nameLocation":"15510:2:3","nodeType":"VariableDeclaration","scope":1280,"src":"15502:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1224,"name":"uint256","nodeType":"ElementaryTypeName","src":"15502:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1227,"mutability":"mutable","name":"amount","nameLocation":"15530:6:3","nodeType":"VariableDeclaration","scope":1280,"src":"15522:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1226,"name":"uint256","nodeType":"ElementaryTypeName","src":"15522:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1229,"mutability":"mutable","name":"data","nameLocation":"15559:4:3","nodeType":"VariableDeclaration","scope":1280,"src":"15546:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1228,"name":"bytes","nodeType":"ElementaryTypeName","src":"15546:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15424:145:3"},"returnParameters":{"id":1231,"nodeType":"ParameterList","parameters":[],"src":"15578:0:3"},"scope":1374,"src":"15385:725:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1344,"nodeType":"Block","src":"16334:574:3","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1297,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"16348:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16351:10:3","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2658,"src":"16348:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":1299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16348:15:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1343,"nodeType":"IfStatement","src":"16344:558:3","trueBody":{"id":1342,"nodeType":"Block","src":"16365:537:3","statements":[{"clauses":[{"block":{"id":1324,"nodeType":"Block","src":"16519:189:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1313,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"16541:8:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":1314,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"16553:16:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$1537_$","typeString":"type(contract IERC1155Receiver)"}},"id":1315,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16570:22:3","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":1536,"src":"16553:39:3","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155Receiver.onERC1155BatchReceived(address,address,uint256[] calldata,uint256[] calldata,bytes calldata) returns (bytes4)"}},"id":1316,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16593:8:3","memberName":"selector","nodeType":"MemberAccess","src":"16553:48:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"16541:60:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1323,"nodeType":"IfStatement","src":"16537:157:3","trueBody":{"id":1322,"nodeType":"Block","src":"16603:91:3","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73","id":1319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16632:42:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""},"value":"ERC1155: ERC1155Receiver rejected tokens"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503","typeString":"literal_string \"ERC1155: ERC1155Receiver rejected tokens\""}],"id":1318,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16625:6:3","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16625:50:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1321,"nodeType":"ExpressionStatement","src":"16625:50:3"}]}}]},"errorName":"","id":1325,"nodeType":"TryCatchClause","parameters":{"id":1312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1311,"mutability":"mutable","name":"response","nameLocation":"16496:8:3","nodeType":"VariableDeclaration","scope":1325,"src":"16489:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1310,"name":"bytes4","nodeType":"ElementaryTypeName","src":"16489:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"16471:47:3"},"src":"16463:245:3"},{"block":{"id":1333,"nodeType":"Block","src":"16743:47:3","statements":[{"expression":{"arguments":[{"id":1330,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1327,"src":"16768:6:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1329,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16761:6:3","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16761:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1332,"nodeType":"ExpressionStatement","src":"16761:14:3"}]},"errorName":"Error","id":1334,"nodeType":"TryCatchClause","parameters":{"id":1328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1327,"mutability":"mutable","name":"reason","nameLocation":"16735:6:3","nodeType":"VariableDeclaration","scope":1334,"src":"16721:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1326,"name":"string","nodeType":"ElementaryTypeName","src":"16721:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"16720:22:3"},"src":"16709:81:3"},{"block":{"id":1339,"nodeType":"Block","src":"16797:95:3","statements":[{"expression":{"arguments":[{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2d45524331313535526563656976657220696d706c656d656e746572","id":1336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16822:54:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d","typeString":"literal_string \"ERC1155: transfer to non-ERC1155Receiver implementer\""},"value":"ERC1155: transfer to non-ERC1155Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d","typeString":"literal_string \"ERC1155: transfer to non-ERC1155Receiver implementer\""}],"id":1335,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"16815:6:3","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16815:62:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1338,"nodeType":"ExpressionStatement","src":"16815:62:3"}]},"errorName":"","id":1340,"nodeType":"TryCatchClause","src":"16791:101:3"}],"externalCall":{"arguments":[{"id":1304,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"16427:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1305,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"16437:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1306,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"16443:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1307,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"16448:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1308,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1294,"src":"16457:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1301,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"16400:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1300,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"16383:16:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$1537_$","typeString":"type(contract IERC1155Receiver)"}},"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16383:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Receiver_$1537","typeString":"contract IERC1155Receiver"}},"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16404:22:3","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":1536,"src":"16383:43:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory) external returns (bytes4)"}},"id":1309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16383:79:3","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1341,"nodeType":"TryStatement","src":"16379:513:3"}]}}]},"id":1345,"implemented":true,"kind":"function","modifiers":[],"name":"_doSafeBatchTransferAcceptanceCheck","nameLocation":"16125:35:3","nodeType":"FunctionDefinition","parameters":{"id":1295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1282,"mutability":"mutable","name":"operator","nameLocation":"16178:8:3","nodeType":"VariableDeclaration","scope":1345,"src":"16170:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1281,"name":"address","nodeType":"ElementaryTypeName","src":"16170:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1284,"mutability":"mutable","name":"from","nameLocation":"16204:4:3","nodeType":"VariableDeclaration","scope":1345,"src":"16196:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1283,"name":"address","nodeType":"ElementaryTypeName","src":"16196:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1286,"mutability":"mutable","name":"to","nameLocation":"16226:2:3","nodeType":"VariableDeclaration","scope":1345,"src":"16218:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1285,"name":"address","nodeType":"ElementaryTypeName","src":"16218:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1289,"mutability":"mutable","name":"ids","nameLocation":"16255:3:3","nodeType":"VariableDeclaration","scope":1345,"src":"16238:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1287,"name":"uint256","nodeType":"ElementaryTypeName","src":"16238:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1288,"nodeType":"ArrayTypeName","src":"16238:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1292,"mutability":"mutable","name":"amounts","nameLocation":"16285:7:3","nodeType":"VariableDeclaration","scope":1345,"src":"16268:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1290,"name":"uint256","nodeType":"ElementaryTypeName","src":"16268:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1291,"nodeType":"ArrayTypeName","src":"16268:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1294,"mutability":"mutable","name":"data","nameLocation":"16315:4:3","nodeType":"VariableDeclaration","scope":1345,"src":"16302:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1293,"name":"bytes","nodeType":"ElementaryTypeName","src":"16302:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16160:165:3"},"returnParameters":{"id":1296,"nodeType":"ParameterList","parameters":[],"src":"16334:0:3"},"scope":1374,"src":"16116:792:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1372,"nodeType":"Block","src":"16998:109:3","statements":[{"assignments":[1357],"declarations":[{"constant":false,"id":1357,"mutability":"mutable","name":"array","nameLocation":"17025:5:3","nodeType":"VariableDeclaration","scope":1372,"src":"17008:22:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1355,"name":"uint256","nodeType":"ElementaryTypeName","src":"17008:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1356,"nodeType":"ArrayTypeName","src":"17008:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1363,"initialValue":{"arguments":[{"hexValue":"31","id":1361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17047:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1360,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"17033:13:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":1358,"name":"uint256","nodeType":"ElementaryTypeName","src":"17037:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1359,"nodeType":"ArrayTypeName","src":"17037:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":1362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17033:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"17008:41:3"},{"expression":{"id":1368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1364,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1357,"src":"17059:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1366,"indexExpression":{"hexValue":"30","id":1365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17065:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17059:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1367,"name":"element","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1347,"src":"17070:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17059:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1369,"nodeType":"ExpressionStatement","src":"17059:18:3"},{"expression":{"id":1370,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1357,"src":"17095:5:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":1352,"id":1371,"nodeType":"Return","src":"17088:12:3"}]},"id":1373,"implemented":true,"kind":"function","modifiers":[],"name":"_asSingletonArray","nameLocation":"16923:17:3","nodeType":"FunctionDefinition","parameters":{"id":1348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1347,"mutability":"mutable","name":"element","nameLocation":"16949:7:3","nodeType":"VariableDeclaration","scope":1373,"src":"16941:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1346,"name":"uint256","nodeType":"ElementaryTypeName","src":"16941:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16940:17:3"},"returnParameters":{"id":1352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1351,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1373,"src":"16980:16:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1349,"name":"uint256","nodeType":"ElementaryTypeName","src":"16980:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1350,"nodeType":"ArrayTypeName","src":"16980:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"16979:18:3"},"scope":1374,"src":"16914:193:3","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1375,"src":"570:16539:3","usedErrors":[]}],"src":"109:17001:3"},"id":3},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","exportedSymbols":{"IERC1155":[1496],"IERC165":[4260]},"id":1497,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1376,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:4"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1377,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1497,"sourceUnit":4261,"src":"135:47:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1379,"name":"IERC165","nameLocations":["372:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":4260,"src":"372:7:4"},"id":1380,"nodeType":"InheritanceSpecifier","src":"372:7:4"}],"canonicalName":"IERC1155","contractDependencies":[],"contractKind":"interface","documentation":{"id":1378,"nodeType":"StructuredDocumentation","src":"184:165:4","text":" @dev Required interface of an ERC1155 compliant contract, as defined in the\n https://eips.ethereum.org/EIPS/eip-1155[EIP].\n _Available since v3.1._"},"fullyImplemented":false,"id":1496,"linearizedBaseContracts":[1496,4260],"name":"IERC1155","nameLocation":"360:8:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1381,"nodeType":"StructuredDocumentation","src":"386:121:4","text":" @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"eventSelector":"c3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62","id":1393,"name":"TransferSingle","nameLocation":"518:14:4","nodeType":"EventDefinition","parameters":{"id":1392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1383,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"549:8:4","nodeType":"VariableDeclaration","scope":1393,"src":"533:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1382,"name":"address","nodeType":"ElementaryTypeName","src":"533:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1385,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"575:4:4","nodeType":"VariableDeclaration","scope":1393,"src":"559:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1384,"name":"address","nodeType":"ElementaryTypeName","src":"559:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1387,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"597:2:4","nodeType":"VariableDeclaration","scope":1393,"src":"581:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1386,"name":"address","nodeType":"ElementaryTypeName","src":"581:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1389,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"609:2:4","nodeType":"VariableDeclaration","scope":1393,"src":"601:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1388,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1391,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"621:5:4","nodeType":"VariableDeclaration","scope":1393,"src":"613:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1390,"name":"uint256","nodeType":"ElementaryTypeName","src":"613:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"532:95:4"},"src":"512:116:4"},{"anonymous":false,"documentation":{"id":1394,"nodeType":"StructuredDocumentation","src":"634:144:4","text":" @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n transfers."},"eventSelector":"4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb","id":1408,"name":"TransferBatch","nameLocation":"789:13:4","nodeType":"EventDefinition","parameters":{"id":1407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1396,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"828:8:4","nodeType":"VariableDeclaration","scope":1408,"src":"812:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1395,"name":"address","nodeType":"ElementaryTypeName","src":"812:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1398,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"862:4:4","nodeType":"VariableDeclaration","scope":1408,"src":"846:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1397,"name":"address","nodeType":"ElementaryTypeName","src":"846:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1400,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"892:2:4","nodeType":"VariableDeclaration","scope":1408,"src":"876:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1399,"name":"address","nodeType":"ElementaryTypeName","src":"876:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1403,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"914:3:4","nodeType":"VariableDeclaration","scope":1408,"src":"904:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1401,"name":"uint256","nodeType":"ElementaryTypeName","src":"904:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1402,"nodeType":"ArrayTypeName","src":"904:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1406,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"937:6:4","nodeType":"VariableDeclaration","scope":1408,"src":"927:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1404,"name":"uint256","nodeType":"ElementaryTypeName","src":"927:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1405,"nodeType":"ArrayTypeName","src":"927:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"802:147:4"},"src":"783:167:4"},{"anonymous":false,"documentation":{"id":1409,"nodeType":"StructuredDocumentation","src":"956:147:4","text":" @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n `approved`."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1417,"name":"ApprovalForAll","nameLocation":"1114:14:4","nodeType":"EventDefinition","parameters":{"id":1416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1411,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1145:7:4","nodeType":"VariableDeclaration","scope":1417,"src":"1129:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1410,"name":"address","nodeType":"ElementaryTypeName","src":"1129:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1413,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1170:8:4","nodeType":"VariableDeclaration","scope":1417,"src":"1154:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1412,"name":"address","nodeType":"ElementaryTypeName","src":"1154:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1415,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"1185:8:4","nodeType":"VariableDeclaration","scope":1417,"src":"1180:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1414,"name":"bool","nodeType":"ElementaryTypeName","src":"1180:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1128:66:4"},"src":"1108:87:4"},{"anonymous":false,"documentation":{"id":1418,"nodeType":"StructuredDocumentation","src":"1201:343:4","text":" @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n If an {URI} event was emitted for `id`, the standard\n https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n returned by {IERC1155MetadataURI-uri}."},"eventSelector":"6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b","id":1424,"name":"URI","nameLocation":"1555:3:4","nodeType":"EventDefinition","parameters":{"id":1423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1420,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1566:5:4","nodeType":"VariableDeclaration","scope":1424,"src":"1559:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1419,"name":"string","nodeType":"ElementaryTypeName","src":"1559:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1422,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"1589:2:4","nodeType":"VariableDeclaration","scope":1424,"src":"1573:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1421,"name":"uint256","nodeType":"ElementaryTypeName","src":"1573:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1558:34:4"},"src":"1549:44:4"},{"documentation":{"id":1425,"nodeType":"StructuredDocumentation","src":"1599:173:4","text":" @dev Returns the amount of tokens of token type `id` owned by `account`.\n Requirements:\n - `account` cannot be the zero address."},"functionSelector":"00fdd58e","id":1434,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1786:9:4","nodeType":"FunctionDefinition","parameters":{"id":1430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1427,"mutability":"mutable","name":"account","nameLocation":"1804:7:4","nodeType":"VariableDeclaration","scope":1434,"src":"1796:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1426,"name":"address","nodeType":"ElementaryTypeName","src":"1796:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1429,"mutability":"mutable","name":"id","nameLocation":"1821:2:4","nodeType":"VariableDeclaration","scope":1434,"src":"1813:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1428,"name":"uint256","nodeType":"ElementaryTypeName","src":"1813:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1795:29:4"},"returnParameters":{"id":1433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1432,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1434,"src":"1848:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1431,"name":"uint256","nodeType":"ElementaryTypeName","src":"1848:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1847:9:4"},"scope":1496,"src":"1777:80:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1435,"nodeType":"StructuredDocumentation","src":"1863:188:4","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n Requirements:\n - `accounts` and `ids` must have the same length."},"functionSelector":"4e1273f4","id":1447,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"2065:14:4","nodeType":"FunctionDefinition","parameters":{"id":1442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1438,"mutability":"mutable","name":"accounts","nameLocation":"2108:8:4","nodeType":"VariableDeclaration","scope":1447,"src":"2089:27:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1436,"name":"address","nodeType":"ElementaryTypeName","src":"2089:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1437,"nodeType":"ArrayTypeName","src":"2089:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1441,"mutability":"mutable","name":"ids","nameLocation":"2145:3:4","nodeType":"VariableDeclaration","scope":1447,"src":"2126:22:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1439,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1440,"nodeType":"ArrayTypeName","src":"2126:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2079:75:4"},"returnParameters":{"id":1446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1445,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1447,"src":"2178:16:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1443,"name":"uint256","nodeType":"ElementaryTypeName","src":"2178:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1444,"nodeType":"ArrayTypeName","src":"2178:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2177:18:4"},"scope":1496,"src":"2056:140:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1448,"nodeType":"StructuredDocumentation","src":"2202:248:4","text":" @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n Emits an {ApprovalForAll} event.\n Requirements:\n - `operator` cannot be the caller."},"functionSelector":"a22cb465","id":1455,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"2464:17:4","nodeType":"FunctionDefinition","parameters":{"id":1453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1450,"mutability":"mutable","name":"operator","nameLocation":"2490:8:4","nodeType":"VariableDeclaration","scope":1455,"src":"2482:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1449,"name":"address","nodeType":"ElementaryTypeName","src":"2482:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1452,"mutability":"mutable","name":"approved","nameLocation":"2505:8:4","nodeType":"VariableDeclaration","scope":1455,"src":"2500:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1451,"name":"bool","nodeType":"ElementaryTypeName","src":"2500:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2481:33:4"},"returnParameters":{"id":1454,"nodeType":"ParameterList","parameters":[],"src":"2523:0:4"},"scope":1496,"src":"2455:69:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1456,"nodeType":"StructuredDocumentation","src":"2530:135:4","text":" @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n See {setApprovalForAll}."},"functionSelector":"e985e9c5","id":1465,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"2679:16:4","nodeType":"FunctionDefinition","parameters":{"id":1461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1458,"mutability":"mutable","name":"account","nameLocation":"2704:7:4","nodeType":"VariableDeclaration","scope":1465,"src":"2696:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1457,"name":"address","nodeType":"ElementaryTypeName","src":"2696:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1460,"mutability":"mutable","name":"operator","nameLocation":"2721:8:4","nodeType":"VariableDeclaration","scope":1465,"src":"2713:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1459,"name":"address","nodeType":"ElementaryTypeName","src":"2713:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2695:35:4"},"returnParameters":{"id":1464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1463,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1465,"src":"2754:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1462,"name":"bool","nodeType":"ElementaryTypeName","src":"2754:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2753:6:4"},"scope":1496,"src":"2670:90:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1466,"nodeType":"StructuredDocumentation","src":"2766:556:4","text":" @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n - `from` must have a balance of tokens of type `id` of at least `amount`.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"functionSelector":"f242432a","id":1479,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3336:16:4","nodeType":"FunctionDefinition","parameters":{"id":1477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1468,"mutability":"mutable","name":"from","nameLocation":"3361:4:4","nodeType":"VariableDeclaration","scope":1479,"src":"3353:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1467,"name":"address","nodeType":"ElementaryTypeName","src":"3353:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1470,"mutability":"mutable","name":"to","nameLocation":"3375:2:4","nodeType":"VariableDeclaration","scope":1479,"src":"3367:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1469,"name":"address","nodeType":"ElementaryTypeName","src":"3367:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1472,"mutability":"mutable","name":"id","nameLocation":"3387:2:4","nodeType":"VariableDeclaration","scope":1479,"src":"3379:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1471,"name":"uint256","nodeType":"ElementaryTypeName","src":"3379:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1474,"mutability":"mutable","name":"amount","nameLocation":"3399:6:4","nodeType":"VariableDeclaration","scope":1479,"src":"3391:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1473,"name":"uint256","nodeType":"ElementaryTypeName","src":"3391:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1476,"mutability":"mutable","name":"data","nameLocation":"3422:4:4","nodeType":"VariableDeclaration","scope":1479,"src":"3407:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1475,"name":"bytes","nodeType":"ElementaryTypeName","src":"3407:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3352:75:4"},"returnParameters":{"id":1478,"nodeType":"ParameterList","parameters":[],"src":"3436:0:4"},"scope":1496,"src":"3327:110:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1480,"nodeType":"StructuredDocumentation","src":"3443:390:4","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `amounts` must have the same length.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"functionSelector":"2eb2c2d6","id":1495,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"3847:21:4","nodeType":"FunctionDefinition","parameters":{"id":1493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1482,"mutability":"mutable","name":"from","nameLocation":"3886:4:4","nodeType":"VariableDeclaration","scope":1495,"src":"3878:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1481,"name":"address","nodeType":"ElementaryTypeName","src":"3878:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1484,"mutability":"mutable","name":"to","nameLocation":"3908:2:4","nodeType":"VariableDeclaration","scope":1495,"src":"3900:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1483,"name":"address","nodeType":"ElementaryTypeName","src":"3900:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1487,"mutability":"mutable","name":"ids","nameLocation":"3939:3:4","nodeType":"VariableDeclaration","scope":1495,"src":"3920:22:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1485,"name":"uint256","nodeType":"ElementaryTypeName","src":"3920:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1486,"nodeType":"ArrayTypeName","src":"3920:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1490,"mutability":"mutable","name":"amounts","nameLocation":"3971:7:4","nodeType":"VariableDeclaration","scope":1495,"src":"3952:26:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1488,"name":"uint256","nodeType":"ElementaryTypeName","src":"3952:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1489,"nodeType":"ArrayTypeName","src":"3952:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1492,"mutability":"mutable","name":"data","nameLocation":"4003:4:4","nodeType":"VariableDeclaration","scope":1495,"src":"3988:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1491,"name":"bytes","nodeType":"ElementaryTypeName","src":"3988:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3868:145:4"},"returnParameters":{"id":1494,"nodeType":"ParameterList","parameters":[],"src":"4022:0:4"},"scope":1496,"src":"3838:185:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1497,"src":"350:3675:4","usedErrors":[]}],"src":"110:3916:4"},"id":4},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol","exportedSymbols":{"IERC1155Receiver":[1537],"IERC165":[4260]},"id":1538,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1498,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:5"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1499,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1538,"sourceUnit":4261,"src":"143:47:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1501,"name":"IERC165","nameLocations":["262:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":4260,"src":"262:7:5"},"id":1502,"nodeType":"InheritanceSpecifier","src":"262:7:5"}],"canonicalName":"IERC1155Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1500,"nodeType":"StructuredDocumentation","src":"192:39:5","text":" @dev _Available since v3.1._"},"fullyImplemented":false,"id":1537,"linearizedBaseContracts":[1537,4260],"name":"IERC1155Receiver","nameLocation":"242:16:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1503,"nodeType":"StructuredDocumentation","src":"276:826:5","text":" @dev Handles the receipt of a single ERC1155 token type. This function is\n called at the end of a `safeTransferFrom` after the balance has been updated.\n NOTE: To accept the transfer, this must return\n `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n (i.e. 0xf23a6e61, or its own function selector).\n @param operator The address which initiated the transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param id The ID of the token being transferred\n @param value The amount of tokens being transferred\n @param data Additional data with no specified format\n @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"},"functionSelector":"f23a6e61","id":1518,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"1116:17:5","nodeType":"FunctionDefinition","parameters":{"id":1514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1505,"mutability":"mutable","name":"operator","nameLocation":"1151:8:5","nodeType":"VariableDeclaration","scope":1518,"src":"1143:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1504,"name":"address","nodeType":"ElementaryTypeName","src":"1143:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1507,"mutability":"mutable","name":"from","nameLocation":"1177:4:5","nodeType":"VariableDeclaration","scope":1518,"src":"1169:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1506,"name":"address","nodeType":"ElementaryTypeName","src":"1169:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1509,"mutability":"mutable","name":"id","nameLocation":"1199:2:5","nodeType":"VariableDeclaration","scope":1518,"src":"1191:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1508,"name":"uint256","nodeType":"ElementaryTypeName","src":"1191:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1511,"mutability":"mutable","name":"value","nameLocation":"1219:5:5","nodeType":"VariableDeclaration","scope":1518,"src":"1211:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1510,"name":"uint256","nodeType":"ElementaryTypeName","src":"1211:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1513,"mutability":"mutable","name":"data","nameLocation":"1249:4:5","nodeType":"VariableDeclaration","scope":1518,"src":"1234:19:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1512,"name":"bytes","nodeType":"ElementaryTypeName","src":"1234:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1133:126:5"},"returnParameters":{"id":1517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1516,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1518,"src":"1278:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1515,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1278:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1277:8:5"},"scope":1537,"src":"1107:179:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1519,"nodeType":"StructuredDocumentation","src":"1292:994:5","text":" @dev Handles the receipt of a multiple ERC1155 token types. This function\n is called at the end of a `safeBatchTransferFrom` after the balances have\n been updated.\n NOTE: To accept the transfer(s), this must return\n `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n (i.e. 0xbc197c81, or its own function selector).\n @param operator The address which initiated the batch transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param ids An array containing ids of each token being transferred (order and length must match values array)\n @param values An array containing amounts of each token being transferred (order and length must match ids array)\n @param data Additional data with no specified format\n @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"},"functionSelector":"bc197c81","id":1536,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"2300:22:5","nodeType":"FunctionDefinition","parameters":{"id":1532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1521,"mutability":"mutable","name":"operator","nameLocation":"2340:8:5","nodeType":"VariableDeclaration","scope":1536,"src":"2332:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1520,"name":"address","nodeType":"ElementaryTypeName","src":"2332:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1523,"mutability":"mutable","name":"from","nameLocation":"2366:4:5","nodeType":"VariableDeclaration","scope":1536,"src":"2358:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1522,"name":"address","nodeType":"ElementaryTypeName","src":"2358:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1526,"mutability":"mutable","name":"ids","nameLocation":"2399:3:5","nodeType":"VariableDeclaration","scope":1536,"src":"2380:22:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1524,"name":"uint256","nodeType":"ElementaryTypeName","src":"2380:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1525,"nodeType":"ArrayTypeName","src":"2380:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1529,"mutability":"mutable","name":"values","nameLocation":"2431:6:5","nodeType":"VariableDeclaration","scope":1536,"src":"2412:25:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1527,"name":"uint256","nodeType":"ElementaryTypeName","src":"2412:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1528,"nodeType":"ArrayTypeName","src":"2412:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1531,"mutability":"mutable","name":"data","nameLocation":"2462:4:5","nodeType":"VariableDeclaration","scope":1536,"src":"2447:19:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1530,"name":"bytes","nodeType":"ElementaryTypeName","src":"2447:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2322:150:5"},"returnParameters":{"id":1535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1534,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1536,"src":"2491:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1533,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2491:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2490:8:5"},"scope":1537,"src":"2291:208:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1538,"src":"232:2269:5","usedErrors":[]}],"src":"118:2384:5"},"id":5},"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol","exportedSymbols":{"IERC1155":[1496],"IERC1155MetadataURI":[1552],"IERC165":[4260]},"id":1553,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1539,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"117:23:6"},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","file":"../IERC1155.sol","id":1540,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1553,"sourceUnit":1497,"src":"142:25:6","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1542,"name":"IERC1155","nameLocations":["397:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":1496,"src":"397:8:6"},"id":1543,"nodeType":"InheritanceSpecifier","src":"397:8:6"}],"canonicalName":"IERC1155MetadataURI","contractDependencies":[],"contractKind":"interface","documentation":{"id":1541,"nodeType":"StructuredDocumentation","src":"169:194:6","text":" @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n _Available since v3.1._"},"fullyImplemented":false,"id":1552,"linearizedBaseContracts":[1552,1496,4260],"name":"IERC1155MetadataURI","nameLocation":"374:19:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1544,"nodeType":"StructuredDocumentation","src":"412:192:6","text":" @dev Returns the URI for token type `id`.\n If the `\\{id\\}` substring is present in the URI, it must be replaced by\n clients with the actual token type ID."},"functionSelector":"0e89341c","id":1551,"implemented":false,"kind":"function","modifiers":[],"name":"uri","nameLocation":"618:3:6","nodeType":"FunctionDefinition","parameters":{"id":1547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1546,"mutability":"mutable","name":"id","nameLocation":"630:2:6","nodeType":"VariableDeclaration","scope":1551,"src":"622:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1545,"name":"uint256","nodeType":"ElementaryTypeName","src":"622:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"621:12:6"},"returnParameters":{"id":1550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1549,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1551,"src":"657:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1548,"name":"string","nodeType":"ElementaryTypeName","src":"657:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"656:15:6"},"scope":1552,"src":"609:63:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1553,"src":"364:310:6","usedErrors":[]}],"src":"117:558:6"},"id":6},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Address":[2970],"Context":[3000],"ERC165":[4248],"ERC721":[2479],"IERC165":[4260],"IERC721":[2595],"IERC721Metadata":[2640],"IERC721Receiver":[2613],"Math":[5126],"SignedMath":[5231],"Strings":[3555]},"id":2480,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1554,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:7"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":1555,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2480,"sourceUnit":2596,"src":"132:23:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":1556,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2480,"sourceUnit":2614,"src":"156:31:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":1557,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2480,"sourceUnit":2641,"src":"188:42:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":1558,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2480,"sourceUnit":2971,"src":"231:33:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":1559,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2480,"sourceUnit":3001,"src":"265:33:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":1560,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2480,"sourceUnit":3556,"src":"299:33:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":1561,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2480,"sourceUnit":4249,"src":"333:46:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1563,"name":"Context","nameLocations":["647:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":3000,"src":"647:7:7"},"id":1564,"nodeType":"InheritanceSpecifier","src":"647:7:7"},{"baseName":{"id":1565,"name":"ERC165","nameLocations":["656:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":4248,"src":"656:6:7"},"id":1566,"nodeType":"InheritanceSpecifier","src":"656:6:7"},{"baseName":{"id":1567,"name":"IERC721","nameLocations":["664:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":2595,"src":"664:7:7"},"id":1568,"nodeType":"InheritanceSpecifier","src":"664:7:7"},{"baseName":{"id":1569,"name":"IERC721Metadata","nameLocations":["673:15:7"],"nodeType":"IdentifierPath","referencedDeclaration":2640,"src":"673:15:7"},"id":1570,"nodeType":"InheritanceSpecifier","src":"673:15:7"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":1562,"nodeType":"StructuredDocumentation","src":"381:246:7","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":2479,"linearizedBaseContracts":[2479,2640,2595,4248,4260,3000],"name":"ERC721","nameLocation":"637:6:7","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1573,"libraryName":{"id":1571,"name":"Address","nameLocations":["701:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":2970,"src":"701:7:7"},"nodeType":"UsingForDirective","src":"695:26:7","typeName":{"id":1572,"name":"address","nodeType":"ElementaryTypeName","src":"713:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":1576,"libraryName":{"id":1574,"name":"Strings","nameLocations":["732:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":3555,"src":"732:7:7"},"nodeType":"UsingForDirective","src":"726:26:7","typeName":{"id":1575,"name":"uint256","nodeType":"ElementaryTypeName","src":"744:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":1578,"mutability":"mutable","name":"_name","nameLocation":"791:5:7","nodeType":"VariableDeclaration","scope":2479,"src":"776:20:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1577,"name":"string","nodeType":"ElementaryTypeName","src":"776:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":1580,"mutability":"mutable","name":"_symbol","nameLocation":"838:7:7","nodeType":"VariableDeclaration","scope":2479,"src":"823:22:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1579,"name":"string","nodeType":"ElementaryTypeName","src":"823:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":1584,"mutability":"mutable","name":"_owners","nameLocation":"934:7:7","nodeType":"VariableDeclaration","scope":2479,"src":"898:43:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":1583,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1581,"name":"uint256","nodeType":"ElementaryTypeName","src":"906:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"898:27:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1582,"name":"address","nodeType":"ElementaryTypeName","src":"917:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":1588,"mutability":"mutable","name":"_balances","nameLocation":"1028:9:7","nodeType":"VariableDeclaration","scope":2479,"src":"992:45:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1587,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1585,"name":"address","nodeType":"ElementaryTypeName","src":"1000:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"992:27:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1586,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":1592,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1129:15:7","nodeType":"VariableDeclaration","scope":2479,"src":"1093:51:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":1591,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1589,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1093:27:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1590,"name":"address","nodeType":"ElementaryTypeName","src":"1112:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":1598,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1252:18:7","nodeType":"VariableDeclaration","scope":2479,"src":"1199:71:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":1597,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1593,"name":"address","nodeType":"ElementaryTypeName","src":"1207:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1199:44:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1596,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1594,"name":"address","nodeType":"ElementaryTypeName","src":"1226:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1218:24:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1595,"name":"bool","nodeType":"ElementaryTypeName","src":"1237:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":1614,"nodeType":"Block","src":"1446:57:7","statements":[{"expression":{"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1606,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"1456:5:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1607,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"1464:5:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1456:13:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1609,"nodeType":"ExpressionStatement","src":"1456:13:7"},{"expression":{"id":1612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1610,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"1479:7:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1611,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"1489:7:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1479:17:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1613,"nodeType":"ExpressionStatement","src":"1479:17:7"}]},"documentation":{"id":1599,"nodeType":"StructuredDocumentation","src":"1277:108:7","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":1615,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1601,"mutability":"mutable","name":"name_","nameLocation":"1416:5:7","nodeType":"VariableDeclaration","scope":1615,"src":"1402:19:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1600,"name":"string","nodeType":"ElementaryTypeName","src":"1402:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1603,"mutability":"mutable","name":"symbol_","nameLocation":"1437:7:7","nodeType":"VariableDeclaration","scope":1615,"src":"1423:21:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1602,"name":"string","nodeType":"ElementaryTypeName","src":"1423:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1401:44:7"},"returnParameters":{"id":1605,"nodeType":"ParameterList","parameters":[],"src":"1446:0:7"},"scope":2479,"src":"1390:113:7","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[4247,4259],"body":{"id":1645,"nodeType":"Block","src":"1678:192:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1626,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"1707:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1628,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2595,"src":"1727:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$2595_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$2595_$","typeString":"type(contract IERC721)"}],"id":1627,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1722:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1722:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$2595","typeString":"type(contract IERC721)"}},"id":1630,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1736:11:7","memberName":"interfaceId","nodeType":"MemberAccess","src":"1722:25:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1707:40:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1632,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"1763:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1634,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"1783:15:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$2640_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$2640_$","typeString":"type(contract IERC721Metadata)"}],"id":1633,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1778:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1778:21:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$2640","typeString":"type(contract IERC721Metadata)"}},"id":1636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1800:11:7","memberName":"interfaceId","nodeType":"MemberAccess","src":"1778:33:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1763:48:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:104:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1641,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"1851:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":1639,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1827:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$2479_$","typeString":"type(contract super ERC721)"}},"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1833:17:7","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":4247,"src":"1827:23:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":1642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1827:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:156:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1625,"id":1644,"nodeType":"Return","src":"1688:175:7"}]},"documentation":{"id":1616,"nodeType":"StructuredDocumentation","src":"1509:56:7","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1646,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1579:17:7","nodeType":"FunctionDefinition","overrides":{"id":1622,"nodeType":"OverrideSpecifier","overrides":[{"id":1620,"name":"ERC165","nameLocations":["1646:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":4248,"src":"1646:6:7"},{"id":1621,"name":"IERC165","nameLocations":["1654:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":4260,"src":"1654:7:7"}],"src":"1637:25:7"},"parameters":{"id":1619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1618,"mutability":"mutable","name":"interfaceId","nameLocation":"1604:11:7","nodeType":"VariableDeclaration","scope":1646,"src":"1597:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1617,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1597:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1596:20:7"},"returnParameters":{"id":1625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1624,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1646,"src":"1672:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1623,"name":"bool","nodeType":"ElementaryTypeName","src":"1672:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1671:6:7"},"scope":2479,"src":"1570:300:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2520],"body":{"id":1669,"nodeType":"Block","src":"2010:123:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1656,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"2028:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2045:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1658,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2037:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1657,"name":"address","nodeType":"ElementaryTypeName","src":"2037:7:7","typeDescriptions":{}}},"id":1660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2037:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2028:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":1662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2049:43:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""},"value":"ERC721: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""}],"id":1655,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2020:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2020:73:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1664,"nodeType":"ExpressionStatement","src":"2020:73:7"},{"expression":{"baseExpression":{"id":1665,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1588,"src":"2110:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1667,"indexExpression":{"id":1666,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"2120:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2110:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1654,"id":1668,"nodeType":"Return","src":"2103:23:7"}]},"documentation":{"id":1647,"nodeType":"StructuredDocumentation","src":"1876:48:7","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":1670,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1938:9:7","nodeType":"FunctionDefinition","overrides":{"id":1651,"nodeType":"OverrideSpecifier","overrides":[],"src":"1983:8:7"},"parameters":{"id":1650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1649,"mutability":"mutable","name":"owner","nameLocation":"1956:5:7","nodeType":"VariableDeclaration","scope":1670,"src":"1948:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1648,"name":"address","nodeType":"ElementaryTypeName","src":"1948:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1947:15:7"},"returnParameters":{"id":1654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1653,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1670,"src":"2001:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1652,"name":"uint256","nodeType":"ElementaryTypeName","src":"2001:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2000:9:7"},"scope":2479,"src":"1929:204:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2528],"body":{"id":1697,"nodeType":"Block","src":"2271:138:7","statements":[{"assignments":[1680],"declarations":[{"constant":false,"id":1680,"mutability":"mutable","name":"owner","nameLocation":"2289:5:7","nodeType":"VariableDeclaration","scope":1697,"src":"2281:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1679,"name":"address","nodeType":"ElementaryTypeName","src":"2281:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1684,"initialValue":{"arguments":[{"id":1682,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"2306:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1681,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1980,"src":"2297:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2297:17:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2281:33:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1686,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1680,"src":"2332:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2349:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1688,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2341:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1687,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:7","typeDescriptions":{}}},"id":1690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2341:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2332:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":1692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2353:26:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":1685,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2324:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2324:56:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1694,"nodeType":"ExpressionStatement","src":"2324:56:7"},{"expression":{"id":1695,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1680,"src":"2397:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1678,"id":1696,"nodeType":"Return","src":"2390:12:7"}]},"documentation":{"id":1671,"nodeType":"StructuredDocumentation","src":"2139:46:7","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":1698,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2199:7:7","nodeType":"FunctionDefinition","overrides":{"id":1675,"nodeType":"OverrideSpecifier","overrides":[],"src":"2244:8:7"},"parameters":{"id":1674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1673,"mutability":"mutable","name":"tokenId","nameLocation":"2215:7:7","nodeType":"VariableDeclaration","scope":1698,"src":"2207:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1672,"name":"uint256","nodeType":"ElementaryTypeName","src":"2207:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2206:17:7"},"returnParameters":{"id":1678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1677,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1698,"src":"2262:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1676,"name":"address","nodeType":"ElementaryTypeName","src":"2262:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2261:9:7"},"scope":2479,"src":"2190:219:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2625],"body":{"id":1707,"nodeType":"Block","src":"2540:29:7","statements":[{"expression":{"id":1705,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"2557:5:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1704,"id":1706,"nodeType":"Return","src":"2550:12:7"}]},"documentation":{"id":1699,"nodeType":"StructuredDocumentation","src":"2415:51:7","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":1708,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2480:4:7","nodeType":"FunctionDefinition","overrides":{"id":1701,"nodeType":"OverrideSpecifier","overrides":[],"src":"2507:8:7"},"parameters":{"id":1700,"nodeType":"ParameterList","parameters":[],"src":"2484:2:7"},"returnParameters":{"id":1704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1703,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1708,"src":"2525:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1702,"name":"string","nodeType":"ElementaryTypeName","src":"2525:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2524:15:7"},"scope":2479,"src":"2471:98:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2631],"body":{"id":1717,"nodeType":"Block","src":"2704:31:7","statements":[{"expression":{"id":1715,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"2721:7:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1714,"id":1716,"nodeType":"Return","src":"2714:14:7"}]},"documentation":{"id":1709,"nodeType":"StructuredDocumentation","src":"2575:53:7","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":1718,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2642:6:7","nodeType":"FunctionDefinition","overrides":{"id":1711,"nodeType":"OverrideSpecifier","overrides":[],"src":"2671:8:7"},"parameters":{"id":1710,"nodeType":"ParameterList","parameters":[],"src":"2648:2:7"},"returnParameters":{"id":1714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1713,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1718,"src":"2689:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1712,"name":"string","nodeType":"ElementaryTypeName","src":"2689:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2688:15:7"},"scope":2479,"src":"2633:102:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2639],"body":{"id":1756,"nodeType":"Block","src":"2889:188:7","statements":[{"expression":{"arguments":[{"id":1728,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1721,"src":"2914:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1727,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2375,"src":"2899:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":1729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2899:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1730,"nodeType":"ExpressionStatement","src":"2899:23:7"},{"assignments":[1732],"declarations":[{"constant":false,"id":1732,"mutability":"mutable","name":"baseURI","nameLocation":"2947:7:7","nodeType":"VariableDeclaration","scope":1756,"src":"2933:21:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1731,"name":"string","nodeType":"ElementaryTypeName","src":"2933:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1735,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1733,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"2957:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":1734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2957:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2933:34:7"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1738,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1732,"src":"2990:7:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1737,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2984:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1736,"name":"bytes","nodeType":"ElementaryTypeName","src":"2984:5:7","typeDescriptions":{}}},"id":1739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2984:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2999:6:7","memberName":"length","nodeType":"MemberAccess","src":"2984:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3008:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2984:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3068:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2984:86:7","trueExpression":{"arguments":[{"arguments":[{"id":1747,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1732,"src":"3036:7:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1748,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1721,"src":"3045:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3053:8:7","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":3385,"src":"3045:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3045:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1745,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3019:3:7","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1746,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3023:12:7","memberName":"encodePacked","nodeType":"MemberAccess","src":"3019:16:7","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3019:45:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1744,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3012:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1743,"name":"string","nodeType":"ElementaryTypeName","src":"3012:6:7","typeDescriptions":{}}},"id":1752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3012:53:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1726,"id":1755,"nodeType":"Return","src":"2977:93:7"}]},"documentation":{"id":1719,"nodeType":"StructuredDocumentation","src":"2741:55:7","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":1757,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2810:8:7","nodeType":"FunctionDefinition","overrides":{"id":1723,"nodeType":"OverrideSpecifier","overrides":[],"src":"2856:8:7"},"parameters":{"id":1722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1721,"mutability":"mutable","name":"tokenId","nameLocation":"2827:7:7","nodeType":"VariableDeclaration","scope":1757,"src":"2819:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1720,"name":"uint256","nodeType":"ElementaryTypeName","src":"2819:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2818:17:7"},"returnParameters":{"id":1726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1725,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1757,"src":"2874:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1724,"name":"string","nodeType":"ElementaryTypeName","src":"2874:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2873:15:7"},"scope":2479,"src":"2801:276:7","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1765,"nodeType":"Block","src":"3385:26:7","statements":[{"expression":{"hexValue":"","id":1763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3402:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":1762,"id":1764,"nodeType":"Return","src":"3395:9:7"}]},"documentation":{"id":1758,"nodeType":"StructuredDocumentation","src":"3083:231:7","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":1766,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3328:8:7","nodeType":"FunctionDefinition","parameters":{"id":1759,"nodeType":"ParameterList","parameters":[],"src":"3336:2:7"},"returnParameters":{"id":1762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1761,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1766,"src":"3370:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1760,"name":"string","nodeType":"ElementaryTypeName","src":"3370:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3369:15:7"},"scope":2479,"src":"3319:92:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[2568],"body":{"id":1808,"nodeType":"Block","src":"3538:336:7","statements":[{"assignments":[1776],"declarations":[{"constant":false,"id":1776,"mutability":"mutable","name":"owner","nameLocation":"3556:5:7","nodeType":"VariableDeclaration","scope":1808,"src":"3548:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1775,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1781,"initialValue":{"arguments":[{"id":1779,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"3579:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1777,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"3564:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2479_$","typeString":"type(contract ERC721)"}},"id":1778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3571:7:7","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1698,"src":"3564:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3564:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3548:39:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1783,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"3605:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1784,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1776,"src":"3611:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3605:11:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572","id":1786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3618:35:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""},"value":"ERC721: approval to current owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""}],"id":1782,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3597:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3597:57:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1788,"nodeType":"ExpressionStatement","src":"3597:57:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1790,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"3686:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3686:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1792,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1776,"src":"3702:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3686:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1795,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1776,"src":"3728:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1796,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"3735:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3735:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1794,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"3711:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3711:37:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3686:62:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","id":1800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3762:63:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""},"value":"ERC721: approve caller is not token owner or approved for all"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""}],"id":1789,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3665:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3665:170:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1802,"nodeType":"ExpressionStatement","src":"3665:170:7"},{"expression":{"arguments":[{"id":1804,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"3855:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1805,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"3859:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1803,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"3846:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3846:21:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1807,"nodeType":"ExpressionStatement","src":"3846:21:7"}]},"documentation":{"id":1767,"nodeType":"StructuredDocumentation","src":"3417:46:7","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":1809,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3477:7:7","nodeType":"FunctionDefinition","overrides":{"id":1773,"nodeType":"OverrideSpecifier","overrides":[],"src":"3529:8:7"},"parameters":{"id":1772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1769,"mutability":"mutable","name":"to","nameLocation":"3493:2:7","nodeType":"VariableDeclaration","scope":1809,"src":"3485:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1768,"name":"address","nodeType":"ElementaryTypeName","src":"3485:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1771,"mutability":"mutable","name":"tokenId","nameLocation":"3505:7:7","nodeType":"VariableDeclaration","scope":1809,"src":"3497:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1770,"name":"uint256","nodeType":"ElementaryTypeName","src":"3497:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3484:29:7"},"returnParameters":{"id":1774,"nodeType":"ParameterList","parameters":[],"src":"3538:0:7"},"scope":2479,"src":"3468:406:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2584],"body":{"id":1826,"nodeType":"Block","src":"4020:82:7","statements":[{"expression":{"arguments":[{"id":1819,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"4045:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1818,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2375,"src":"4030:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":1820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4030:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1821,"nodeType":"ExpressionStatement","src":"4030:23:7"},{"expression":{"baseExpression":{"id":1822,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1592,"src":"4071:15:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1824,"indexExpression":{"id":1823,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"4087:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4071:24:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1817,"id":1825,"nodeType":"Return","src":"4064:31:7"}]},"documentation":{"id":1810,"nodeType":"StructuredDocumentation","src":"3880:50:7","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":1827,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3944:11:7","nodeType":"FunctionDefinition","overrides":{"id":1814,"nodeType":"OverrideSpecifier","overrides":[],"src":"3993:8:7"},"parameters":{"id":1813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1812,"mutability":"mutable","name":"tokenId","nameLocation":"3964:7:7","nodeType":"VariableDeclaration","scope":1827,"src":"3956:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1811,"name":"uint256","nodeType":"ElementaryTypeName","src":"3956:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3955:17:7"},"returnParameters":{"id":1817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1816,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1827,"src":"4011:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1815,"name":"address","nodeType":"ElementaryTypeName","src":"4011:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4010:9:7"},"scope":2479,"src":"3935:167:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2576],"body":{"id":1843,"nodeType":"Block","src":"4253:69:7","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1837,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"4282:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4282:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1839,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"4296:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1840,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1832,"src":"4306:8:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1836,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"4263:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4263:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1842,"nodeType":"ExpressionStatement","src":"4263:52:7"}]},"documentation":{"id":1828,"nodeType":"StructuredDocumentation","src":"4108:56:7","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":1844,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4178:17:7","nodeType":"FunctionDefinition","overrides":{"id":1834,"nodeType":"OverrideSpecifier","overrides":[],"src":"4244:8:7"},"parameters":{"id":1833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1830,"mutability":"mutable","name":"operator","nameLocation":"4204:8:7","nodeType":"VariableDeclaration","scope":1844,"src":"4196:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1829,"name":"address","nodeType":"ElementaryTypeName","src":"4196:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1832,"mutability":"mutable","name":"approved","nameLocation":"4219:8:7","nodeType":"VariableDeclaration","scope":1844,"src":"4214:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1831,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4195:33:7"},"returnParameters":{"id":1835,"nodeType":"ParameterList","parameters":[],"src":"4253:0:7"},"scope":2479,"src":"4169:153:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2594],"body":{"id":1861,"nodeType":"Block","src":"4491:59:7","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":1855,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"4508:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1857,"indexExpression":{"id":1856,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1847,"src":"4527:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:25:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1859,"indexExpression":{"id":1858,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1849,"src":"4534:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:35:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1854,"id":1860,"nodeType":"Return","src":"4501:42:7"}]},"documentation":{"id":1845,"nodeType":"StructuredDocumentation","src":"4328:55:7","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":1862,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4397:16:7","nodeType":"FunctionDefinition","overrides":{"id":1851,"nodeType":"OverrideSpecifier","overrides":[],"src":"4467:8:7"},"parameters":{"id":1850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1847,"mutability":"mutable","name":"owner","nameLocation":"4422:5:7","nodeType":"VariableDeclaration","scope":1862,"src":"4414:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1846,"name":"address","nodeType":"ElementaryTypeName","src":"4414:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1849,"mutability":"mutable","name":"operator","nameLocation":"4437:8:7","nodeType":"VariableDeclaration","scope":1862,"src":"4429:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1848,"name":"address","nodeType":"ElementaryTypeName","src":"4429:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4413:33:7"},"returnParameters":{"id":1854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1853,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1862,"src":"4485:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1852,"name":"bool","nodeType":"ElementaryTypeName","src":"4485:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4484:6:7"},"scope":2479,"src":"4388:162:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2560],"body":{"id":1888,"nodeType":"Block","src":"4701:207:7","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1875,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"4790:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4790:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1877,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1869,"src":"4804:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1874,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"4771:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4771:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":1879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4814:47:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":1873,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4763:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4763:99:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1881,"nodeType":"ExpressionStatement","src":"4763:99:7"},{"expression":{"arguments":[{"id":1883,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"4883:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1884,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"4889:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1885,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1869,"src":"4893:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1882,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"4873:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1887,"nodeType":"ExpressionStatement","src":"4873:28:7"}]},"documentation":{"id":1863,"nodeType":"StructuredDocumentation","src":"4556:51:7","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":1889,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4621:12:7","nodeType":"FunctionDefinition","overrides":{"id":1871,"nodeType":"OverrideSpecifier","overrides":[],"src":"4692:8:7"},"parameters":{"id":1870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1865,"mutability":"mutable","name":"from","nameLocation":"4642:4:7","nodeType":"VariableDeclaration","scope":1889,"src":"4634:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1864,"name":"address","nodeType":"ElementaryTypeName","src":"4634:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1867,"mutability":"mutable","name":"to","nameLocation":"4656:2:7","nodeType":"VariableDeclaration","scope":1889,"src":"4648:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1866,"name":"address","nodeType":"ElementaryTypeName","src":"4648:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1869,"mutability":"mutable","name":"tokenId","nameLocation":"4668:7:7","nodeType":"VariableDeclaration","scope":1889,"src":"4660:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1868,"name":"uint256","nodeType":"ElementaryTypeName","src":"4660:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4633:43:7"},"returnParameters":{"id":1872,"nodeType":"ParameterList","parameters":[],"src":"4701:0:7"},"scope":2479,"src":"4612:296:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2550],"body":{"id":1907,"nodeType":"Block","src":"5067:56:7","statements":[{"expression":{"arguments":[{"id":1901,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"5094:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1902,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1894,"src":"5100:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1903,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1896,"src":"5104:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":1904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5113:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1900,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[1908,1938],"referencedDeclaration":1938,"src":"5077:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5077:39:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1906,"nodeType":"ExpressionStatement","src":"5077:39:7"}]},"documentation":{"id":1890,"nodeType":"StructuredDocumentation","src":"4914:55:7","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":1908,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4983:16:7","nodeType":"FunctionDefinition","overrides":{"id":1898,"nodeType":"OverrideSpecifier","overrides":[],"src":"5058:8:7"},"parameters":{"id":1897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1892,"mutability":"mutable","name":"from","nameLocation":"5008:4:7","nodeType":"VariableDeclaration","scope":1908,"src":"5000:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1891,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1894,"mutability":"mutable","name":"to","nameLocation":"5022:2:7","nodeType":"VariableDeclaration","scope":1908,"src":"5014:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1893,"name":"address","nodeType":"ElementaryTypeName","src":"5014:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1896,"mutability":"mutable","name":"tokenId","nameLocation":"5034:7:7","nodeType":"VariableDeclaration","scope":1908,"src":"5026:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1895,"name":"uint256","nodeType":"ElementaryTypeName","src":"5026:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4999:43:7"},"returnParameters":{"id":1899,"nodeType":"ParameterList","parameters":[],"src":"5067:0:7"},"scope":2479,"src":"4974:149:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2540],"body":{"id":1937,"nodeType":"Block","src":"5301:164:7","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1923,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"5338:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5338:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1925,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"5352:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1922,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"5319:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":1926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5319:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":1927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5362:47:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":1921,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5311:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5311:99:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1929,"nodeType":"ExpressionStatement","src":"5311:99:7"},{"expression":{"arguments":[{"id":1931,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1911,"src":"5434:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1932,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"5440:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1933,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"5444:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1934,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1917,"src":"5453:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1930,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"5420:13:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5420:38:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1936,"nodeType":"ExpressionStatement","src":"5420:38:7"}]},"documentation":{"id":1909,"nodeType":"StructuredDocumentation","src":"5129:55:7","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":1938,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5198:16:7","nodeType":"FunctionDefinition","overrides":{"id":1919,"nodeType":"OverrideSpecifier","overrides":[],"src":"5292:8:7"},"parameters":{"id":1918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1911,"mutability":"mutable","name":"from","nameLocation":"5223:4:7","nodeType":"VariableDeclaration","scope":1938,"src":"5215:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1910,"name":"address","nodeType":"ElementaryTypeName","src":"5215:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1913,"mutability":"mutable","name":"to","nameLocation":"5237:2:7","nodeType":"VariableDeclaration","scope":1938,"src":"5229:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1912,"name":"address","nodeType":"ElementaryTypeName","src":"5229:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1915,"mutability":"mutable","name":"tokenId","nameLocation":"5249:7:7","nodeType":"VariableDeclaration","scope":1938,"src":"5241:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1914,"name":"uint256","nodeType":"ElementaryTypeName","src":"5241:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1917,"mutability":"mutable","name":"data","nameLocation":"5271:4:7","nodeType":"VariableDeclaration","scope":1938,"src":"5258:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1916,"name":"bytes","nodeType":"ElementaryTypeName","src":"5258:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5214:62:7"},"returnParameters":{"id":1920,"nodeType":"ParameterList","parameters":[],"src":"5301:0:7"},"scope":2479,"src":"5189:276:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1966,"nodeType":"Block","src":"6428:165:7","statements":[{"expression":{"arguments":[{"id":1951,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"6448:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1952,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"6454:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1953,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"6458:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1950,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"6438:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6438:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1955,"nodeType":"ExpressionStatement","src":"6438:28:7"},{"expression":{"arguments":[{"arguments":[{"id":1958,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"6507:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1959,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"6513:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1960,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"6517:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1961,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1947,"src":"6526:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1957,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"6484:22:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":1962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6484:47:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":1963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6533:52:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":1956,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6476:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6476:110:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1965,"nodeType":"ExpressionStatement","src":"6476:110:7"}]},"documentation":{"id":1939,"nodeType":"StructuredDocumentation","src":"5471:850:7","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":1967,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"6335:13:7","nodeType":"FunctionDefinition","parameters":{"id":1948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1941,"mutability":"mutable","name":"from","nameLocation":"6357:4:7","nodeType":"VariableDeclaration","scope":1967,"src":"6349:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1940,"name":"address","nodeType":"ElementaryTypeName","src":"6349:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1943,"mutability":"mutable","name":"to","nameLocation":"6371:2:7","nodeType":"VariableDeclaration","scope":1967,"src":"6363:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1942,"name":"address","nodeType":"ElementaryTypeName","src":"6363:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1945,"mutability":"mutable","name":"tokenId","nameLocation":"6383:7:7","nodeType":"VariableDeclaration","scope":1967,"src":"6375:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1944,"name":"uint256","nodeType":"ElementaryTypeName","src":"6375:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1947,"mutability":"mutable","name":"data","nameLocation":"6405:4:7","nodeType":"VariableDeclaration","scope":1967,"src":"6392:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1946,"name":"bytes","nodeType":"ElementaryTypeName","src":"6392:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6348:62:7"},"returnParameters":{"id":1949,"nodeType":"ParameterList","parameters":[],"src":"6428:0:7"},"scope":2479,"src":"6326:267:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1979,"nodeType":"Block","src":"6777:40:7","statements":[{"expression":{"baseExpression":{"id":1975,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"6794:7:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1977,"indexExpression":{"id":1976,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1970,"src":"6802:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6794:16:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1974,"id":1978,"nodeType":"Return","src":"6787:23:7"}]},"documentation":{"id":1968,"nodeType":"StructuredDocumentation","src":"6599:98:7","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist"},"id":1980,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"6711:8:7","nodeType":"FunctionDefinition","parameters":{"id":1971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1970,"mutability":"mutable","name":"tokenId","nameLocation":"6728:7:7","nodeType":"VariableDeclaration","scope":1980,"src":"6720:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1969,"name":"uint256","nodeType":"ElementaryTypeName","src":"6720:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6719:17:7"},"returnParameters":{"id":1974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1973,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1980,"src":"6768:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1972,"name":"address","nodeType":"ElementaryTypeName","src":"6768:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6767:9:7"},"scope":2479,"src":"6702:115:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1997,"nodeType":"Block","src":"7191:55:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1989,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1983,"src":"7217:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1988,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1980,"src":"7208:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7208:17:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7237:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1992,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7229:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1991,"name":"address","nodeType":"ElementaryTypeName","src":"7229:7:7","typeDescriptions":{}}},"id":1994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7229:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7208:31:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1987,"id":1996,"nodeType":"Return","src":"7201:38:7"}]},"documentation":{"id":1981,"nodeType":"StructuredDocumentation","src":"6823:292:7","text":" @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."},"id":1998,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"7129:7:7","nodeType":"FunctionDefinition","parameters":{"id":1984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1983,"mutability":"mutable","name":"tokenId","nameLocation":"7145:7:7","nodeType":"VariableDeclaration","scope":1998,"src":"7137:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1982,"name":"uint256","nodeType":"ElementaryTypeName","src":"7137:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7136:17:7"},"returnParameters":{"id":1987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1986,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1998,"src":"7185:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1985,"name":"bool","nodeType":"ElementaryTypeName","src":"7185:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7184:6:7"},"scope":2479,"src":"7120:126:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2031,"nodeType":"Block","src":"7503:162:7","statements":[{"assignments":[2009],"declarations":[{"constant":false,"id":2009,"mutability":"mutable","name":"owner","nameLocation":"7521:5:7","nodeType":"VariableDeclaration","scope":2031,"src":"7513:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2008,"name":"address","nodeType":"ElementaryTypeName","src":"7513:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2014,"initialValue":{"arguments":[{"id":2012,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"7544:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2010,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"7529:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2479_$","typeString":"type(contract ERC721)"}},"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7536:7:7","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1698,"src":"7529:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7529:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7513:39:7"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2015,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"7570:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2016,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2009,"src":"7581:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7570:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2019,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2009,"src":"7607:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2020,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"7614:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2018,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"7590:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":2021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7590:32:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7570:52:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2024,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"7638:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2023,"name":"getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"7626:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7626:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2026,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"7650:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7626:31:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7570:87:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2029,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7569:89:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2007,"id":2030,"nodeType":"Return","src":"7562:96:7"}]},"documentation":{"id":1999,"nodeType":"StructuredDocumentation","src":"7252:147:7","text":" @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":2032,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"7413:18:7","nodeType":"FunctionDefinition","parameters":{"id":2004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2001,"mutability":"mutable","name":"spender","nameLocation":"7440:7:7","nodeType":"VariableDeclaration","scope":2032,"src":"7432:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2000,"name":"address","nodeType":"ElementaryTypeName","src":"7432:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2003,"mutability":"mutable","name":"tokenId","nameLocation":"7457:7:7","nodeType":"VariableDeclaration","scope":2032,"src":"7449:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2002,"name":"uint256","nodeType":"ElementaryTypeName","src":"7449:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7431:34:7"},"returnParameters":{"id":2007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2006,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2032,"src":"7497:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2005,"name":"bool","nodeType":"ElementaryTypeName","src":"7497:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7496:6:7"},"scope":2479,"src":"7404:261:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2046,"nodeType":"Block","src":"8060:43:7","statements":[{"expression":{"arguments":[{"id":2041,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2035,"src":"8080:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2042,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2037,"src":"8084:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":2043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8093:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":2040,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[2047,2076],"referencedDeclaration":2076,"src":"8070:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":2044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8070:26:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2045,"nodeType":"ExpressionStatement","src":"8070:26:7"}]},"documentation":{"id":2033,"nodeType":"StructuredDocumentation","src":"7671:319:7","text":" @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":2047,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8004:9:7","nodeType":"FunctionDefinition","parameters":{"id":2038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2035,"mutability":"mutable","name":"to","nameLocation":"8022:2:7","nodeType":"VariableDeclaration","scope":2047,"src":"8014:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2034,"name":"address","nodeType":"ElementaryTypeName","src":"8014:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2037,"mutability":"mutable","name":"tokenId","nameLocation":"8034:7:7","nodeType":"VariableDeclaration","scope":2047,"src":"8026:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2036,"name":"uint256","nodeType":"ElementaryTypeName","src":"8026:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8013:29:7"},"returnParameters":{"id":2039,"nodeType":"ParameterList","parameters":[],"src":"8060:0:7"},"scope":2479,"src":"7995:108:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2075,"nodeType":"Block","src":"8408:195:7","statements":[{"expression":{"arguments":[{"id":2058,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2050,"src":"8424:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2059,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"8428:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2057,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2153,"src":"8418:5:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8418:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2061,"nodeType":"ExpressionStatement","src":"8418:18:7"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":2066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8498:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2065,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8490:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2064,"name":"address","nodeType":"ElementaryTypeName","src":"8490:7:7","typeDescriptions":{}}},"id":2067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8490:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2068,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2050,"src":"8502:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2069,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"8506:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2070,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"8515:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2063,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"8467:22:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":2071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8467:53:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":2072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8534:52:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":2062,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8446:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8446:150:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2074,"nodeType":"ExpressionStatement","src":"8446:150:7"}]},"documentation":{"id":2048,"nodeType":"StructuredDocumentation","src":"8109:210:7","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":2076,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8333:9:7","nodeType":"FunctionDefinition","parameters":{"id":2055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2050,"mutability":"mutable","name":"to","nameLocation":"8351:2:7","nodeType":"VariableDeclaration","scope":2076,"src":"8343:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2049,"name":"address","nodeType":"ElementaryTypeName","src":"8343:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2052,"mutability":"mutable","name":"tokenId","nameLocation":"8363:7:7","nodeType":"VariableDeclaration","scope":2076,"src":"8355:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2051,"name":"uint256","nodeType":"ElementaryTypeName","src":"8355:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2054,"mutability":"mutable","name":"data","nameLocation":"8385:4:7","nodeType":"VariableDeclaration","scope":2076,"src":"8372:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2053,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8342:48:7"},"returnParameters":{"id":2056,"nodeType":"ParameterList","parameters":[],"src":"8408:0:7"},"scope":2479,"src":"8324:279:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2152,"nodeType":"Block","src":"8986:859:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2085,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2079,"src":"9004:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9018:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2087,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9010:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2086,"name":"address","nodeType":"ElementaryTypeName","src":"9010:7:7","typeDescriptions":{}}},"id":2089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9010:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9004:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","id":2091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9022:34:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""},"value":"ERC721: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""}],"id":2084,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8996:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8996:61:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2093,"nodeType":"ExpressionStatement","src":"8996:61:7"},{"expression":{"arguments":[{"id":2098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9075:17:7","subExpression":{"arguments":[{"id":2096,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"9084:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2095,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1998,"src":"9076:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":2097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9076:16:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":2099,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9094:30:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":2094,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9067:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9067:58:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2101,"nodeType":"ExpressionStatement","src":"9067:58:7"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2104,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9157:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2103,"name":"address","nodeType":"ElementaryTypeName","src":"9157:7:7","typeDescriptions":{}}},"id":2106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9157:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2107,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2079,"src":"9169:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2108,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"9173:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":2109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9182:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2102,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2450,"src":"9136:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":2110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9136:48:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2111,"nodeType":"ExpressionStatement","src":"9136:48:7"},{"expression":{"arguments":[{"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9279:17:7","subExpression":{"arguments":[{"id":2114,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"9288:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2113,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1998,"src":"9280:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":2115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9280:16:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":2117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9298:30:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":2112,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9271:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9271:58:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2119,"nodeType":"ExpressionStatement","src":"9271:58:7"},{"id":2126,"nodeType":"UncheckedBlock","src":"9340:360:7","statements":[{"expression":{"id":2124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2120,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1588,"src":"9671:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2122,"indexExpression":{"id":2121,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2079,"src":"9681:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9671:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9688:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9671:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2125,"nodeType":"ExpressionStatement","src":"9671:18:7"}]},{"expression":{"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2127,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"9710:7:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2129,"indexExpression":{"id":2128,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"9718:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9710:16:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2130,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2079,"src":"9729:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9710:21:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2132,"nodeType":"ExpressionStatement","src":"9710:21:7"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9764:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2135,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9756:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2134,"name":"address","nodeType":"ElementaryTypeName","src":"9756:7:7","typeDescriptions":{}}},"id":2137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9756:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2138,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2079,"src":"9768:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2139,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"9772:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2133,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"9747:8:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9747:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2141,"nodeType":"EmitStatement","src":"9742:38:7"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9819:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2144,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9811:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2143,"name":"address","nodeType":"ElementaryTypeName","src":"9811:7:7","typeDescriptions":{}}},"id":2146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9811:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2147,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2079,"src":"9823:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2148,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"9827:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":2149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9836:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2142,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"9791:19:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":2150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9791:47:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2151,"nodeType":"ExpressionStatement","src":"9791:47:7"}]},"documentation":{"id":2077,"nodeType":"StructuredDocumentation","src":"8609:311:7","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":2153,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8934:5:7","nodeType":"FunctionDefinition","parameters":{"id":2082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2079,"mutability":"mutable","name":"to","nameLocation":"8948:2:7","nodeType":"VariableDeclaration","scope":2153,"src":"8940:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2078,"name":"address","nodeType":"ElementaryTypeName","src":"8940:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2081,"mutability":"mutable","name":"tokenId","nameLocation":"8960:7:7","nodeType":"VariableDeclaration","scope":2153,"src":"8952:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2080,"name":"uint256","nodeType":"ElementaryTypeName","src":"8952:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8939:29:7"},"returnParameters":{"id":2083,"nodeType":"ParameterList","parameters":[],"src":"8986:0:7"},"scope":2479,"src":"8925:920:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2219,"nodeType":"Block","src":"10220:713:7","statements":[{"assignments":[2160],"declarations":[{"constant":false,"id":2160,"mutability":"mutable","name":"owner","nameLocation":"10238:5:7","nodeType":"VariableDeclaration","scope":2219,"src":"10230:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2159,"name":"address","nodeType":"ElementaryTypeName","src":"10230:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2165,"initialValue":{"arguments":[{"id":2163,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"10261:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2161,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"10246:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2479_$","typeString":"type(contract ERC721)"}},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10253:7:7","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1698,"src":"10246:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10246:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10230:39:7"},{"expression":{"arguments":[{"id":2167,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2160,"src":"10301:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10316:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2169,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10308:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2168,"name":"address","nodeType":"ElementaryTypeName","src":"10308:7:7","typeDescriptions":{}}},"id":2171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10308:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2172,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"10320:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":2173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10329:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2166,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2450,"src":"10280:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":2174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10280:51:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2175,"nodeType":"ExpressionStatement","src":"10280:51:7"},{"expression":{"id":2181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2176,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2160,"src":"10433:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2179,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"10456:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2177,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"10441:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2479_$","typeString":"type(contract ERC721)"}},"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10448:7:7","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1698,"src":"10441:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10441:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10433:31:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2182,"nodeType":"ExpressionStatement","src":"10433:31:7"},{"expression":{"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10502:31:7","subExpression":{"baseExpression":{"id":2183,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1592,"src":"10509:15:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2185,"indexExpression":{"id":2184,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"10525:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10509:24:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2187,"nodeType":"ExpressionStatement","src":"10502:31:7"},{"id":2194,"nodeType":"UncheckedBlock","src":"10544:237:7","statements":[{"expression":{"id":2192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2188,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1588,"src":"10749:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2190,"indexExpression":{"id":2189,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2160,"src":"10759:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10749:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":2191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10769:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10749:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2193,"nodeType":"ExpressionStatement","src":"10749:21:7"}]},{"expression":{"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10790:23:7","subExpression":{"baseExpression":{"id":2195,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"10797:7:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2197,"indexExpression":{"id":2196,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"10805:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10797:16:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2199,"nodeType":"ExpressionStatement","src":"10790:23:7"},{"eventCall":{"arguments":[{"id":2201,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2160,"src":"10838:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10853:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2203,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10845:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2202,"name":"address","nodeType":"ElementaryTypeName","src":"10845:7:7","typeDescriptions":{}}},"id":2205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10845:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2206,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"10857:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2200,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"10829:8:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10829:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2208,"nodeType":"EmitStatement","src":"10824:41:7"},{"expression":{"arguments":[{"id":2210,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2160,"src":"10896:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10911:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2212,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10903:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2211,"name":"address","nodeType":"ElementaryTypeName","src":"10903:7:7","typeDescriptions":{}}},"id":2214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10903:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2215,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"10915:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":2216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10924:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2209,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"10876:19:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":2217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10876:50:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2218,"nodeType":"ExpressionStatement","src":"10876:50:7"}]},"documentation":{"id":2154,"nodeType":"StructuredDocumentation","src":"9851:315:7","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":2220,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10180:5:7","nodeType":"FunctionDefinition","parameters":{"id":2157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2156,"mutability":"mutable","name":"tokenId","nameLocation":"10194:7:7","nodeType":"VariableDeclaration","scope":2220,"src":"10186:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2155,"name":"uint256","nodeType":"ElementaryTypeName","src":"10186:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10185:17:7"},"returnParameters":{"id":2158,"nodeType":"ParameterList","parameters":[],"src":"10220:0:7"},"scope":2479,"src":"10171:762:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2304,"nodeType":"Block","src":"11336:1124:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2233,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"11369:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2231,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"11354:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2479_$","typeString":"type(contract ERC721)"}},"id":2232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11361:7:7","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1698,"src":"11354:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11354:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2235,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"11381:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11354:31:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":2237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11387:39:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":2230,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11346:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11346:81:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2239,"nodeType":"ExpressionStatement","src":"11346:81:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2241,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"11445:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11459:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2243,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11451:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2242,"name":"address","nodeType":"ElementaryTypeName","src":"11451:7:7","typeDescriptions":{}}},"id":2245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11451:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11445:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373","id":2247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11463:38:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""},"value":"ERC721: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""}],"id":2240,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11437:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11437:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2249,"nodeType":"ExpressionStatement","src":"11437:65:7"},{"expression":{"arguments":[{"id":2251,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"11534:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2252,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"11540:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2253,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"11544:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":2254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11553:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2250,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2450,"src":"11513:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":2255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11513:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2256,"nodeType":"ExpressionStatement","src":"11513:42:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2260,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"11670:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2258,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"11655:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2479_$","typeString":"type(contract ERC721)"}},"id":2259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11662:7:7","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1698,"src":"11655:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11655:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2262,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"11682:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11655:31:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":2264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11688:39:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":2257,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11647:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11647:81:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2266,"nodeType":"ExpressionStatement","src":"11647:81:7"},{"expression":{"id":2270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"11790:31:7","subExpression":{"baseExpression":{"id":2267,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1592,"src":"11797:15:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2269,"indexExpression":{"id":2268,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"11813:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11797:24:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2271,"nodeType":"ExpressionStatement","src":"11790:31:7"},{"id":2284,"nodeType":"UncheckedBlock","src":"11832:496:7","statements":[{"expression":{"id":2276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2272,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1588,"src":"12265:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2274,"indexExpression":{"id":2273,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"12275:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12265:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":2275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12284:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12265:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2277,"nodeType":"ExpressionStatement","src":"12265:20:7"},{"expression":{"id":2282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2278,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1588,"src":"12299:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2280,"indexExpression":{"id":2279,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"12309:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12299:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12299:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2283,"nodeType":"ExpressionStatement","src":"12299:18:7"}]},{"expression":{"id":2289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2285,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"12337:7:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2287,"indexExpression":{"id":2286,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"12345:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12337:16:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2288,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"12356:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12337:21:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2290,"nodeType":"ExpressionStatement","src":"12337:21:7"},{"eventCall":{"arguments":[{"id":2292,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"12383:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2293,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"12389:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2294,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"12393:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2291,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"12374:8:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12374:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2296,"nodeType":"EmitStatement","src":"12369:32:7"},{"expression":{"arguments":[{"id":2298,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"12432:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2299,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"12438:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2300,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"12442:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":2301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2297,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"12412:19:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":2302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12412:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2303,"nodeType":"ExpressionStatement","src":"12412:41:7"}]},"documentation":{"id":2221,"nodeType":"StructuredDocumentation","src":"10939:313:7","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":2305,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"11266:9:7","nodeType":"FunctionDefinition","parameters":{"id":2228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2223,"mutability":"mutable","name":"from","nameLocation":"11284:4:7","nodeType":"VariableDeclaration","scope":2305,"src":"11276:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2222,"name":"address","nodeType":"ElementaryTypeName","src":"11276:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2225,"mutability":"mutable","name":"to","nameLocation":"11298:2:7","nodeType":"VariableDeclaration","scope":2305,"src":"11290:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2224,"name":"address","nodeType":"ElementaryTypeName","src":"11290:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2227,"mutability":"mutable","name":"tokenId","nameLocation":"11310:7:7","nodeType":"VariableDeclaration","scope":2305,"src":"11302:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2226,"name":"uint256","nodeType":"ElementaryTypeName","src":"11302:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11275:43:7"},"returnParameters":{"id":2229,"nodeType":"ParameterList","parameters":[],"src":"11336:0:7"},"scope":2479,"src":"11257:1203:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2328,"nodeType":"Block","src":"12636:107:7","statements":[{"expression":{"id":2317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2313,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1592,"src":"12646:15:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2315,"indexExpression":{"id":2314,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2310,"src":"12662:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12646:24:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2316,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"12673:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12646:29:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2318,"nodeType":"ExpressionStatement","src":"12646:29:7"},{"eventCall":{"arguments":[{"arguments":[{"id":2322,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2310,"src":"12714:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2320,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"12699:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2479_$","typeString":"type(contract ERC721)"}},"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12706:7:7","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1698,"src":"12699:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12699:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2324,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2308,"src":"12724:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2325,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2310,"src":"12728:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2319,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"12690:8:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12690:46:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2327,"nodeType":"EmitStatement","src":"12685:51:7"}]},"documentation":{"id":2306,"nodeType":"StructuredDocumentation","src":"12466:101:7","text":" @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."},"id":2329,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"12581:8:7","nodeType":"FunctionDefinition","parameters":{"id":2311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2308,"mutability":"mutable","name":"to","nameLocation":"12598:2:7","nodeType":"VariableDeclaration","scope":2329,"src":"12590:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2307,"name":"address","nodeType":"ElementaryTypeName","src":"12590:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2310,"mutability":"mutable","name":"tokenId","nameLocation":"12610:7:7","nodeType":"VariableDeclaration","scope":2329,"src":"12602:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2309,"name":"uint256","nodeType":"ElementaryTypeName","src":"12602:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12589:29:7"},"returnParameters":{"id":2312,"nodeType":"ParameterList","parameters":[],"src":"12636:0:7"},"scope":2479,"src":"12572:171:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2360,"nodeType":"Block","src":"12972:184:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2340,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"12990:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2341,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"12999:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12990:17:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","id":2343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13009:27:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""},"value":"ERC721: approve to caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""}],"id":2339,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12982:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12982:55:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2345,"nodeType":"ExpressionStatement","src":"12982:55:7"},{"expression":{"id":2352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2346,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"13047:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":2349,"indexExpression":{"id":2347,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"13066:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13047:25:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2350,"indexExpression":{"id":2348,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"13073:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13047:35:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2351,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2336,"src":"13085:8:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13047:46:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2353,"nodeType":"ExpressionStatement","src":"13047:46:7"},{"eventCall":{"arguments":[{"id":2355,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"13123:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2356,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"13130:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2357,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2336,"src":"13140:8:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2354,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"13108:14:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":2358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13108:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2359,"nodeType":"EmitStatement","src":"13103:46:7"}]},"documentation":{"id":2330,"nodeType":"StructuredDocumentation","src":"12749:125:7","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":2361,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"12888:18:7","nodeType":"FunctionDefinition","parameters":{"id":2337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2332,"mutability":"mutable","name":"owner","nameLocation":"12915:5:7","nodeType":"VariableDeclaration","scope":2361,"src":"12907:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2331,"name":"address","nodeType":"ElementaryTypeName","src":"12907:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2334,"mutability":"mutable","name":"operator","nameLocation":"12930:8:7","nodeType":"VariableDeclaration","scope":2361,"src":"12922:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2333,"name":"address","nodeType":"ElementaryTypeName","src":"12922:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2336,"mutability":"mutable","name":"approved","nameLocation":"12945:8:7","nodeType":"VariableDeclaration","scope":2361,"src":"12940:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2335,"name":"bool","nodeType":"ElementaryTypeName","src":"12940:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12906:48:7"},"returnParameters":{"id":2338,"nodeType":"ParameterList","parameters":[],"src":"12972:0:7"},"scope":2479,"src":"12879:277:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2374,"nodeType":"Block","src":"13303:70:7","statements":[{"expression":{"arguments":[{"arguments":[{"id":2369,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2364,"src":"13329:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2368,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1998,"src":"13321:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13321:16:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":2371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13339:26:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":2367,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13313:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13313:53:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2373,"nodeType":"ExpressionStatement","src":"13313:53:7"}]},"documentation":{"id":2362,"nodeType":"StructuredDocumentation","src":"13162:73:7","text":" @dev Reverts if the `tokenId` has not been minted yet."},"id":2375,"implemented":true,"kind":"function","modifiers":[],"name":"_requireMinted","nameLocation":"13249:14:7","nodeType":"FunctionDefinition","parameters":{"id":2365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2364,"mutability":"mutable","name":"tokenId","nameLocation":"13272:7:7","nodeType":"VariableDeclaration","scope":2375,"src":"13264:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2363,"name":"uint256","nodeType":"ElementaryTypeName","src":"13264:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13263:17:7"},"returnParameters":{"id":2366,"nodeType":"ParameterList","parameters":[],"src":"13303:0:7"},"scope":2479,"src":"13240:133:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2436,"nodeType":"Block","src":"14080:676:7","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2389,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2380,"src":"14094:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14097:10:7","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2658,"src":"14094:13:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":2391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14094:15:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2434,"nodeType":"Block","src":"14714:36:7","statements":[{"expression":{"hexValue":"74727565","id":2432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14735:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2388,"id":2433,"nodeType":"Return","src":"14728:11:7"}]},"id":2435,"nodeType":"IfStatement","src":"14090:660:7","trueBody":{"id":2431,"nodeType":"Block","src":"14111:597:7","statements":[{"clauses":[{"block":{"id":2411,"nodeType":"Block","src":"14225:91:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2405,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"14250:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":2406,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"14260:15:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$2613_$","typeString":"type(contract IERC721Receiver)"}},"id":2407,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14276:16:7","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":2612,"src":"14260:32:7","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":2408,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14293:8:7","memberName":"selector","nodeType":"MemberAccess","src":"14260:41:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"14250:51:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2388,"id":2410,"nodeType":"Return","src":"14243:58:7"}]},"errorName":"","id":2412,"nodeType":"TryCatchClause","parameters":{"id":2404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2403,"mutability":"mutable","name":"retval","nameLocation":"14217:6:7","nodeType":"VariableDeclaration","scope":2412,"src":"14210:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2402,"name":"bytes4","nodeType":"ElementaryTypeName","src":"14210:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"14209:15:7"},"src":"14201:115:7"},{"block":{"id":2428,"nodeType":"Block","src":"14345:353:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2416,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2414,"src":"14367:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14374:6:7","memberName":"length","nodeType":"MemberAccess","src":"14367:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14384:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14367:18:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2426,"nodeType":"Block","src":"14494:190:7","statements":[{"AST":{"nodeType":"YulBlock","src":"14580:86:7","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14617:2:7","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"14621:6:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14613:3:7"},"nodeType":"YulFunctionCall","src":"14613:15:7"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"14636:6:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14630:5:7"},"nodeType":"YulFunctionCall","src":"14630:13:7"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14606:6:7"},"nodeType":"YulFunctionCall","src":"14606:38:7"},"nodeType":"YulExpressionStatement","src":"14606:38:7"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2414,"isOffset":false,"isSlot":false,"src":"14621:6:7","valueSize":1},{"declaration":2414,"isOffset":false,"isSlot":false,"src":"14636:6:7","valueSize":1}],"id":2425,"nodeType":"InlineAssembly","src":"14571:95:7"}]},"id":2427,"nodeType":"IfStatement","src":"14363:321:7","trueBody":{"id":2424,"nodeType":"Block","src":"14387:101:7","statements":[{"expression":{"arguments":[{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":2421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14416:52:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":2420,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"14409:6:7","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14409:60:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2423,"nodeType":"ExpressionStatement","src":"14409:60:7"}]}}]},"errorName":"","id":2429,"nodeType":"TryCatchClause","parameters":{"id":2415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2414,"mutability":"mutable","name":"reason","nameLocation":"14337:6:7","nodeType":"VariableDeclaration","scope":2429,"src":"14324:19:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2413,"name":"bytes","nodeType":"ElementaryTypeName","src":"14324:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14323:21:7"},"src":"14317:381:7"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2396,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"14166:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14166:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2398,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"14180:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2399,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2382,"src":"14186:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2400,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"14195:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":2393,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2380,"src":"14145:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2392,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"14129:15:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$2613_$","typeString":"type(contract IERC721Receiver)"}},"id":2394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14129:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$2613","typeString":"contract IERC721Receiver"}},"id":2395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14149:16:7","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":2612,"src":"14129:36:7","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":2401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14129:71:7","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":2430,"nodeType":"TryStatement","src":"14125:573:7"}]}}]},"documentation":{"id":2376,"nodeType":"StructuredDocumentation","src":"13379:541:7","text":" @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"},"id":2437,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"13934:22:7","nodeType":"FunctionDefinition","parameters":{"id":2385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2378,"mutability":"mutable","name":"from","nameLocation":"13974:4:7","nodeType":"VariableDeclaration","scope":2437,"src":"13966:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2377,"name":"address","nodeType":"ElementaryTypeName","src":"13966:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2380,"mutability":"mutable","name":"to","nameLocation":"13996:2:7","nodeType":"VariableDeclaration","scope":2437,"src":"13988:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2379,"name":"address","nodeType":"ElementaryTypeName","src":"13988:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2382,"mutability":"mutable","name":"tokenId","nameLocation":"14016:7:7","nodeType":"VariableDeclaration","scope":2437,"src":"14008:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2381,"name":"uint256","nodeType":"ElementaryTypeName","src":"14008:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2384,"mutability":"mutable","name":"data","nameLocation":"14046:4:7","nodeType":"VariableDeclaration","scope":2437,"src":"14033:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2383,"name":"bytes","nodeType":"ElementaryTypeName","src":"14033:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13956:100:7"},"returnParameters":{"id":2388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2387,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2437,"src":"14074:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2386,"name":"bool","nodeType":"ElementaryTypeName","src":"14074:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14073:6:7"},"scope":2479,"src":"13925:831:7","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2449,"nodeType":"Block","src":"15586:2:7","statements":[]},"documentation":{"id":2438,"nodeType":"StructuredDocumentation","src":"14762:705:7","text":" @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n - When `from` is zero, the tokens will be minted for `to`.\n - When `to` is zero, ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":2450,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"15481:20:7","nodeType":"FunctionDefinition","parameters":{"id":2447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2440,"mutability":"mutable","name":"from","nameLocation":"15510:4:7","nodeType":"VariableDeclaration","scope":2450,"src":"15502:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2439,"name":"address","nodeType":"ElementaryTypeName","src":"15502:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2442,"mutability":"mutable","name":"to","nameLocation":"15524:2:7","nodeType":"VariableDeclaration","scope":2450,"src":"15516:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2441,"name":"address","nodeType":"ElementaryTypeName","src":"15516:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2444,"mutability":"mutable","name":"firstTokenId","nameLocation":"15536:12:7","nodeType":"VariableDeclaration","scope":2450,"src":"15528:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2443,"name":"uint256","nodeType":"ElementaryTypeName","src":"15528:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2446,"mutability":"mutable","name":"batchSize","nameLocation":"15558:9:7","nodeType":"VariableDeclaration","scope":2450,"src":"15550:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2445,"name":"uint256","nodeType":"ElementaryTypeName","src":"15550:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15501:67:7"},"returnParameters":{"id":2448,"nodeType":"ParameterList","parameters":[],"src":"15586:0:7"},"scope":2479,"src":"15472:116:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2462,"nodeType":"Block","src":"16407:2:7","statements":[]},"documentation":{"id":2451,"nodeType":"StructuredDocumentation","src":"15594:695:7","text":" @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n - When `from` is zero, the tokens were minted for `to`.\n - When `to` is zero, ``from``'s tokens were burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":2463,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"16303:19:7","nodeType":"FunctionDefinition","parameters":{"id":2460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2453,"mutability":"mutable","name":"from","nameLocation":"16331:4:7","nodeType":"VariableDeclaration","scope":2463,"src":"16323:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2452,"name":"address","nodeType":"ElementaryTypeName","src":"16323:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2455,"mutability":"mutable","name":"to","nameLocation":"16345:2:7","nodeType":"VariableDeclaration","scope":2463,"src":"16337:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2454,"name":"address","nodeType":"ElementaryTypeName","src":"16337:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2457,"mutability":"mutable","name":"firstTokenId","nameLocation":"16357:12:7","nodeType":"VariableDeclaration","scope":2463,"src":"16349:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2456,"name":"uint256","nodeType":"ElementaryTypeName","src":"16349:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2459,"mutability":"mutable","name":"batchSize","nameLocation":"16379:9:7","nodeType":"VariableDeclaration","scope":2463,"src":"16371:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2458,"name":"uint256","nodeType":"ElementaryTypeName","src":"16371:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16322:67:7"},"returnParameters":{"id":2461,"nodeType":"ParameterList","parameters":[],"src":"16407:0:7"},"scope":2479,"src":"16294:115:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2477,"nodeType":"Block","src":"16958:45:7","statements":[{"expression":{"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2471,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1588,"src":"16968:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2473,"indexExpression":{"id":2472,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2466,"src":"16978:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16968:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2474,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"16990:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16968:28:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2476,"nodeType":"ExpressionStatement","src":"16968:28:7"}]},"documentation":{"id":2464,"nodeType":"StructuredDocumentation","src":"16415:409:7","text":" @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n that `ownerOf(tokenId)` is `a`."},"id":2478,"implemented":true,"kind":"function","modifiers":[],"name":"__unsafe_increaseBalance","nameLocation":"16891:24:7","nodeType":"FunctionDefinition","parameters":{"id":2469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2466,"mutability":"mutable","name":"account","nameLocation":"16924:7:7","nodeType":"VariableDeclaration","scope":2478,"src":"16916:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2465,"name":"address","nodeType":"ElementaryTypeName","src":"16916:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2468,"mutability":"mutable","name":"amount","nameLocation":"16941:6:7","nodeType":"VariableDeclaration","scope":2478,"src":"16933:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2467,"name":"uint256","nodeType":"ElementaryTypeName","src":"16933:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16915:33:7"},"returnParameters":{"id":2470,"nodeType":"ParameterList","parameters":[],"src":"16958:0:7"},"scope":2479,"src":"16882:121:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":2480,"src":"628:16377:7","usedErrors":[]}],"src":"107:16899:7"},"id":7},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[4260],"IERC721":[2595]},"id":2596,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2481,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:8"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":2482,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2596,"sourceUnit":4261,"src":"133:47:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2484,"name":"IERC165","nameLocations":["271:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":4260,"src":"271:7:8"},"id":2485,"nodeType":"InheritanceSpecifier","src":"271:7:8"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":2483,"nodeType":"StructuredDocumentation","src":"182:67:8","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":2595,"linearizedBaseContracts":[2595,4260],"name":"IERC721","nameLocation":"260:7:8","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2486,"nodeType":"StructuredDocumentation","src":"285:88:8","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":2494,"name":"Transfer","nameLocation":"384:8:8","nodeType":"EventDefinition","parameters":{"id":2493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2488,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"409:4:8","nodeType":"VariableDeclaration","scope":2494,"src":"393:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2487,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2490,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"431:2:8","nodeType":"VariableDeclaration","scope":2494,"src":"415:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2489,"name":"address","nodeType":"ElementaryTypeName","src":"415:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2492,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"451:7:8","nodeType":"VariableDeclaration","scope":2494,"src":"435:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2491,"name":"uint256","nodeType":"ElementaryTypeName","src":"435:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"392:67:8"},"src":"378:82:8"},{"anonymous":false,"documentation":{"id":2495,"nodeType":"StructuredDocumentation","src":"466:94:8","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":2503,"name":"Approval","nameLocation":"571:8:8","nodeType":"EventDefinition","parameters":{"id":2502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2497,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"596:5:8","nodeType":"VariableDeclaration","scope":2503,"src":"580:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2496,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2499,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"619:8:8","nodeType":"VariableDeclaration","scope":2503,"src":"603:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2498,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2501,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"645:7:8","nodeType":"VariableDeclaration","scope":2503,"src":"629:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2500,"name":"uint256","nodeType":"ElementaryTypeName","src":"629:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"579:74:8"},"src":"565:89:8"},{"anonymous":false,"documentation":{"id":2504,"nodeType":"StructuredDocumentation","src":"660:117:8","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":2512,"name":"ApprovalForAll","nameLocation":"788:14:8","nodeType":"EventDefinition","parameters":{"id":2511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2506,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"819:5:8","nodeType":"VariableDeclaration","scope":2512,"src":"803:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2505,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2508,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"842:8:8","nodeType":"VariableDeclaration","scope":2512,"src":"826:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2507,"name":"address","nodeType":"ElementaryTypeName","src":"826:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2510,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"857:8:8","nodeType":"VariableDeclaration","scope":2512,"src":"852:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2509,"name":"bool","nodeType":"ElementaryTypeName","src":"852:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"802:64:8"},"src":"782:85:8"},{"documentation":{"id":2513,"nodeType":"StructuredDocumentation","src":"873:76:8","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":2520,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"963:9:8","nodeType":"FunctionDefinition","parameters":{"id":2516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2515,"mutability":"mutable","name":"owner","nameLocation":"981:5:8","nodeType":"VariableDeclaration","scope":2520,"src":"973:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2514,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"972:15:8"},"returnParameters":{"id":2519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2518,"mutability":"mutable","name":"balance","nameLocation":"1019:7:8","nodeType":"VariableDeclaration","scope":2520,"src":"1011:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2517,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1010:17:8"},"scope":2595,"src":"954:74:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2521,"nodeType":"StructuredDocumentation","src":"1034:131:8","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":2528,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1179:7:8","nodeType":"FunctionDefinition","parameters":{"id":2524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2523,"mutability":"mutable","name":"tokenId","nameLocation":"1195:7:8","nodeType":"VariableDeclaration","scope":2528,"src":"1187:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2522,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1186:17:8"},"returnParameters":{"id":2527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2526,"mutability":"mutable","name":"owner","nameLocation":"1235:5:8","nodeType":"VariableDeclaration","scope":2528,"src":"1227:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2525,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1226:15:8"},"scope":2595,"src":"1170:72:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2529,"nodeType":"StructuredDocumentation","src":"1248:556:8","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":2540,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1818:16:8","nodeType":"FunctionDefinition","parameters":{"id":2538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2531,"mutability":"mutable","name":"from","nameLocation":"1843:4:8","nodeType":"VariableDeclaration","scope":2540,"src":"1835:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2530,"name":"address","nodeType":"ElementaryTypeName","src":"1835:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2533,"mutability":"mutable","name":"to","nameLocation":"1857:2:8","nodeType":"VariableDeclaration","scope":2540,"src":"1849:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2532,"name":"address","nodeType":"ElementaryTypeName","src":"1849:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2535,"mutability":"mutable","name":"tokenId","nameLocation":"1869:7:8","nodeType":"VariableDeclaration","scope":2540,"src":"1861:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2534,"name":"uint256","nodeType":"ElementaryTypeName","src":"1861:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2537,"mutability":"mutable","name":"data","nameLocation":"1893:4:8","nodeType":"VariableDeclaration","scope":2540,"src":"1878:19:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2536,"name":"bytes","nodeType":"ElementaryTypeName","src":"1878:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1834:64:8"},"returnParameters":{"id":2539,"nodeType":"ParameterList","parameters":[],"src":"1907:0:8"},"scope":2595,"src":"1809:99:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2541,"nodeType":"StructuredDocumentation","src":"1914:687:8","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":2550,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2615:16:8","nodeType":"FunctionDefinition","parameters":{"id":2548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2543,"mutability":"mutable","name":"from","nameLocation":"2640:4:8","nodeType":"VariableDeclaration","scope":2550,"src":"2632:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2542,"name":"address","nodeType":"ElementaryTypeName","src":"2632:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2545,"mutability":"mutable","name":"to","nameLocation":"2654:2:8","nodeType":"VariableDeclaration","scope":2550,"src":"2646:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2544,"name":"address","nodeType":"ElementaryTypeName","src":"2646:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2547,"mutability":"mutable","name":"tokenId","nameLocation":"2666:7:8","nodeType":"VariableDeclaration","scope":2550,"src":"2658:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2546,"name":"uint256","nodeType":"ElementaryTypeName","src":"2658:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2631:43:8"},"returnParameters":{"id":2549,"nodeType":"ParameterList","parameters":[],"src":"2683:0:8"},"scope":2595,"src":"2606:78:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2551,"nodeType":"StructuredDocumentation","src":"2690:732:8","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2560,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3436:12:8","nodeType":"FunctionDefinition","parameters":{"id":2558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2553,"mutability":"mutable","name":"from","nameLocation":"3457:4:8","nodeType":"VariableDeclaration","scope":2560,"src":"3449:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2552,"name":"address","nodeType":"ElementaryTypeName","src":"3449:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2555,"mutability":"mutable","name":"to","nameLocation":"3471:2:8","nodeType":"VariableDeclaration","scope":2560,"src":"3463:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2554,"name":"address","nodeType":"ElementaryTypeName","src":"3463:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2557,"mutability":"mutable","name":"tokenId","nameLocation":"3483:7:8","nodeType":"VariableDeclaration","scope":2560,"src":"3475:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2556,"name":"uint256","nodeType":"ElementaryTypeName","src":"3475:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3448:43:8"},"returnParameters":{"id":2559,"nodeType":"ParameterList","parameters":[],"src":"3500:0:8"},"scope":2595,"src":"3427:74:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2561,"nodeType":"StructuredDocumentation","src":"3507:452:8","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2568,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3973:7:8","nodeType":"FunctionDefinition","parameters":{"id":2566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2563,"mutability":"mutable","name":"to","nameLocation":"3989:2:8","nodeType":"VariableDeclaration","scope":2568,"src":"3981:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2562,"name":"address","nodeType":"ElementaryTypeName","src":"3981:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2565,"mutability":"mutable","name":"tokenId","nameLocation":"4001:7:8","nodeType":"VariableDeclaration","scope":2568,"src":"3993:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2564,"name":"uint256","nodeType":"ElementaryTypeName","src":"3993:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3980:29:8"},"returnParameters":{"id":2567,"nodeType":"ParameterList","parameters":[],"src":"4018:0:8"},"scope":2595,"src":"3964:55:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2569,"nodeType":"StructuredDocumentation","src":"4025:309:8","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":2576,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4348:17:8","nodeType":"FunctionDefinition","parameters":{"id":2574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2571,"mutability":"mutable","name":"operator","nameLocation":"4374:8:8","nodeType":"VariableDeclaration","scope":2576,"src":"4366:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2570,"name":"address","nodeType":"ElementaryTypeName","src":"4366:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2573,"mutability":"mutable","name":"approved","nameLocation":"4389:8:8","nodeType":"VariableDeclaration","scope":2576,"src":"4384:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2572,"name":"bool","nodeType":"ElementaryTypeName","src":"4384:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4365:33:8"},"returnParameters":{"id":2575,"nodeType":"ParameterList","parameters":[],"src":"4407:0:8"},"scope":2595,"src":"4339:69:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2577,"nodeType":"StructuredDocumentation","src":"4414:139:8","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":2584,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4567:11:8","nodeType":"FunctionDefinition","parameters":{"id":2580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2579,"mutability":"mutable","name":"tokenId","nameLocation":"4587:7:8","nodeType":"VariableDeclaration","scope":2584,"src":"4579:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2578,"name":"uint256","nodeType":"ElementaryTypeName","src":"4579:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4578:17:8"},"returnParameters":{"id":2583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2582,"mutability":"mutable","name":"operator","nameLocation":"4627:8:8","nodeType":"VariableDeclaration","scope":2584,"src":"4619:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2581,"name":"address","nodeType":"ElementaryTypeName","src":"4619:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4618:18:8"},"scope":2595,"src":"4558:79:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2585,"nodeType":"StructuredDocumentation","src":"4643:138:8","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":2594,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4795:16:8","nodeType":"FunctionDefinition","parameters":{"id":2590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2587,"mutability":"mutable","name":"owner","nameLocation":"4820:5:8","nodeType":"VariableDeclaration","scope":2594,"src":"4812:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2586,"name":"address","nodeType":"ElementaryTypeName","src":"4812:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2589,"mutability":"mutable","name":"operator","nameLocation":"4835:8:8","nodeType":"VariableDeclaration","scope":2594,"src":"4827:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2588,"name":"address","nodeType":"ElementaryTypeName","src":"4827:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4811:33:8"},"returnParameters":{"id":2593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2592,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2594,"src":"4868:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2591,"name":"bool","nodeType":"ElementaryTypeName","src":"4868:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4867:6:8"},"scope":2595,"src":"4786:88:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2596,"src":"250:4626:8","usedErrors":[]}],"src":"108:4769:8"},"id":8},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[2613]},"id":2614,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2597,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"116:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":2598,"nodeType":"StructuredDocumentation","src":"141:152:9","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":2613,"linearizedBaseContracts":[2613],"name":"IERC721Receiver","nameLocation":"304:15:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2599,"nodeType":"StructuredDocumentation","src":"326:493:9","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":2612,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"833:16:9","nodeType":"FunctionDefinition","parameters":{"id":2608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2601,"mutability":"mutable","name":"operator","nameLocation":"867:8:9","nodeType":"VariableDeclaration","scope":2612,"src":"859:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2600,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2603,"mutability":"mutable","name":"from","nameLocation":"893:4:9","nodeType":"VariableDeclaration","scope":2612,"src":"885:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2602,"name":"address","nodeType":"ElementaryTypeName","src":"885:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2605,"mutability":"mutable","name":"tokenId","nameLocation":"915:7:9","nodeType":"VariableDeclaration","scope":2612,"src":"907:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2604,"name":"uint256","nodeType":"ElementaryTypeName","src":"907:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2607,"mutability":"mutable","name":"data","nameLocation":"947:4:9","nodeType":"VariableDeclaration","scope":2612,"src":"932:19:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2606,"name":"bytes","nodeType":"ElementaryTypeName","src":"932:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"849:108:9"},"returnParameters":{"id":2611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2610,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2612,"src":"976:6:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2609,"name":"bytes4","nodeType":"ElementaryTypeName","src":"976:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"975:8:9"},"scope":2613,"src":"824:160:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2614,"src":"294:692:9","usedErrors":[]}],"src":"116:871:9"},"id":9},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC165":[4260],"IERC721":[2595],"IERC721Metadata":[2640]},"id":2641,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2615,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:10"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":2616,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2641,"sourceUnit":2596,"src":"137:24:10","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2618,"name":"IERC721","nameLocations":["326:7:10"],"nodeType":"IdentifierPath","referencedDeclaration":2595,"src":"326:7:10"},"id":2619,"nodeType":"InheritanceSpecifier","src":"326:7:10"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":2617,"nodeType":"StructuredDocumentation","src":"163:133:10","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":2640,"linearizedBaseContracts":[2640,2595,4260],"name":"IERC721Metadata","nameLocation":"307:15:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2620,"nodeType":"StructuredDocumentation","src":"340:58:10","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":2625,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"412:4:10","nodeType":"FunctionDefinition","parameters":{"id":2621,"nodeType":"ParameterList","parameters":[],"src":"416:2:10"},"returnParameters":{"id":2624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2623,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2625,"src":"442:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2622,"name":"string","nodeType":"ElementaryTypeName","src":"442:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"441:15:10"},"scope":2640,"src":"403:54:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2626,"nodeType":"StructuredDocumentation","src":"463:60:10","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":2631,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"537:6:10","nodeType":"FunctionDefinition","parameters":{"id":2627,"nodeType":"ParameterList","parameters":[],"src":"543:2:10"},"returnParameters":{"id":2630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2629,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2631,"src":"569:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2628,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"568:15:10"},"scope":2640,"src":"528:56:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2632,"nodeType":"StructuredDocumentation","src":"590:90:10","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":2639,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"694:8:10","nodeType":"FunctionDefinition","parameters":{"id":2635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2634,"mutability":"mutable","name":"tokenId","nameLocation":"711:7:10","nodeType":"VariableDeclaration","scope":2639,"src":"703:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2633,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"702:17:10"},"returnParameters":{"id":2638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2637,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2639,"src":"743:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2636,"name":"string","nodeType":"ElementaryTypeName","src":"743:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"742:15:10"},"scope":2640,"src":"685:73:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2641,"src":"297:463:10","usedErrors":[]}],"src":"112:649:10"},"id":10},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[2970]},"id":2971,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2642,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":2643,"nodeType":"StructuredDocumentation","src":"126:67:11","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":2970,"linearizedBaseContracts":[2970],"name":"Address","nameLocation":"202:7:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":2657,"nodeType":"Block","src":"1478:254:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2651,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"1702:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:11","memberName":"code","nodeType":"MemberAccess","src":"1702:12:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:11","memberName":"length","nodeType":"MemberAccess","src":"1702:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2650,"id":2656,"nodeType":"Return","src":"1695:30:11"}]},"documentation":{"id":2644,"nodeType":"StructuredDocumentation","src":"216:1191:11","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":2658,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:11","nodeType":"FunctionDefinition","parameters":{"id":2647,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2646,"mutability":"mutable","name":"account","nameLocation":"1440:7:11","nodeType":"VariableDeclaration","scope":2658,"src":"1432:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2645,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:11"},"returnParameters":{"id":2650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2649,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2658,"src":"1472:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2648,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:11"},"scope":2970,"src":"1412:320:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2691,"nodeType":"Block","src":"2718:241:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2669,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2970","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2970","typeString":"library Address"}],"id":2668,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2667,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:11","typeDescriptions":{}}},"id":2670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:11","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2672,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"2761:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":2674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":2666,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2676,"nodeType":"ExpressionStatement","src":"2728:73:11"},{"assignments":[2678,null],"declarations":[{"constant":false,"id":2678,"mutability":"mutable","name":"success","nameLocation":"2818:7:11","nodeType":"VariableDeclaration","scope":2691,"src":"2813:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2677,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":2685,"initialValue":{"arguments":[{"hexValue":"","id":2683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2679,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2661,"src":"2831:9:11","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:11","memberName":"call","nodeType":"MemberAccess","src":"2831:14:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2681,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"2853:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:11"},{"expression":{"arguments":[{"id":2687,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"2882:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":2688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":2686,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2690,"nodeType":"ExpressionStatement","src":"2874:78:11"}]},"documentation":{"id":2659,"nodeType":"StructuredDocumentation","src":"1738:904:11","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":2692,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:11","nodeType":"FunctionDefinition","parameters":{"id":2664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2661,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:11","nodeType":"VariableDeclaration","scope":2692,"src":"2666:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2660,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:11","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2663,"mutability":"mutable","name":"amount","nameLocation":"2701:6:11","nodeType":"VariableDeclaration","scope":2692,"src":"2693:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2662,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:11"},"returnParameters":{"id":2665,"nodeType":"ParameterList","parameters":[],"src":"2718:0:11"},"scope":2970,"src":"2647:312:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2709,"nodeType":"Block","src":"3790:96:11","statements":[{"expression":{"arguments":[{"id":2703,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"3829:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2704,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"3837:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":2706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":2702,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2750,2794],"referencedDeclaration":2794,"src":"3807:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2701,"id":2708,"nodeType":"Return","src":"3800:79:11"}]},"documentation":{"id":2693,"nodeType":"StructuredDocumentation","src":"2965:731:11","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":2710,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:11","nodeType":"FunctionDefinition","parameters":{"id":2698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2695,"mutability":"mutable","name":"target","nameLocation":"3731:6:11","nodeType":"VariableDeclaration","scope":2710,"src":"3723:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2694,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2697,"mutability":"mutable","name":"data","nameLocation":"3752:4:11","nodeType":"VariableDeclaration","scope":2710,"src":"3739:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2696,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:11"},"returnParameters":{"id":2701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2700,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2710,"src":"3776:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2699,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:11"},"scope":2970,"src":"3701:185:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2729,"nodeType":"Block","src":"4255:76:11","statements":[{"expression":{"arguments":[{"id":2723,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2713,"src":"4294:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2724,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"4302:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2726,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2717,"src":"4311:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2722,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2750,2794],"referencedDeclaration":2794,"src":"4272:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2721,"id":2728,"nodeType":"Return","src":"4265:59:11"}]},"documentation":{"id":2711,"nodeType":"StructuredDocumentation","src":"3892:211:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2730,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:11","nodeType":"FunctionDefinition","parameters":{"id":2718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2713,"mutability":"mutable","name":"target","nameLocation":"4147:6:11","nodeType":"VariableDeclaration","scope":2730,"src":"4139:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2712,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2715,"mutability":"mutable","name":"data","nameLocation":"4176:4:11","nodeType":"VariableDeclaration","scope":2730,"src":"4163:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2714,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2717,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:11","nodeType":"VariableDeclaration","scope":2730,"src":"4190:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2716,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:11"},"returnParameters":{"id":2721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2720,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2730,"src":"4241:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2719,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:11"},"scope":2970,"src":"4108:223:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2749,"nodeType":"Block","src":"4806:111:11","statements":[{"expression":{"arguments":[{"id":2743,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"4845:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2744,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2735,"src":"4853:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2745,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2737,"src":"4859:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":2746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":2742,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2750,2794],"referencedDeclaration":2794,"src":"4823:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2741,"id":2748,"nodeType":"Return","src":"4816:94:11"}]},"documentation":{"id":2731,"nodeType":"StructuredDocumentation","src":"4337:351:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":2750,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:11","nodeType":"FunctionDefinition","parameters":{"id":2738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2733,"mutability":"mutable","name":"target","nameLocation":"4732:6:11","nodeType":"VariableDeclaration","scope":2750,"src":"4724:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2732,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2735,"mutability":"mutable","name":"data","nameLocation":"4753:4:11","nodeType":"VariableDeclaration","scope":2750,"src":"4740:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2734,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2737,"mutability":"mutable","name":"value","nameLocation":"4767:5:11","nodeType":"VariableDeclaration","scope":2750,"src":"4759:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2736,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:11"},"returnParameters":{"id":2741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2740,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2750,"src":"4792:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2739,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:11"},"scope":2970,"src":"4693:224:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2793,"nodeType":"Block","src":"5344:267:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2767,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2970","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2970","typeString":"library Address"}],"id":2766,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2765,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:11","typeDescriptions":{}}},"id":2768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:11","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2770,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2757,"src":"5387:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":2772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":2764,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2774,"nodeType":"ExpressionStatement","src":"5354:81:11"},{"assignments":[2776,2778],"declarations":[{"constant":false,"id":2776,"mutability":"mutable","name":"success","nameLocation":"5451:7:11","nodeType":"VariableDeclaration","scope":2793,"src":"5446:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2775,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2778,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:11","nodeType":"VariableDeclaration","scope":2793,"src":"5460:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2777,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2785,"initialValue":{"arguments":[{"id":2783,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2755,"src":"5513:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2779,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2753,"src":"5487:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:11","memberName":"call","nodeType":"MemberAccess","src":"5487:11:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2781,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2757,"src":"5506:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:11"},{"expression":{"arguments":[{"id":2787,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2753,"src":"5562:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2788,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"5570:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2789,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2778,"src":"5579:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2790,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2759,"src":"5591:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2786,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"5535:26:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2763,"id":2792,"nodeType":"Return","src":"5528:76:11"}]},"documentation":{"id":2751,"nodeType":"StructuredDocumentation","src":"4923:237:11","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2794,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:11","nodeType":"FunctionDefinition","parameters":{"id":2760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2753,"mutability":"mutable","name":"target","nameLocation":"5213:6:11","nodeType":"VariableDeclaration","scope":2794,"src":"5205:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2752,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2755,"mutability":"mutable","name":"data","nameLocation":"5242:4:11","nodeType":"VariableDeclaration","scope":2794,"src":"5229:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2754,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2757,"mutability":"mutable","name":"value","nameLocation":"5264:5:11","nodeType":"VariableDeclaration","scope":2794,"src":"5256:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2756,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2759,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:11","nodeType":"VariableDeclaration","scope":2794,"src":"5279:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2758,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:11"},"returnParameters":{"id":2763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2762,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2794,"src":"5330:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2761,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:11"},"scope":2970,"src":"5165:446:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2810,"nodeType":"Block","src":"5888:97:11","statements":[{"expression":{"arguments":[{"id":2805,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2797,"src":"5924:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2806,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2799,"src":"5932:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":2807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":2804,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[2811,2840],"referencedDeclaration":2840,"src":"5905:18:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":2808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2803,"id":2809,"nodeType":"Return","src":"5898:80:11"}]},"documentation":{"id":2795,"nodeType":"StructuredDocumentation","src":"5617:166:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2811,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:11","nodeType":"FunctionDefinition","parameters":{"id":2800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2797,"mutability":"mutable","name":"target","nameLocation":"5824:6:11","nodeType":"VariableDeclaration","scope":2811,"src":"5816:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2796,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2799,"mutability":"mutable","name":"data","nameLocation":"5845:4:11","nodeType":"VariableDeclaration","scope":2811,"src":"5832:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2798,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:11"},"returnParameters":{"id":2803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2802,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2811,"src":"5874:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2801,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:11"},"scope":2970,"src":"5788:197:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2839,"nodeType":"Block","src":"6327:168:11","statements":[{"assignments":[2824,2826],"declarations":[{"constant":false,"id":2824,"mutability":"mutable","name":"success","nameLocation":"6343:7:11","nodeType":"VariableDeclaration","scope":2839,"src":"6338:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2823,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2826,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:11","nodeType":"VariableDeclaration","scope":2839,"src":"6352:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2825,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2831,"initialValue":{"arguments":[{"id":2829,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"6397:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2827,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"6379:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:11","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:11","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":2830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:11"},{"expression":{"arguments":[{"id":2833,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2814,"src":"6446:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2834,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2824,"src":"6454:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2835,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2826,"src":"6463:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2836,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2818,"src":"6475:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2832,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"6419:26:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2822,"id":2838,"nodeType":"Return","src":"6412:76:11"}]},"documentation":{"id":2812,"nodeType":"StructuredDocumentation","src":"5991:173:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2840,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:11","nodeType":"FunctionDefinition","parameters":{"id":2819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2814,"mutability":"mutable","name":"target","nameLocation":"6214:6:11","nodeType":"VariableDeclaration","scope":2840,"src":"6206:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2813,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2816,"mutability":"mutable","name":"data","nameLocation":"6243:4:11","nodeType":"VariableDeclaration","scope":2840,"src":"6230:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2815,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2818,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:11","nodeType":"VariableDeclaration","scope":2840,"src":"6257:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2817,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:11"},"returnParameters":{"id":2822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2821,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2840,"src":"6313:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2820,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:11"},"scope":2970,"src":"6169:326:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2856,"nodeType":"Block","src":"6771:101:11","statements":[{"expression":{"arguments":[{"id":2851,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"6809:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2852,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"6817:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":2853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":2850,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[2857,2886],"referencedDeclaration":2886,"src":"6788:20:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":2854,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2849,"id":2855,"nodeType":"Return","src":"6781:84:11"}]},"documentation":{"id":2841,"nodeType":"StructuredDocumentation","src":"6501:168:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":2857,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:11","nodeType":"FunctionDefinition","parameters":{"id":2846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2843,"mutability":"mutable","name":"target","nameLocation":"6712:6:11","nodeType":"VariableDeclaration","scope":2857,"src":"6704:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2842,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2845,"mutability":"mutable","name":"data","nameLocation":"6733:4:11","nodeType":"VariableDeclaration","scope":2857,"src":"6720:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2844,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:11"},"returnParameters":{"id":2849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2848,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2857,"src":"6757:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2847,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:11"},"scope":2970,"src":"6674:198:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2885,"nodeType":"Block","src":"7213:170:11","statements":[{"assignments":[2870,2872],"declarations":[{"constant":false,"id":2870,"mutability":"mutable","name":"success","nameLocation":"7229:7:11","nodeType":"VariableDeclaration","scope":2885,"src":"7224:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2869,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2872,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:11","nodeType":"VariableDeclaration","scope":2885,"src":"7238:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2871,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2877,"initialValue":{"arguments":[{"id":2875,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2862,"src":"7285:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2873,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2860,"src":"7265:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:11","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:11","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:11"},{"expression":{"arguments":[{"id":2879,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2860,"src":"7334:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2880,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2870,"src":"7342:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2881,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2872,"src":"7351:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2882,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"7363:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2878,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"7307:26:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2868,"id":2884,"nodeType":"Return","src":"7300:76:11"}]},"documentation":{"id":2858,"nodeType":"StructuredDocumentation","src":"6878:175:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":2886,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:11","nodeType":"FunctionDefinition","parameters":{"id":2865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2860,"mutability":"mutable","name":"target","nameLocation":"7105:6:11","nodeType":"VariableDeclaration","scope":2886,"src":"7097:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2859,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2862,"mutability":"mutable","name":"data","nameLocation":"7134:4:11","nodeType":"VariableDeclaration","scope":2886,"src":"7121:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2861,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2864,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:11","nodeType":"VariableDeclaration","scope":2886,"src":"7148:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2863,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:11"},"returnParameters":{"id":2868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2867,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2886,"src":"7199:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2866,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:11"},"scope":2970,"src":"7058:325:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2924,"nodeType":"Block","src":"7865:434:11","statements":[{"condition":{"id":2900,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2891,"src":"7879:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2922,"nodeType":"Block","src":"8235:58:11","statements":[{"expression":{"arguments":[{"id":2918,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"8257:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2919,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2895,"src":"8269:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2917,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2969,"src":"8249:7:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2921,"nodeType":"ExpressionStatement","src":"8249:33:11"}]},"id":2923,"nodeType":"IfStatement","src":"7875:418:11","trueBody":{"id":2916,"nodeType":"Block","src":"7888:341:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2901,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"7906:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:11","memberName":"length","nodeType":"MemberAccess","src":"7906:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2913,"nodeType":"IfStatement","src":"7902:286:11","trueBody":{"id":2912,"nodeType":"Block","src":"7930:258:11","statements":[{"expression":{"arguments":[{"arguments":[{"id":2907,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"8132:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2906,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2658,"src":"8121:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":2909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":2905,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2911,"nodeType":"ExpressionStatement","src":"8113:60:11"}]}},{"expression":{"id":2914,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"8208:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2899,"id":2915,"nodeType":"Return","src":"8201:17:11"}]}}]},"documentation":{"id":2887,"nodeType":"StructuredDocumentation","src":"7389:277:11","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":2925,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:11","nodeType":"FunctionDefinition","parameters":{"id":2896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2889,"mutability":"mutable","name":"target","nameLocation":"7724:6:11","nodeType":"VariableDeclaration","scope":2925,"src":"7716:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2888,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2891,"mutability":"mutable","name":"success","nameLocation":"7745:7:11","nodeType":"VariableDeclaration","scope":2925,"src":"7740:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2890,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2893,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:11","nodeType":"VariableDeclaration","scope":2925,"src":"7762:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2892,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2895,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:11","nodeType":"VariableDeclaration","scope":2925,"src":"7795:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2894,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:11"},"returnParameters":{"id":2899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2898,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2925,"src":"7851:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2897,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:11"},"scope":2970,"src":"7671:628:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2948,"nodeType":"Block","src":"8680:135:11","statements":[{"condition":{"id":2937,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"8694:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2946,"nodeType":"Block","src":"8751:58:11","statements":[{"expression":{"arguments":[{"id":2942,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2930,"src":"8773:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2943,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"8785:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2941,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2969,"src":"8765:7:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2945,"nodeType":"ExpressionStatement","src":"8765:33:11"}]},"id":2947,"nodeType":"IfStatement","src":"8690:119:11","trueBody":{"id":2940,"nodeType":"Block","src":"8703:42:11","statements":[{"expression":{"id":2938,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2930,"src":"8724:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2936,"id":2939,"nodeType":"Return","src":"8717:17:11"}]}}]},"documentation":{"id":2926,"nodeType":"StructuredDocumentation","src":"8305:210:11","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":2949,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:11","nodeType":"FunctionDefinition","parameters":{"id":2933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2928,"mutability":"mutable","name":"success","nameLocation":"8560:7:11","nodeType":"VariableDeclaration","scope":2949,"src":"8555:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2927,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2930,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:11","nodeType":"VariableDeclaration","scope":2949,"src":"8577:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2929,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2932,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:11","nodeType":"VariableDeclaration","scope":2949,"src":"8610:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2931,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:11"},"returnParameters":{"id":2936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2935,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2949,"src":"8666:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2934,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:11"},"scope":2970,"src":"8520:295:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2968,"nodeType":"Block","src":"8904:457:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2956,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2951,"src":"8980:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:11","memberName":"length","nodeType":"MemberAccess","src":"8980:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2966,"nodeType":"Block","src":"9310:45:11","statements":[{"expression":{"arguments":[{"id":2963,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"9331:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2962,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:11","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2965,"nodeType":"ExpressionStatement","src":"9324:20:11"}]},"id":2967,"nodeType":"IfStatement","src":"8976:379:11","trueBody":{"id":2961,"nodeType":"Block","src":"9003:301:11","statements":[{"AST":{"nodeType":"YulBlock","src":"9161:133:11","statements":[{"nodeType":"YulVariableDeclaration","src":"9179:40:11","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9208:10:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9202:5:11"},"nodeType":"YulFunctionCall","src":"9202:17:11"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9183:15:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9247:2:11","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9251:10:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9243:3:11"},"nodeType":"YulFunctionCall","src":"9243:19:11"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9264:15:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9236:6:11"},"nodeType":"YulFunctionCall","src":"9236:44:11"},"nodeType":"YulExpressionStatement","src":"9236:44:11"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2951,"isOffset":false,"isSlot":false,"src":"9208:10:11","valueSize":1},{"declaration":2951,"isOffset":false,"isSlot":false,"src":"9251:10:11","valueSize":1}],"id":2960,"nodeType":"InlineAssembly","src":"9152:142:11"}]}}]},"id":2969,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:11","nodeType":"FunctionDefinition","parameters":{"id":2954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2951,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:11","nodeType":"VariableDeclaration","scope":2969,"src":"8838:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2950,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2953,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:11","nodeType":"VariableDeclaration","scope":2969,"src":"8863:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2952,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:11"},"returnParameters":{"id":2955,"nodeType":"ParameterList","parameters":[],"src":"8904:0:11"},"scope":2970,"src":"8821:540:11","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2971,"src":"194:9169:11","usedErrors":[]}],"src":"101:9263:11"},"id":11},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[3000]},"id":3001,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2972,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:12"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":2973,"nodeType":"StructuredDocumentation","src":"126:496:12","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":3000,"linearizedBaseContracts":[3000],"name":"Context","nameLocation":"641:7:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":2981,"nodeType":"Block","src":"717:34:12","statements":[{"expression":{"expression":{"id":2978,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"734:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"738:6:12","memberName":"sender","nodeType":"MemberAccess","src":"734:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2977,"id":2980,"nodeType":"Return","src":"727:17:12"}]},"id":2982,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"664:10:12","nodeType":"FunctionDefinition","parameters":{"id":2974,"nodeType":"ParameterList","parameters":[],"src":"674:2:12"},"returnParameters":{"id":2977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2976,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2982,"src":"708:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2975,"name":"address","nodeType":"ElementaryTypeName","src":"708:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"707:9:12"},"scope":3000,"src":"655:96:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2990,"nodeType":"Block","src":"824:32:12","statements":[{"expression":{"expression":{"id":2987,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"841:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"845:4:12","memberName":"data","nodeType":"MemberAccess","src":"841:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2986,"id":2989,"nodeType":"Return","src":"834:15:12"}]},"id":2991,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"766:8:12","nodeType":"FunctionDefinition","parameters":{"id":2983,"nodeType":"ParameterList","parameters":[],"src":"774:2:12"},"returnParameters":{"id":2986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2985,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2991,"src":"808:14:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2984,"name":"bytes","nodeType":"ElementaryTypeName","src":"808:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"807:16:12"},"scope":3000,"src":"757:99:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2998,"nodeType":"Block","src":"934:25:12","statements":[{"expression":{"hexValue":"30","id":2996,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"951:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2995,"id":2997,"nodeType":"Return","src":"944:8:12"}]},"id":2999,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"871:20:12","nodeType":"FunctionDefinition","parameters":{"id":2992,"nodeType":"ParameterList","parameters":[],"src":"891:2:12"},"returnParameters":{"id":2995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2994,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2999,"src":"925:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2993,"name":"uint256","nodeType":"ElementaryTypeName","src":"925:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"924:9:12"},"scope":3000,"src":"862:97:12","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":3001,"src":"623:338:12","usedErrors":[]}],"src":"101:861:12"},"id":12},"@openzeppelin/contracts/utils/ShortStrings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/ShortStrings.sol","exportedSymbols":{"ShortString":[3005],"ShortStrings":[3216],"StorageSlot":[3326]},"id":3217,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3002,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"106:23:13"},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"./StorageSlot.sol","id":3003,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3217,"sourceUnit":3327,"src":"131:27:13","symbolAliases":[],"unitAlias":""},{"canonicalName":"ShortString","id":3005,"name":"ShortString","nameLocation":"333:11:13","nodeType":"UserDefinedValueTypeDefinition","src":"328:28:13","underlyingType":{"id":3004,"name":"bytes32","nodeType":"ElementaryTypeName","src":"348:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"abstract":false,"baseContracts":[],"canonicalName":"ShortStrings","contractDependencies":[],"contractKind":"library","documentation":{"id":3006,"nodeType":"StructuredDocumentation","src":"358:876:13","text":" @dev This library provides functions to convert short memory strings\n into a `ShortString` type that can be used as an immutable variable.\n Strings of arbitrary length can be optimized using this library if\n they are short enough (up to 31 bytes) by packing them with their\n length (1 byte) in a single EVM word (32 bytes). Additionally, a\n fallback mechanism can be used for every other case.\n Usage example:\n ```solidity\n contract Named {\n     using ShortStrings for *;\n     ShortString private immutable _name;\n     string private _nameFallback;\n     constructor(string memory contractName) {\n         _name = contractName.toShortStringWithFallback(_nameFallback);\n     }\n     function name() external view returns (string memory) {\n         return _name.toStringWithFallback(_nameFallback);\n     }\n }\n ```"},"fullyImplemented":true,"id":3216,"linearizedBaseContracts":[3216],"name":"ShortStrings","nameLocation":"1243:12:13","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3009,"mutability":"constant","name":"_FALLBACK_SENTINEL","nameLocation":"1350:18:13","nodeType":"VariableDeclaration","scope":3216,"src":"1325:112:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3007,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1325:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030304646","id":3008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:66:13","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0x00000000000000000000000000000000000000000000000000000000000000FF"},"visibility":"private"},{"errorSelector":"305a27a9","id":3013,"name":"StringTooLong","nameLocation":"1450:13:13","nodeType":"ErrorDefinition","parameters":{"id":3012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3011,"mutability":"mutable","name":"str","nameLocation":"1471:3:13","nodeType":"VariableDeclaration","scope":3013,"src":"1464:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3010,"name":"string","nodeType":"ElementaryTypeName","src":"1464:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1463:12:13"},"src":"1444:32:13"},{"errorSelector":"b3512b0c","id":3015,"name":"InvalidShortString","nameLocation":"1487:18:13","nodeType":"ErrorDefinition","parameters":{"id":3014,"nodeType":"ParameterList","parameters":[],"src":"1505:2:13"},"src":"1481:27:13"},{"body":{"id":3058,"nodeType":"Block","src":"1767:208:13","statements":[{"assignments":[3025],"declarations":[{"constant":false,"id":3025,"mutability":"mutable","name":"bstr","nameLocation":"1790:4:13","nodeType":"VariableDeclaration","scope":3058,"src":"1777:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3024,"name":"bytes","nodeType":"ElementaryTypeName","src":"1777:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3030,"initialValue":{"arguments":[{"id":3028,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"1803:3:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3027,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1797:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3026,"name":"bytes","nodeType":"ElementaryTypeName","src":"1797:5:13","typeDescriptions":{}}},"id":3029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1797:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1777:30:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3031,"name":"bstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"1821:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1826:6:13","memberName":"length","nodeType":"MemberAccess","src":"1821:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3331","id":3033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1835:2:13","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"src":"1821:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3040,"nodeType":"IfStatement","src":"1817:72:13","trueBody":{"id":3039,"nodeType":"Block","src":"1839:50:13","statements":[{"errorCall":{"arguments":[{"id":3036,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"1874:3:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3035,"name":"StringTooLong","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"1860:13:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1860:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3038,"nodeType":"RevertStatement","src":"1853:25:13"}]}},{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":3049,"name":"bstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"1946:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3048,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1938:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3047,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1938:7:13","typeDescriptions":{}}},"id":3050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1938:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3046,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1930:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3045,"name":"uint256","nodeType":"ElementaryTypeName","src":"1930:7:13","typeDescriptions":{}}},"id":3051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1930:22:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"expression":{"id":3052,"name":"bstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"1955:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1960:6:13","memberName":"length","nodeType":"MemberAccess","src":"1955:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1930:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3044,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1922:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3043,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1922:7:13","typeDescriptions":{}}},"id":3055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1922:45:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3041,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"1905:11:13","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$3005_$","typeString":"type(ShortString)"}},"id":3042,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1917:4:13","memberName":"wrap","nodeType":"MemberAccess","src":"1905:16:13","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$3005_$","typeString":"function (bytes32) pure returns (ShortString)"}},"id":3056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1905:63:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}},"functionReturnParameters":3023,"id":3057,"nodeType":"Return","src":"1898:70:13"}]},"documentation":{"id":3016,"nodeType":"StructuredDocumentation","src":"1514:170:13","text":" @dev Encode a string of at most 31 chars into a `ShortString`.\n This will trigger a `StringTooLong` error is the input string is too long."},"id":3059,"implemented":true,"kind":"function","modifiers":[],"name":"toShortString","nameLocation":"1698:13:13","nodeType":"FunctionDefinition","parameters":{"id":3019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3018,"mutability":"mutable","name":"str","nameLocation":"1726:3:13","nodeType":"VariableDeclaration","scope":3059,"src":"1712:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3017,"name":"string","nodeType":"ElementaryTypeName","src":"1712:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1711:19:13"},"returnParameters":{"id":3023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3022,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3059,"src":"1754:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"},"typeName":{"id":3021,"nodeType":"UserDefinedTypeName","pathNode":{"id":3020,"name":"ShortString","nameLocations":["1754:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":3005,"src":"1754:11:13"},"referencedDeclaration":3005,"src":"1754:11:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}},"visibility":"internal"}],"src":"1753:13:13"},"scope":3216,"src":"1689:286:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3084,"nodeType":"Block","src":"2133:331:13","statements":[{"assignments":[3069],"declarations":[{"constant":false,"id":3069,"mutability":"mutable","name":"len","nameLocation":"2151:3:13","nodeType":"VariableDeclaration","scope":3084,"src":"2143:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3068,"name":"uint256","nodeType":"ElementaryTypeName","src":"2143:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3073,"initialValue":{"arguments":[{"id":3071,"name":"sstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"2168:4:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}],"id":3070,"name":"byteLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3117,"src":"2157:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$3005_$returns$_t_uint256_$","typeString":"function (ShortString) pure returns (uint256)"}},"id":3072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2157:16:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2143:30:13"},{"assignments":[3075],"declarations":[{"constant":false,"id":3075,"mutability":"mutable","name":"str","nameLocation":"2275:3:13","nodeType":"VariableDeclaration","scope":3084,"src":"2261:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3074,"name":"string","nodeType":"ElementaryTypeName","src":"2261:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":3080,"initialValue":{"arguments":[{"hexValue":"3332","id":3078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2292:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"id":3077,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2281:10:13","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":3076,"name":"string","nodeType":"ElementaryTypeName","src":"2285:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":3079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2281:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2261:34:13"},{"AST":{"nodeType":"YulBlock","src":"2357:81:13","statements":[{"expression":{"arguments":[{"name":"str","nodeType":"YulIdentifier","src":"2378:3:13"},{"name":"len","nodeType":"YulIdentifier","src":"2383:3:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2371:6:13"},"nodeType":"YulFunctionCall","src":"2371:16:13"},"nodeType":"YulExpressionStatement","src":"2371:16:13"},{"expression":{"arguments":[{"arguments":[{"name":"str","nodeType":"YulIdentifier","src":"2411:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"2416:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2407:3:13"},"nodeType":"YulFunctionCall","src":"2407:14:13"},{"name":"sstr","nodeType":"YulIdentifier","src":"2423:4:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2400:6:13"},"nodeType":"YulFunctionCall","src":"2400:28:13"},"nodeType":"YulExpressionStatement","src":"2400:28:13"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3069,"isOffset":false,"isSlot":false,"src":"2383:3:13","valueSize":1},{"declaration":3063,"isOffset":false,"isSlot":false,"src":"2423:4:13","valueSize":1},{"declaration":3075,"isOffset":false,"isSlot":false,"src":"2378:3:13","valueSize":1},{"declaration":3075,"isOffset":false,"isSlot":false,"src":"2411:3:13","valueSize":1}],"id":3081,"nodeType":"InlineAssembly","src":"2348:90:13"},{"expression":{"id":3082,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3075,"src":"2454:3:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3067,"id":3083,"nodeType":"Return","src":"2447:10:13"}]},"documentation":{"id":3060,"nodeType":"StructuredDocumentation","src":"1981:73:13","text":" @dev Decode a `ShortString` back to a \"normal\" string."},"id":3085,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"2068:8:13","nodeType":"FunctionDefinition","parameters":{"id":3064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3063,"mutability":"mutable","name":"sstr","nameLocation":"2089:4:13","nodeType":"VariableDeclaration","scope":3085,"src":"2077:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"},"typeName":{"id":3062,"nodeType":"UserDefinedTypeName","pathNode":{"id":3061,"name":"ShortString","nameLocations":["2077:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":3005,"src":"2077:11:13"},"referencedDeclaration":3005,"src":"2077:11:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}},"visibility":"internal"}],"src":"2076:18:13"},"returnParameters":{"id":3067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3066,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3085,"src":"2118:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3065,"name":"string","nodeType":"ElementaryTypeName","src":"2118:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2117:15:13"},"scope":3216,"src":"2059:405:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3116,"nodeType":"Block","src":"2606:175:13","statements":[{"assignments":[3095],"declarations":[{"constant":false,"id":3095,"mutability":"mutable","name":"result","nameLocation":"2624:6:13","nodeType":"VariableDeclaration","scope":3116,"src":"2616:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3094,"name":"uint256","nodeType":"ElementaryTypeName","src":"2616:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3105,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":3100,"name":"sstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"2660:4:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}],"expression":{"id":3098,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"2641:11:13","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$3005_$","typeString":"type(ShortString)"}},"id":3099,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2653:6:13","memberName":"unwrap","nodeType":"MemberAccess","src":"2641:18:13","typeDescriptions":{"typeIdentifier":"t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$3005_$returns$_t_bytes32_$","typeString":"function (ShortString) pure returns (bytes32)"}},"id":3101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2641:24:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3097,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2633:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3096,"name":"uint256","nodeType":"ElementaryTypeName","src":"2633:7:13","typeDescriptions":{}}},"id":3102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2633:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30784646","id":3103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2669:4:13","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xFF"},"src":"2633:40:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2616:57:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3106,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"2687:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3331","id":3107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2696:2:13","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"src":"2687:11:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3113,"nodeType":"IfStatement","src":"2683:69:13","trueBody":{"id":3112,"nodeType":"Block","src":"2700:52:13","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3109,"name":"InvalidShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"2721:18:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2721:20:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3111,"nodeType":"RevertStatement","src":"2714:27:13"}]}},{"expression":{"id":3114,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"2768:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3093,"id":3115,"nodeType":"Return","src":"2761:13:13"}]},"documentation":{"id":3086,"nodeType":"StructuredDocumentation","src":"2470:61:13","text":" @dev Return the length of a `ShortString`."},"id":3117,"implemented":true,"kind":"function","modifiers":[],"name":"byteLength","nameLocation":"2545:10:13","nodeType":"FunctionDefinition","parameters":{"id":3090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3089,"mutability":"mutable","name":"sstr","nameLocation":"2568:4:13","nodeType":"VariableDeclaration","scope":3117,"src":"2556:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"},"typeName":{"id":3088,"nodeType":"UserDefinedTypeName","pathNode":{"id":3087,"name":"ShortString","nameLocations":["2556:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":3005,"src":"2556:11:13"},"referencedDeclaration":3005,"src":"2556:11:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}},"visibility":"internal"}],"src":"2555:18:13"},"returnParameters":{"id":3093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3092,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3117,"src":"2597:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3091,"name":"uint256","nodeType":"ElementaryTypeName","src":"2597:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2596:9:13"},"scope":3216,"src":"2536:245:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3156,"nodeType":"Block","src":"3004:232:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3130,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3120,"src":"3024:5:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3129,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3018:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3128,"name":"bytes","nodeType":"ElementaryTypeName","src":"3018:5:13","typeDescriptions":{}}},"id":3131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3018:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3031:6:13","memberName":"length","nodeType":"MemberAccess","src":"3018:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3332","id":3133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3040:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3018:24:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3154,"nodeType":"Block","src":"3102:128:13","statements":[{"expression":{"id":3147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":3143,"name":"store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3122,"src":"3142:5:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}],"expression":{"id":3140,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3326,"src":"3116:11:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$3326_$","typeString":"type(library StorageSlot)"}},"id":3142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3128:13:13","memberName":"getStringSlot","nodeType":"MemberAccess","referencedDeclaration":3303,"src":"3116:25:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_storage_ptr_$returns$_t_struct$_StringSlot_$3234_storage_ptr_$","typeString":"function (string storage pointer) pure returns (struct StorageSlot.StringSlot storage pointer)"}},"id":3144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3116:32:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3234_storage_ptr","typeString":"struct StorageSlot.StringSlot storage pointer"}},"id":3145,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3149:5:13","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3233,"src":"3116:38:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3146,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3120,"src":"3157:5:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"3116:46:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3148,"nodeType":"ExpressionStatement","src":"3116:46:13"},{"expression":{"arguments":[{"id":3151,"name":"_FALLBACK_SENTINEL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3009,"src":"3200:18:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3149,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"3183:11:13","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$3005_$","typeString":"type(ShortString)"}},"id":3150,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3195:4:13","memberName":"wrap","nodeType":"MemberAccess","src":"3183:16:13","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$3005_$","typeString":"function (bytes32) pure returns (ShortString)"}},"id":3152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3183:36:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}},"functionReturnParameters":3127,"id":3153,"nodeType":"Return","src":"3176:43:13"}]},"id":3155,"nodeType":"IfStatement","src":"3014:216:13","trueBody":{"id":3139,"nodeType":"Block","src":"3044:52:13","statements":[{"expression":{"arguments":[{"id":3136,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3120,"src":"3079:5:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3135,"name":"toShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3059,"src":"3065:13:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_userDefinedValueType$_ShortString_$3005_$","typeString":"function (string memory) pure returns (ShortString)"}},"id":3137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3065:20:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}},"functionReturnParameters":3127,"id":3138,"nodeType":"Return","src":"3058:27:13"}]}}]},"documentation":{"id":3118,"nodeType":"StructuredDocumentation","src":"2787:103:13","text":" @dev Encode a string into a `ShortString`, or write it to storage if it is too long."},"id":3157,"implemented":true,"kind":"function","modifiers":[],"name":"toShortStringWithFallback","nameLocation":"2904:25:13","nodeType":"FunctionDefinition","parameters":{"id":3123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3120,"mutability":"mutable","name":"value","nameLocation":"2944:5:13","nodeType":"VariableDeclaration","scope":3157,"src":"2930:19:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3119,"name":"string","nodeType":"ElementaryTypeName","src":"2930:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3122,"mutability":"mutable","name":"store","nameLocation":"2966:5:13","nodeType":"VariableDeclaration","scope":3157,"src":"2951:20:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3121,"name":"string","nodeType":"ElementaryTypeName","src":"2951:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2929:43:13"},"returnParameters":{"id":3127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3126,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3157,"src":"2991:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"},"typeName":{"id":3125,"nodeType":"UserDefinedTypeName","pathNode":{"id":3124,"name":"ShortString","nameLocations":["2991:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":3005,"src":"2991:11:13"},"referencedDeclaration":3005,"src":"2991:11:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}},"visibility":"internal"}],"src":"2990:13:13"},"scope":3216,"src":"2895:341:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3183,"nodeType":"Block","src":"3476:159:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3170,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3161,"src":"3509:5:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}],"expression":{"id":3168,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"3490:11:13","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$3005_$","typeString":"type(ShortString)"}},"id":3169,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3502:6:13","memberName":"unwrap","nodeType":"MemberAccess","src":"3490:18:13","typeDescriptions":{"typeIdentifier":"t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$3005_$returns$_t_bytes32_$","typeString":"function (ShortString) pure returns (bytes32)"}},"id":3171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3490:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3172,"name":"_FALLBACK_SENTINEL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3009,"src":"3519:18:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3490:47:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3181,"nodeType":"Block","src":"3592:37:13","statements":[{"expression":{"id":3179,"name":"store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3163,"src":"3613:5:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}},"functionReturnParameters":3167,"id":3180,"nodeType":"Return","src":"3606:12:13"}]},"id":3182,"nodeType":"IfStatement","src":"3486:143:13","trueBody":{"id":3178,"nodeType":"Block","src":"3539:47:13","statements":[{"expression":{"arguments":[{"id":3175,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3161,"src":"3569:5:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}],"id":3174,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"3560:8:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$3005_$returns$_t_string_memory_ptr_$","typeString":"function (ShortString) pure returns (string memory)"}},"id":3176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3560:15:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3167,"id":3177,"nodeType":"Return","src":"3553:22:13"}]}}]},"documentation":{"id":3158,"nodeType":"StructuredDocumentation","src":"3242:120:13","text":" @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}."},"id":3184,"implemented":true,"kind":"function","modifiers":[],"name":"toStringWithFallback","nameLocation":"3376:20:13","nodeType":"FunctionDefinition","parameters":{"id":3164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3161,"mutability":"mutable","name":"value","nameLocation":"3409:5:13","nodeType":"VariableDeclaration","scope":3184,"src":"3397:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"},"typeName":{"id":3160,"nodeType":"UserDefinedTypeName","pathNode":{"id":3159,"name":"ShortString","nameLocations":["3397:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":3005,"src":"3397:11:13"},"referencedDeclaration":3005,"src":"3397:11:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}},"visibility":"internal"},{"constant":false,"id":3163,"mutability":"mutable","name":"store","nameLocation":"3431:5:13","nodeType":"VariableDeclaration","scope":3184,"src":"3416:20:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3162,"name":"string","nodeType":"ElementaryTypeName","src":"3416:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3396:41:13"},"returnParameters":{"id":3167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3166,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3184,"src":"3461:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3165,"name":"string","nodeType":"ElementaryTypeName","src":"3461:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3460:15:13"},"scope":3216,"src":"3367:268:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3214,"nodeType":"Block","src":"4108:175:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3197,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"4141:5:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}],"expression":{"id":3195,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"4122:11:13","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$3005_$","typeString":"type(ShortString)"}},"id":3196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4134:6:13","memberName":"unwrap","nodeType":"MemberAccess","src":"4122:18:13","typeDescriptions":{"typeIdentifier":"t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$3005_$returns$_t_bytes32_$","typeString":"function (ShortString) pure returns (bytes32)"}},"id":3198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4122:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3199,"name":"_FALLBACK_SENTINEL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3009,"src":"4151:18:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4122:47:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3212,"nodeType":"Block","src":"4226:51:13","statements":[{"expression":{"expression":{"arguments":[{"id":3208,"name":"store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3190,"src":"4253:5:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}],"id":3207,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4247:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3206,"name":"bytes","nodeType":"ElementaryTypeName","src":"4247:5:13","typeDescriptions":{}}},"id":3209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4247:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes storage pointer"}},"id":3210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4260:6:13","memberName":"length","nodeType":"MemberAccess","src":"4247:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3194,"id":3211,"nodeType":"Return","src":"4240:26:13"}]},"id":3213,"nodeType":"IfStatement","src":"4118:159:13","trueBody":{"id":3205,"nodeType":"Block","src":"4171:49:13","statements":[{"expression":{"arguments":[{"id":3202,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"4203:5:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}],"id":3201,"name":"byteLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3117,"src":"4192:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$3005_$returns$_t_uint256_$","typeString":"function (ShortString) pure returns (uint256)"}},"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4192:17:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3194,"id":3204,"nodeType":"Return","src":"4185:24:13"}]}}]},"documentation":{"id":3185,"nodeType":"StructuredDocumentation","src":"3641:357:13","text":" @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n actual characters as the UTF-8 encoding of a single character can span over multiple bytes."},"id":3215,"implemented":true,"kind":"function","modifiers":[],"name":"byteLengthWithFallback","nameLocation":"4012:22:13","nodeType":"FunctionDefinition","parameters":{"id":3191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3188,"mutability":"mutable","name":"value","nameLocation":"4047:5:13","nodeType":"VariableDeclaration","scope":3215,"src":"4035:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"},"typeName":{"id":3187,"nodeType":"UserDefinedTypeName","pathNode":{"id":3186,"name":"ShortString","nameLocations":["4035:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":3005,"src":"4035:11:13"},"referencedDeclaration":3005,"src":"4035:11:13","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}},"visibility":"internal"},{"constant":false,"id":3190,"mutability":"mutable","name":"store","nameLocation":"4069:5:13","nodeType":"VariableDeclaration","scope":3215,"src":"4054:20:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3189,"name":"string","nodeType":"ElementaryTypeName","src":"4054:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4034:41:13"},"returnParameters":{"id":3194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3193,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3215,"src":"4099:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3192,"name":"uint256","nodeType":"ElementaryTypeName","src":"4099:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4098:9:13"},"scope":3216,"src":"4003:280:13","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":3217,"src":"1235:3050:13","usedErrors":[3013,3015]}],"src":"106:4180:13"},"id":13},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[3326]},"id":3327,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3218,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"193:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":3219,"nodeType":"StructuredDocumentation","src":"218:1201:14","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"},"fullyImplemented":true,"id":3326,"linearizedBaseContracts":[3326],"name":"StorageSlot","nameLocation":"1428:11:14","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":3222,"members":[{"constant":false,"id":3221,"mutability":"mutable","name":"value","nameLocation":"1483:5:14","nodeType":"VariableDeclaration","scope":3222,"src":"1475:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3220,"name":"address","nodeType":"ElementaryTypeName","src":"1475:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1453:11:14","nodeType":"StructDefinition","scope":3326,"src":"1446:49:14","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":3225,"members":[{"constant":false,"id":3224,"mutability":"mutable","name":"value","nameLocation":"1535:5:14","nodeType":"VariableDeclaration","scope":3225,"src":"1530:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3223,"name":"bool","nodeType":"ElementaryTypeName","src":"1530:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1508:11:14","nodeType":"StructDefinition","scope":3326,"src":"1501:46:14","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":3228,"members":[{"constant":false,"id":3227,"mutability":"mutable","name":"value","nameLocation":"1590:5:14","nodeType":"VariableDeclaration","scope":3228,"src":"1582:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3226,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1582:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1560:11:14","nodeType":"StructDefinition","scope":3326,"src":"1553:49:14","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":3231,"members":[{"constant":false,"id":3230,"mutability":"mutable","name":"value","nameLocation":"1645:5:14","nodeType":"VariableDeclaration","scope":3231,"src":"1637:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3229,"name":"uint256","nodeType":"ElementaryTypeName","src":"1637:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1615:11:14","nodeType":"StructDefinition","scope":3326,"src":"1608:49:14","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":3234,"members":[{"constant":false,"id":3233,"mutability":"mutable","name":"value","nameLocation":"1698:5:14","nodeType":"VariableDeclaration","scope":3234,"src":"1691:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3232,"name":"string","nodeType":"ElementaryTypeName","src":"1691:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1670:10:14","nodeType":"StructDefinition","scope":3326,"src":"1663:47:14","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":3237,"members":[{"constant":false,"id":3236,"mutability":"mutable","name":"value","nameLocation":"1749:5:14","nodeType":"VariableDeclaration","scope":3237,"src":"1743:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3235,"name":"bytes","nodeType":"ElementaryTypeName","src":"1743:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1723:9:14","nodeType":"StructDefinition","scope":3326,"src":"1716:45:14","visibility":"public"},{"body":{"id":3247,"nodeType":"Block","src":"1943:106:14","statements":[{"AST":{"nodeType":"YulBlock","src":"2005:38:14","statements":[{"nodeType":"YulAssignment","src":"2019:14:14","value":{"name":"slot","nodeType":"YulIdentifier","src":"2029:4:14"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2019:6:14"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3244,"isOffset":false,"isSlot":true,"src":"2019:6:14","suffix":"slot","valueSize":1},{"declaration":3240,"isOffset":false,"isSlot":false,"src":"2029:4:14","valueSize":1}],"id":3246,"nodeType":"InlineAssembly","src":"1996:47:14"}]},"documentation":{"id":3238,"nodeType":"StructuredDocumentation","src":"1767:87:14","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":3248,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1868:14:14","nodeType":"FunctionDefinition","parameters":{"id":3241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3240,"mutability":"mutable","name":"slot","nameLocation":"1891:4:14","nodeType":"VariableDeclaration","scope":3248,"src":"1883:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3239,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1883:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1882:14:14"},"returnParameters":{"id":3245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3244,"mutability":"mutable","name":"r","nameLocation":"1940:1:14","nodeType":"VariableDeclaration","scope":3248,"src":"1920:21:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3222_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":3243,"nodeType":"UserDefinedTypeName","pathNode":{"id":3242,"name":"AddressSlot","nameLocations":["1920:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":3222,"src":"1920:11:14"},"referencedDeclaration":3222,"src":"1920:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3222_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1919:23:14"},"scope":3326,"src":"1859:190:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3258,"nodeType":"Block","src":"2231:106:14","statements":[{"AST":{"nodeType":"YulBlock","src":"2293:38:14","statements":[{"nodeType":"YulAssignment","src":"2307:14:14","value":{"name":"slot","nodeType":"YulIdentifier","src":"2317:4:14"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2307:6:14"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3255,"isOffset":false,"isSlot":true,"src":"2307:6:14","suffix":"slot","valueSize":1},{"declaration":3251,"isOffset":false,"isSlot":false,"src":"2317:4:14","valueSize":1}],"id":3257,"nodeType":"InlineAssembly","src":"2284:47:14"}]},"documentation":{"id":3249,"nodeType":"StructuredDocumentation","src":"2055:87:14","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":3259,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2156:14:14","nodeType":"FunctionDefinition","parameters":{"id":3252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3251,"mutability":"mutable","name":"slot","nameLocation":"2179:4:14","nodeType":"VariableDeclaration","scope":3259,"src":"2171:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3250,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2171:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2170:14:14"},"returnParameters":{"id":3256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3255,"mutability":"mutable","name":"r","nameLocation":"2228:1:14","nodeType":"VariableDeclaration","scope":3259,"src":"2208:21:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$3225_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":3254,"nodeType":"UserDefinedTypeName","pathNode":{"id":3253,"name":"BooleanSlot","nameLocations":["2208:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":3225,"src":"2208:11:14"},"referencedDeclaration":3225,"src":"2208:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$3225_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2207:23:14"},"scope":3326,"src":"2147:190:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3269,"nodeType":"Block","src":"2519:106:14","statements":[{"AST":{"nodeType":"YulBlock","src":"2581:38:14","statements":[{"nodeType":"YulAssignment","src":"2595:14:14","value":{"name":"slot","nodeType":"YulIdentifier","src":"2605:4:14"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2595:6:14"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3266,"isOffset":false,"isSlot":true,"src":"2595:6:14","suffix":"slot","valueSize":1},{"declaration":3262,"isOffset":false,"isSlot":false,"src":"2605:4:14","valueSize":1}],"id":3268,"nodeType":"InlineAssembly","src":"2572:47:14"}]},"documentation":{"id":3260,"nodeType":"StructuredDocumentation","src":"2343:87:14","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":3270,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2444:14:14","nodeType":"FunctionDefinition","parameters":{"id":3263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3262,"mutability":"mutable","name":"slot","nameLocation":"2467:4:14","nodeType":"VariableDeclaration","scope":3270,"src":"2459:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3261,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2459:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2458:14:14"},"returnParameters":{"id":3267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3266,"mutability":"mutable","name":"r","nameLocation":"2516:1:14","nodeType":"VariableDeclaration","scope":3270,"src":"2496:21:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$3228_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":3265,"nodeType":"UserDefinedTypeName","pathNode":{"id":3264,"name":"Bytes32Slot","nameLocations":["2496:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":3228,"src":"2496:11:14"},"referencedDeclaration":3228,"src":"2496:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$3228_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2495:23:14"},"scope":3326,"src":"2435:190:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3280,"nodeType":"Block","src":"2807:106:14","statements":[{"AST":{"nodeType":"YulBlock","src":"2869:38:14","statements":[{"nodeType":"YulAssignment","src":"2883:14:14","value":{"name":"slot","nodeType":"YulIdentifier","src":"2893:4:14"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2883:6:14"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3277,"isOffset":false,"isSlot":true,"src":"2883:6:14","suffix":"slot","valueSize":1},{"declaration":3273,"isOffset":false,"isSlot":false,"src":"2893:4:14","valueSize":1}],"id":3279,"nodeType":"InlineAssembly","src":"2860:47:14"}]},"documentation":{"id":3271,"nodeType":"StructuredDocumentation","src":"2631:87:14","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":3281,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2732:14:14","nodeType":"FunctionDefinition","parameters":{"id":3274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3273,"mutability":"mutable","name":"slot","nameLocation":"2755:4:14","nodeType":"VariableDeclaration","scope":3281,"src":"2747:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3272,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2747:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2746:14:14"},"returnParameters":{"id":3278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3277,"mutability":"mutable","name":"r","nameLocation":"2804:1:14","nodeType":"VariableDeclaration","scope":3281,"src":"2784:21:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3231_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":3276,"nodeType":"UserDefinedTypeName","pathNode":{"id":3275,"name":"Uint256Slot","nameLocations":["2784:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":3231,"src":"2784:11:14"},"referencedDeclaration":3231,"src":"2784:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3231_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2783:23:14"},"scope":3326,"src":"2723:190:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3291,"nodeType":"Block","src":"3092:106:14","statements":[{"AST":{"nodeType":"YulBlock","src":"3154:38:14","statements":[{"nodeType":"YulAssignment","src":"3168:14:14","value":{"name":"slot","nodeType":"YulIdentifier","src":"3178:4:14"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3168:6:14"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3288,"isOffset":false,"isSlot":true,"src":"3168:6:14","suffix":"slot","valueSize":1},{"declaration":3284,"isOffset":false,"isSlot":false,"src":"3178:4:14","valueSize":1}],"id":3290,"nodeType":"InlineAssembly","src":"3145:47:14"}]},"documentation":{"id":3282,"nodeType":"StructuredDocumentation","src":"2919:86:14","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":3292,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3019:13:14","nodeType":"FunctionDefinition","parameters":{"id":3285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3284,"mutability":"mutable","name":"slot","nameLocation":"3041:4:14","nodeType":"VariableDeclaration","scope":3292,"src":"3033:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3283,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3033:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3032:14:14"},"returnParameters":{"id":3289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3288,"mutability":"mutable","name":"r","nameLocation":"3089:1:14","nodeType":"VariableDeclaration","scope":3292,"src":"3070:20:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3234_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":3287,"nodeType":"UserDefinedTypeName","pathNode":{"id":3286,"name":"StringSlot","nameLocations":["3070:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":3234,"src":"3070:10:14"},"referencedDeclaration":3234,"src":"3070:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3234_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3069:22:14"},"scope":3326,"src":"3010:188:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3302,"nodeType":"Block","src":"3400:112:14","statements":[{"AST":{"nodeType":"YulBlock","src":"3462:44:14","statements":[{"nodeType":"YulAssignment","src":"3476:20:14","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"3486:10:14"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3476:6:14"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3299,"isOffset":false,"isSlot":true,"src":"3476:6:14","suffix":"slot","valueSize":1},{"declaration":3295,"isOffset":false,"isSlot":true,"src":"3486:10:14","suffix":"slot","valueSize":1}],"id":3301,"nodeType":"InlineAssembly","src":"3453:53:14"}]},"documentation":{"id":3293,"nodeType":"StructuredDocumentation","src":"3204:101:14","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":3303,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3319:13:14","nodeType":"FunctionDefinition","parameters":{"id":3296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3295,"mutability":"mutable","name":"store","nameLocation":"3348:5:14","nodeType":"VariableDeclaration","scope":3303,"src":"3333:20:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3294,"name":"string","nodeType":"ElementaryTypeName","src":"3333:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3332:22:14"},"returnParameters":{"id":3300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3299,"mutability":"mutable","name":"r","nameLocation":"3397:1:14","nodeType":"VariableDeclaration","scope":3303,"src":"3378:20:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3234_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":3298,"nodeType":"UserDefinedTypeName","pathNode":{"id":3297,"name":"StringSlot","nameLocations":["3378:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":3234,"src":"3378:10:14"},"referencedDeclaration":3234,"src":"3378:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3234_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3377:22:14"},"scope":3326,"src":"3310:202:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3313,"nodeType":"Block","src":"3688:106:14","statements":[{"AST":{"nodeType":"YulBlock","src":"3750:38:14","statements":[{"nodeType":"YulAssignment","src":"3764:14:14","value":{"name":"slot","nodeType":"YulIdentifier","src":"3774:4:14"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3764:6:14"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3310,"isOffset":false,"isSlot":true,"src":"3764:6:14","suffix":"slot","valueSize":1},{"declaration":3306,"isOffset":false,"isSlot":false,"src":"3774:4:14","valueSize":1}],"id":3312,"nodeType":"InlineAssembly","src":"3741:47:14"}]},"documentation":{"id":3304,"nodeType":"StructuredDocumentation","src":"3518:85:14","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":3314,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3617:12:14","nodeType":"FunctionDefinition","parameters":{"id":3307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3306,"mutability":"mutable","name":"slot","nameLocation":"3638:4:14","nodeType":"VariableDeclaration","scope":3314,"src":"3630:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3305,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3630:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3629:14:14"},"returnParameters":{"id":3311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3310,"mutability":"mutable","name":"r","nameLocation":"3685:1:14","nodeType":"VariableDeclaration","scope":3314,"src":"3667:19:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3237_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":3309,"nodeType":"UserDefinedTypeName","pathNode":{"id":3308,"name":"BytesSlot","nameLocations":["3667:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":3237,"src":"3667:9:14"},"referencedDeclaration":3237,"src":"3667:9:14","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3237_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3666:21:14"},"scope":3326,"src":"3608:186:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3324,"nodeType":"Block","src":"3991:112:14","statements":[{"AST":{"nodeType":"YulBlock","src":"4053:44:14","statements":[{"nodeType":"YulAssignment","src":"4067:20:14","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"4077:10:14"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"4067:6:14"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3321,"isOffset":false,"isSlot":true,"src":"4067:6:14","suffix":"slot","valueSize":1},{"declaration":3317,"isOffset":false,"isSlot":true,"src":"4077:10:14","suffix":"slot","valueSize":1}],"id":3323,"nodeType":"InlineAssembly","src":"4044:53:14"}]},"documentation":{"id":3315,"nodeType":"StructuredDocumentation","src":"3800:99:14","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":3325,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3913:12:14","nodeType":"FunctionDefinition","parameters":{"id":3318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3317,"mutability":"mutable","name":"store","nameLocation":"3940:5:14","nodeType":"VariableDeclaration","scope":3325,"src":"3926:19:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3316,"name":"bytes","nodeType":"ElementaryTypeName","src":"3926:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3925:21:14"},"returnParameters":{"id":3322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3321,"mutability":"mutable","name":"r","nameLocation":"3988:1:14","nodeType":"VariableDeclaration","scope":3325,"src":"3970:19:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3237_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":3320,"nodeType":"UserDefinedTypeName","pathNode":{"id":3319,"name":"BytesSlot","nameLocations":["3970:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":3237,"src":"3970:9:14"},"referencedDeclaration":3237,"src":"3970:9:14","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3237_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3969:21:14"},"scope":3326,"src":"3904:199:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3327,"src":"1420:2685:14","usedErrors":[]}],"src":"193:3913:14"},"id":14},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[5126],"SignedMath":[5231],"Strings":[3555]},"id":3556,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3328,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:15"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":3329,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3556,"sourceUnit":5127,"src":"126:25:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":3330,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3556,"sourceUnit":5232,"src":"152:31:15","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":3331,"nodeType":"StructuredDocumentation","src":"185:34:15","text":" @dev String operations."},"fullyImplemented":true,"id":3555,"linearizedBaseContracts":[3555],"name":"Strings","nameLocation":"228:7:15","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3334,"mutability":"constant","name":"_SYMBOLS","nameLocation":"267:8:15","nodeType":"VariableDeclaration","scope":3555,"src":"242:54:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":3332,"name":"bytes16","nodeType":"ElementaryTypeName","src":"242:7:15","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":3333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"278:18:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":3337,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"325:15:15","nodeType":"VariableDeclaration","scope":3555,"src":"302:43:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3335,"name":"uint8","nodeType":"ElementaryTypeName","src":"302:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":3336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"343:2:15","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":3384,"nodeType":"Block","src":"518:625:15","statements":[{"id":3383,"nodeType":"UncheckedBlock","src":"528:609:15","statements":[{"assignments":[3346],"declarations":[{"constant":false,"id":3346,"mutability":"mutable","name":"length","nameLocation":"560:6:15","nodeType":"VariableDeclaration","scope":3383,"src":"552:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3345,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3353,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3349,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3340,"src":"580:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3347,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5126,"src":"569:4:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5126_$","typeString":"type(library Math)"}},"id":3348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"574:5:15","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":4963,"src":"569:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"569:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"589:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"569:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"552:38:15"},{"assignments":[3355],"declarations":[{"constant":false,"id":3355,"mutability":"mutable","name":"buffer","nameLocation":"618:6:15","nodeType":"VariableDeclaration","scope":3383,"src":"604:20:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3354,"name":"string","nodeType":"ElementaryTypeName","src":"604:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":3360,"initialValue":{"arguments":[{"id":3358,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3346,"src":"638:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3357,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"627:10:15","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":3356,"name":"string","nodeType":"ElementaryTypeName","src":"631:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":3359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"627:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"604:41:15"},{"assignments":[3362],"declarations":[{"constant":false,"id":3362,"mutability":"mutable","name":"ptr","nameLocation":"667:3:15","nodeType":"VariableDeclaration","scope":3383,"src":"659:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3361,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3363,"nodeType":"VariableDeclarationStatement","src":"659:11:15"},{"AST":{"nodeType":"YulBlock","src":"740:67:15","statements":[{"nodeType":"YulAssignment","src":"758:35:15","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"769:6:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"781:2:15","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:15"},"nodeType":"YulFunctionCall","src":"777:15:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"765:3:15"},"nodeType":"YulFunctionCall","src":"765:28:15"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"758:3:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3355,"isOffset":false,"isSlot":false,"src":"769:6:15","valueSize":1},{"declaration":3346,"isOffset":false,"isSlot":false,"src":"785:6:15","valueSize":1},{"declaration":3362,"isOffset":false,"isSlot":false,"src":"758:3:15","valueSize":1}],"id":3364,"nodeType":"InlineAssembly","src":"731:76:15"},{"body":{"id":3379,"nodeType":"Block","src":"833:267:15","statements":[{"expression":{"id":3367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"851:5:15","subExpression":{"id":3366,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3362,"src":"851:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3368,"nodeType":"ExpressionStatement","src":"851:5:15"},{"AST":{"nodeType":"YulBlock","src":"934:84:15","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"964:3:15"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"985:2:15","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"974:3:15"},"nodeType":"YulFunctionCall","src":"974:14:15"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"990:8:15"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"969:4:15"},"nodeType":"YulFunctionCall","src":"969:30:15"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"956:7:15"},"nodeType":"YulFunctionCall","src":"956:44:15"},"nodeType":"YulExpressionStatement","src":"956:44:15"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3334,"isOffset":false,"isSlot":false,"src":"990:8:15","valueSize":1},{"declaration":3362,"isOffset":false,"isSlot":false,"src":"964:3:15","valueSize":1},{"declaration":3340,"isOffset":false,"isSlot":false,"src":"978:5:15","valueSize":1}],"id":3369,"nodeType":"InlineAssembly","src":"925:93:15"},{"expression":{"id":3372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3370,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3340,"src":"1035:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":3371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1035:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3373,"nodeType":"ExpressionStatement","src":"1035:11:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3374,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3340,"src":"1068:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1068:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3378,"nodeType":"IfStatement","src":"1064:21:15","trueBody":{"id":3377,"nodeType":"Break","src":"1080:5:15"}}]},"condition":{"hexValue":"74727565","id":3365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":3380,"nodeType":"WhileStatement","src":"820:280:15"},{"expression":{"id":3381,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3355,"src":"1120:6:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3344,"id":3382,"nodeType":"Return","src":"1113:13:15"}]}]},"documentation":{"id":3338,"nodeType":"StructuredDocumentation","src":"352:90:15","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":3385,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"456:8:15","nodeType":"FunctionDefinition","parameters":{"id":3341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3340,"mutability":"mutable","name":"value","nameLocation":"473:5:15","nodeType":"VariableDeclaration","scope":3385,"src":"465:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3339,"name":"uint256","nodeType":"ElementaryTypeName","src":"465:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"464:15:15"},"returnParameters":{"id":3344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3343,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3385,"src":"503:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3342,"name":"string","nodeType":"ElementaryTypeName","src":"503:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"502:15:15"},"scope":3555,"src":"447:696:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3412,"nodeType":"Block","src":"1313:103:15","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3397,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"1354:5:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":3398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1354:9:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":3401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1372:2:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":3402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1354:20:15","trueExpression":{"hexValue":"2d","id":3400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1366:3:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":3406,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"1400:5:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":3404,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5231,"src":"1385:10:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$5231_$","typeString":"type(library SignedMath)"}},"id":3405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1396:3:15","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":5230,"src":"1385:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":3407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1385:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3403,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[3385,3413],"referencedDeclaration":3385,"src":"1376:8:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":3408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1376:31:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":3395,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1337:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3396,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1341:12:15","memberName":"encodePacked","nodeType":"MemberAccess","src":"1337:16:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1337:71:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3394,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1330:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3393,"name":"string","nodeType":"ElementaryTypeName","src":"1330:6:15","typeDescriptions":{}}},"id":3410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1330:79:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3392,"id":3411,"nodeType":"Return","src":"1323:86:15"}]},"documentation":{"id":3386,"nodeType":"StructuredDocumentation","src":"1149:89:15","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":3413,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1252:8:15","nodeType":"FunctionDefinition","parameters":{"id":3389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3388,"mutability":"mutable","name":"value","nameLocation":"1268:5:15","nodeType":"VariableDeclaration","scope":3413,"src":"1261:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3387,"name":"int256","nodeType":"ElementaryTypeName","src":"1261:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1260:14:15"},"returnParameters":{"id":3392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3391,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3413,"src":"1298:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3390,"name":"string","nodeType":"ElementaryTypeName","src":"1298:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1297:15:15"},"scope":3555,"src":"1243:173:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3432,"nodeType":"Block","src":"1595:100:15","statements":[{"id":3431,"nodeType":"UncheckedBlock","src":"1605:84:15","statements":[{"expression":{"arguments":[{"id":3422,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3416,"src":"1648:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3425,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3416,"src":"1667:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3423,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5126,"src":"1655:4:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5126_$","typeString":"type(library Math)"}},"id":3424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1660:6:15","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":5086,"src":"1655:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1655:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1676:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1655:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3421,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3433,3509,3529],"referencedDeclaration":3509,"src":"1636:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1636:42:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3420,"id":3430,"nodeType":"Return","src":"1629:49:15"}]}]},"documentation":{"id":3414,"nodeType":"StructuredDocumentation","src":"1422:94:15","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":3433,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1530:11:15","nodeType":"FunctionDefinition","parameters":{"id":3417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3416,"mutability":"mutable","name":"value","nameLocation":"1550:5:15","nodeType":"VariableDeclaration","scope":3433,"src":"1542:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3415,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1541:15:15"},"returnParameters":{"id":3420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3419,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3433,"src":"1580:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3418,"name":"string","nodeType":"ElementaryTypeName","src":"1580:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1579:15:15"},"scope":3555,"src":"1521:174:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3508,"nodeType":"Block","src":"1908:347:15","statements":[{"assignments":[3444],"declarations":[{"constant":false,"id":3444,"mutability":"mutable","name":"buffer","nameLocation":"1931:6:15","nodeType":"VariableDeclaration","scope":3508,"src":"1918:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3443,"name":"bytes","nodeType":"ElementaryTypeName","src":"1918:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3453,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3448,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3438,"src":"1954:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1950:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":3450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1963:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1950:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3446,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1940:9:15","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3445,"name":"bytes","nodeType":"ElementaryTypeName","src":"1944:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1940:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1918:47:15"},{"expression":{"id":3458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3454,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"1975:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3456,"indexExpression":{"hexValue":"30","id":3455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1982:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1975:9:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1987:3:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1975:15:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3459,"nodeType":"ExpressionStatement","src":"1975:15:15"},{"expression":{"id":3464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3460,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"2000:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3462,"indexExpression":{"hexValue":"31","id":3461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2000:9:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":3463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2012:3:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2000:15:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3465,"nodeType":"ExpressionStatement","src":"2000:15:15"},{"body":{"id":3494,"nodeType":"Block","src":"2070:83:15","statements":[{"expression":{"id":3488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3480,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"2084:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3482,"indexExpression":{"id":3481,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3467,"src":"2091:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2084:9:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3483,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3334,"src":"2096:8:15","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":3487,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3484,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"2105:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":3485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2113:3:15","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2105:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2096:21:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2084:33:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3489,"nodeType":"ExpressionStatement","src":"2084:33:15"},{"expression":{"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3490,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"2131:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2141:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2131:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3493,"nodeType":"ExpressionStatement","src":"2131:11:15"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3474,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3467,"src":"2058:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":3475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2062:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2058:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3495,"initializationExpression":{"assignments":[3467],"declarations":[{"constant":false,"id":3467,"mutability":"mutable","name":"i","nameLocation":"2038:1:15","nodeType":"VariableDeclaration","scope":3495,"src":"2030:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3466,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3473,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2042:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3469,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3438,"src":"2046:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2042:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2055:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2042:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2030:26:15"},"loopExpression":{"expression":{"id":3478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2065:3:15","subExpression":{"id":3477,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3467,"src":"2067:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3479,"nodeType":"ExpressionStatement","src":"2065:3:15"},"nodeType":"ForStatement","src":"2025:128:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3497,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"2170:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2170:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":3500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2182:34:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":3496,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2162:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2162:55:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3502,"nodeType":"ExpressionStatement","src":"2162:55:15"},{"expression":{"arguments":[{"id":3505,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"2241:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3504,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2234:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3503,"name":"string","nodeType":"ElementaryTypeName","src":"2234:6:15","typeDescriptions":{}}},"id":3506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2234:14:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3442,"id":3507,"nodeType":"Return","src":"2227:21:15"}]},"documentation":{"id":3434,"nodeType":"StructuredDocumentation","src":"1701:112:15","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":3509,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1827:11:15","nodeType":"FunctionDefinition","parameters":{"id":3439,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3436,"mutability":"mutable","name":"value","nameLocation":"1847:5:15","nodeType":"VariableDeclaration","scope":3509,"src":"1839:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3435,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3438,"mutability":"mutable","name":"length","nameLocation":"1862:6:15","nodeType":"VariableDeclaration","scope":3509,"src":"1854:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3437,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:31:15"},"returnParameters":{"id":3442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3441,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3509,"src":"1893:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3440,"name":"string","nodeType":"ElementaryTypeName","src":"1893:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1892:15:15"},"scope":3555,"src":"1818:437:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3528,"nodeType":"Block","src":"2480:76:15","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":3522,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3512,"src":"2525:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3521,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3520,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:15","typeDescriptions":{}}},"id":3523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3519,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3518,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:15","typeDescriptions":{}}},"id":3524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3525,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3337,"src":"2533:15:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":3517,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3433,3509,3529],"referencedDeclaration":3509,"src":"2497:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2497:52:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3516,"id":3527,"nodeType":"Return","src":"2490:59:15"}]},"documentation":{"id":3510,"nodeType":"StructuredDocumentation","src":"2261:141:15","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":3529,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2416:11:15","nodeType":"FunctionDefinition","parameters":{"id":3513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3512,"mutability":"mutable","name":"addr","nameLocation":"2436:4:15","nodeType":"VariableDeclaration","scope":3529,"src":"2428:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3511,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2427:14:15"},"returnParameters":{"id":3516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3515,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3529,"src":"2465:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3514,"name":"string","nodeType":"ElementaryTypeName","src":"2465:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2464:15:15"},"scope":3555,"src":"2407:149:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3553,"nodeType":"Block","src":"2711:66:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":3542,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"2744:1:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3541,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2738:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3540,"name":"bytes","nodeType":"ElementaryTypeName","src":"2738:5:15","typeDescriptions":{}}},"id":3543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2738:8:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3539,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2728:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":3548,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3534,"src":"2767:1:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3547,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2761:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3546,"name":"bytes","nodeType":"ElementaryTypeName","src":"2761:5:15","typeDescriptions":{}}},"id":3549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2761:8:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3545,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2751:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2751:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2728:42:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3538,"id":3552,"nodeType":"Return","src":"2721:49:15"}]},"documentation":{"id":3530,"nodeType":"StructuredDocumentation","src":"2562:66:15","text":" @dev Returns true if the two strings are equal."},"id":3554,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2642:5:15","nodeType":"FunctionDefinition","parameters":{"id":3535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3532,"mutability":"mutable","name":"a","nameLocation":"2662:1:15","nodeType":"VariableDeclaration","scope":3554,"src":"2648:15:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3531,"name":"string","nodeType":"ElementaryTypeName","src":"2648:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3534,"mutability":"mutable","name":"b","nameLocation":"2679:1:15","nodeType":"VariableDeclaration","scope":3554,"src":"2665:15:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3533,"name":"string","nodeType":"ElementaryTypeName","src":"2665:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2647:34:15"},"returnParameters":{"id":3538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3537,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3554,"src":"2705:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3536,"name":"bool","nodeType":"ElementaryTypeName","src":"2705:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2704:6:15"},"scope":3555,"src":"2633:144:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3556,"src":"220:2559:15","usedErrors":[]}],"src":"101:2679:15"},"id":15},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[3921],"Math":[5126],"SignedMath":[5231],"Strings":[3555]},"id":3922,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3557,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:16"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../Strings.sol","id":3558,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3922,"sourceUnit":3556,"src":"137:24:16","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":3559,"nodeType":"StructuredDocumentation","src":"163:205:16","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":3921,"linearizedBaseContracts":[3921],"name":"ECDSA","nameLocation":"377:5:16","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":3565,"members":[{"id":3560,"name":"NoError","nameLocation":"417:7:16","nodeType":"EnumValue","src":"417:7:16"},{"id":3561,"name":"InvalidSignature","nameLocation":"434:16:16","nodeType":"EnumValue","src":"434:16:16"},{"id":3562,"name":"InvalidSignatureLength","nameLocation":"460:22:16","nodeType":"EnumValue","src":"460:22:16"},{"id":3563,"name":"InvalidSignatureS","nameLocation":"492:17:16","nodeType":"EnumValue","src":"492:17:16"},{"id":3564,"name":"InvalidSignatureV","nameLocation":"519:17:16","nodeType":"EnumValue","src":"519:17:16"}],"name":"RecoverError","nameLocation":"394:12:16","nodeType":"EnumDefinition","src":"389:175:16"},{"body":{"id":3608,"nodeType":"Block","src":"624:457:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"},"id":3574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3571,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"638:5:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3572,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"647:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3565_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3573,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"660:7:16","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":3560,"src":"647:20:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}},"src":"638:29:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"},"id":3580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3577,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"734:5:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3578,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"743:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3565_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3579,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"756:16:16","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":3561,"src":"743:29:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}},"src":"734:38:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"},"id":3589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3586,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"843:5:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3587,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"852:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3565_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3588,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"865:22:16","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":3562,"src":"852:35:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}},"src":"843:44:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"},"id":3598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3595,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"965:5:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3596,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"974:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3565_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"987:17:16","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":3563,"src":"974:30:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}},"src":"965:39:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3604,"nodeType":"IfStatement","src":"961:114:16","trueBody":{"id":3603,"nodeType":"Block","src":"1006:69:16","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":3600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1027:36:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":3599,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1020:6:16","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1020:44:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3602,"nodeType":"ExpressionStatement","src":"1020:44:16"}]}},"id":3605,"nodeType":"IfStatement","src":"839:236:16","trueBody":{"id":3594,"nodeType":"Block","src":"889:66:16","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":3591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"910:33:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":3590,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"903:6:16","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"903:41:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3593,"nodeType":"ExpressionStatement","src":"903:41:16"}]}},"id":3606,"nodeType":"IfStatement","src":"730:345:16","trueBody":{"id":3585,"nodeType":"Block","src":"774:59:16","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":3582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"795:26:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":3581,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"788:6:16","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"788:34:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3584,"nodeType":"ExpressionStatement","src":"788:34:16"}]}},"id":3607,"nodeType":"IfStatement","src":"634:441:16","trueBody":{"id":3576,"nodeType":"Block","src":"669:55:16","statements":[{"functionReturnParameters":3570,"id":3575,"nodeType":"Return","src":"683:7:16"}]}}]},"id":3609,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"579:11:16","nodeType":"FunctionDefinition","parameters":{"id":3569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3568,"mutability":"mutable","name":"error","nameLocation":"604:5:16","nodeType":"VariableDeclaration","scope":3609,"src":"591:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3567,"nodeType":"UserDefinedTypeName","pathNode":{"id":3566,"name":"RecoverError","nameLocations":["591:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":3565,"src":"591:12:16"},"referencedDeclaration":3565,"src":"591:12:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"590:20:16"},"returnParameters":{"id":3570,"nodeType":"ParameterList","parameters":[],"src":"624:0:16"},"scope":3921,"src":"570:511:16","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":3654,"nodeType":"Block","src":"2249:626:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3622,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3614,"src":"2263:9:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2273:6:16","memberName":"length","nodeType":"MemberAccess","src":"2263:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":3624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2283:2:16","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2263:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3652,"nodeType":"Block","src":"2788:81:16","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2818:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3645,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2810:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3644,"name":"address","nodeType":"ElementaryTypeName","src":"2810:7:16","typeDescriptions":{}}},"id":3647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2810:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3648,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"2822:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3565_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3649,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2835:22:16","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":3562,"src":"2822:35:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}}],"id":3650,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2809:49:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3565_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":3621,"id":3651,"nodeType":"Return","src":"2802:56:16"}]},"id":3653,"nodeType":"IfStatement","src":"2259:610:16","trueBody":{"id":3643,"nodeType":"Block","src":"2287:495:16","statements":[{"assignments":[3627],"declarations":[{"constant":false,"id":3627,"mutability":"mutable","name":"r","nameLocation":"2309:1:16","nodeType":"VariableDeclaration","scope":3643,"src":"2301:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3626,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2301:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3628,"nodeType":"VariableDeclarationStatement","src":"2301:9:16"},{"assignments":[3630],"declarations":[{"constant":false,"id":3630,"mutability":"mutable","name":"s","nameLocation":"2332:1:16","nodeType":"VariableDeclaration","scope":3643,"src":"2324:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3629,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3631,"nodeType":"VariableDeclarationStatement","src":"2324:9:16"},{"assignments":[3633],"declarations":[{"constant":false,"id":3633,"mutability":"mutable","name":"v","nameLocation":"2353:1:16","nodeType":"VariableDeclaration","scope":3643,"src":"2347:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3632,"name":"uint8","nodeType":"ElementaryTypeName","src":"2347:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":3634,"nodeType":"VariableDeclarationStatement","src":"2347:7:16"},{"AST":{"nodeType":"YulBlock","src":"2555:171:16","statements":[{"nodeType":"YulAssignment","src":"2573:32:16","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2588:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"2599:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2584:3:16"},"nodeType":"YulFunctionCall","src":"2584:20:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2578:5:16"},"nodeType":"YulFunctionCall","src":"2578:27:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2573:1:16"}]},{"nodeType":"YulAssignment","src":"2622:32:16","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2637:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"2648:4:16","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2633:3:16"},"nodeType":"YulFunctionCall","src":"2633:20:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2627:5:16"},"nodeType":"YulFunctionCall","src":"2627:27:16"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2622:1:16"}]},{"nodeType":"YulAssignment","src":"2671:41:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2681:1:16","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2694:9:16"},{"kind":"number","nodeType":"YulLiteral","src":"2705:4:16","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2690:3:16"},"nodeType":"YulFunctionCall","src":"2690:20:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2684:5:16"},"nodeType":"YulFunctionCall","src":"2684:27:16"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2676:4:16"},"nodeType":"YulFunctionCall","src":"2676:36:16"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2671:1:16"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3627,"isOffset":false,"isSlot":false,"src":"2573:1:16","valueSize":1},{"declaration":3630,"isOffset":false,"isSlot":false,"src":"2622:1:16","valueSize":1},{"declaration":3614,"isOffset":false,"isSlot":false,"src":"2588:9:16","valueSize":1},{"declaration":3614,"isOffset":false,"isSlot":false,"src":"2637:9:16","valueSize":1},{"declaration":3614,"isOffset":false,"isSlot":false,"src":"2694:9:16","valueSize":1},{"declaration":3633,"isOffset":false,"isSlot":false,"src":"2671:1:16","valueSize":1}],"id":3635,"nodeType":"InlineAssembly","src":"2546:180:16"},{"expression":{"arguments":[{"id":3637,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"2757:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3638,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3633,"src":"2763:1:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3639,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"2766:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3640,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3630,"src":"2769:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3636,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3655,3729,3823],"referencedDeclaration":3823,"src":"2746:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3565_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":3641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2746:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3565_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":3621,"id":3642,"nodeType":"Return","src":"2739:32:16"}]}}]},"documentation":{"id":3610,"nodeType":"StructuredDocumentation","src":"1087:1053:16","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":3655,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2154:10:16","nodeType":"FunctionDefinition","parameters":{"id":3615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3612,"mutability":"mutable","name":"hash","nameLocation":"2173:4:16","nodeType":"VariableDeclaration","scope":3655,"src":"2165:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3611,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2165:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3614,"mutability":"mutable","name":"signature","nameLocation":"2192:9:16","nodeType":"VariableDeclaration","scope":3655,"src":"2179:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3613,"name":"bytes","nodeType":"ElementaryTypeName","src":"2179:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2164:38:16"},"returnParameters":{"id":3621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3617,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3655,"src":"2226:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3616,"name":"address","nodeType":"ElementaryTypeName","src":"2226:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3620,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3655,"src":"2235:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3619,"nodeType":"UserDefinedTypeName","pathNode":{"id":3618,"name":"RecoverError","nameLocations":["2235:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":3565,"src":"2235:12:16"},"referencedDeclaration":3565,"src":"2235:12:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"2225:23:16"},"scope":3921,"src":"2145:730:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3681,"nodeType":"Block","src":"3748:140:16","statements":[{"assignments":[3666,3669],"declarations":[{"constant":false,"id":3666,"mutability":"mutable","name":"recovered","nameLocation":"3767:9:16","nodeType":"VariableDeclaration","scope":3681,"src":"3759:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3665,"name":"address","nodeType":"ElementaryTypeName","src":"3759:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3669,"mutability":"mutable","name":"error","nameLocation":"3791:5:16","nodeType":"VariableDeclaration","scope":3681,"src":"3778:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3668,"nodeType":"UserDefinedTypeName","pathNode":{"id":3667,"name":"RecoverError","nameLocations":["3778:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":3565,"src":"3778:12:16"},"referencedDeclaration":3565,"src":"3778:12:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":3674,"initialValue":{"arguments":[{"id":3671,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3658,"src":"3811:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3672,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3660,"src":"3817:9:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3670,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3655,3729,3823],"referencedDeclaration":3655,"src":"3800:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$3565_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"}},"id":3673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3800:27:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3565_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3758:69:16"},{"expression":{"arguments":[{"id":3676,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3669,"src":"3849:5:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}],"id":3675,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3609,"src":"3837:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3565_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":3677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3837:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3678,"nodeType":"ExpressionStatement","src":"3837:18:16"},{"expression":{"id":3679,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3666,"src":"3872:9:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3664,"id":3680,"nodeType":"Return","src":"3865:16:16"}]},"documentation":{"id":3656,"nodeType":"StructuredDocumentation","src":"2881:775:16","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":3682,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3670:7:16","nodeType":"FunctionDefinition","parameters":{"id":3661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3658,"mutability":"mutable","name":"hash","nameLocation":"3686:4:16","nodeType":"VariableDeclaration","scope":3682,"src":"3678:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3657,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3678:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3660,"mutability":"mutable","name":"signature","nameLocation":"3705:9:16","nodeType":"VariableDeclaration","scope":3682,"src":"3692:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3659,"name":"bytes","nodeType":"ElementaryTypeName","src":"3692:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3677:38:16"},"returnParameters":{"id":3664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3663,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3682,"src":"3739:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3662,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3738:9:16"},"scope":3921,"src":"3661:227:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3728,"nodeType":"Block","src":"4245:203:16","statements":[{"assignments":[3698],"declarations":[{"constant":false,"id":3698,"mutability":"mutable","name":"s","nameLocation":"4263:1:16","nodeType":"VariableDeclaration","scope":3728,"src":"4255:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3697,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4255:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3705,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3699,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"4267:2:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":3702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4280:66:16","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":3701,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4272:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3700,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4272:7:16","typeDescriptions":{}}},"id":3703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:75:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4267:80:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4255:92:16"},{"assignments":[3707],"declarations":[{"constant":false,"id":3707,"mutability":"mutable","name":"v","nameLocation":"4363:1:16","nodeType":"VariableDeclaration","scope":3728,"src":"4357:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3706,"name":"uint8","nodeType":"ElementaryTypeName","src":"4357:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":3720,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3712,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"4382:2:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3711,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4374:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3710,"name":"uint256","nodeType":"ElementaryTypeName","src":"4374:7:16","typeDescriptions":{}}},"id":3713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4374:11:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":3714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4389:3:16","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4374:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3716,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4373:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":3717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4396:2:16","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4373:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3709,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4367:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3708,"name":"uint8","nodeType":"ElementaryTypeName","src":"4367:5:16","typeDescriptions":{}}},"id":3719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4367:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4357:42:16"},{"expression":{"arguments":[{"id":3722,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3685,"src":"4427:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3723,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3707,"src":"4433:1:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3724,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3687,"src":"4436:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3725,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3698,"src":"4439:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3721,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3655,3729,3823],"referencedDeclaration":3823,"src":"4416:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3565_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":3726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4416:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3565_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":3696,"id":3727,"nodeType":"Return","src":"4409:32:16"}]},"documentation":{"id":3683,"nodeType":"StructuredDocumentation","src":"3894:243:16","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":3729,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4151:10:16","nodeType":"FunctionDefinition","parameters":{"id":3690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3685,"mutability":"mutable","name":"hash","nameLocation":"4170:4:16","nodeType":"VariableDeclaration","scope":3729,"src":"4162:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3684,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4162:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3687,"mutability":"mutable","name":"r","nameLocation":"4184:1:16","nodeType":"VariableDeclaration","scope":3729,"src":"4176:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3686,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4176:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3689,"mutability":"mutable","name":"vs","nameLocation":"4195:2:16","nodeType":"VariableDeclaration","scope":3729,"src":"4187:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3688,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4187:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4161:37:16"},"returnParameters":{"id":3696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3692,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3729,"src":"4222:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3691,"name":"address","nodeType":"ElementaryTypeName","src":"4222:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3695,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3729,"src":"4231:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3694,"nodeType":"UserDefinedTypeName","pathNode":{"id":3693,"name":"RecoverError","nameLocations":["4231:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":3565,"src":"4231:12:16"},"referencedDeclaration":3565,"src":"4231:12:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"4221:23:16"},"scope":3921,"src":"4142:306:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3758,"nodeType":"Block","src":"4699:136:16","statements":[{"assignments":[3742,3745],"declarations":[{"constant":false,"id":3742,"mutability":"mutable","name":"recovered","nameLocation":"4718:9:16","nodeType":"VariableDeclaration","scope":3758,"src":"4710:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3741,"name":"address","nodeType":"ElementaryTypeName","src":"4710:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3745,"mutability":"mutable","name":"error","nameLocation":"4742:5:16","nodeType":"VariableDeclaration","scope":3758,"src":"4729:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3744,"nodeType":"UserDefinedTypeName","pathNode":{"id":3743,"name":"RecoverError","nameLocations":["4729:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":3565,"src":"4729:12:16"},"referencedDeclaration":3565,"src":"4729:12:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":3751,"initialValue":{"arguments":[{"id":3747,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"4762:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3748,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3734,"src":"4768:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3749,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3736,"src":"4771:2:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3746,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3655,3729,3823],"referencedDeclaration":3729,"src":"4751:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3565_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":3750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4751:23:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3565_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4709:65:16"},{"expression":{"arguments":[{"id":3753,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3745,"src":"4796:5:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}],"id":3752,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3609,"src":"4784:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3565_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":3754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4784:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3755,"nodeType":"ExpressionStatement","src":"4784:18:16"},{"expression":{"id":3756,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3742,"src":"4819:9:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3740,"id":3757,"nodeType":"Return","src":"4812:16:16"}]},"documentation":{"id":3730,"nodeType":"StructuredDocumentation","src":"4454:154:16","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":3759,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4622:7:16","nodeType":"FunctionDefinition","parameters":{"id":3737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3732,"mutability":"mutable","name":"hash","nameLocation":"4638:4:16","nodeType":"VariableDeclaration","scope":3759,"src":"4630:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3731,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4630:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3734,"mutability":"mutable","name":"r","nameLocation":"4652:1:16","nodeType":"VariableDeclaration","scope":3759,"src":"4644:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3733,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4644:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3736,"mutability":"mutable","name":"vs","nameLocation":"4663:2:16","nodeType":"VariableDeclaration","scope":3759,"src":"4655:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3735,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4655:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4629:37:16"},"returnParameters":{"id":3740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3739,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3759,"src":"4690:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3738,"name":"address","nodeType":"ElementaryTypeName","src":"4690:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4689:9:16"},"scope":3921,"src":"4613:222:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3822,"nodeType":"Block","src":"5120:1345:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3778,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3768,"src":"6016:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3777,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6008:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3776,"name":"uint256","nodeType":"ElementaryTypeName","src":"6008:7:16","typeDescriptions":{}}},"id":3779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6008:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":3780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6021:66:16","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6008:79:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3791,"nodeType":"IfStatement","src":"6004:161:16","trueBody":{"id":3790,"nodeType":"Block","src":"6089:76:16","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6119:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3783,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6111:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3782,"name":"address","nodeType":"ElementaryTypeName","src":"6111:7:16","typeDescriptions":{}}},"id":3785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6111:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3786,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"6123:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3565_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3787,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6136:17:16","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":3563,"src":"6123:30:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}}],"id":3788,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6110:44:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3565_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":3775,"id":3789,"nodeType":"Return","src":"6103:51:16"}]}},{"assignments":[3793],"declarations":[{"constant":false,"id":3793,"mutability":"mutable","name":"signer","nameLocation":"6267:6:16","nodeType":"VariableDeclaration","scope":3822,"src":"6259:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3792,"name":"address","nodeType":"ElementaryTypeName","src":"6259:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3800,"initialValue":{"arguments":[{"id":3795,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3762,"src":"6286:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3796,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3764,"src":"6292:1:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3797,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3766,"src":"6295:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3798,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3768,"src":"6298:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3794,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6276:9:16","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":3799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6276:24:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6259:41:16"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3801,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3793,"src":"6314:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6332:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3803,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6324:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3802,"name":"address","nodeType":"ElementaryTypeName","src":"6324:7:16","typeDescriptions":{}}},"id":3805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6324:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6314:20:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3816,"nodeType":"IfStatement","src":"6310:101:16","trueBody":{"id":3815,"nodeType":"Block","src":"6336:75:16","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6366:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3808,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6358:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3807,"name":"address","nodeType":"ElementaryTypeName","src":"6358:7:16","typeDescriptions":{}}},"id":3810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6358:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3811,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"6370:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3565_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3812,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6383:16:16","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":3561,"src":"6370:29:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}}],"id":3813,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6357:43:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3565_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":3775,"id":3814,"nodeType":"Return","src":"6350:50:16"}]}},{"expression":{"components":[{"id":3817,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3793,"src":"6429:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3818,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"6437:12:16","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3565_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3819,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6450:7:16","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":3560,"src":"6437:20:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}}],"id":3820,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6428:30:16","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3565_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":3775,"id":3821,"nodeType":"Return","src":"6421:37:16"}]},"documentation":{"id":3760,"nodeType":"StructuredDocumentation","src":"4841:163:16","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":3823,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5018:10:16","nodeType":"FunctionDefinition","parameters":{"id":3769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3762,"mutability":"mutable","name":"hash","nameLocation":"5037:4:16","nodeType":"VariableDeclaration","scope":3823,"src":"5029:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3761,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5029:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3764,"mutability":"mutable","name":"v","nameLocation":"5049:1:16","nodeType":"VariableDeclaration","scope":3823,"src":"5043:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3763,"name":"uint8","nodeType":"ElementaryTypeName","src":"5043:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3766,"mutability":"mutable","name":"r","nameLocation":"5060:1:16","nodeType":"VariableDeclaration","scope":3823,"src":"5052:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3765,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5052:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3768,"mutability":"mutable","name":"s","nameLocation":"5071:1:16","nodeType":"VariableDeclaration","scope":3823,"src":"5063:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3767,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5063:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5028:45:16"},"returnParameters":{"id":3775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3771,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3823,"src":"5097:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3770,"name":"address","nodeType":"ElementaryTypeName","src":"5097:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3774,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3823,"src":"5106:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3773,"nodeType":"UserDefinedTypeName","pathNode":{"id":3772,"name":"RecoverError","nameLocations":["5106:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":3565,"src":"5106:12:16"},"referencedDeclaration":3565,"src":"5106:12:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"5096:23:16"},"scope":3921,"src":"5009:1456:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3855,"nodeType":"Block","src":"6692:138:16","statements":[{"assignments":[3838,3841],"declarations":[{"constant":false,"id":3838,"mutability":"mutable","name":"recovered","nameLocation":"6711:9:16","nodeType":"VariableDeclaration","scope":3855,"src":"6703:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3837,"name":"address","nodeType":"ElementaryTypeName","src":"6703:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3841,"mutability":"mutable","name":"error","nameLocation":"6735:5:16","nodeType":"VariableDeclaration","scope":3855,"src":"6722:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3840,"nodeType":"UserDefinedTypeName","pathNode":{"id":3839,"name":"RecoverError","nameLocations":["6722:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":3565,"src":"6722:12:16"},"referencedDeclaration":3565,"src":"6722:12:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":3848,"initialValue":{"arguments":[{"id":3843,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3826,"src":"6755:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3844,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"6761:1:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3845,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3830,"src":"6764:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3846,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3832,"src":"6767:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3842,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3655,3729,3823],"referencedDeclaration":3823,"src":"6744:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3565_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":3847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6744:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3565_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6702:67:16"},{"expression":{"arguments":[{"id":3850,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3841,"src":"6791:5:16","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}],"id":3849,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3609,"src":"6779:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3565_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":3851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6779:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3852,"nodeType":"ExpressionStatement","src":"6779:18:16"},{"expression":{"id":3853,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3838,"src":"6814:9:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3836,"id":3854,"nodeType":"Return","src":"6807:16:16"}]},"documentation":{"id":3824,"nodeType":"StructuredDocumentation","src":"6471:122:16","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":3856,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6607:7:16","nodeType":"FunctionDefinition","parameters":{"id":3833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3826,"mutability":"mutable","name":"hash","nameLocation":"6623:4:16","nodeType":"VariableDeclaration","scope":3856,"src":"6615:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3825,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6615:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3828,"mutability":"mutable","name":"v","nameLocation":"6635:1:16","nodeType":"VariableDeclaration","scope":3856,"src":"6629:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3827,"name":"uint8","nodeType":"ElementaryTypeName","src":"6629:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3830,"mutability":"mutable","name":"r","nameLocation":"6646:1:16","nodeType":"VariableDeclaration","scope":3856,"src":"6638:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3829,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6638:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3832,"mutability":"mutable","name":"s","nameLocation":"6657:1:16","nodeType":"VariableDeclaration","scope":3856,"src":"6649:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3831,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6649:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6614:45:16"},"returnParameters":{"id":3836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3835,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3856,"src":"6683:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3834,"name":"address","nodeType":"ElementaryTypeName","src":"6683:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6682:9:16"},"scope":3921,"src":"6598:232:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3865,"nodeType":"Block","src":"7206:310:16","statements":[{"AST":{"nodeType":"YulBlock","src":"7362:148:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7383:4:16","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nodeType":"YulLiteral","src":"7389:34:16","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7376:6:16"},"nodeType":"YulFunctionCall","src":"7376:48:16"},"nodeType":"YulExpressionStatement","src":"7376:48:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7444:4:16","type":"","value":"0x1c"},{"name":"hash","nodeType":"YulIdentifier","src":"7450:4:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7437:6:16"},"nodeType":"YulFunctionCall","src":"7437:18:16"},"nodeType":"YulExpressionStatement","src":"7437:18:16"},{"nodeType":"YulAssignment","src":"7468:32:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7489:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7495:4:16","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7479:9:16"},"nodeType":"YulFunctionCall","src":"7479:21:16"},"variableNames":[{"name":"message","nodeType":"YulIdentifier","src":"7468:7:16"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3859,"isOffset":false,"isSlot":false,"src":"7450:4:16","valueSize":1},{"declaration":3862,"isOffset":false,"isSlot":false,"src":"7468:7:16","valueSize":1}],"id":3864,"nodeType":"InlineAssembly","src":"7353:157:16"}]},"documentation":{"id":3857,"nodeType":"StructuredDocumentation","src":"6836:279:16","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":3866,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7129:22:16","nodeType":"FunctionDefinition","parameters":{"id":3860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3859,"mutability":"mutable","name":"hash","nameLocation":"7160:4:16","nodeType":"VariableDeclaration","scope":3866,"src":"7152:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3858,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7152:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7151:14:16"},"returnParameters":{"id":3863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3862,"mutability":"mutable","name":"message","nameLocation":"7197:7:16","nodeType":"VariableDeclaration","scope":3866,"src":"7189:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3861,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7189:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7188:17:16"},"scope":3921,"src":"7120:396:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3887,"nodeType":"Block","src":"7881:116:16","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":3877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7925:32:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":3880,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3869,"src":"7976:1:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7978:6:16","memberName":"length","nodeType":"MemberAccess","src":"7976:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3878,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3555,"src":"7959:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$3555_$","typeString":"type(library Strings)"}},"id":3879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7967:8:16","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":3385,"src":"7959:16:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":3882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7959:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3883,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3869,"src":"7987:1:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3875,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7908:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3876,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7912:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"7908:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:81:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3874,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7898:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7898:92:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3873,"id":3886,"nodeType":"Return","src":"7891:99:16"}]},"documentation":{"id":3867,"nodeType":"StructuredDocumentation","src":"7522:274:16","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":3888,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7810:22:16","nodeType":"FunctionDefinition","parameters":{"id":3870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3869,"mutability":"mutable","name":"s","nameLocation":"7846:1:16","nodeType":"VariableDeclaration","scope":3888,"src":"7833:14:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3868,"name":"bytes","nodeType":"ElementaryTypeName","src":"7833:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7832:16:16"},"returnParameters":{"id":3873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3872,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3888,"src":"7872:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3871,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7872:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7871:9:16"},"scope":3921,"src":"7801:196:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3899,"nodeType":"Block","src":"8443:290:16","statements":[{"AST":{"nodeType":"YulBlock","src":"8505:222:16","statements":[{"nodeType":"YulVariableDeclaration","src":"8519:22:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8536:4:16","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8530:5:16"},"nodeType":"YulFunctionCall","src":"8530:11:16"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"8523:3:16","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8561:3:16"},{"hexValue":"1901","kind":"string","nodeType":"YulLiteral","src":"8566:10:16","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8554:6:16"},"nodeType":"YulFunctionCall","src":"8554:23:16"},"nodeType":"YulExpressionStatement","src":"8554:23:16"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8601:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"8606:4:16","type":"","value":"0x02"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8597:3:16"},"nodeType":"YulFunctionCall","src":"8597:14:16"},{"name":"domainSeparator","nodeType":"YulIdentifier","src":"8613:15:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8590:6:16"},"nodeType":"YulFunctionCall","src":"8590:39:16"},"nodeType":"YulExpressionStatement","src":"8590:39:16"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8653:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"8658:4:16","type":"","value":"0x22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8649:3:16"},"nodeType":"YulFunctionCall","src":"8649:14:16"},{"name":"structHash","nodeType":"YulIdentifier","src":"8665:10:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8642:6:16"},"nodeType":"YulFunctionCall","src":"8642:34:16"},"nodeType":"YulExpressionStatement","src":"8642:34:16"},{"nodeType":"YulAssignment","src":"8689:28:16","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8707:3:16"},{"kind":"number","nodeType":"YulLiteral","src":"8712:4:16","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8697:9:16"},"nodeType":"YulFunctionCall","src":"8697:20:16"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8689:4:16"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3896,"isOffset":false,"isSlot":false,"src":"8689:4:16","valueSize":1},{"declaration":3891,"isOffset":false,"isSlot":false,"src":"8613:15:16","valueSize":1},{"declaration":3893,"isOffset":false,"isSlot":false,"src":"8665:10:16","valueSize":1}],"id":3898,"nodeType":"InlineAssembly","src":"8496:231:16"}]},"documentation":{"id":3889,"nodeType":"StructuredDocumentation","src":"8003:328:16","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":3900,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8345:15:16","nodeType":"FunctionDefinition","parameters":{"id":3894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3891,"mutability":"mutable","name":"domainSeparator","nameLocation":"8369:15:16","nodeType":"VariableDeclaration","scope":3900,"src":"8361:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3890,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8361:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3893,"mutability":"mutable","name":"structHash","nameLocation":"8394:10:16","nodeType":"VariableDeclaration","scope":3900,"src":"8386:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3892,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8386:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8360:45:16"},"returnParameters":{"id":3897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3896,"mutability":"mutable","name":"data","nameLocation":"8437:4:16","nodeType":"VariableDeclaration","scope":3900,"src":"8429:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3895,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8429:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8428:14:16"},"scope":3921,"src":"8336:397:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3919,"nodeType":"Block","src":"9048:80:16","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":3913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9092:10:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":3914,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3903,"src":"9104:9:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3915,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3905,"src":"9115:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3911,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9075:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3912,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9079:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"9075:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9075:45:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3910,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9065:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9065:56:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3909,"id":3918,"nodeType":"Return","src":"9058:63:16"}]},"documentation":{"id":3901,"nodeType":"StructuredDocumentation","src":"8739:193:16","text":" @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."},"id":3920,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"8946:31:16","nodeType":"FunctionDefinition","parameters":{"id":3906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3903,"mutability":"mutable","name":"validator","nameLocation":"8986:9:16","nodeType":"VariableDeclaration","scope":3920,"src":"8978:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3902,"name":"address","nodeType":"ElementaryTypeName","src":"8978:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3905,"mutability":"mutable","name":"data","nameLocation":"9010:4:16","nodeType":"VariableDeclaration","scope":3920,"src":"8997:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3904,"name":"bytes","nodeType":"ElementaryTypeName","src":"8997:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8977:38:16"},"returnParameters":{"id":3909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3908,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3920,"src":"9039:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3907,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9039:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9038:9:16"},"scope":3921,"src":"8937:191:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3922,"src":"369:8761:16","usedErrors":[]}],"src":"112:9019:16"},"id":16},"@openzeppelin/contracts/utils/cryptography/EIP712.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/EIP712.sol","exportedSymbols":{"ECDSA":[3921],"EIP712":[4125],"IERC5267":[151],"Math":[5126],"ShortString":[3005],"ShortStrings":[3216],"SignedMath":[5231],"StorageSlot":[3326],"Strings":[3555]},"id":4126,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3923,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"113:23:17"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"./ECDSA.sol","id":3924,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4126,"sourceUnit":3922,"src":"138:21:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/ShortStrings.sol","file":"../ShortStrings.sol","id":3925,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4126,"sourceUnit":3217,"src":"160:29:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC5267.sol","file":"../../interfaces/IERC5267.sol","id":3926,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4126,"sourceUnit":152,"src":"190:39:17","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3928,"name":"IERC5267","nameLocations":["1837:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":151,"src":"1837:8:17"},"id":3929,"nodeType":"InheritanceSpecifier","src":"1837:8:17"}],"canonicalName":"EIP712","contractDependencies":[],"contractKind":"contract","documentation":{"id":3927,"nodeType":"StructuredDocumentation","src":"231:1577:17","text":" @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n they need in their contracts using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n _Available since v3.4._\n @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment"},"fullyImplemented":true,"id":4125,"linearizedBaseContracts":[4125,151],"name":"EIP712","nameLocation":"1827:6:17","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3931,"libraryName":{"id":3930,"name":"ShortStrings","nameLocations":["1858:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":3216,"src":"1858:12:17"},"nodeType":"UsingForDirective","src":"1852:25:17"},{"constant":true,"id":3936,"mutability":"constant","name":"_TYPE_HASH","nameLocation":"1908:10:17","nodeType":"VariableDeclaration","scope":4125,"src":"1883:141:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3932,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1883:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","id":3934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1939:84:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""},"value":"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""}],"id":3933,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1929:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1929:95:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":3938,"mutability":"immutable","name":"_cachedDomainSeparator","nameLocation":"2249:22:17","nodeType":"VariableDeclaration","scope":4125,"src":"2223:48:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3937,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2223:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":3940,"mutability":"immutable","name":"_cachedChainId","nameLocation":"2303:14:17","nodeType":"VariableDeclaration","scope":4125,"src":"2277:40:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3939,"name":"uint256","nodeType":"ElementaryTypeName","src":"2277:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":3942,"mutability":"immutable","name":"_cachedThis","nameLocation":"2349:11:17","nodeType":"VariableDeclaration","scope":4125,"src":"2323:37:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3941,"name":"address","nodeType":"ElementaryTypeName","src":"2323:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":3944,"mutability":"immutable","name":"_hashedName","nameLocation":"2393:11:17","nodeType":"VariableDeclaration","scope":4125,"src":"2367:37:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3943,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2367:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":3946,"mutability":"immutable","name":"_hashedVersion","nameLocation":"2436:14:17","nodeType":"VariableDeclaration","scope":4125,"src":"2410:40:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3945,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2410:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":3949,"mutability":"immutable","name":"_name","nameLocation":"2487:5:17","nodeType":"VariableDeclaration","scope":4125,"src":"2457:35:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"},"typeName":{"id":3948,"nodeType":"UserDefinedTypeName","pathNode":{"id":3947,"name":"ShortString","nameLocations":["2457:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":3005,"src":"2457:11:17"},"referencedDeclaration":3005,"src":"2457:11:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}},"visibility":"private"},{"constant":false,"id":3952,"mutability":"immutable","name":"_version","nameLocation":"2528:8:17","nodeType":"VariableDeclaration","scope":4125,"src":"2498:38:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"},"typeName":{"id":3951,"nodeType":"UserDefinedTypeName","pathNode":{"id":3950,"name":"ShortString","nameLocations":["2498:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":3005,"src":"2498:11:17"},"referencedDeclaration":3005,"src":"2498:11:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}},"visibility":"private"},{"constant":false,"id":3954,"mutability":"mutable","name":"_nameFallback","nameLocation":"2557:13:17","nodeType":"VariableDeclaration","scope":4125,"src":"2542:28:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":3953,"name":"string","nodeType":"ElementaryTypeName","src":"2542:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":3956,"mutability":"mutable","name":"_versionFallback","nameLocation":"2591:16:17","nodeType":"VariableDeclaration","scope":4125,"src":"2576:31:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":3955,"name":"string","nodeType":"ElementaryTypeName","src":"2576:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":4013,"nodeType":"Block","src":"3233:376:17","statements":[{"expression":{"id":3969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3964,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3949,"src":"3243:5:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3967,"name":"_nameFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3954,"src":"3282:13:17","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":3965,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3959,"src":"3251:4:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":3966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3256:25:17","memberName":"toShortStringWithFallback","nodeType":"MemberAccess","referencedDeclaration":3157,"src":"3251:30:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$3005_$attached_to$_t_string_memory_ptr_$","typeString":"function (string memory,string storage pointer) returns (ShortString)"}},"id":3968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3251:45:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}},"src":"3243:53:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}},"id":3970,"nodeType":"ExpressionStatement","src":"3243:53:17"},{"expression":{"id":3976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3971,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"3306:8:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3974,"name":"_versionFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"3351:16:17","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":3972,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"3317:7:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":3973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3325:25:17","memberName":"toShortStringWithFallback","nodeType":"MemberAccess","referencedDeclaration":3157,"src":"3317:33:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$3005_$attached_to$_t_string_memory_ptr_$","typeString":"function (string memory,string storage pointer) returns (ShortString)"}},"id":3975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3317:51:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}},"src":"3306:62:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}},"id":3977,"nodeType":"ExpressionStatement","src":"3306:62:17"},{"expression":{"id":3985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3978,"name":"_hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3944,"src":"3378:11:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":3982,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3959,"src":"3408:4:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3981,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3402:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3980,"name":"bytes","nodeType":"ElementaryTypeName","src":"3402:5:17","typeDescriptions":{}}},"id":3983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3402:11:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3979,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3392:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3392:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3378:36:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3986,"nodeType":"ExpressionStatement","src":"3378:36:17"},{"expression":{"id":3994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3987,"name":"_hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3946,"src":"3424:14:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":3991,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"3457:7:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3990,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3451:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3989,"name":"bytes","nodeType":"ElementaryTypeName","src":"3451:5:17","typeDescriptions":{}}},"id":3992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3451:14:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3988,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3441:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3441:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3424:42:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3995,"nodeType":"ExpressionStatement","src":"3424:42:17"},{"expression":{"id":3999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3996,"name":"_cachedChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"3477:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":3997,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3494:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3500:7:17","memberName":"chainid","nodeType":"MemberAccess","src":"3494:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3477:30:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4000,"nodeType":"ExpressionStatement","src":"3477:30:17"},{"expression":{"id":4004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4001,"name":"_cachedDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"3517:22:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":4002,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"3542:21:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":4003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3542:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3517:48:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4005,"nodeType":"ExpressionStatement","src":"3517:48:17"},{"expression":{"id":4011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4006,"name":"_cachedThis","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3942,"src":"3575:11:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4009,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3597:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$4125","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$4125","typeString":"contract EIP712"}],"id":4008,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3589:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4007,"name":"address","nodeType":"ElementaryTypeName","src":"3589:7:17","typeDescriptions":{}}},"id":4010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3589:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3575:27:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4012,"nodeType":"ExpressionStatement","src":"3575:27:17"}]},"documentation":{"id":3957,"nodeType":"StructuredDocumentation","src":"2614:559:17","text":" @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."},"id":4014,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3959,"mutability":"mutable","name":"name","nameLocation":"3204:4:17","nodeType":"VariableDeclaration","scope":4014,"src":"3190:18:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3958,"name":"string","nodeType":"ElementaryTypeName","src":"3190:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3961,"mutability":"mutable","name":"version","nameLocation":"3224:7:17","nodeType":"VariableDeclaration","scope":4014,"src":"3210:21:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3960,"name":"string","nodeType":"ElementaryTypeName","src":"3210:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3189:43:17"},"returnParameters":{"id":3963,"nodeType":"ParameterList","parameters":[],"src":"3233:0:17"},"scope":4125,"src":"3178:431:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4039,"nodeType":"Block","src":"3757:200:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4022,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3779:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$4125","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$4125","typeString":"contract EIP712"}],"id":4021,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3771:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4020,"name":"address","nodeType":"ElementaryTypeName","src":"3771:7:17","typeDescriptions":{}}},"id":4023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3771:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4024,"name":"_cachedThis","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3942,"src":"3788:11:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3771:28:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4026,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3803:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3809:7:17","memberName":"chainid","nodeType":"MemberAccess","src":"3803:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4028,"name":"_cachedChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"3820:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3803:31:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3771:63:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4037,"nodeType":"Block","src":"3896:55:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4034,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"3917:21:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":4035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3917:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4019,"id":4036,"nodeType":"Return","src":"3910:30:17"}]},"id":4038,"nodeType":"IfStatement","src":"3767:184:17","trueBody":{"id":4033,"nodeType":"Block","src":"3836:54:17","statements":[{"expression":{"id":4031,"name":"_cachedDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"3857:22:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4019,"id":4032,"nodeType":"Return","src":"3850:29:17"}]}}]},"documentation":{"id":4015,"nodeType":"StructuredDocumentation","src":"3615:75:17","text":" @dev Returns the domain separator for the current chain."},"id":4040,"implemented":true,"kind":"function","modifiers":[],"name":"_domainSeparatorV4","nameLocation":"3704:18:17","nodeType":"FunctionDefinition","parameters":{"id":4016,"nodeType":"ParameterList","parameters":[],"src":"3722:2:17"},"returnParameters":{"id":4019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4018,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4040,"src":"3748:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4017,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3748:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3747:9:17"},"scope":4125,"src":"3695:262:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4060,"nodeType":"Block","src":"4027:116:17","statements":[{"expression":{"arguments":[{"arguments":[{"id":4048,"name":"_TYPE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3936,"src":"4065:10:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4049,"name":"_hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3944,"src":"4077:11:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4050,"name":"_hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3946,"src":"4090:14:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4051,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4106:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4112:7:17","memberName":"chainid","nodeType":"MemberAccess","src":"4106:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":4055,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4129:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$4125","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$4125","typeString":"contract EIP712"}],"id":4054,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4121:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4053,"name":"address","nodeType":"ElementaryTypeName","src":"4121:7:17","typeDescriptions":{}}},"id":4056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4121:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4046,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4054:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4047,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4058:6:17","memberName":"encode","nodeType":"MemberAccess","src":"4054:10:17","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4054:81:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4045,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4044:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4044:92:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4044,"id":4059,"nodeType":"Return","src":"4037:99:17"}]},"id":4061,"implemented":true,"kind":"function","modifiers":[],"name":"_buildDomainSeparator","nameLocation":"3972:21:17","nodeType":"FunctionDefinition","parameters":{"id":4041,"nodeType":"ParameterList","parameters":[],"src":"3993:2:17"},"returnParameters":{"id":4044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4043,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4061,"src":"4018:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4042,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4018:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4017:9:17"},"scope":4125,"src":"3963:180:17","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":4076,"nodeType":"Block","src":"4854:79:17","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4071,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4040,"src":"4893:18:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":4072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4893:20:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4073,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4064,"src":"4915:10:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4069,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3921,"src":"4871:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$3921_$","typeString":"type(library ECDSA)"}},"id":4070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4877:15:17","memberName":"toTypedDataHash","nodeType":"MemberAccess","referencedDeclaration":3900,"src":"4871:21:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":4074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4871:55:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4068,"id":4075,"nodeType":"Return","src":"4864:62:17"}]},"documentation":{"id":4062,"nodeType":"StructuredDocumentation","src":"4149:614:17","text":" @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"},"id":4077,"implemented":true,"kind":"function","modifiers":[],"name":"_hashTypedDataV4","nameLocation":"4777:16:17","nodeType":"FunctionDefinition","parameters":{"id":4065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4064,"mutability":"mutable","name":"structHash","nameLocation":"4802:10:17","nodeType":"VariableDeclaration","scope":4077,"src":"4794:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4063,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4794:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4793:20:17"},"returnParameters":{"id":4068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4067,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4077,"src":"4845:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4066,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4845:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4844:9:17"},"scope":4125,"src":"4768:165:17","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[150],"body":{"id":4123,"nodeType":"Block","src":"5366:288:17","statements":[{"expression":{"components":[{"hexValue":"0f","id":4097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"5397:7:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c","typeString":"literal_string hex\"0f\""},"value":"\u000f"},{"arguments":[{"id":4100,"name":"_nameFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3954,"src":"5454:13:17","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":4098,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3949,"src":"5427:5:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}},"id":4099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5433:20:17","memberName":"toStringWithFallback","nodeType":"MemberAccess","referencedDeclaration":3184,"src":"5427:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$3005_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$3005_$","typeString":"function (ShortString,string storage pointer) pure returns (string memory)"}},"id":4101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5427:41:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"id":4104,"name":"_versionFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"5512:16:17","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":4102,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"5482:8:17","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$3005","typeString":"ShortString"}},"id":4103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5491:20:17","memberName":"toStringWithFallback","nodeType":"MemberAccess","referencedDeclaration":3184,"src":"5482:29:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$3005_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$3005_$","typeString":"function (ShortString,string storage pointer) pure returns (string memory)"}},"id":4105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5482:47:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"id":4106,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5543:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5549:7:17","memberName":"chainid","nodeType":"MemberAccess","src":"5543:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":4110,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5578:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$4125","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$4125","typeString":"contract EIP712"}],"id":4109,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5570:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4108,"name":"address","nodeType":"ElementaryTypeName","src":"5570:7:17","typeDescriptions":{}}},"id":4111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5570:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5605:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4113,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5597:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4112,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5597:7:17","typeDescriptions":{}}},"id":4115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5597:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"hexValue":"30","id":4119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5635:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4118,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5621:13:17","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":4116,"name":"uint256","nodeType":"ElementaryTypeName","src":"5625:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4117,"nodeType":"ArrayTypeName","src":"5625:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":4120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5621:16:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"id":4121,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5383:264:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$_t_address_$_t_bytes32_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(literal_string hex\"0f\",string memory,string memory,uint256,address,bytes32,uint256[] memory)"}},"functionReturnParameters":4096,"id":4122,"nodeType":"Return","src":"5376:271:17"}]},"documentation":{"id":4078,"nodeType":"StructuredDocumentation","src":"4939:77:17","text":" @dev See {EIP-5267}.\n _Available since v4.9._"},"functionSelector":"84b0196e","id":4124,"implemented":true,"kind":"function","modifiers":[],"name":"eip712Domain","nameLocation":"5030:12:17","nodeType":"FunctionDefinition","overrides":{"id":4080,"nodeType":"OverrideSpecifier","overrides":[],"src":"5097:8:17"},"parameters":{"id":4079,"nodeType":"ParameterList","parameters":[],"src":"5042:2:17"},"returnParameters":{"id":4096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4082,"mutability":"mutable","name":"fields","nameLocation":"5143:6:17","nodeType":"VariableDeclaration","scope":4124,"src":"5136:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":4081,"name":"bytes1","nodeType":"ElementaryTypeName","src":"5136:6:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"},{"constant":false,"id":4084,"mutability":"mutable","name":"name","nameLocation":"5177:4:17","nodeType":"VariableDeclaration","scope":4124,"src":"5163:18:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4083,"name":"string","nodeType":"ElementaryTypeName","src":"5163:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4086,"mutability":"mutable","name":"version","nameLocation":"5209:7:17","nodeType":"VariableDeclaration","scope":4124,"src":"5195:21:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4085,"name":"string","nodeType":"ElementaryTypeName","src":"5195:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4088,"mutability":"mutable","name":"chainId","nameLocation":"5238:7:17","nodeType":"VariableDeclaration","scope":4124,"src":"5230:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4087,"name":"uint256","nodeType":"ElementaryTypeName","src":"5230:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4090,"mutability":"mutable","name":"verifyingContract","nameLocation":"5267:17:17","nodeType":"VariableDeclaration","scope":4124,"src":"5259:25:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4089,"name":"address","nodeType":"ElementaryTypeName","src":"5259:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4092,"mutability":"mutable","name":"salt","nameLocation":"5306:4:17","nodeType":"VariableDeclaration","scope":4124,"src":"5298:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4091,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5298:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4095,"mutability":"mutable","name":"extensions","nameLocation":"5341:10:17","nodeType":"VariableDeclaration","scope":4124,"src":"5324:27:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4093,"name":"uint256","nodeType":"ElementaryTypeName","src":"5324:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4094,"nodeType":"ArrayTypeName","src":"5324:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"5122:239:17"},"scope":4125,"src":"5021:633:17","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":4126,"src":"1809:3847:17","usedErrors":[3013,3015]}],"src":"113:5544:17"},"id":17},"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol","exportedSymbols":{"ECDSA":[3921],"IERC1271":[126],"Math":[5126],"SignatureChecker":[4224],"SignedMath":[5231],"Strings":[3555]},"id":4225,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4127,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:18"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"./ECDSA.sol","id":4128,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4225,"sourceUnit":3922,"src":"148:21:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC1271.sol","file":"../../interfaces/IERC1271.sol","id":4129,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4225,"sourceUnit":127,"src":"170:39:18","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SignatureChecker","contractDependencies":[],"contractKind":"library","documentation":{"id":4130,"nodeType":"StructuredDocumentation","src":"211:294:18","text":" @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n Argent and Gnosis Safe.\n _Available since v4.1._"},"fullyImplemented":true,"id":4224,"linearizedBaseContracts":[4224],"name":"SignatureChecker","nameLocation":"514:16:18","nodeType":"ContractDefinition","nodes":[{"body":{"id":4170,"nodeType":"Block","src":"1126:254:18","statements":[{"assignments":[4143,4146],"declarations":[{"constant":false,"id":4143,"mutability":"mutable","name":"recovered","nameLocation":"1145:9:18","nodeType":"VariableDeclaration","scope":4170,"src":"1137:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4142,"name":"address","nodeType":"ElementaryTypeName","src":"1137:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4146,"mutability":"mutable","name":"error","nameLocation":"1175:5:18","nodeType":"VariableDeclaration","scope":4170,"src":"1156:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":4145,"nodeType":"UserDefinedTypeName","pathNode":{"id":4144,"name":"ECDSA.RecoverError","nameLocations":["1156:5:18","1162:12:18"],"nodeType":"IdentifierPath","referencedDeclaration":3565,"src":"1156:18:18"},"referencedDeclaration":3565,"src":"1156:18:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":4152,"initialValue":{"arguments":[{"id":4149,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4135,"src":"1201:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4150,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4137,"src":"1207:9:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4147,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3921,"src":"1184:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$3921_$","typeString":"type(library ECDSA)"}},"id":4148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1190:10:18","memberName":"tryRecover","nodeType":"MemberAccess","referencedDeclaration":3655,"src":"1184:16:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$3565_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"}},"id":4151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1184:33:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3565_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"1136:81:18"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"},"id":4157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4153,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4146,"src":"1247:5:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":4154,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3921,"src":"1256:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$3921_$","typeString":"type(library ECDSA)"}},"id":4155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1262:12:18","memberName":"RecoverError","nodeType":"MemberAccess","referencedDeclaration":3565,"src":"1256:18:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3565_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":4156,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1275:7:18","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":3560,"src":"1256:26:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3565","typeString":"enum ECDSA.RecoverError"}},"src":"1247:35:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4158,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"1286:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4159,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4133,"src":"1299:6:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1286:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1247:58:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4162,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1246:60:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":4164,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4133,"src":"1349:6:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4165,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4135,"src":"1357:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4166,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4137,"src":"1363:9:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4163,"name":"isValidERC1271SignatureNow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4223,"src":"1322:26:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,bytes32,bytes memory) view returns (bool)"}},"id":4167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:51:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1246:127:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4141,"id":4169,"nodeType":"Return","src":"1227:146:18"}]},"documentation":{"id":4131,"nodeType":"StructuredDocumentation","src":"537:472:18","text":" @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n change through time. It could return true at block N and false at block N+1 (or the opposite)."},"id":4171,"implemented":true,"kind":"function","modifiers":[],"name":"isValidSignatureNow","nameLocation":"1023:19:18","nodeType":"FunctionDefinition","parameters":{"id":4138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4133,"mutability":"mutable","name":"signer","nameLocation":"1051:6:18","nodeType":"VariableDeclaration","scope":4171,"src":"1043:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4132,"name":"address","nodeType":"ElementaryTypeName","src":"1043:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4135,"mutability":"mutable","name":"hash","nameLocation":"1067:4:18","nodeType":"VariableDeclaration","scope":4171,"src":"1059:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4134,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1059:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4137,"mutability":"mutable","name":"signature","nameLocation":"1086:9:18","nodeType":"VariableDeclaration","scope":4171,"src":"1073:22:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4136,"name":"bytes","nodeType":"ElementaryTypeName","src":"1073:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1042:54:18"},"returnParameters":{"id":4141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4140,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4171,"src":"1120:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4139,"name":"bool","nodeType":"ElementaryTypeName","src":"1120:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1119:6:18"},"scope":4224,"src":"1014:366:18","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4222,"nodeType":"Block","src":"1935:324:18","statements":[{"assignments":[4184,4186],"declarations":[{"constant":false,"id":4184,"mutability":"mutable","name":"success","nameLocation":"1951:7:18","nodeType":"VariableDeclaration","scope":4222,"src":"1946:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4183,"name":"bool","nodeType":"ElementaryTypeName","src":"1946:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4186,"mutability":"mutable","name":"result","nameLocation":"1973:6:18","nodeType":"VariableDeclaration","scope":4222,"src":"1960:19:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4185,"name":"bytes","nodeType":"ElementaryTypeName","src":"1960:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4198,"initialValue":{"arguments":[{"arguments":[{"expression":{"expression":{"id":4191,"name":"IERC1271","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"2037:8:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1271_$126_$","typeString":"type(contract IERC1271)"}},"id":4192,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2046:16:18","memberName":"isValidSignature","nodeType":"MemberAccess","referencedDeclaration":125,"src":"2037:25:18","typeDescriptions":{"typeIdentifier":"t_function_declaration_view$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function IERC1271.isValidSignature(bytes32,bytes memory) view returns (bytes4)"}},"id":4193,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2063:8:18","memberName":"selector","nodeType":"MemberAccess","src":"2037:34:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4194,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4176,"src":"2073:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4195,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"2079:9:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4189,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2014:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4190,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2018:18:18","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2014:22:18","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2014:75:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4187,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4174,"src":"1983:6:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1990:10:18","memberName":"staticcall","nodeType":"MemberAccess","src":"1983:17:18","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":4197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1983:116:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1945:154:18"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4199,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4184,"src":"2117:7:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4200,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4186,"src":"2140:6:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2147:6:18","memberName":"length","nodeType":"MemberAccess","src":"2140:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3332","id":4202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2157:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"2140:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2117:42:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4207,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4186,"src":"2186:6:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":4209,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2195:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4208,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2195:7:18","typeDescriptions":{}}}],"id":4210,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2194:9:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"}],"expression":{"id":4205,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2175:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4206,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2179:6:18","memberName":"decode","nodeType":"MemberAccess","src":"2175:10:18","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":4211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:29:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"expression":{"expression":{"id":4214,"name":"IERC1271","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"2216:8:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1271_$126_$","typeString":"type(contract IERC1271)"}},"id":4215,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2225:16:18","memberName":"isValidSignature","nodeType":"MemberAccess","referencedDeclaration":125,"src":"2216:25:18","typeDescriptions":{"typeIdentifier":"t_function_declaration_view$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function IERC1271.isValidSignature(bytes32,bytes memory) view returns (bytes4)"}},"id":4216,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2242:8:18","memberName":"selector","nodeType":"MemberAccess","src":"2216:34:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":4213,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2208:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4212,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2208:7:18","typeDescriptions":{}}},"id":4217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2208:43:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2175:76:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2117:134:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4220,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2116:136:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4182,"id":4221,"nodeType":"Return","src":"2109:143:18"}]},"documentation":{"id":4172,"nodeType":"StructuredDocumentation","src":"1386:395:18","text":" @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\n against the signer smart contract using ERC1271.\n NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n change through time. It could return true at block N and false at block N+1 (or the opposite)."},"id":4223,"implemented":true,"kind":"function","modifiers":[],"name":"isValidERC1271SignatureNow","nameLocation":"1795:26:18","nodeType":"FunctionDefinition","parameters":{"id":4179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4174,"mutability":"mutable","name":"signer","nameLocation":"1839:6:18","nodeType":"VariableDeclaration","scope":4223,"src":"1831:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4173,"name":"address","nodeType":"ElementaryTypeName","src":"1831:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4176,"mutability":"mutable","name":"hash","nameLocation":"1863:4:18","nodeType":"VariableDeclaration","scope":4223,"src":"1855:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4175,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1855:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4178,"mutability":"mutable","name":"signature","nameLocation":"1890:9:18","nodeType":"VariableDeclaration","scope":4223,"src":"1877:22:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4177,"name":"bytes","nodeType":"ElementaryTypeName","src":"1877:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1821:84:18"},"returnParameters":{"id":4182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4181,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4223,"src":"1929:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4180,"name":"bool","nodeType":"ElementaryTypeName","src":"1929:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1928:6:18"},"scope":4224,"src":"1786:473:18","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":4225,"src":"506:1755:18","usedErrors":[]}],"src":"123:2139:18"},"id":18},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[4248],"IERC165":[4260]},"id":4249,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4226,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:19"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":4227,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4249,"sourceUnit":4261,"src":"124:23:19","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4229,"name":"IERC165","nameLocations":["754:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":4260,"src":"754:7:19"},"id":4230,"nodeType":"InheritanceSpecifier","src":"754:7:19"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":4228,"nodeType":"StructuredDocumentation","src":"149:576:19","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":4248,"linearizedBaseContracts":[4248,4260],"name":"ERC165","nameLocation":"744:6:19","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[4259],"body":{"id":4246,"nodeType":"Block","src":"920:64:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4239,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4233,"src":"937:11:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":4241,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4260,"src":"957:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$4260_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$4260_$","typeString":"type(contract IERC165)"}],"id":4240,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:19","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"952:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$4260","typeString":"type(contract IERC165)"}},"id":4243,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"966:11:19","memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4238,"id":4245,"nodeType":"Return","src":"930:47:19"}]},"documentation":{"id":4231,"nodeType":"StructuredDocumentation","src":"768:56:19","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":4247,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:19","nodeType":"FunctionDefinition","overrides":{"id":4235,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:19"},"parameters":{"id":4234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4233,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:19","nodeType":"VariableDeclaration","scope":4247,"src":"856:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4232,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:19"},"returnParameters":{"id":4238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4237,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4247,"src":"914:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4236,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:19"},"scope":4248,"src":"829:155:19","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":4249,"src":"726:260:19","usedErrors":[]}],"src":"99:888:19"},"id":19},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[4260]},"id":4261,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4250,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:20"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":4251,"nodeType":"StructuredDocumentation","src":"125:279:20","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":4260,"linearizedBaseContracts":[4260],"name":"IERC165","nameLocation":"415:7:20","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4252,"nodeType":"StructuredDocumentation","src":"429:340:20","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":4259,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:20","nodeType":"FunctionDefinition","parameters":{"id":4255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4254,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:20","nodeType":"VariableDeclaration","scope":4259,"src":"801:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4253,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:20"},"returnParameters":{"id":4258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4257,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4259,"src":"844:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4256,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:20"},"scope":4260,"src":"774:76:20","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4261,"src":"405:447:20","usedErrors":[]}],"src":"100:753:20"},"id":20},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[5126]},"id":5127,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4262,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:21"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":4263,"nodeType":"StructuredDocumentation","src":"128:73:21","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":5126,"linearizedBaseContracts":[5126],"name":"Math","nameLocation":"210:4:21","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":4267,"members":[{"id":4264,"name":"Down","nameLocation":"245:4:21","nodeType":"EnumValue","src":"245:4:21"},{"id":4265,"name":"Up","nameLocation":"287:2:21","nodeType":"EnumValue","src":"287:2:21"},{"id":4266,"name":"Zero","nameLocation":"318:4:21","nodeType":"EnumValue","src":"318:4:21"}],"name":"Rounding","nameLocation":"226:8:21","nodeType":"EnumDefinition","src":"221:122:21"},{"body":{"id":4284,"nodeType":"Block","src":"480:37:21","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4277,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4270,"src":"497:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4278,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4272,"src":"501:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4281,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4272,"src":"509:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:21","trueExpression":{"id":4280,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4270,"src":"505:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4276,"id":4283,"nodeType":"Return","src":"490:20:21"}]},"documentation":{"id":4268,"nodeType":"StructuredDocumentation","src":"349:59:21","text":" @dev Returns the largest of two numbers."},"id":4285,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:21","nodeType":"FunctionDefinition","parameters":{"id":4273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4270,"mutability":"mutable","name":"a","nameLocation":"434:1:21","nodeType":"VariableDeclaration","scope":4285,"src":"426:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4269,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4272,"mutability":"mutable","name":"b","nameLocation":"445:1:21","nodeType":"VariableDeclaration","scope":4285,"src":"437:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4271,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:21"},"returnParameters":{"id":4276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4275,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4285,"src":"471:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4274,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:21"},"scope":5126,"src":"413:104:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4302,"nodeType":"Block","src":"655:37:21","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4295,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4288,"src":"672:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4296,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4290,"src":"676:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4299,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4290,"src":"684:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:21","trueExpression":{"id":4298,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4288,"src":"680:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4294,"id":4301,"nodeType":"Return","src":"665:20:21"}]},"documentation":{"id":4286,"nodeType":"StructuredDocumentation","src":"523:60:21","text":" @dev Returns the smallest of two numbers."},"id":4303,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:21","nodeType":"FunctionDefinition","parameters":{"id":4291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4288,"mutability":"mutable","name":"a","nameLocation":"609:1:21","nodeType":"VariableDeclaration","scope":4303,"src":"601:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4287,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4290,"mutability":"mutable","name":"b","nameLocation":"620:1:21","nodeType":"VariableDeclaration","scope":4303,"src":"612:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4289,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:21"},"returnParameters":{"id":4294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4293,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4303,"src":"646:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4292,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:21"},"scope":5126,"src":"588:104:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4325,"nodeType":"Block","src":"876:82:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4313,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4306,"src":"931:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4314,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4308,"src":"935:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4316,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4317,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4306,"src":"941:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4318,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4308,"src":"945:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4320,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":4321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4312,"id":4324,"nodeType":"Return","src":"923:28:21"}]},"documentation":{"id":4304,"nodeType":"StructuredDocumentation","src":"698:102:21","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":4326,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:21","nodeType":"FunctionDefinition","parameters":{"id":4309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4306,"mutability":"mutable","name":"a","nameLocation":"830:1:21","nodeType":"VariableDeclaration","scope":4326,"src":"822:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4305,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4308,"mutability":"mutable","name":"b","nameLocation":"841:1:21","nodeType":"VariableDeclaration","scope":4326,"src":"833:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4307,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:21"},"returnParameters":{"id":4312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4311,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4326,"src":"867:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4310,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:21"},"scope":5126,"src":"805:153:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4350,"nodeType":"Block","src":"1228:123:21","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4336,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4329,"src":"1316:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4340,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4329,"src":"1330:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4343,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4344,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4331,"src":"1339:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:21","trueExpression":{"hexValue":"30","id":4339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4335,"id":4349,"nodeType":"Return","src":"1309:35:21"}]},"documentation":{"id":4327,"nodeType":"StructuredDocumentation","src":"964:188:21","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":4351,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:21","nodeType":"FunctionDefinition","parameters":{"id":4332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4329,"mutability":"mutable","name":"a","nameLocation":"1182:1:21","nodeType":"VariableDeclaration","scope":4351,"src":"1174:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4328,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4331,"mutability":"mutable","name":"b","nameLocation":"1193:1:21","nodeType":"VariableDeclaration","scope":4351,"src":"1185:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4330,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:21"},"returnParameters":{"id":4335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4334,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4351,"src":"1219:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4333,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:21"},"scope":5126,"src":"1157:194:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4473,"nodeType":"Block","src":"1765:4115:21","statements":[{"id":4472,"nodeType":"UncheckedBlock","src":"1775:4099:21","statements":[{"assignments":[4364],"declarations":[{"constant":false,"id":4364,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:21","nodeType":"VariableDeclaration","scope":4472,"src":"2096:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4363,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4365,"nodeType":"VariableDeclarationStatement","src":"2096:13:21"},{"assignments":[4367],"declarations":[{"constant":false,"id":4367,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:21","nodeType":"VariableDeclaration","scope":4472,"src":"2168:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4366,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4368,"nodeType":"VariableDeclarationStatement","src":"2168:13:21"},{"AST":{"nodeType":"YulBlock","src":"2248:157:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:30:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2283:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"2286:1:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:1:21","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2289:3:21"},"nodeType":"YulFunctionCall","src":"2289:6:21"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2276:6:21"},"nodeType":"YulFunctionCall","src":"2276:20:21"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2270:2:21","type":""}]},{"nodeType":"YulAssignment","src":"2313:18:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2326:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"2329:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2322:3:21"},"nodeType":"YulFunctionCall","src":"2322:9:21"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2313:5:21"}]},{"nodeType":"YulAssignment","src":"2348:43:21","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2365:2:21"},{"name":"prod0","nodeType":"YulIdentifier","src":"2369:5:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2361:3:21"},"nodeType":"YulFunctionCall","src":"2361:14:21"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2380:2:21"},{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2377:2:21"},"nodeType":"YulFunctionCall","src":"2377:13:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2357:3:21"},"nodeType":"YulFunctionCall","src":"2357:34:21"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2348:5:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4364,"isOffset":false,"isSlot":false,"src":"2313:5:21","valueSize":1},{"declaration":4364,"isOffset":false,"isSlot":false,"src":"2369:5:21","valueSize":1},{"declaration":4364,"isOffset":false,"isSlot":false,"src":"2384:5:21","valueSize":1},{"declaration":4367,"isOffset":false,"isSlot":false,"src":"2348:5:21","valueSize":1},{"declaration":4354,"isOffset":false,"isSlot":false,"src":"2283:1:21","valueSize":1},{"declaration":4354,"isOffset":false,"isSlot":false,"src":"2326:1:21","valueSize":1},{"declaration":4356,"isOffset":false,"isSlot":false,"src":"2286:1:21","valueSize":1},{"declaration":4356,"isOffset":false,"isSlot":false,"src":"2329:1:21","valueSize":1}],"id":4369,"nodeType":"InlineAssembly","src":"2239:166:21"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4370,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4367,"src":"2486:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4378,"nodeType":"IfStatement","src":"2482:368:21","trueBody":{"id":4377,"nodeType":"Block","src":"2498:352:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4373,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4364,"src":"2816:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4374,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4358,"src":"2824:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4362,"id":4376,"nodeType":"Return","src":"2809:26:21"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4380,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4358,"src":"2960:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4381,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4367,"src":"2974:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":4383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":4379,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2952:53:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4385,"nodeType":"ExpressionStatement","src":"2952:53:21"},{"assignments":[4387],"declarations":[{"constant":false,"id":4387,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:21","nodeType":"VariableDeclaration","scope":4472,"src":"3261:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4386,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4388,"nodeType":"VariableDeclarationStatement","src":"3261:17:21"},{"AST":{"nodeType":"YulBlock","src":"3301:291:21","statements":[{"nodeType":"YulAssignment","src":"3370:38:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3390:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"3393:1:21"},{"name":"denominator","nodeType":"YulIdentifier","src":"3396:11:21"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3383:6:21"},"nodeType":"YulFunctionCall","src":"3383:25:21"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3370:9:21"}]},{"nodeType":"YulAssignment","src":"3490:41:21","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3503:5:21"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3513:9:21"},{"name":"prod0","nodeType":"YulIdentifier","src":"3524:5:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3510:2:21"},"nodeType":"YulFunctionCall","src":"3510:20:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3499:3:21"},"nodeType":"YulFunctionCall","src":"3499:32:21"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3490:5:21"}]},{"nodeType":"YulAssignment","src":"3548:30:21","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3561:5:21"},{"name":"remainder","nodeType":"YulIdentifier","src":"3568:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3557:3:21"},"nodeType":"YulFunctionCall","src":"3557:21:21"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3548:5:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4358,"isOffset":false,"isSlot":false,"src":"3396:11:21","valueSize":1},{"declaration":4364,"isOffset":false,"isSlot":false,"src":"3524:5:21","valueSize":1},{"declaration":4364,"isOffset":false,"isSlot":false,"src":"3548:5:21","valueSize":1},{"declaration":4364,"isOffset":false,"isSlot":false,"src":"3561:5:21","valueSize":1},{"declaration":4367,"isOffset":false,"isSlot":false,"src":"3490:5:21","valueSize":1},{"declaration":4367,"isOffset":false,"isSlot":false,"src":"3503:5:21","valueSize":1},{"declaration":4387,"isOffset":false,"isSlot":false,"src":"3370:9:21","valueSize":1},{"declaration":4387,"isOffset":false,"isSlot":false,"src":"3513:9:21","valueSize":1},{"declaration":4387,"isOffset":false,"isSlot":false,"src":"3568:9:21","valueSize":1},{"declaration":4354,"isOffset":false,"isSlot":false,"src":"3390:1:21","valueSize":1},{"declaration":4356,"isOffset":false,"isSlot":false,"src":"3393:1:21","valueSize":1}],"id":4389,"nodeType":"InlineAssembly","src":"3292:300:21"},{"assignments":[4391],"declarations":[{"constant":false,"id":4391,"mutability":"mutable","name":"twos","nameLocation":"3907:4:21","nodeType":"VariableDeclaration","scope":4472,"src":"3899:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4390,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4399,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4392,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4358,"src":"3914:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:21","subExpression":{"id":4393,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4358,"src":"3930:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4397,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:21"},{"AST":{"nodeType":"YulBlock","src":"3969:362:21","statements":[{"nodeType":"YulAssignment","src":"4034:37:21","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4053:11:21"},{"name":"twos","nodeType":"YulIdentifier","src":"4066:4:21"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4049:3:21"},"nodeType":"YulFunctionCall","src":"4049:22:21"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4034:11:21"}]},{"nodeType":"YulAssignment","src":"4138:25:21","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4151:5:21"},{"name":"twos","nodeType":"YulIdentifier","src":"4158:4:21"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4147:3:21"},"nodeType":"YulFunctionCall","src":"4147:16:21"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4138:5:21"}]},{"nodeType":"YulAssignment","src":"4278:39:21","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4298:1:21","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4301:4:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4294:3:21"},"nodeType":"YulFunctionCall","src":"4294:12:21"},{"name":"twos","nodeType":"YulIdentifier","src":"4308:4:21"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4290:3:21"},"nodeType":"YulFunctionCall","src":"4290:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"4315:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:21"},"nodeType":"YulFunctionCall","src":"4286:31:21"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4278:4:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4358,"isOffset":false,"isSlot":false,"src":"4034:11:21","valueSize":1},{"declaration":4358,"isOffset":false,"isSlot":false,"src":"4053:11:21","valueSize":1},{"declaration":4364,"isOffset":false,"isSlot":false,"src":"4138:5:21","valueSize":1},{"declaration":4364,"isOffset":false,"isSlot":false,"src":"4151:5:21","valueSize":1},{"declaration":4391,"isOffset":false,"isSlot":false,"src":"4066:4:21","valueSize":1},{"declaration":4391,"isOffset":false,"isSlot":false,"src":"4158:4:21","valueSize":1},{"declaration":4391,"isOffset":false,"isSlot":false,"src":"4278:4:21","valueSize":1},{"declaration":4391,"isOffset":false,"isSlot":false,"src":"4301:4:21","valueSize":1},{"declaration":4391,"isOffset":false,"isSlot":false,"src":"4308:4:21","valueSize":1}],"id":4400,"nodeType":"InlineAssembly","src":"3960:371:21"},{"expression":{"id":4405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4401,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4364,"src":"4397:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4402,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4367,"src":"4406:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4403,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4391,"src":"4414:4:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4406,"nodeType":"ExpressionStatement","src":"4397:21:21"},{"assignments":[4408],"declarations":[{"constant":false,"id":4408,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:21","nodeType":"VariableDeclaration","scope":4472,"src":"4736:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4407,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4415,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":4409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:21","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4410,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4358,"src":"4759:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4412,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":4413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:21"},{"expression":{"id":4422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4416,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"4992:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4418,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4358,"src":"5007:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4419,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"5021:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4423,"nodeType":"ExpressionStatement","src":"4992:36:21"},{"expression":{"id":4430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4424,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"5061:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4426,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4358,"src":"5076:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4427,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"5090:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4431,"nodeType":"ExpressionStatement","src":"5061:36:21"},{"expression":{"id":4438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4432,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"5131:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4434,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4358,"src":"5146:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4435,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"5160:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4439,"nodeType":"ExpressionStatement","src":"5131:36:21"},{"expression":{"id":4446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4440,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"5201:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4442,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4358,"src":"5216:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4443,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"5230:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4447,"nodeType":"ExpressionStatement","src":"5201:36:21"},{"expression":{"id":4454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4448,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"5271:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4450,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4358,"src":"5286:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4451,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"5300:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4455,"nodeType":"ExpressionStatement","src":"5271:36:21"},{"expression":{"id":4462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4456,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"5342:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4458,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4358,"src":"5357:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4459,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"5371:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4463,"nodeType":"ExpressionStatement","src":"5342:36:21"},{"expression":{"id":4468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4464,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"5812:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4465,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4364,"src":"5821:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4466,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"5829:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4469,"nodeType":"ExpressionStatement","src":"5812:24:21"},{"expression":{"id":4470,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"5857:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4362,"id":4471,"nodeType":"Return","src":"5850:13:21"}]}]},"documentation":{"id":4352,"nodeType":"StructuredDocumentation","src":"1357:305:21","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":4474,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:21","nodeType":"FunctionDefinition","parameters":{"id":4359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4354,"mutability":"mutable","name":"x","nameLocation":"1691:1:21","nodeType":"VariableDeclaration","scope":4474,"src":"1683:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4353,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4356,"mutability":"mutable","name":"y","nameLocation":"1702:1:21","nodeType":"VariableDeclaration","scope":4474,"src":"1694:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4355,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4358,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:21","nodeType":"VariableDeclaration","scope":4474,"src":"1705:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4357,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:21"},"returnParameters":{"id":4362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4361,"mutability":"mutable","name":"result","nameLocation":"1757:6:21","nodeType":"VariableDeclaration","scope":4474,"src":"1749:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4360,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:21"},"scope":5126,"src":"1667:4213:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4517,"nodeType":"Block","src":"6122:189:21","statements":[{"assignments":[4490],"declarations":[{"constant":false,"id":4490,"mutability":"mutable","name":"result","nameLocation":"6140:6:21","nodeType":"VariableDeclaration","scope":4517,"src":"6132:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4489,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4496,"initialValue":{"arguments":[{"id":4492,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4477,"src":"6156:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4493,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4479,"src":"6159:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4494,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4481,"src":"6162:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4491,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[4474,4518],"referencedDeclaration":4474,"src":"6149:6:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6149:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:21"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"},"id":4500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4497,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"6188:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4498,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"6200:8:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4267_$","typeString":"type(enum Math.Rounding)"}},"id":4499,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6209:2:21","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4265,"src":"6200:11:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"}},"src":"6188:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4502,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4477,"src":"6222:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4503,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4479,"src":"6225:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4504,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4481,"src":"6228:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4501,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:21","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6215:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4514,"nodeType":"IfStatement","src":"6184:98:21","trueBody":{"id":4513,"nodeType":"Block","src":"6246:36:21","statements":[{"expression":{"id":4511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4509,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4490,"src":"6260:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4512,"nodeType":"ExpressionStatement","src":"6260:11:21"}]}},{"expression":{"id":4515,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4490,"src":"6298:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4488,"id":4516,"nodeType":"Return","src":"6291:13:21"}]},"documentation":{"id":4475,"nodeType":"StructuredDocumentation","src":"5886:121:21","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":4518,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:21","nodeType":"FunctionDefinition","parameters":{"id":4485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4477,"mutability":"mutable","name":"x","nameLocation":"6036:1:21","nodeType":"VariableDeclaration","scope":4518,"src":"6028:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4476,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4479,"mutability":"mutable","name":"y","nameLocation":"6047:1:21","nodeType":"VariableDeclaration","scope":4518,"src":"6039:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4478,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4481,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:21","nodeType":"VariableDeclaration","scope":4518,"src":"6050:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4480,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4484,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:21","nodeType":"VariableDeclaration","scope":4518,"src":"6071:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"},"typeName":{"id":4483,"nodeType":"UserDefinedTypeName","pathNode":{"id":4482,"name":"Rounding","nameLocations":["6071:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":4267,"src":"6071:8:21"},"referencedDeclaration":4267,"src":"6071:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:21"},"returnParameters":{"id":4488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4487,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4518,"src":"6113:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4486,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:21"},"scope":5126,"src":"6012:299:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4629,"nodeType":"Block","src":"6587:1585:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4526,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4521,"src":"6601:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4532,"nodeType":"IfStatement","src":"6597:45:21","trueBody":{"id":4531,"nodeType":"Block","src":"6609:33:21","statements":[{"expression":{"hexValue":"30","id":4529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4525,"id":4530,"nodeType":"Return","src":"6623:8:21"}]}},{"assignments":[4534],"declarations":[{"constant":false,"id":4534,"mutability":"mutable","name":"result","nameLocation":"7329:6:21","nodeType":"VariableDeclaration","scope":4629,"src":"7321:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4533,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4543,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4537,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4521,"src":"7349:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4536,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4798,4834],"referencedDeclaration":4798,"src":"7344:4:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:7:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4541,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:21"},{"id":4628,"nodeType":"UncheckedBlock","src":"7758:408:21","statements":[{"expression":{"id":4553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4544,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"7782:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4545,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"7792:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4546,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4521,"src":"7801:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4547,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"7805:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4550,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4554,"nodeType":"ExpressionStatement","src":"7782:35:21"},{"expression":{"id":4564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4555,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"7831:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4556,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"7841:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4557,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4521,"src":"7850:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4558,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"7854:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4561,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4565,"nodeType":"ExpressionStatement","src":"7831:35:21"},{"expression":{"id":4575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4566,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"7880:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4567,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"7890:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4568,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4521,"src":"7899:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4569,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"7903:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4572,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4576,"nodeType":"ExpressionStatement","src":"7880:35:21"},{"expression":{"id":4586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4577,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"7929:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4578,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"7939:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4579,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4521,"src":"7948:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4580,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"7952:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4583,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4587,"nodeType":"ExpressionStatement","src":"7929:35:21"},{"expression":{"id":4597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4588,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"7978:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4589,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"7988:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4590,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4521,"src":"7997:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4591,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"8001:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4594,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4598,"nodeType":"ExpressionStatement","src":"7978:35:21"},{"expression":{"id":4608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4599,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"8027:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4600,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"8037:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4601,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4521,"src":"8046:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4602,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"8050:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4605,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4609,"nodeType":"ExpressionStatement","src":"8027:35:21"},{"expression":{"id":4619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4610,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"8076:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4611,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"8086:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4612,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4521,"src":"8095:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4613,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"8099:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4616,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4620,"nodeType":"ExpressionStatement","src":"8076:35:21"},{"expression":{"arguments":[{"id":4622,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"8136:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4623,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4521,"src":"8144:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4624,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4534,"src":"8148:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4621,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4303,"src":"8132:3:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:23:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4525,"id":4627,"nodeType":"Return","src":"8125:30:21"}]}]},"documentation":{"id":4519,"nodeType":"StructuredDocumentation","src":"6317:208:21","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":4630,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:21","nodeType":"FunctionDefinition","parameters":{"id":4522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4521,"mutability":"mutable","name":"a","nameLocation":"6552:1:21","nodeType":"VariableDeclaration","scope":4630,"src":"6544:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4520,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:21"},"returnParameters":{"id":4525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4524,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4630,"src":"6578:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4523,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:21"},"scope":5126,"src":"6530:1642:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4665,"nodeType":"Block","src":"8348:161:21","statements":[{"id":4664,"nodeType":"UncheckedBlock","src":"8358:145:21","statements":[{"assignments":[4642],"declarations":[{"constant":false,"id":4642,"mutability":"mutable","name":"result","nameLocation":"8390:6:21","nodeType":"VariableDeclaration","scope":4664,"src":"8382:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4641,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4646,"initialValue":{"arguments":[{"id":4644,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4633,"src":"8404:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4643,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[4630,4666],"referencedDeclaration":4630,"src":"8399:4:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:7:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:21"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4647,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4642,"src":"8427:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"},"id":4651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4648,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4636,"src":"8437:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4649,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"8449:8:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4267_$","typeString":"type(enum Math.Rounding)"}},"id":4650,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8458:2:21","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4265,"src":"8449:11:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"}},"src":"8437:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4652,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4642,"src":"8464:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4653,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4642,"src":"8473:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4655,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4633,"src":"8482:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:21","trueExpression":{"hexValue":"31","id":4658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4661,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4640,"id":4663,"nodeType":"Return","src":"8420:72:21"}]}]},"documentation":{"id":4631,"nodeType":"StructuredDocumentation","src":"8178:89:21","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":4666,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:21","nodeType":"FunctionDefinition","parameters":{"id":4637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4633,"mutability":"mutable","name":"a","nameLocation":"8294:1:21","nodeType":"VariableDeclaration","scope":4666,"src":"8286:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4632,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4636,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:21","nodeType":"VariableDeclaration","scope":4666,"src":"8297:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"},"typeName":{"id":4635,"nodeType":"UserDefinedTypeName","pathNode":{"id":4634,"name":"Rounding","nameLocations":["8297:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":4267,"src":"8297:8:21"},"referencedDeclaration":4267,"src":"8297:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:21"},"returnParameters":{"id":4640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4639,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4666,"src":"8339:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4638,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:21"},"scope":5126,"src":"8272:237:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4797,"nodeType":"Block","src":"8694:922:21","statements":[{"assignments":[4675],"declarations":[{"constant":false,"id":4675,"mutability":"mutable","name":"result","nameLocation":"8712:6:21","nodeType":"VariableDeclaration","scope":4797,"src":"8704:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4674,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4677,"initialValue":{"hexValue":"30","id":4676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:21"},{"id":4794,"nodeType":"UncheckedBlock","src":"8732:855:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4678,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"8760:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4692,"nodeType":"IfStatement","src":"8756:99:21","trueBody":{"id":4691,"nodeType":"Block","src":"8778:77:21","statements":[{"expression":{"id":4685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4683,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"8796:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4686,"nodeType":"ExpressionStatement","src":"8796:13:21"},{"expression":{"id":4689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4687,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4675,"src":"8827:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":4688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4690,"nodeType":"ExpressionStatement","src":"8827:13:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4693,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"8872:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4707,"nodeType":"IfStatement","src":"8868:96:21","trueBody":{"id":4706,"nodeType":"Block","src":"8889:75:21","statements":[{"expression":{"id":4700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4698,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"8907:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4701,"nodeType":"ExpressionStatement","src":"8907:12:21"},{"expression":{"id":4704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4702,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4675,"src":"8937:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4705,"nodeType":"ExpressionStatement","src":"8937:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4708,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"8981:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4722,"nodeType":"IfStatement","src":"8977:96:21","trueBody":{"id":4721,"nodeType":"Block","src":"8998:75:21","statements":[{"expression":{"id":4715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4713,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"9016:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4716,"nodeType":"ExpressionStatement","src":"9016:12:21"},{"expression":{"id":4719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4717,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4675,"src":"9046:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4720,"nodeType":"ExpressionStatement","src":"9046:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4723,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"9090:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4737,"nodeType":"IfStatement","src":"9086:96:21","trueBody":{"id":4736,"nodeType":"Block","src":"9107:75:21","statements":[{"expression":{"id":4730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4728,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"9125:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4731,"nodeType":"ExpressionStatement","src":"9125:12:21"},{"expression":{"id":4734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4732,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4675,"src":"9155:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4735,"nodeType":"ExpressionStatement","src":"9155:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4738,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"9199:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4752,"nodeType":"IfStatement","src":"9195:93:21","trueBody":{"id":4751,"nodeType":"Block","src":"9215:73:21","statements":[{"expression":{"id":4745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4743,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"9233:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":4744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4746,"nodeType":"ExpressionStatement","src":"9233:11:21"},{"expression":{"id":4749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4747,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4675,"src":"9262:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4750,"nodeType":"ExpressionStatement","src":"9262:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4753,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"9305:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":4754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4767,"nodeType":"IfStatement","src":"9301:93:21","trueBody":{"id":4766,"nodeType":"Block","src":"9321:73:21","statements":[{"expression":{"id":4760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4758,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"9339:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":4759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4761,"nodeType":"ExpressionStatement","src":"9339:11:21"},{"expression":{"id":4764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4762,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4675,"src":"9368:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4765,"nodeType":"ExpressionStatement","src":"9368:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4768,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"9411:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":4769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4782,"nodeType":"IfStatement","src":"9407:93:21","trueBody":{"id":4781,"nodeType":"Block","src":"9427:73:21","statements":[{"expression":{"id":4775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4773,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"9445:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":4774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4776,"nodeType":"ExpressionStatement","src":"9445:11:21"},{"expression":{"id":4779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4777,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4675,"src":"9474:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4780,"nodeType":"ExpressionStatement","src":"9474:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4783,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"9517:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4793,"nodeType":"IfStatement","src":"9513:64:21","trueBody":{"id":4792,"nodeType":"Block","src":"9533:44:21","statements":[{"expression":{"id":4790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4788,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4675,"src":"9551:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4791,"nodeType":"ExpressionStatement","src":"9551:11:21"}]}}]},{"expression":{"id":4795,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4675,"src":"9603:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4673,"id":4796,"nodeType":"Return","src":"9596:13:21"}]},"documentation":{"id":4667,"nodeType":"StructuredDocumentation","src":"8515:113:21","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4798,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:21","nodeType":"FunctionDefinition","parameters":{"id":4670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4669,"mutability":"mutable","name":"value","nameLocation":"8655:5:21","nodeType":"VariableDeclaration","scope":4798,"src":"8647:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4668,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:21"},"returnParameters":{"id":4673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4672,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4798,"src":"8685:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4671,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:21"},"scope":5126,"src":"8633:983:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4833,"nodeType":"Block","src":"9849:165:21","statements":[{"id":4832,"nodeType":"UncheckedBlock","src":"9859:149:21","statements":[{"assignments":[4810],"declarations":[{"constant":false,"id":4810,"mutability":"mutable","name":"result","nameLocation":"9891:6:21","nodeType":"VariableDeclaration","scope":4832,"src":"9883:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4809,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4814,"initialValue":{"arguments":[{"id":4812,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4801,"src":"9905:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4811,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4798,4834],"referencedDeclaration":4798,"src":"9900:4:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9900:11:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:21"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4815,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4810,"src":"9932:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"},"id":4819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4816,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"9942:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4817,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"9954:8:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4267_$","typeString":"type(enum Math.Rounding)"}},"id":4818,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9963:2:21","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4265,"src":"9954:11:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"}},"src":"9942:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":4821,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4810,"src":"9974:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4823,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4801,"src":"9983:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:21","trueExpression":{"hexValue":"31","id":4826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4829,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4808,"id":4831,"nodeType":"Return","src":"9925:72:21"}]}]},"documentation":{"id":4799,"nodeType":"StructuredDocumentation","src":"9622:142:21","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4834,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:21","nodeType":"FunctionDefinition","parameters":{"id":4805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4801,"mutability":"mutable","name":"value","nameLocation":"9791:5:21","nodeType":"VariableDeclaration","scope":4834,"src":"9783:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4800,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4804,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:21","nodeType":"VariableDeclaration","scope":4834,"src":"9798:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"},"typeName":{"id":4803,"nodeType":"UserDefinedTypeName","pathNode":{"id":4802,"name":"Rounding","nameLocations":["9798:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":4267,"src":"9798:8:21"},"referencedDeclaration":4267,"src":"9798:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:21"},"returnParameters":{"id":4808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4807,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4834,"src":"9840:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4806,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:21"},"scope":5126,"src":"9769:245:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4962,"nodeType":"Block","src":"10201:854:21","statements":[{"assignments":[4843],"declarations":[{"constant":false,"id":4843,"mutability":"mutable","name":"result","nameLocation":"10219:6:21","nodeType":"VariableDeclaration","scope":4962,"src":"10211:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4842,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4845,"initialValue":{"hexValue":"30","id":4844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:21"},{"id":4959,"nodeType":"UncheckedBlock","src":"10239:787:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4846,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"10267:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4849,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:21","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4862,"nodeType":"IfStatement","src":"10263:103:21","trueBody":{"id":4861,"nodeType":"Block","src":"10286:80:21","statements":[{"expression":{"id":4855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4851,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"10304:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4854,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:21","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4856,"nodeType":"ExpressionStatement","src":"10304:17:21"},{"expression":{"id":4859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4857,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4843,"src":"10339:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4860,"nodeType":"ExpressionStatement","src":"10339:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4863,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"10383:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4866,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:21","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4879,"nodeType":"IfStatement","src":"10379:103:21","trueBody":{"id":4878,"nodeType":"Block","src":"10402:80:21","statements":[{"expression":{"id":4872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4868,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"10420:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4871,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:21","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4873,"nodeType":"ExpressionStatement","src":"10420:17:21"},{"expression":{"id":4876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4874,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4843,"src":"10455:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4877,"nodeType":"ExpressionStatement","src":"10455:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4880,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"10499:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4883,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:21","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4896,"nodeType":"IfStatement","src":"10495:103:21","trueBody":{"id":4895,"nodeType":"Block","src":"10518:80:21","statements":[{"expression":{"id":4889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4885,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"10536:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4888,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:21","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4890,"nodeType":"ExpressionStatement","src":"10536:17:21"},{"expression":{"id":4893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4891,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4843,"src":"10571:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4894,"nodeType":"ExpressionStatement","src":"10571:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4897,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"10615:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4900,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:21","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4913,"nodeType":"IfStatement","src":"10611:100:21","trueBody":{"id":4912,"nodeType":"Block","src":"10633:78:21","statements":[{"expression":{"id":4906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4902,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"10651:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4905,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:21","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4907,"nodeType":"ExpressionStatement","src":"10651:16:21"},{"expression":{"id":4910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4908,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4843,"src":"10685:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4911,"nodeType":"ExpressionStatement","src":"10685:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4914,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"10728:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4917,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:21","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4930,"nodeType":"IfStatement","src":"10724:100:21","trueBody":{"id":4929,"nodeType":"Block","src":"10746:78:21","statements":[{"expression":{"id":4923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4919,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"10764:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4922,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:21","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4924,"nodeType":"ExpressionStatement","src":"10764:16:21"},{"expression":{"id":4927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4925,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4843,"src":"10798:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4928,"nodeType":"ExpressionStatement","src":"10798:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4931,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"10841:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4934,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:21","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4947,"nodeType":"IfStatement","src":"10837:100:21","trueBody":{"id":4946,"nodeType":"Block","src":"10859:78:21","statements":[{"expression":{"id":4940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4936,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"10877:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4939,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:21","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4941,"nodeType":"ExpressionStatement","src":"10877:16:21"},{"expression":{"id":4944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4942,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4843,"src":"10911:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4945,"nodeType":"ExpressionStatement","src":"10911:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4948,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"10954:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":4951,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":4950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4958,"nodeType":"IfStatement","src":"10950:66:21","trueBody":{"id":4957,"nodeType":"Block","src":"10972:44:21","statements":[{"expression":{"id":4955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4953,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4843,"src":"10990:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4956,"nodeType":"ExpressionStatement","src":"10990:11:21"}]}}]},{"expression":{"id":4960,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4843,"src":"11042:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4841,"id":4961,"nodeType":"Return","src":"11035:13:21"}]},"documentation":{"id":4835,"nodeType":"StructuredDocumentation","src":"10020:114:21","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4963,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:21","nodeType":"FunctionDefinition","parameters":{"id":4838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4837,"mutability":"mutable","name":"value","nameLocation":"10162:5:21","nodeType":"VariableDeclaration","scope":4963,"src":"10154:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4836,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:21"},"returnParameters":{"id":4841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4840,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4963,"src":"10192:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4839,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:21"},"scope":5126,"src":"10139:916:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4998,"nodeType":"Block","src":"11290:167:21","statements":[{"id":4997,"nodeType":"UncheckedBlock","src":"11300:151:21","statements":[{"assignments":[4975],"declarations":[{"constant":false,"id":4975,"mutability":"mutable","name":"result","nameLocation":"11332:6:21","nodeType":"VariableDeclaration","scope":4997,"src":"11324:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4974,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4979,"initialValue":{"arguments":[{"id":4977,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4966,"src":"11347:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4976,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[4963,4999],"referencedDeclaration":4963,"src":"11341:5:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11341:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:21"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4980,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4975,"src":"11374:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"},"id":4984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4981,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4969,"src":"11384:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4982,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"11396:8:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4267_$","typeString":"type(enum Math.Rounding)"}},"id":4983,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11405:2:21","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4265,"src":"11396:11:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"}},"src":"11384:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":4986,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4975,"src":"11417:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4988,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4966,"src":"11426:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:21","trueExpression":{"hexValue":"31","id":4991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4994,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4973,"id":4996,"nodeType":"Return","src":"11367:73:21"}]}]},"documentation":{"id":4964,"nodeType":"StructuredDocumentation","src":"11061:143:21","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4999,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:21","nodeType":"FunctionDefinition","parameters":{"id":4970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4966,"mutability":"mutable","name":"value","nameLocation":"11232:5:21","nodeType":"VariableDeclaration","scope":4999,"src":"11224:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4965,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4969,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:21","nodeType":"VariableDeclaration","scope":4999,"src":"11239:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"},"typeName":{"id":4968,"nodeType":"UserDefinedTypeName","pathNode":{"id":4967,"name":"Rounding","nameLocations":["11239:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":4267,"src":"11239:8:21"},"referencedDeclaration":4267,"src":"11239:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:21"},"returnParameters":{"id":4973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4972,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4999,"src":"11281:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4971,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:21"},"scope":5126,"src":"11209:248:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5085,"nodeType":"Block","src":"11771:600:21","statements":[{"assignments":[5008],"declarations":[{"constant":false,"id":5008,"mutability":"mutable","name":"result","nameLocation":"11789:6:21","nodeType":"VariableDeclaration","scope":5085,"src":"11781:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5007,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5010,"initialValue":{"hexValue":"30","id":5009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:21"},{"id":5082,"nodeType":"UncheckedBlock","src":"11809:533:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5011,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5002,"src":"11837:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":5012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5025,"nodeType":"IfStatement","src":"11833:98:21","trueBody":{"id":5024,"nodeType":"Block","src":"11855:76:21","statements":[{"expression":{"id":5018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5016,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5002,"src":"11873:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":5017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5019,"nodeType":"ExpressionStatement","src":"11873:13:21"},{"expression":{"id":5022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5020,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5008,"src":"11904:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":5021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5023,"nodeType":"ExpressionStatement","src":"11904:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5026,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5002,"src":"11948:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":5027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5040,"nodeType":"IfStatement","src":"11944:95:21","trueBody":{"id":5039,"nodeType":"Block","src":"11965:74:21","statements":[{"expression":{"id":5033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5031,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5002,"src":"11983:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":5032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5034,"nodeType":"ExpressionStatement","src":"11983:12:21"},{"expression":{"id":5037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5035,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5008,"src":"12013:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":5036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5038,"nodeType":"ExpressionStatement","src":"12013:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5041,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5002,"src":"12056:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":5042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5055,"nodeType":"IfStatement","src":"12052:95:21","trueBody":{"id":5054,"nodeType":"Block","src":"12073:74:21","statements":[{"expression":{"id":5048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5046,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5002,"src":"12091:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":5047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5049,"nodeType":"ExpressionStatement","src":"12091:12:21"},{"expression":{"id":5052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5050,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5008,"src":"12121:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":5051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5053,"nodeType":"ExpressionStatement","src":"12121:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5056,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5002,"src":"12164:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":5057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5070,"nodeType":"IfStatement","src":"12160:95:21","trueBody":{"id":5069,"nodeType":"Block","src":"12181:74:21","statements":[{"expression":{"id":5063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5061,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5002,"src":"12199:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":5062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5064,"nodeType":"ExpressionStatement","src":"12199:12:21"},{"expression":{"id":5067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5065,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5008,"src":"12229:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":5066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5068,"nodeType":"ExpressionStatement","src":"12229:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5071,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5002,"src":"12272:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":5072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5081,"nodeType":"IfStatement","src":"12268:64:21","trueBody":{"id":5080,"nodeType":"Block","src":"12288:44:21","statements":[{"expression":{"id":5078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5076,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5008,"src":"12306:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":5077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5079,"nodeType":"ExpressionStatement","src":"12306:11:21"}]}}]},{"expression":{"id":5083,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5008,"src":"12358:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5006,"id":5084,"nodeType":"Return","src":"12351:13:21"}]},"documentation":{"id":5000,"nodeType":"StructuredDocumentation","src":"11463:240:21","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":5086,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:21","nodeType":"FunctionDefinition","parameters":{"id":5003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5002,"mutability":"mutable","name":"value","nameLocation":"11732:5:21","nodeType":"VariableDeclaration","scope":5086,"src":"11724:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5001,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:21"},"returnParameters":{"id":5006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5005,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5086,"src":"11762:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5004,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:21"},"scope":5126,"src":"11708:663:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5124,"nodeType":"Block","src":"12608:174:21","statements":[{"id":5123,"nodeType":"UncheckedBlock","src":"12618:158:21","statements":[{"assignments":[5098],"declarations":[{"constant":false,"id":5098,"mutability":"mutable","name":"result","nameLocation":"12650:6:21","nodeType":"VariableDeclaration","scope":5123,"src":"12642:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5097,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5102,"initialValue":{"arguments":[{"id":5100,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5089,"src":"12666:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5099,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[5086,5125],"referencedDeclaration":5086,"src":"12659:6:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12659:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:21"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5103,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5098,"src":"12693:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"},"id":5107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5104,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5092,"src":"12703:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5105,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"12715:8:21","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$4267_$","typeString":"type(enum Math.Rounding)"}},"id":5106,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12724:2:21","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":4265,"src":"12715:11:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"}},"src":"12703:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5109,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5098,"src":"12736:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":5110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:21","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5112,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5114,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5089,"src":"12751:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":5118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":5119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:21","trueExpression":{"hexValue":"31","id":5117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":5120,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5096,"id":5122,"nodeType":"Return","src":"12686:79:21"}]}]},"documentation":{"id":5087,"nodeType":"StructuredDocumentation","src":"12377:144:21","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":5125,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:21","nodeType":"FunctionDefinition","parameters":{"id":5093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5089,"mutability":"mutable","name":"value","nameLocation":"12550:5:21","nodeType":"VariableDeclaration","scope":5125,"src":"12542:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5088,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5092,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:21","nodeType":"VariableDeclaration","scope":5125,"src":"12557:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"},"typeName":{"id":5091,"nodeType":"UserDefinedTypeName","pathNode":{"id":5090,"name":"Rounding","nameLocations":["12557:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":4267,"src":"12557:8:21"},"referencedDeclaration":4267,"src":"12557:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4267","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:21"},"returnParameters":{"id":5096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5095,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5125,"src":"12599:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5094,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:21"},"scope":5126,"src":"12526:256:21","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5127,"src":"202:12582:21","usedErrors":[]}],"src":"103:12682:21"},"id":21},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[5231]},"id":5232,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5128,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:22"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":5129,"nodeType":"StructuredDocumentation","src":"134:80:22","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":5231,"linearizedBaseContracts":[5231],"name":"SignedMath","nameLocation":"223:10:22","nodeType":"ContractDefinition","nodes":[{"body":{"id":5146,"nodeType":"Block","src":"375:37:22","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5139,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5132,"src":"392:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5140,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5134,"src":"396:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"392:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5143,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5134,"src":"404:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"392:13:22","trueExpression":{"id":5142,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5132,"src":"400:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5138,"id":5145,"nodeType":"Return","src":"385:20:22"}]},"documentation":{"id":5130,"nodeType":"StructuredDocumentation","src":"240:66:22","text":" @dev Returns the largest of two signed numbers."},"id":5147,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"320:3:22","nodeType":"FunctionDefinition","parameters":{"id":5135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5132,"mutability":"mutable","name":"a","nameLocation":"331:1:22","nodeType":"VariableDeclaration","scope":5147,"src":"324:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5131,"name":"int256","nodeType":"ElementaryTypeName","src":"324:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5134,"mutability":"mutable","name":"b","nameLocation":"341:1:22","nodeType":"VariableDeclaration","scope":5147,"src":"334:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5133,"name":"int256","nodeType":"ElementaryTypeName","src":"334:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"323:20:22"},"returnParameters":{"id":5138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5137,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5147,"src":"367:6:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5136,"name":"int256","nodeType":"ElementaryTypeName","src":"367:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"366:8:22"},"scope":5231,"src":"311:101:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5164,"nodeType":"Block","src":"554:37:22","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5157,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5150,"src":"571:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5158,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5152,"src":"575:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"571:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5161,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5152,"src":"583:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"571:13:22","trueExpression":{"id":5160,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5150,"src":"579:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5156,"id":5163,"nodeType":"Return","src":"564:20:22"}]},"documentation":{"id":5148,"nodeType":"StructuredDocumentation","src":"418:67:22","text":" @dev Returns the smallest of two signed numbers."},"id":5165,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"499:3:22","nodeType":"FunctionDefinition","parameters":{"id":5153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5150,"mutability":"mutable","name":"a","nameLocation":"510:1:22","nodeType":"VariableDeclaration","scope":5165,"src":"503:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5149,"name":"int256","nodeType":"ElementaryTypeName","src":"503:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5152,"mutability":"mutable","name":"b","nameLocation":"520:1:22","nodeType":"VariableDeclaration","scope":5165,"src":"513:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5151,"name":"int256","nodeType":"ElementaryTypeName","src":"513:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"502:20:22"},"returnParameters":{"id":5156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5155,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5165,"src":"546:6:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5154,"name":"int256","nodeType":"ElementaryTypeName","src":"546:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"545:8:22"},"scope":5231,"src":"490:101:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5208,"nodeType":"Block","src":"796:162:22","statements":[{"assignments":[5176],"declarations":[{"constant":false,"id":5176,"mutability":"mutable","name":"x","nameLocation":"865:1:22","nodeType":"VariableDeclaration","scope":5208,"src":"858:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5175,"name":"int256","nodeType":"ElementaryTypeName","src":"858:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":5189,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5177,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5168,"src":"870:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":5178,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5170,"src":"874:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:5:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5180,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"869:7:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5181,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5168,"src":"881:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":5182,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5170,"src":"885:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5184,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"880:12:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5187,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"879:14:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"869:24:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"858:35:22"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5190,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5176,"src":"910:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5195,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5176,"src":"930:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5194,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"922:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5193,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:22","typeDescriptions":{}}},"id":5196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"922:10:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":5197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:3:22","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"922:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5192,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:6:22","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5191,"name":"int256","nodeType":"ElementaryTypeName","src":"915:6:22","typeDescriptions":{}}},"id":5199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"915:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5200,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5168,"src":"944:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":5201,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5170,"src":"948:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"944:5:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5203,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"943:7:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"915:35:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5205,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"914:37:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"910:41:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5174,"id":5207,"nodeType":"Return","src":"903:48:22"}]},"documentation":{"id":5166,"nodeType":"StructuredDocumentation","src":"597:126:22","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":5209,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"737:7:22","nodeType":"FunctionDefinition","parameters":{"id":5171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5168,"mutability":"mutable","name":"a","nameLocation":"752:1:22","nodeType":"VariableDeclaration","scope":5209,"src":"745:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5167,"name":"int256","nodeType":"ElementaryTypeName","src":"745:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5170,"mutability":"mutable","name":"b","nameLocation":"762:1:22","nodeType":"VariableDeclaration","scope":5209,"src":"755:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5169,"name":"int256","nodeType":"ElementaryTypeName","src":"755:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"744:20:22"},"returnParameters":{"id":5174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5173,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5209,"src":"788:6:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5172,"name":"int256","nodeType":"ElementaryTypeName","src":"788:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"787:8:22"},"scope":5231,"src":"728:230:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5229,"nodeType":"Block","src":"1102:158:22","statements":[{"id":5228,"nodeType":"UncheckedBlock","src":"1112:142:22","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5219,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5212,"src":"1227:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":5220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1227:6:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1240:2:22","subExpression":{"id":5223,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5212,"src":"1241:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1227:15:22","trueExpression":{"id":5222,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5212,"src":"1236:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1219:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5217,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:22","typeDescriptions":{}}},"id":5226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1219:24:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5216,"id":5227,"nodeType":"Return","src":"1212:31:22"}]}]},"documentation":{"id":5210,"nodeType":"StructuredDocumentation","src":"964:78:22","text":" @dev Returns the absolute unsigned value of a signed value."},"id":5230,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1056:3:22","nodeType":"FunctionDefinition","parameters":{"id":5213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5212,"mutability":"mutable","name":"n","nameLocation":"1067:1:22","nodeType":"VariableDeclaration","scope":5230,"src":"1060:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5211,"name":"int256","nodeType":"ElementaryTypeName","src":"1060:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1059:10:22"},"returnParameters":{"id":5216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5215,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5230,"src":"1093:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5214,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:9:22"},"scope":5231,"src":"1047:213:22","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5232,"src":"215:1047:22","usedErrors":[]}],"src":"109:1154:22"},"id":22},"contracts/BasePaint.sol":{"ast":{"absolutePath":"contracts/BasePaint.sol","exportedSymbols":{"Address":[2970],"BasePaint":[5827],"Context":[3000],"ERC1155":[1374],"ERC165":[4248],"IBasePaintBrush":[5844],"IERC1155":[1496],"IERC1155MetadataURI":[1552],"IERC1155Receiver":[1537],"IERC165":[4260],"Ownable":[112]},"id":5828,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":5233,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"150:24:23"},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol","file":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol","id":5234,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5828,"sourceUnit":1375,"src":"176:59:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":5235,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5828,"sourceUnit":113,"src":"236:52:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/BasePaintBrush.sol","file":"./BasePaintBrush.sol","id":5237,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5828,"sourceUnit":6000,"src":"289:53:23","symbolAliases":[{"foreign":{"id":5236,"name":"IBasePaintBrush","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5844,"src":"297:15:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5238,"name":"ERC1155","nameLocations":["366:7:23"],"nodeType":"IdentifierPath","referencedDeclaration":1374,"src":"366:7:23"},"id":5239,"nodeType":"InheritanceSpecifier","src":"366:7:23"},{"baseName":{"id":5240,"name":"Ownable","nameLocations":["375:7:23"],"nodeType":"IdentifierPath","referencedDeclaration":112,"src":"375:7:23"},"id":5241,"nodeType":"InheritanceSpecifier","src":"375:7:23"}],"canonicalName":"BasePaint","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5827,"linearizedBaseContracts":[5827,112,1374,1552,1496,4248,4260,3000],"name":"BasePaint","nameLocation":"353:9:23","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"49621c3f","id":5244,"mutability":"mutable","name":"brushes","nameLocation":"412:7:23","nodeType":"VariableDeclaration","scope":5827,"src":"389:30:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IBasePaintBrush_$5844","typeString":"contract IBasePaintBrush"},"typeName":{"id":5243,"nodeType":"UserDefinedTypeName","pathNode":{"id":5242,"name":"IBasePaintBrush","nameLocations":["389:15:23"],"nodeType":"IdentifierPath","referencedDeclaration":5844,"src":"389:15:23"},"referencedDeclaration":5844,"src":"389:15:23","typeDescriptions":{"typeIdentifier":"t_contract$_IBasePaintBrush_$5844","typeString":"contract IBasePaintBrush"}},"visibility":"public"},{"constant":false,"functionSelector":"4ff0876a","id":5246,"mutability":"immutable","name":"epochDuration","nameLocation":"450:13:23","nodeType":"VariableDeclaration","scope":5827,"src":"425:38:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5245,"name":"uint256","nodeType":"ElementaryTypeName","src":"425:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"canonicalName":"BasePaint.Canvas","id":5259,"members":[{"constant":false,"id":5248,"mutability":"mutable","name":"totalContributions","nameLocation":"502:18:23","nodeType":"VariableDeclaration","scope":5259,"src":"494:26:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5247,"name":"uint256","nodeType":"ElementaryTypeName","src":"494:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5250,"mutability":"mutable","name":"totalRaised","nameLocation":"538:11:23","nodeType":"VariableDeclaration","scope":5259,"src":"530:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5249,"name":"uint256","nodeType":"ElementaryTypeName","src":"530:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5254,"mutability":"mutable","name":"contributions","nameLocation":"587:13:23","nodeType":"VariableDeclaration","scope":5259,"src":"559:41:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":5253,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5251,"name":"address","nodeType":"ElementaryTypeName","src":"567:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"559:27:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5252,"name":"uint256","nodeType":"ElementaryTypeName","src":"578:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":5258,"mutability":"mutable","name":"brushUsed","nameLocation":"638:9:23","nodeType":"VariableDeclaration","scope":5259,"src":"610:37:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":5257,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5255,"name":"uint256","nodeType":"ElementaryTypeName","src":"618:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"610:27:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5256,"name":"uint256","nodeType":"ElementaryTypeName","src":"629:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"Canvas","nameLocation":"477:6:23","nodeType":"StructDefinition","scope":5827,"src":"470:184:23","visibility":"public"},{"constant":false,"functionSelector":"d9d197a6","id":5264,"mutability":"mutable","name":"canvases","nameLocation":"694:8:23","nodeType":"VariableDeclaration","scope":5827,"src":"660:42:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Canvas_$5259_storage_$","typeString":"mapping(uint256 => struct BasePaint.Canvas)"},"typeName":{"id":5263,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5260,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"660:26:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Canvas_$5259_storage_$","typeString":"mapping(uint256 => struct BasePaint.Canvas)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5262,"nodeType":"UserDefinedTypeName","pathNode":{"id":5261,"name":"Canvas","nameLocations":["679:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":5259,"src":"679:6:23"},"referencedDeclaration":5259,"src":"679:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage_ptr","typeString":"struct BasePaint.Canvas"}}},"visibility":"public"},{"constant":false,"functionSelector":"f21f537d","id":5266,"mutability":"mutable","name":"startedAt","nameLocation":"723:9:23","nodeType":"VariableDeclaration","scope":5827,"src":"708:24:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5265,"name":"uint256","nodeType":"ElementaryTypeName","src":"708:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"69865686","id":5269,"mutability":"mutable","name":"openEditionPrice","nameLocation":"754:16:23","nodeType":"VariableDeclaration","scope":5827,"src":"739:46:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5267,"name":"uint256","nodeType":"ElementaryTypeName","src":"739:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"302e30303236","id":5268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"773:12:23","subdenomination":"ether","typeDescriptions":{"typeIdentifier":"t_rational_2600000000000000_by_1","typeString":"int_const 2600000000000000"},"value":"0.0026"},"visibility":"public"},{"constant":false,"functionSelector":"14de57cb","id":5272,"mutability":"mutable","name":"ownerFeePartsPerMillion","nameLocation":"806:23:23","nodeType":"VariableDeclaration","scope":5827,"src":"791:48:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5270,"name":"uint256","nodeType":"ElementaryTypeName","src":"791:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3130305f303030","id":5271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"832:7:23","typeDescriptions":{"typeIdentifier":"t_rational_100000_by_1","typeString":"int_const 100000"},"value":"100_000"},"visibility":"public"},{"constant":false,"functionSelector":"f9af6c58","id":5274,"mutability":"mutable","name":"ownerEarned","nameLocation":"871:11:23","nodeType":"VariableDeclaration","scope":5827,"src":"856:26:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5273,"name":"uint256","nodeType":"ElementaryTypeName","src":"856:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"anonymous":false,"eventSelector":"006e0c97de781a7389d44ba8fd35d1467cabb17ed04d038d166d34ab819213f3","id":5278,"name":"Started","nameLocation":"895:7:23","nodeType":"EventDefinition","parameters":{"id":5277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5276,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"911:9:23","nodeType":"VariableDeclaration","scope":5278,"src":"903:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5275,"name":"uint256","nodeType":"ElementaryTypeName","src":"903:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"902:19:23"},"src":"889:33:23"},{"anonymous":false,"eventSelector":"4ecc3f51341c13c2f7214d794dfea90b5bab5d7ff3951ca088f6329255a5dda2","id":5288,"name":"Painted","nameLocation":"933:7:23","nodeType":"EventDefinition","parameters":{"id":5287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5280,"indexed":true,"mutability":"mutable","name":"day","nameLocation":"957:3:23","nodeType":"VariableDeclaration","scope":5288,"src":"941:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5279,"name":"uint256","nodeType":"ElementaryTypeName","src":"941:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5282,"indexed":false,"mutability":"mutable","name":"tokenId","nameLocation":"970:7:23","nodeType":"VariableDeclaration","scope":5288,"src":"962:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5281,"name":"uint256","nodeType":"ElementaryTypeName","src":"962:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5284,"indexed":false,"mutability":"mutable","name":"author","nameLocation":"987:6:23","nodeType":"VariableDeclaration","scope":5288,"src":"979:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5283,"name":"address","nodeType":"ElementaryTypeName","src":"979:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5286,"indexed":false,"mutability":"mutable","name":"pixels","nameLocation":"1001:6:23","nodeType":"VariableDeclaration","scope":5288,"src":"995:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5285,"name":"bytes","nodeType":"ElementaryTypeName","src":"995:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"940:68:23"},"src":"927:82:23"},{"anonymous":false,"eventSelector":"1033721d007e6103a21cb6edd862fc6eb6a601285ee27d595c4d9f9e597a1837","id":5294,"name":"ArtistsEarned","nameLocation":"1021:13:23","nodeType":"EventDefinition","parameters":{"id":5293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5290,"indexed":true,"mutability":"mutable","name":"day","nameLocation":"1051:3:23","nodeType":"VariableDeclaration","scope":5294,"src":"1035:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5289,"name":"uint256","nodeType":"ElementaryTypeName","src":"1035:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5292,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1064:6:23","nodeType":"VariableDeclaration","scope":5294,"src":"1056:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5291,"name":"uint256","nodeType":"ElementaryTypeName","src":"1056:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1034:37:23"},"src":"1015:57:23"},{"anonymous":false,"eventSelector":"cc1db7b1578c9fa756ff3c2d490732a4790a5a1181ab6eb5829daa870e246d95","id":5302,"name":"ArtistWithdraw","nameLocation":"1083:14:23","nodeType":"EventDefinition","parameters":{"id":5301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5296,"indexed":true,"mutability":"mutable","name":"day","nameLocation":"1114:3:23","nodeType":"VariableDeclaration","scope":5302,"src":"1098:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5295,"name":"uint256","nodeType":"ElementaryTypeName","src":"1098:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5298,"indexed":false,"mutability":"mutable","name":"author","nameLocation":"1127:6:23","nodeType":"VariableDeclaration","scope":5302,"src":"1119:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5297,"name":"address","nodeType":"ElementaryTypeName","src":"1119:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5300,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1143:6:23","nodeType":"VariableDeclaration","scope":5302,"src":"1135:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5299,"name":"uint256","nodeType":"ElementaryTypeName","src":"1135:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1097:53:23"},"src":"1077:74:23"},{"anonymous":false,"eventSelector":"8824e69bdb6ace1cae2d46266847d0b140caf4a17ea02b2317c95e62f5cf341a","id":5306,"name":"OpenEditionPriceUpdated","nameLocation":"1163:23:23","nodeType":"EventDefinition","parameters":{"id":5305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5304,"indexed":false,"mutability":"mutable","name":"price","nameLocation":"1195:5:23","nodeType":"VariableDeclaration","scope":5306,"src":"1187:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5303,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1186:15:23"},"src":"1157:45:23"},{"anonymous":false,"eventSelector":"5d366c044b06faba913c60796eaeecb48b0ecfe9f5834c86a239955a90054abb","id":5310,"name":"OwnerFeeUpdated","nameLocation":"1213:15:23","nodeType":"EventDefinition","parameters":{"id":5309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5308,"indexed":false,"mutability":"mutable","name":"fee","nameLocation":"1237:3:23","nodeType":"VariableDeclaration","scope":5310,"src":"1229:11:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5307,"name":"uint256","nodeType":"ElementaryTypeName","src":"1229:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1228:13:23"},"src":"1207:35:23"},{"anonymous":false,"eventSelector":"5bbdd53ba1d6d75026c4b60ff971e848d7bd18fd647eaeaa174c913f3f0f1bdf","id":5316,"name":"OwnerWithdrew","nameLocation":"1253:13:23","nodeType":"EventDefinition","parameters":{"id":5315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5312,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1275:6:23","nodeType":"VariableDeclaration","scope":5316,"src":"1267:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5311,"name":"uint256","nodeType":"ElementaryTypeName","src":"1267:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5314,"indexed":false,"mutability":"mutable","name":"to","nameLocation":"1291:2:23","nodeType":"VariableDeclaration","scope":5316,"src":"1283:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5313,"name":"address","nodeType":"ElementaryTypeName","src":"1283:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1266:28:23"},"src":"1247:48:23"},{"body":{"id":5335,"nodeType":"Block","src":"1409:75:23","statements":[{"expression":{"id":5329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5327,"name":"brushes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5244,"src":"1419:7:23","typeDescriptions":{"typeIdentifier":"t_contract$_IBasePaintBrush_$5844","typeString":"contract IBasePaintBrush"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5328,"name":"_brushes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5319,"src":"1429:8:23","typeDescriptions":{"typeIdentifier":"t_contract$_IBasePaintBrush_$5844","typeString":"contract IBasePaintBrush"}},"src":"1419:18:23","typeDescriptions":{"typeIdentifier":"t_contract$_IBasePaintBrush_$5844","typeString":"contract IBasePaintBrush"}},"id":5330,"nodeType":"ExpressionStatement","src":"1419:18:23"},{"expression":{"id":5333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5331,"name":"epochDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5246,"src":"1447:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5332,"name":"_epochDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5321,"src":"1463:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1447:30:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5334,"nodeType":"ExpressionStatement","src":"1447:30:23"}]},"id":5336,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"68747470733a2f2f626173657061696e742e78797a2f6170692f6172742f7b69647d","id":5324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1371:36:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_0515e3e7bddf9eb20e16058aebcfb8f00c2d0579b602de62fe17cd4ddb379688","typeString":"literal_string \"https://basepaint.xyz/api/art/{id}\""},"value":"https://basepaint.xyz/api/art/{id}"}],"id":5325,"kind":"baseConstructorSpecifier","modifierName":{"id":5323,"name":"ERC1155","nameLocations":["1363:7:23"],"nodeType":"IdentifierPath","referencedDeclaration":1374,"src":"1363:7:23"},"nodeType":"ModifierInvocation","src":"1363:45:23"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5319,"mutability":"mutable","name":"_brushes","nameLocation":"1329:8:23","nodeType":"VariableDeclaration","scope":5336,"src":"1313:24:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IBasePaintBrush_$5844","typeString":"contract IBasePaintBrush"},"typeName":{"id":5318,"nodeType":"UserDefinedTypeName","pathNode":{"id":5317,"name":"IBasePaintBrush","nameLocations":["1313:15:23"],"nodeType":"IdentifierPath","referencedDeclaration":5844,"src":"1313:15:23"},"referencedDeclaration":5844,"src":"1313:15:23","typeDescriptions":{"typeIdentifier":"t_contract$_IBasePaintBrush_$5844","typeString":"contract IBasePaintBrush"}},"visibility":"internal"},{"constant":false,"id":5321,"mutability":"mutable","name":"_epochDuration","nameLocation":"1347:14:23","nodeType":"VariableDeclaration","scope":5336,"src":"1339:22:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5320,"name":"uint256","nodeType":"ElementaryTypeName","src":"1339:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1312:50:23"},"returnParameters":{"id":5326,"nodeType":"ParameterList","parameters":[],"src":"1409:0:23"},"scope":5827,"src":"1301:183:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5419,"nodeType":"Block","src":"1547:498:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5344,"name":"startedAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5266,"src":"1565:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1577:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1565:13:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f742073746172746564","id":5347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1580:13:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8","typeString":"literal_string \"Not started\""},"value":"Not started"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8","typeString":"literal_string \"Not started\""}],"id":5343,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1557:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1557:37:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5349,"nodeType":"ExpressionStatement","src":"1557:37:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5351,"name":"day","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5338,"src":"1612:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1618:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1612:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5354,"name":"today","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5583,"src":"1623:5:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":5355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1623:7:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1612:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420646179","id":5357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1632:13:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e44432d9ae63e2829c6f8f2758edfa5a1bfee3e8b1cca3f560b2fd694999578","typeString":"literal_string \"Invalid day\""},"value":"Invalid day"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6e44432d9ae63e2829c6f8f2758edfa5a1bfee3e8b1cca3f560b2fd694999578","typeString":"literal_string \"Invalid day\""}],"id":5350,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1604:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1604:42:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5359,"nodeType":"ExpressionStatement","src":"1604:42:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5361,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1664:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1668:5:23","memberName":"value","nodeType":"MemberAccess","src":"1664:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5363,"name":"openEditionPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5269,"src":"1677:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5364,"name":"count","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5340,"src":"1696:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1677:24:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1664:37:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964207072696365","id":5367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1703:15:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_eaa01effe6abd0543e9529d3961b0f5d26980f0661c156a79b89c39a093463f7","typeString":"literal_string \"Invalid price\""},"value":"Invalid price"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_eaa01effe6abd0543e9529d3961b0f5d26980f0661c156a79b89c39a093463f7","typeString":"literal_string \"Invalid price\""}],"id":5360,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1656:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1656:63:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5369,"nodeType":"ExpressionStatement","src":"1656:63:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":5371,"name":"canvases","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5264,"src":"1737:8:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Canvas_$5259_storage_$","typeString":"mapping(uint256 => struct BasePaint.Canvas storage ref)"}},"id":5373,"indexExpression":{"id":5372,"name":"day","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5338,"src":"1746:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1737:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage","typeString":"struct BasePaint.Canvas storage ref"}},"id":5374,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1751:18:23","memberName":"totalContributions","nodeType":"MemberAccess","referencedDeclaration":5248,"src":"1737:32:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1772:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1737:36:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"456d7074792063616e766173","id":5377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1775:14:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d4c94f69f8b7e0961e88f9636d9f77fffa457b39c4f4dfb1516d377b0308603","typeString":"literal_string \"Empty canvas\""},"value":"Empty canvas"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d4c94f69f8b7e0961e88f9636d9f77fffa457b39c4f4dfb1516d377b0308603","typeString":"literal_string \"Empty canvas\""}],"id":5370,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1729:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1729:61:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5379,"nodeType":"ExpressionStatement","src":"1729:61:23"},{"expression":{"arguments":[{"expression":{"id":5381,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1807:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1811:6:23","memberName":"sender","nodeType":"MemberAccess","src":"1807:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5383,"name":"day","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5338,"src":"1819:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5384,"name":"count","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5340,"src":"1824:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":5385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1831:2:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":5380,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"1801:5:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,uint256,bytes memory)"}},"id":5386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1801:33:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5387,"nodeType":"ExpressionStatement","src":"1801:33:23"},{"assignments":[5389],"declarations":[{"constant":false,"id":5389,"mutability":"mutable","name":"fee","nameLocation":"1853:3:23","nodeType":"VariableDeclaration","scope":5419,"src":"1845:11:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5388,"name":"uint256","nodeType":"ElementaryTypeName","src":"1845:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5396,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5390,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1859:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1863:5:23","memberName":"value","nodeType":"MemberAccess","src":"1859:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5392,"name":"ownerFeePartsPerMillion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5272,"src":"1871:23:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1859:35:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"315f3030305f303030","id":5394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1897:9:23","typeDescriptions":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"},"value":"1_000_000"},"src":"1859:47:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1845:61:23"},{"expression":{"id":5399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5397,"name":"ownerEarned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5274,"src":"1916:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5398,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5389,"src":"1931:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1916:18:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5400,"nodeType":"ExpressionStatement","src":"1916:18:23"},{"expression":{"id":5409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":5401,"name":"canvases","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5264,"src":"1944:8:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Canvas_$5259_storage_$","typeString":"mapping(uint256 => struct BasePaint.Canvas storage ref)"}},"id":5403,"indexExpression":{"id":5402,"name":"day","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5338,"src":"1953:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1944:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage","typeString":"struct BasePaint.Canvas storage ref"}},"id":5404,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1958:11:23","memberName":"totalRaised","nodeType":"MemberAccess","referencedDeclaration":5250,"src":"1944:25:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5405,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1973:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1977:5:23","memberName":"value","nodeType":"MemberAccess","src":"1973:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5407,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5389,"src":"1985:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1973:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1944:44:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5410,"nodeType":"ExpressionStatement","src":"1944:44:23"},{"eventCall":{"arguments":[{"id":5412,"name":"day","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5338,"src":"2017:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5413,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2022:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2026:5:23","memberName":"value","nodeType":"MemberAccess","src":"2022:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5415,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5389,"src":"2034:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2022:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5411,"name":"ArtistsEarned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5294,"src":"2003:13:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":5417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2003:35:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5418,"nodeType":"EmitStatement","src":"1998:40:23"}]},"functionSelector":"1b2ef1ca","id":5420,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"1499:4:23","nodeType":"FunctionDefinition","parameters":{"id":5341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5338,"mutability":"mutable","name":"day","nameLocation":"1512:3:23","nodeType":"VariableDeclaration","scope":5420,"src":"1504:11:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5337,"name":"uint256","nodeType":"ElementaryTypeName","src":"1504:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5340,"mutability":"mutable","name":"count","nameLocation":"1525:5:23","nodeType":"VariableDeclaration","scope":5420,"src":"1517:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5339,"name":"uint256","nodeType":"ElementaryTypeName","src":"1517:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1503:28:23"},"returnParameters":{"id":5342,"nodeType":"ParameterList","parameters":[],"src":"1547:0:23"},"scope":5827,"src":"1490:555:23","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":5531,"nodeType":"Block","src":"2126:701:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5430,"name":"startedAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5266,"src":"2144:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2156:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2144:13:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f742073746172746564","id":5433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2159:13:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8","typeString":"literal_string \"Not started\""},"value":"Not started"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8","typeString":"literal_string \"Not started\""}],"id":5429,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2136:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2136:37:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5435,"nodeType":"ExpressionStatement","src":"2136:37:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5437,"name":"day","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5422,"src":"2191:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5438,"name":"today","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5583,"src":"2198:5:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":5439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2198:7:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2191:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420646179","id":5441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2207:13:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e44432d9ae63e2829c6f8f2758edfa5a1bfee3e8b1cca3f560b2fd694999578","typeString":"literal_string \"Invalid day\""},"value":"Invalid day"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6e44432d9ae63e2829c6f8f2758edfa5a1bfee3e8b1cca3f560b2fd694999578","typeString":"literal_string \"Invalid day\""}],"id":5436,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2183:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2183:38:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5443,"nodeType":"ExpressionStatement","src":"2183:38:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5447,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5424,"src":"2255:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5445,"name":"brushes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5244,"src":"2239:7:23","typeDescriptions":{"typeIdentifier":"t_contract$_IBasePaintBrush_$5844","typeString":"contract IBasePaintBrush"}},"id":5446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2247:7:23","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":2528,"src":"2239:15:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view external returns (address)"}},"id":5448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2239:24:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5449,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2267:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2271:6:23","memberName":"sender","nodeType":"MemberAccess","src":"2267:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2239:38:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"596f7520646f6e2774206f776e2074686973206272757368","id":5452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2279:26:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_a4ae2b81cf1f00a8f3dffd1b5f6fce615157e47012c48e094e545aeb46d225f4","typeString":"literal_string \"You don't own this brush\""},"value":"You don't own this brush"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a4ae2b81cf1f00a8f3dffd1b5f6fce615157e47012c48e094e545aeb46d225f4","typeString":"literal_string \"You don't own this brush\""}],"id":5444,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2231:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2231:75:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5454,"nodeType":"ExpressionStatement","src":"2231:75:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5456,"name":"pixels","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5426,"src":"2324:6:23","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":5457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2331:6:23","memberName":"length","nodeType":"MemberAccess","src":"2324:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"33","id":5458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2340:1:23","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"2324:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2345:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2324:22:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420706978656c2064617461","id":5462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2348:20:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_e004b49046650d027883dbb60be120e8744aabb2d60ba79ed02289cddcd73c53","typeString":"literal_string \"Invalid pixel data\""},"value":"Invalid pixel data"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e004b49046650d027883dbb60be120e8744aabb2d60ba79ed02289cddcd73c53","typeString":"literal_string \"Invalid pixel data\""}],"id":5455,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2316:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2316:53:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5464,"nodeType":"ExpressionStatement","src":"2316:53:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5466,"name":"pixels","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5426,"src":"2387:6:23","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":5467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2394:6:23","memberName":"length","nodeType":"MemberAccess","src":"2387:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2403:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2387:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420706978656c2064617461","id":5470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2406:20:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_e004b49046650d027883dbb60be120e8744aabb2d60ba79ed02289cddcd73c53","typeString":"literal_string \"Invalid pixel data\""},"value":"Invalid pixel data"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e004b49046650d027883dbb60be120e8744aabb2d60ba79ed02289cddcd73c53","typeString":"literal_string \"Invalid pixel data\""}],"id":5465,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2379:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2379:48:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5472,"nodeType":"ExpressionStatement","src":"2379:48:23"},{"assignments":[5474],"declarations":[{"constant":false,"id":5474,"mutability":"mutable","name":"painted","nameLocation":"2446:7:23","nodeType":"VariableDeclaration","scope":5531,"src":"2438:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5473,"name":"uint256","nodeType":"ElementaryTypeName","src":"2438:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5479,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5475,"name":"pixels","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5426,"src":"2456:6:23","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":5476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2463:6:23","memberName":"length","nodeType":"MemberAccess","src":"2456:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"33","id":5477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2472:1:23","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"2456:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2438:35:23"},{"assignments":[5482],"declarations":[{"constant":false,"id":5482,"mutability":"mutable","name":"canvas","nameLocation":"2499:6:23","nodeType":"VariableDeclaration","scope":5531,"src":"2484:21:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage_ptr","typeString":"struct BasePaint.Canvas"},"typeName":{"id":5481,"nodeType":"UserDefinedTypeName","pathNode":{"id":5480,"name":"Canvas","nameLocations":["2484:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":5259,"src":"2484:6:23"},"referencedDeclaration":5259,"src":"2484:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage_ptr","typeString":"struct BasePaint.Canvas"}},"visibility":"internal"}],"id":5486,"initialValue":{"baseExpression":{"id":5483,"name":"canvases","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5264,"src":"2508:8:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Canvas_$5259_storage_$","typeString":"mapping(uint256 => struct BasePaint.Canvas storage ref)"}},"id":5485,"indexExpression":{"id":5484,"name":"day","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5422,"src":"2517:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2508:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage","typeString":"struct BasePaint.Canvas storage ref"}},"nodeType":"VariableDeclarationStatement","src":"2484:37:23"},{"expression":{"id":5494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":5487,"name":"canvas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5482,"src":"2531:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage_ptr","typeString":"struct BasePaint.Canvas storage pointer"}},"id":5491,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2538:13:23","memberName":"contributions","nodeType":"MemberAccess","referencedDeclaration":5254,"src":"2531:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5492,"indexExpression":{"expression":{"id":5489,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2552:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2556:6:23","memberName":"sender","nodeType":"MemberAccess","src":"2552:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2531:32:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5493,"name":"painted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5474,"src":"2567:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2531:43:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5495,"nodeType":"ExpressionStatement","src":"2531:43:23"},{"expression":{"id":5502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":5496,"name":"canvas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5482,"src":"2584:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage_ptr","typeString":"struct BasePaint.Canvas storage pointer"}},"id":5499,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2591:9:23","memberName":"brushUsed","nodeType":"MemberAccess","referencedDeclaration":5258,"src":"2584:16:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5500,"indexExpression":{"id":5498,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5424,"src":"2601:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2584:25:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5501,"name":"painted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5474,"src":"2613:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2584:36:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5503,"nodeType":"ExpressionStatement","src":"2584:36:23"},{"expression":{"id":5508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5504,"name":"canvas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5482,"src":"2630:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage_ptr","typeString":"struct BasePaint.Canvas storage pointer"}},"id":5506,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2637:18:23","memberName":"totalContributions","nodeType":"MemberAccess","referencedDeclaration":5248,"src":"2630:25:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5507,"name":"painted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5474,"src":"2659:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2630:36:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5509,"nodeType":"ExpressionStatement","src":"2630:36:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":5511,"name":"canvas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5482,"src":"2685:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage_ptr","typeString":"struct BasePaint.Canvas storage pointer"}},"id":5512,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2692:9:23","memberName":"brushUsed","nodeType":"MemberAccess","referencedDeclaration":5258,"src":"2685:16:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5514,"indexExpression":{"id":5513,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5424,"src":"2702:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2685:25:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[{"id":5517,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5424,"src":"2732:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5515,"name":"brushes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5244,"src":"2714:7:23","typeDescriptions":{"typeIdentifier":"t_contract$_IBasePaintBrush_$5844","typeString":"contract IBasePaintBrush"}},"id":5516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2722:9:23","memberName":"strengths","nodeType":"MemberAccess","referencedDeclaration":5843,"src":"2714:17:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":5518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2714:26:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2685:55:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4272757368207573656420746f6f206d756368","id":5520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2742:21:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_4acae158723a2a1ded16d661c6996469d8495895a0bc1556e7cbd5adfcb24208","typeString":"literal_string \"Brush used too much\""},"value":"Brush used too much"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4acae158723a2a1ded16d661c6996469d8495895a0bc1556e7cbd5adfcb24208","typeString":"literal_string \"Brush used too much\""}],"id":5510,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2677:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2677:87:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5522,"nodeType":"ExpressionStatement","src":"2677:87:23"},{"eventCall":{"arguments":[{"id":5524,"name":"day","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5422,"src":"2787:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5525,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5424,"src":"2792:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5526,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2801:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2805:6:23","memberName":"sender","nodeType":"MemberAccess","src":"2801:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5528,"name":"pixels","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5426,"src":"2813:6:23","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":5523,"name":"Painted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5288,"src":"2779:7:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint256,uint256,address,bytes memory)"}},"id":5529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2779:41:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5530,"nodeType":"EmitStatement","src":"2774:46:23"}]},"functionSelector":"b079bbcc","id":5532,"implemented":true,"kind":"function","modifiers":[],"name":"paint","nameLocation":"2060:5:23","nodeType":"FunctionDefinition","parameters":{"id":5427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5422,"mutability":"mutable","name":"day","nameLocation":"2074:3:23","nodeType":"VariableDeclaration","scope":5532,"src":"2066:11:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5421,"name":"uint256","nodeType":"ElementaryTypeName","src":"2066:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5424,"mutability":"mutable","name":"tokenId","nameLocation":"2087:7:23","nodeType":"VariableDeclaration","scope":5532,"src":"2079:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5423,"name":"uint256","nodeType":"ElementaryTypeName","src":"2079:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5426,"mutability":"mutable","name":"pixels","nameLocation":"2111:6:23","nodeType":"VariableDeclaration","scope":5532,"src":"2096:21:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5425,"name":"bytes","nodeType":"ElementaryTypeName","src":"2096:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2065:53:23"},"returnParameters":{"id":5428,"nodeType":"ParameterList","parameters":[],"src":"2126:0:23"},"scope":5827,"src":"2051:776:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5548,"nodeType":"Block","src":"2914:59:23","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":5541,"name":"canvases","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5264,"src":"2931:8:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Canvas_$5259_storage_$","typeString":"mapping(uint256 => struct BasePaint.Canvas storage ref)"}},"id":5543,"indexExpression":{"id":5542,"name":"day","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5534,"src":"2940:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2931:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage","typeString":"struct BasePaint.Canvas storage ref"}},"id":5544,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2945:13:23","memberName":"contributions","nodeType":"MemberAccess","referencedDeclaration":5254,"src":"2931:27:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5546,"indexExpression":{"id":5545,"name":"author","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5536,"src":"2959:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2931:35:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5540,"id":5547,"nodeType":"Return","src":"2924:42:23"}]},"functionSelector":"dfa3a432","id":5549,"implemented":true,"kind":"function","modifiers":[],"name":"contribution","nameLocation":"2842:12:23","nodeType":"FunctionDefinition","parameters":{"id":5537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5534,"mutability":"mutable","name":"day","nameLocation":"2863:3:23","nodeType":"VariableDeclaration","scope":5549,"src":"2855:11:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5533,"name":"uint256","nodeType":"ElementaryTypeName","src":"2855:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5536,"mutability":"mutable","name":"author","nameLocation":"2876:6:23","nodeType":"VariableDeclaration","scope":5549,"src":"2868:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5535,"name":"address","nodeType":"ElementaryTypeName","src":"2868:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2854:29:23"},"returnParameters":{"id":5540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5539,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5549,"src":"2905:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5538,"name":"uint256","nodeType":"ElementaryTypeName","src":"2905:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2904:9:23"},"scope":5827,"src":"2833:140:23","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5565,"nodeType":"Block","src":"3058:56:23","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":5558,"name":"canvases","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5264,"src":"3075:8:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Canvas_$5259_storage_$","typeString":"mapping(uint256 => struct BasePaint.Canvas storage ref)"}},"id":5560,"indexExpression":{"id":5559,"name":"day","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5551,"src":"3084:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3075:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage","typeString":"struct BasePaint.Canvas storage ref"}},"id":5561,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3089:9:23","memberName":"brushUsed","nodeType":"MemberAccess","referencedDeclaration":5258,"src":"3075:23:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5563,"indexExpression":{"id":5562,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5553,"src":"3099:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3075:32:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5557,"id":5564,"nodeType":"Return","src":"3068:39:23"}]},"functionSelector":"2ac70a2d","id":5566,"implemented":true,"kind":"function","modifiers":[],"name":"brushUsed","nameLocation":"2988:9:23","nodeType":"FunctionDefinition","parameters":{"id":5554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5551,"mutability":"mutable","name":"day","nameLocation":"3006:3:23","nodeType":"VariableDeclaration","scope":5566,"src":"2998:11:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5550,"name":"uint256","nodeType":"ElementaryTypeName","src":"2998:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5553,"mutability":"mutable","name":"tokenId","nameLocation":"3019:7:23","nodeType":"VariableDeclaration","scope":5566,"src":"3011:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5552,"name":"uint256","nodeType":"ElementaryTypeName","src":"3011:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2997:30:23"},"returnParameters":{"id":5557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5556,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5566,"src":"3049:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5555,"name":"uint256","nodeType":"ElementaryTypeName","src":"3049:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3048:9:23"},"scope":5827,"src":"2979:135:23","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5582,"nodeType":"Block","src":"3167:104:23","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5571,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3215:5:23","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3221:9:23","memberName":"timestamp","nodeType":"MemberAccess","src":"3215:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5573,"name":"startedAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5266,"src":"3233:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3215:27:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5575,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3214:29:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5576,"name":"epochDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5246,"src":"3246:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3214:45:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5578,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3213:47:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3263:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3213:51:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5570,"id":5581,"nodeType":"Return","src":"3206:58:23"}]},"functionSelector":"b74e452b","id":5583,"implemented":true,"kind":"function","modifiers":[],"name":"today","nameLocation":"3129:5:23","nodeType":"FunctionDefinition","parameters":{"id":5567,"nodeType":"ParameterList","parameters":[],"src":"3134:2:23"},"returnParameters":{"id":5570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5569,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5583,"src":"3158:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5568,"name":"uint256","nodeType":"ElementaryTypeName","src":"3158:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3157:9:23"},"scope":5827,"src":"3120:151:23","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5717,"nodeType":"Block","src":"3336:920:23","statements":[{"assignments":[5590],"declarations":[{"constant":false,"id":5590,"mutability":"mutable","name":"maxDay","nameLocation":"3354:6:23","nodeType":"VariableDeclaration","scope":5717,"src":"3346:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5589,"name":"uint256","nodeType":"ElementaryTypeName","src":"3346:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5595,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5591,"name":"today","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5583,"src":"3363:5:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":5592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3363:7:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3373:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3363:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3346:28:23"},{"body":{"id":5715,"nodeType":"Block","src":"3429:821:23","statements":[{"assignments":[5608],"declarations":[{"constant":false,"id":5608,"mutability":"mutable","name":"day","nameLocation":"3451:3:23","nodeType":"VariableDeclaration","scope":5715,"src":"3443:11:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5607,"name":"uint256","nodeType":"ElementaryTypeName","src":"3443:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5612,"initialValue":{"baseExpression":{"id":5609,"name":"indexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5586,"src":"3457:7:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":5611,"indexExpression":{"id":5610,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5597,"src":"3465:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3457:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3443:24:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5614,"name":"day","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5608,"src":"3489:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5615,"name":"maxDay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5590,"src":"3495:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3489:12:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420646179","id":5617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3503:13:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e44432d9ae63e2829c6f8f2758edfa5a1bfee3e8b1cca3f560b2fd694999578","typeString":"literal_string \"Invalid day\""},"value":"Invalid day"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6e44432d9ae63e2829c6f8f2758edfa5a1bfee3e8b1cca3f560b2fd694999578","typeString":"literal_string \"Invalid day\""}],"id":5613,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3481:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3481:36:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5619,"nodeType":"ExpressionStatement","src":"3481:36:23"},{"assignments":[5622],"declarations":[{"constant":false,"id":5622,"mutability":"mutable","name":"canvas","nameLocation":"3547:6:23","nodeType":"VariableDeclaration","scope":5715,"src":"3532:21:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage_ptr","typeString":"struct BasePaint.Canvas"},"typeName":{"id":5621,"nodeType":"UserDefinedTypeName","pathNode":{"id":5620,"name":"Canvas","nameLocations":["3532:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":5259,"src":"3532:6:23"},"referencedDeclaration":5259,"src":"3532:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage_ptr","typeString":"struct BasePaint.Canvas"}},"visibility":"internal"}],"id":5626,"initialValue":{"baseExpression":{"id":5623,"name":"canvases","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5264,"src":"3556:8:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Canvas_$5259_storage_$","typeString":"mapping(uint256 => struct BasePaint.Canvas storage ref)"}},"id":5625,"indexExpression":{"id":5624,"name":"day","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5608,"src":"3565:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3556:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage","typeString":"struct BasePaint.Canvas storage ref"}},"nodeType":"VariableDeclarationStatement","src":"3532:37:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5628,"name":"canvas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5622,"src":"3591:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage_ptr","typeString":"struct BasePaint.Canvas storage pointer"}},"id":5629,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3598:11:23","memberName":"totalRaised","nodeType":"MemberAccess","referencedDeclaration":5250,"src":"3591:18:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3612:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3591:22:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f2066756e647320746f207769746864726177","id":5632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3615:22:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_4b4cc99522fdcee4d97d6d2d3cbabeb353d40433850bd46ba29c08dbfba843f9","typeString":"literal_string \"No funds to withdraw\""},"value":"No funds to withdraw"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4b4cc99522fdcee4d97d6d2d3cbabeb353d40433850bd46ba29c08dbfba843f9","typeString":"literal_string \"No funds to withdraw\""}],"id":5627,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3583:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3583:55:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5634,"nodeType":"ExpressionStatement","src":"3583:55:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5636,"name":"canvas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5622,"src":"3660:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage_ptr","typeString":"struct BasePaint.Canvas storage pointer"}},"id":5637,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3667:18:23","memberName":"totalContributions","nodeType":"MemberAccess","referencedDeclaration":5248,"src":"3660:25:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3688:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3660:29:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"456d7074792063616e766173","id":5640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3691:14:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d4c94f69f8b7e0961e88f9636d9f77fffa457b39c4f4dfb1516d377b0308603","typeString":"literal_string \"Empty canvas\""},"value":"Empty canvas"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d4c94f69f8b7e0961e88f9636d9f77fffa457b39c4f4dfb1516d377b0308603","typeString":"literal_string \"Empty canvas\""}],"id":5635,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3652:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3652:54:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5642,"nodeType":"ExpressionStatement","src":"3652:54:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":5644,"name":"canvas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5622,"src":"3728:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage_ptr","typeString":"struct BasePaint.Canvas storage pointer"}},"id":5645,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3735:13:23","memberName":"contributions","nodeType":"MemberAccess","referencedDeclaration":5254,"src":"3728:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5648,"indexExpression":{"expression":{"id":5646,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3749:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3753:6:23","memberName":"sender","nodeType":"MemberAccess","src":"3749:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3728:32:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3763:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3728:36:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f20636f6e747269627574696f6e73","id":5651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3766:18:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_e898f8ccd4c210573d12d900c20fca6d8cf7a9ab1db17c5b39361b7b1a36c89c","typeString":"literal_string \"No contributions\""},"value":"No contributions"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e898f8ccd4c210573d12d900c20fca6d8cf7a9ab1db17c5b39361b7b1a36c89c","typeString":"literal_string \"No contributions\""}],"id":5643,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3720:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3720:65:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5653,"nodeType":"ExpressionStatement","src":"3720:65:23"},{"assignments":[5655],"declarations":[{"constant":false,"id":5655,"mutability":"mutable","name":"amount","nameLocation":"3808:6:23","nodeType":"VariableDeclaration","scope":5715,"src":"3800:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5654,"name":"uint256","nodeType":"ElementaryTypeName","src":"3800:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5667,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5656,"name":"canvas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5622,"src":"3817:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage_ptr","typeString":"struct BasePaint.Canvas storage pointer"}},"id":5657,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3824:11:23","memberName":"totalRaised","nodeType":"MemberAccess","referencedDeclaration":5250,"src":"3817:18:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"baseExpression":{"expression":{"id":5658,"name":"canvas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5622,"src":"3838:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage_ptr","typeString":"struct BasePaint.Canvas storage pointer"}},"id":5659,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3845:13:23","memberName":"contributions","nodeType":"MemberAccess","referencedDeclaration":5254,"src":"3838:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5662,"indexExpression":{"expression":{"id":5660,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3859:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3863:6:23","memberName":"sender","nodeType":"MemberAccess","src":"3859:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3838:32:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3817:53:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"expression":{"id":5664,"name":"canvas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5622,"src":"3873:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage_ptr","typeString":"struct BasePaint.Canvas storage pointer"}},"id":5665,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3880:18:23","memberName":"totalContributions","nodeType":"MemberAccess","referencedDeclaration":5248,"src":"3873:25:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3817:81:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3800:98:23"},{"expression":{"id":5672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5668,"name":"canvas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5622,"src":"3912:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage_ptr","typeString":"struct BasePaint.Canvas storage pointer"}},"id":5670,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3919:11:23","memberName":"totalRaised","nodeType":"MemberAccess","referencedDeclaration":5250,"src":"3912:18:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":5671,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5655,"src":"3934:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3912:28:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5673,"nodeType":"ExpressionStatement","src":"3912:28:23"},{"expression":{"id":5682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5674,"name":"canvas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5622,"src":"3954:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage_ptr","typeString":"struct BasePaint.Canvas storage pointer"}},"id":5676,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3961:18:23","memberName":"totalContributions","nodeType":"MemberAccess","referencedDeclaration":5248,"src":"3954:25:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"baseExpression":{"expression":{"id":5677,"name":"canvas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5622,"src":"3983:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage_ptr","typeString":"struct BasePaint.Canvas storage pointer"}},"id":5678,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3990:13:23","memberName":"contributions","nodeType":"MemberAccess","referencedDeclaration":5254,"src":"3983:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5681,"indexExpression":{"expression":{"id":5679,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4004:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4008:6:23","memberName":"sender","nodeType":"MemberAccess","src":"4004:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3983:32:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3954:61:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5683,"nodeType":"ExpressionStatement","src":"3954:61:23"},{"expression":{"id":5691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":5684,"name":"canvas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5622,"src":"4029:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_Canvas_$5259_storage_ptr","typeString":"struct BasePaint.Canvas storage pointer"}},"id":5688,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4036:13:23","memberName":"contributions","nodeType":"MemberAccess","referencedDeclaration":5254,"src":"4029:20:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5689,"indexExpression":{"expression":{"id":5686,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4050:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4054:6:23","memberName":"sender","nodeType":"MemberAccess","src":"4050:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4029:32:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":5690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4064:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4029:36:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5692,"nodeType":"ExpressionStatement","src":"4029:36:23"},{"assignments":[5694,null],"declarations":[{"constant":false,"id":5694,"mutability":"mutable","name":"success","nameLocation":"4086:7:23","nodeType":"VariableDeclaration","scope":5715,"src":"4081:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5693,"name":"bool","nodeType":"ElementaryTypeName","src":"4081:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":5702,"initialValue":{"arguments":[{"hexValue":"","id":5700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4129:2:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"expression":{"id":5695,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4098:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4102:6:23","memberName":"sender","nodeType":"MemberAccess","src":"4098:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4109:4:23","memberName":"call","nodeType":"MemberAccess","src":"4098:15:23","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":5698,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5655,"src":"4121:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"4098:30:23","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4098:34:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4080:52:23"},{"expression":{"arguments":[{"id":5704,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5694,"src":"4154:7:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5472616e73666572206661696c6564","id":5705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4163:17:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""},"value":"Transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""}],"id":5703,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4146:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4146:35:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5707,"nodeType":"ExpressionStatement","src":"4146:35:23"},{"eventCall":{"arguments":[{"id":5709,"name":"day","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5608,"src":"4215:3:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5710,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4220:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4224:6:23","memberName":"sender","nodeType":"MemberAccess","src":"4220:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5712,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5655,"src":"4232:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5708,"name":"ArtistWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5302,"src":"4200:14:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$","typeString":"function (uint256,address,uint256)"}},"id":5713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4200:39:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5714,"nodeType":"EmitStatement","src":"4195:44:23"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5600,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5597,"src":"3404:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5601,"name":"indexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5586,"src":"3408:7:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":5602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3416:6:23","memberName":"length","nodeType":"MemberAccess","src":"3408:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3404:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5716,"initializationExpression":{"assignments":[5597],"declarations":[{"constant":false,"id":5597,"mutability":"mutable","name":"i","nameLocation":"3397:1:23","nodeType":"VariableDeclaration","scope":5716,"src":"3389:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5596,"name":"uint256","nodeType":"ElementaryTypeName","src":"3389:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5599,"initialValue":{"hexValue":"30","id":5598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3401:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3389:13:23"},"loopExpression":{"expression":{"id":5605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3424:3:23","subExpression":{"id":5604,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5597,"src":"3424:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5606,"nodeType":"ExpressionStatement","src":"3424:3:23"},"nodeType":"ForStatement","src":"3384:866:23"}]},"functionSelector":"8abe0991","id":5718,"implemented":true,"kind":"function","modifiers":[],"name":"authorWithdraw","nameLocation":"3286:14:23","nodeType":"FunctionDefinition","parameters":{"id":5587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5586,"mutability":"mutable","name":"indexes","nameLocation":"3320:7:23","nodeType":"VariableDeclaration","scope":5718,"src":"3301:26:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5584,"name":"uint256","nodeType":"ElementaryTypeName","src":"3301:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5585,"nodeType":"ArrayTypeName","src":"3301:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3300:28:23"},"returnParameters":{"id":5588,"nodeType":"ParameterList","parameters":[],"src":"3336:0:23"},"scope":5827,"src":"3277:979:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5739,"nodeType":"Block","src":"4296:130:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5724,"name":"startedAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5266,"src":"4314:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4327:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4314:14:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416c72656164792073746172746564","id":5727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4330:17:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_55ab3174a5323a5cf1c9a30c7e43cc6ccd65bdd10d3571758b8ba8dbb82736a6","typeString":"literal_string \"Already started\""},"value":"Already started"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_55ab3174a5323a5cf1c9a30c7e43cc6ccd65bdd10d3571758b8ba8dbb82736a6","typeString":"literal_string \"Already started\""}],"id":5723,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4306:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4306:42:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5729,"nodeType":"ExpressionStatement","src":"4306:42:23"},{"expression":{"id":5733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5730,"name":"startedAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5266,"src":"4359:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5731,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4371:5:23","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4377:9:23","memberName":"timestamp","nodeType":"MemberAccess","src":"4371:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4359:27:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5734,"nodeType":"ExpressionStatement","src":"4359:27:23"},{"eventCall":{"arguments":[{"id":5736,"name":"startedAt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5266,"src":"4409:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5735,"name":"Started","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5278,"src":"4401:7:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4401:18:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5738,"nodeType":"EmitStatement","src":"4396:23:23"}]},"functionSelector":"be9a6555","id":5740,"implemented":true,"kind":"function","modifiers":[{"id":5721,"kind":"modifierInvocation","modifierName":{"id":5720,"name":"onlyOwner","nameLocations":["4286:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"4286:9:23"},"nodeType":"ModifierInvocation","src":"4286:9:23"}],"name":"start","nameLocation":"4271:5:23","nodeType":"FunctionDefinition","parameters":{"id":5719,"nodeType":"ParameterList","parameters":[],"src":"4276:2:23"},"returnParameters":{"id":5722,"nodeType":"ParameterList","parameters":[],"src":"4296:0:23"},"scope":5827,"src":"4262:164:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5751,"nodeType":"Block","src":"4489:32:23","statements":[{"expression":{"arguments":[{"id":5748,"name":"newuri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5742,"src":"4507:6:23","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":5747,"name":"_setURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":707,"src":"4499:7:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":5749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4499:15:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5750,"nodeType":"ExpressionStatement","src":"4499:15:23"}]},"functionSelector":"02fe5305","id":5752,"implemented":true,"kind":"function","modifiers":[{"id":5745,"kind":"modifierInvocation","modifierName":{"id":5744,"name":"onlyOwner","nameLocations":["4479:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"4479:9:23"},"nodeType":"ModifierInvocation","src":"4479:9:23"}],"name":"setURI","nameLocation":"4441:6:23","nodeType":"FunctionDefinition","parameters":{"id":5743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5742,"mutability":"mutable","name":"newuri","nameLocation":"4464:6:23","nodeType":"VariableDeclaration","scope":5752,"src":"4448:22:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":5741,"name":"string","nodeType":"ElementaryTypeName","src":"4448:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4447:24:23"},"returnParameters":{"id":5746,"nodeType":"ParameterList","parameters":[],"src":"4489:0:23"},"scope":5827,"src":"4432:89:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5774,"nodeType":"Block","src":"4581:139:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5760,"name":"newFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5754,"src":"4599:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"315f3030305f303030","id":5761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4608:9:23","typeDescriptions":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"},"value":"1_000_000"},"src":"4599:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420666565","id":5763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4619:13:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_7ff6289abbb0687399ebc1aafeab18832fc5a110fcdbd805e18f72d422711e7a","typeString":"literal_string \"Invalid fee\""},"value":"Invalid fee"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7ff6289abbb0687399ebc1aafeab18832fc5a110fcdbd805e18f72d422711e7a","typeString":"literal_string \"Invalid fee\""}],"id":5759,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4591:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4591:42:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5765,"nodeType":"ExpressionStatement","src":"4591:42:23"},{"expression":{"id":5768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5766,"name":"ownerFeePartsPerMillion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5272,"src":"4643:23:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5767,"name":"newFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5754,"src":"4669:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4643:32:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5769,"nodeType":"ExpressionStatement","src":"4643:32:23"},{"eventCall":{"arguments":[{"id":5771,"name":"newFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5754,"src":"4706:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5770,"name":"OwnerFeeUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5310,"src":"4690:15:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4690:23:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5773,"nodeType":"EmitStatement","src":"4685:28:23"}]},"functionSelector":"fbf0ade1","id":5775,"implemented":true,"kind":"function","modifiers":[{"id":5757,"kind":"modifierInvocation","modifierName":{"id":5756,"name":"onlyOwner","nameLocations":["4571:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"4571:9:23"},"nodeType":"ModifierInvocation","src":"4571:9:23"}],"name":"setOwnerFee","nameLocation":"4536:11:23","nodeType":"FunctionDefinition","parameters":{"id":5755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5754,"mutability":"mutable","name":"newFee","nameLocation":"4556:6:23","nodeType":"VariableDeclaration","scope":5775,"src":"4548:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5753,"name":"uint256","nodeType":"ElementaryTypeName","src":"4548:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4547:16:23"},"returnParameters":{"id":5758,"nodeType":"ParameterList","parameters":[],"src":"4581:0:23"},"scope":5827,"src":"4527:193:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5790,"nodeType":"Block","src":"4790:92:23","statements":[{"expression":{"id":5784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5782,"name":"openEditionPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5269,"src":"4800:16:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5783,"name":"newPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5777,"src":"4819:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4800:27:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5785,"nodeType":"ExpressionStatement","src":"4800:27:23"},{"eventCall":{"arguments":[{"id":5787,"name":"newPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5777,"src":"4866:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5786,"name":"OpenEditionPriceUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5306,"src":"4842:23:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4842:33:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5789,"nodeType":"EmitStatement","src":"4837:38:23"}]},"functionSelector":"f0e639e1","id":5791,"implemented":true,"kind":"function","modifiers":[{"id":5780,"kind":"modifierInvocation","modifierName":{"id":5779,"name":"onlyOwner","nameLocations":["4780:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"4780:9:23"},"nodeType":"ModifierInvocation","src":"4780:9:23"}],"name":"setOpenEditionPrice","nameLocation":"4735:19:23","nodeType":"FunctionDefinition","parameters":{"id":5778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5777,"mutability":"mutable","name":"newPrice","nameLocation":"4763:8:23","nodeType":"VariableDeclaration","scope":5791,"src":"4755:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5776,"name":"uint256","nodeType":"ElementaryTypeName","src":"4755:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4754:18:23"},"returnParameters":{"id":5781,"nodeType":"ParameterList","parameters":[],"src":"4790:0:23"},"scope":5827,"src":"4726:156:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5825,"nodeType":"Block","src":"4935:210:23","statements":[{"assignments":[5799],"declarations":[{"constant":false,"id":5799,"mutability":"mutable","name":"amount","nameLocation":"4953:6:23","nodeType":"VariableDeclaration","scope":5825,"src":"4945:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5798,"name":"uint256","nodeType":"ElementaryTypeName","src":"4945:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5801,"initialValue":{"id":5800,"name":"ownerEarned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5274,"src":"4962:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4945:28:23"},{"expression":{"id":5804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5802,"name":"ownerEarned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5274,"src":"4983:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":5803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4997:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4983:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5805,"nodeType":"ExpressionStatement","src":"4983:15:23"},{"assignments":[5807,null],"declarations":[{"constant":false,"id":5807,"mutability":"mutable","name":"success","nameLocation":"5015:7:23","nodeType":"VariableDeclaration","scope":5825,"src":"5010:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5806,"name":"bool","nodeType":"ElementaryTypeName","src":"5010:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":5814,"initialValue":{"arguments":[{"hexValue":"","id":5812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5050:2:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":5808,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5793,"src":"5027:2:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5030:4:23","memberName":"call","nodeType":"MemberAccess","src":"5027:7:23","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":5810,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5799,"src":"5042:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5027:22:23","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5027:26:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5009:44:23"},{"expression":{"arguments":[{"id":5816,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5807,"src":"5071:7:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5472616e73666572206661696c6564","id":5817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5080:17:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""},"value":"Transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""}],"id":5815,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5063:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5063:35:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5819,"nodeType":"ExpressionStatement","src":"5063:35:23"},{"eventCall":{"arguments":[{"id":5821,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5799,"src":"5127:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5822,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5793,"src":"5135:2:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5820,"name":"OwnerWithdrew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5316,"src":"5113:13:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address)"}},"id":5823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5113:25:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5824,"nodeType":"EmitStatement","src":"5108:30:23"}]},"functionSelector":"51cff8d9","id":5826,"implemented":true,"kind":"function","modifiers":[{"id":5796,"kind":"modifierInvocation","modifierName":{"id":5795,"name":"onlyOwner","nameLocations":["4925:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"4925:9:23"},"nodeType":"ModifierInvocation","src":"4925:9:23"}],"name":"withdraw","nameLocation":"4897:8:23","nodeType":"FunctionDefinition","parameters":{"id":5794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5793,"mutability":"mutable","name":"to","nameLocation":"4914:2:23","nodeType":"VariableDeclaration","scope":5826,"src":"4906:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5792,"name":"address","nodeType":"ElementaryTypeName","src":"4906:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4905:12:23"},"returnParameters":{"id":5797,"nodeType":"ParameterList","parameters":[],"src":"4935:0:23"},"scope":5827,"src":"4888:257:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":5828,"src":"344:4803:23","usedErrors":[]}],"src":"150:4998:23"},"id":23},"contracts/BasePaintBrush.sol":{"ast":{"absolutePath":"contracts/BasePaintBrush.sol","exportedSymbols":{"Address":[2970],"BasePaintBrush":[5999],"Context":[3000],"ECDSA":[3921],"EIP712":[4125],"ERC165":[4248],"ERC721":[2479],"IBasePaintBrush":[5844],"IERC1271":[126],"IERC165":[4260],"IERC5267":[151],"IERC721":[2595],"IERC721Metadata":[2640],"IERC721Receiver":[2613],"Math":[5126],"Ownable":[112],"ShortString":[3005],"ShortStrings":[3216],"SignatureChecker":[4224],"SignedMath":[5231],"StorageSlot":[3326],"Strings":[3555]},"id":6000,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":5829,"literals":["solidity","^","0.8",".13"],"nodeType":"PragmaDirective","src":"149:24:24"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":5830,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6000,"sourceUnit":2480,"src":"175:57:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"@openzeppelin/contracts/token/ERC721/IERC721.sol","id":5831,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6000,"sourceUnit":2596,"src":"233:58:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":5832,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6000,"sourceUnit":113,"src":"292:52:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/EIP712.sol","file":"@openzeppelin/contracts/utils/cryptography/EIP712.sol","id":5833,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6000,"sourceUnit":4126,"src":"345:63:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol","file":"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol","id":5834,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6000,"sourceUnit":4225,"src":"409:73:24","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5835,"name":"IERC721","nameLocations":["513:7:24"],"nodeType":"IdentifierPath","referencedDeclaration":2595,"src":"513:7:24"},"id":5836,"nodeType":"InheritanceSpecifier","src":"513:7:24"}],"canonicalName":"IBasePaintBrush","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":5844,"linearizedBaseContracts":[5844,2595,4260],"name":"IBasePaintBrush","nameLocation":"494:15:24","nodeType":"ContractDefinition","nodes":[{"functionSelector":"ef77c186","id":5843,"implemented":false,"kind":"function","modifiers":[],"name":"strengths","nameLocation":"536:9:24","nodeType":"FunctionDefinition","parameters":{"id":5839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5838,"mutability":"mutable","name":"tokenId","nameLocation":"554:7:24","nodeType":"VariableDeclaration","scope":5843,"src":"546:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5837,"name":"uint256","nodeType":"ElementaryTypeName","src":"546:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"545:17:24"},"returnParameters":{"id":5842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5841,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5843,"src":"586:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5840,"name":"uint256","nodeType":"ElementaryTypeName","src":"586:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"585:9:24"},"scope":5844,"src":"527:68:24","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":6000,"src":"484:113:24","usedErrors":[]},{"abstract":false,"baseContracts":[{"arguments":[{"hexValue":"426173655061696e74204272757368","id":5846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"637:17:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_44510c00341ffbeafbe64e625bb78420b3ebdfdff9a91d8a45366ade9369c058","typeString":"literal_string \"BasePaint Brush\""},"value":"BasePaint Brush"},{"hexValue":"425042","id":5847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"656:5:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_16b61cfa488883c774e20b38d93f20c4ea3b0cd5e16d45c3a4feb0096229cda6","typeString":"literal_string \"BPB\""},"value":"BPB"}],"baseName":{"id":5845,"name":"ERC721","nameLocations":["630:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":2479,"src":"630:6:24"},"id":5848,"nodeType":"InheritanceSpecifier","src":"630:32:24"},{"arguments":[{"hexValue":"426173655061696e74204272757368","id":5850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"675:17:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_44510c00341ffbeafbe64e625bb78420b3ebdfdff9a91d8a45366ade9369c058","typeString":"literal_string \"BasePaint Brush\""},"value":"BasePaint Brush"},{"hexValue":"31","id":5851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"694:3:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6","typeString":"literal_string \"1\""},"value":"1"}],"baseName":{"id":5849,"name":"EIP712","nameLocations":["668:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":4125,"src":"668:6:24"},"id":5852,"nodeType":"InheritanceSpecifier","src":"668:30:24"},{"baseName":{"id":5853,"name":"IBasePaintBrush","nameLocations":["704:15:24"],"nodeType":"IdentifierPath","referencedDeclaration":5844,"src":"704:15:24"},"id":5854,"nodeType":"InheritanceSpecifier","src":"704:15:24"},{"baseName":{"id":5855,"name":"Ownable","nameLocations":["725:7:24"],"nodeType":"IdentifierPath","referencedDeclaration":112,"src":"725:7:24"},"id":5856,"nodeType":"InheritanceSpecifier","src":"725:7:24"}],"canonicalName":"BasePaintBrush","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5999,"linearizedBaseContracts":[5999,112,5844,4125,151,2479,2640,2595,4248,4260,3000],"name":"BasePaintBrush","nameLocation":"608:14:24","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"18160ddd","id":5858,"mutability":"mutable","name":"totalSupply","nameLocation":"754:11:24","nodeType":"VariableDeclaration","scope":5999,"src":"739:26:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5857,"name":"uint256","nodeType":"ElementaryTypeName","src":"739:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"baseFunctions":[5843],"constant":false,"functionSelector":"ef77c186","id":5862,"mutability":"mutable","name":"strengths","nameLocation":"806:9:24","nodeType":"VariableDeclaration","scope":5999,"src":"771:44:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":5861,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5859,"name":"uint256","nodeType":"ElementaryTypeName","src":"779:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"771:27:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5860,"name":"uint256","nodeType":"ElementaryTypeName","src":"790:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"id":5864,"mutability":"mutable","name":"signer","nameLocation":"838:6:24","nodeType":"VariableDeclaration","scope":5999,"src":"822:22:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5863,"name":"address","nodeType":"ElementaryTypeName","src":"822:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":5868,"mutability":"mutable","name":"nonces","nameLocation":"883:6:24","nodeType":"VariableDeclaration","scope":5999,"src":"850:39:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"typeName":{"id":5867,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5865,"name":"uint256","nodeType":"ElementaryTypeName","src":"858:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"850:24:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5866,"name":"bool","nodeType":"ElementaryTypeName","src":"869:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"private"},{"constant":false,"id":5871,"mutability":"mutable","name":"baseURI","nameLocation":"910:7:24","nodeType":"VariableDeclaration","scope":5999,"src":"895:59:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":5869,"name":"string","nodeType":"ElementaryTypeName","src":"895:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"68747470733a2f2f626173657061696e742e78797a2f6170692f62727573682f","id":5870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"920:34:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_33da14d389b622489cd5b8a388985c68dc559c4b03a80a299a7d493b00a1cfc0","typeString":"literal_string \"https://basepaint.xyz/api/brush/\""},"value":"https://basepaint.xyz/api/brush/"},"visibility":"private"},{"body":{"id":5893,"nodeType":"Block","src":"1018:117:24","statements":[{"expression":{"id":5879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1028:13:24","subExpression":{"id":5878,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5858,"src":"1028:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5880,"nodeType":"ExpressionStatement","src":"1028:13:24"},{"expression":{"arguments":[{"expression":{"id":5882,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1061:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1065:6:24","memberName":"sender","nodeType":"MemberAccess","src":"1061:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5884,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5858,"src":"1073:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5881,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[2047,2076],"referencedDeclaration":2047,"src":"1051:9:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1051:34:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5886,"nodeType":"ExpressionStatement","src":"1051:34:24"},{"expression":{"id":5891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5887,"name":"strengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5862,"src":"1095:9:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5889,"indexExpression":{"id":5888,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5858,"src":"1105:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1095:22:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5890,"name":"strength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5873,"src":"1120:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1095:33:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5892,"nodeType":"ExpressionStatement","src":"1095:33:24"}]},"functionSelector":"a0712d68","id":5894,"implemented":true,"kind":"function","modifiers":[{"id":5876,"kind":"modifierInvocation","modifierName":{"id":5875,"name":"onlyOwner","nameLocations":["1008:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1008:9:24"},"nodeType":"ModifierInvocation","src":"1008:9:24"}],"name":"mint","nameLocation":"970:4:24","nodeType":"FunctionDefinition","parameters":{"id":5874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5873,"mutability":"mutable","name":"strength","nameLocation":"983:8:24","nodeType":"VariableDeclaration","scope":5894,"src":"975:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5872,"name":"uint256","nodeType":"ElementaryTypeName","src":"975:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"974:18:24"},"returnParameters":{"id":5877,"nodeType":"ParameterList","parameters":[],"src":"1018:0:24"},"scope":5999,"src":"961:174:24","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":5920,"nodeType":"Block","src":"1218:122:24","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5904,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5896,"src":"1236:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1246:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1236:11:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5907,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5896,"src":"1251:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":5908,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5858,"src":"1262:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1251:22:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1236:37:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420746f6b656e4964","id":5911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1275:17:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_47dcc88603f32730c5f1349ee02d9fe469c193c742f38ce12c7b0ba84c66c8a4","typeString":"literal_string \"Invalid tokenId\""},"value":"Invalid tokenId"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47dcc88603f32730c5f1349ee02d9fe469c193c742f38ce12c7b0ba84c66c8a4","typeString":"literal_string \"Invalid tokenId\""}],"id":5903,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1228:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1228:65:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5913,"nodeType":"ExpressionStatement","src":"1228:65:24"},{"expression":{"id":5918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5914,"name":"strengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5862,"src":"1304:9:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5916,"indexExpression":{"id":5915,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5896,"src":"1314:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1304:18:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5917,"name":"strength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5898,"src":"1325:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1304:29:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5919,"nodeType":"ExpressionStatement","src":"1304:29:24"}]},"functionSelector":"451450ec","id":5921,"implemented":true,"kind":"function","modifiers":[{"id":5901,"kind":"modifierInvocation","modifierName":{"id":5900,"name":"onlyOwner","nameLocations":["1208:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1208:9:24"},"nodeType":"ModifierInvocation","src":"1208:9:24"}],"name":"upgrade","nameLocation":"1150:7:24","nodeType":"FunctionDefinition","parameters":{"id":5899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5896,"mutability":"mutable","name":"tokenId","nameLocation":"1166:7:24","nodeType":"VariableDeclaration","scope":5921,"src":"1158:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5895,"name":"uint256","nodeType":"ElementaryTypeName","src":"1158:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5898,"mutability":"mutable","name":"strength","nameLocation":"1183:8:24","nodeType":"VariableDeclaration","scope":5921,"src":"1175:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5897,"name":"uint256","nodeType":"ElementaryTypeName","src":"1175:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1157:35:24"},"returnParameters":{"id":5902,"nodeType":"ParameterList","parameters":[],"src":"1218:0:24"},"scope":5999,"src":"1141:199:24","stateMutability":"payable","virtual":false,"visibility":"public"},{"baseFunctions":[1766],"body":{"id":5929,"nodeType":"Block","src":"1413:31:24","statements":[{"expression":{"id":5927,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5871,"src":"1430:7:24","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":5926,"id":5928,"nodeType":"Return","src":"1423:14:24"}]},"id":5930,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"1355:8:24","nodeType":"FunctionDefinition","overrides":{"id":5923,"nodeType":"OverrideSpecifier","overrides":[],"src":"1380:8:24"},"parameters":{"id":5922,"nodeType":"ParameterList","parameters":[],"src":"1363:2:24"},"returnParameters":{"id":5926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5925,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5930,"src":"1398:13:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5924,"name":"string","nodeType":"ElementaryTypeName","src":"1398:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1397:15:24"},"scope":5999,"src":"1346:98:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5941,"nodeType":"Block","src":"1505:35:24","statements":[{"expression":{"id":5939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5937,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5864,"src":"1515:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5938,"name":"newSigner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5932,"src":"1524:9:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1515:18:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5940,"nodeType":"ExpressionStatement","src":"1515:18:24"}]},"functionSelector":"6c19e783","id":5942,"implemented":true,"kind":"function","modifiers":[{"id":5935,"kind":"modifierInvocation","modifierName":{"id":5934,"name":"onlyOwner","nameLocations":["1495:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1495:9:24"},"nodeType":"ModifierInvocation","src":"1495:9:24"}],"name":"setSigner","nameLocation":"1459:9:24","nodeType":"FunctionDefinition","parameters":{"id":5933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5932,"mutability":"mutable","name":"newSigner","nameLocation":"1477:9:24","nodeType":"VariableDeclaration","scope":5942,"src":"1469:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5931,"name":"address","nodeType":"ElementaryTypeName","src":"1469:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1468:19:24"},"returnParameters":{"id":5936,"nodeType":"ParameterList","parameters":[],"src":"1505:0:24"},"scope":5999,"src":"1450:90:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5953,"nodeType":"Block","src":"1611:37:24","statements":[{"expression":{"id":5951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5949,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5871,"src":"1621:7:24","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5950,"name":"newBaseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5944,"src":"1631:10:24","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"src":"1621:20:24","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":5952,"nodeType":"ExpressionStatement","src":"1621:20:24"}]},"functionSelector":"55f804b3","id":5954,"implemented":true,"kind":"function","modifiers":[{"id":5947,"kind":"modifierInvocation","modifierName":{"id":5946,"name":"onlyOwner","nameLocations":["1601:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1601:9:24"},"nodeType":"ModifierInvocation","src":"1601:9:24"}],"name":"setBaseURI","nameLocation":"1555:10:24","nodeType":"FunctionDefinition","parameters":{"id":5945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5944,"mutability":"mutable","name":"newBaseURI","nameLocation":"1582:10:24","nodeType":"VariableDeclaration","scope":5954,"src":"1566:26:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":5943,"name":"string","nodeType":"ElementaryTypeName","src":"1566:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1565:28:24"},"returnParameters":{"id":5948,"nodeType":"ParameterList","parameters":[],"src":"1611:0:24"},"scope":5999,"src":"1546:102:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5969,"nodeType":"Block","src":"1727:46:24","statements":[{"expression":{"id":5967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5963,"name":"strengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5862,"src":"1737:9:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5965,"indexExpression":{"id":5964,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5956,"src":"1747:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1737:18:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5966,"name":"strength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5958,"src":"1758:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1737:29:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5968,"nodeType":"ExpressionStatement","src":"1737:29:24"}]},"functionSelector":"7e9657b7","id":5970,"implemented":true,"kind":"function","modifiers":[{"id":5961,"kind":"modifierInvocation","modifierName":{"id":5960,"name":"onlyOwner","nameLocations":["1717:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1717:9:24"},"nodeType":"ModifierInvocation","src":"1717:9:24"}],"name":"setStrength","nameLocation":"1663:11:24","nodeType":"FunctionDefinition","parameters":{"id":5959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5956,"mutability":"mutable","name":"tokenId","nameLocation":"1683:7:24","nodeType":"VariableDeclaration","scope":5970,"src":"1675:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5955,"name":"uint256","nodeType":"ElementaryTypeName","src":"1675:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5958,"mutability":"mutable","name":"strength","nameLocation":"1700:8:24","nodeType":"VariableDeclaration","scope":5970,"src":"1692:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5957,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1674:35:24"},"returnParameters":{"id":5962,"nodeType":"ParameterList","parameters":[],"src":"1727:0:24"},"scope":5999,"src":"1654:119:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5997,"nodeType":"Block","src":"1816:136:24","statements":[{"assignments":[5976,null],"declarations":[{"constant":false,"id":5976,"mutability":"mutable","name":"success","nameLocation":"1832:7:24","nodeType":"VariableDeclaration","scope":5997,"src":"1827:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5975,"name":"bool","nodeType":"ElementaryTypeName","src":"1827:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":5991,"initialValue":{"arguments":[{"arguments":[{"hexValue":"30","id":5988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1897:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5987,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1887:9:24","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":5986,"name":"bytes","nodeType":"ElementaryTypeName","src":"1891:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":5989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1887:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5977,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1844:5:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1844:7:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1852:4:24","memberName":"call","nodeType":"MemberAccess","src":"1844:12:24","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"arguments":[{"id":5982,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1872:4:24","typeDescriptions":{"typeIdentifier":"t_contract$_BasePaintBrush_$5999","typeString":"contract BasePaintBrush"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BasePaintBrush_$5999","typeString":"contract BasePaintBrush"}],"id":5981,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1864:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5980,"name":"address","nodeType":"ElementaryTypeName","src":"1864:7:24","typeDescriptions":{}}},"id":5983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1864:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1878:7:24","memberName":"balance","nodeType":"MemberAccess","src":"1864:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"1844:42:24","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1844:56:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1826:74:24"},{"expression":{"arguments":[{"id":5993,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5976,"src":"1918:7:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5472616e73666572206661696c6564","id":5994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1927:17:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""},"value":"Transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""}],"id":5992,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1910:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1910:35:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5996,"nodeType":"ExpressionStatement","src":"1910:35:24"}]},"functionSelector":"3ccfd60b","id":5998,"implemented":true,"kind":"function","modifiers":[{"id":5973,"kind":"modifierInvocation","modifierName":{"id":5972,"name":"onlyOwner","nameLocations":["1806:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1806:9:24"},"nodeType":"ModifierInvocation","src":"1806:9:24"}],"name":"withdraw","nameLocation":"1788:8:24","nodeType":"FunctionDefinition","parameters":{"id":5971,"nodeType":"ParameterList","parameters":[],"src":"1796:2:24"},"returnParameters":{"id":5974,"nodeType":"ParameterList","parameters":[],"src":"1816:0:24"},"scope":5999,"src":"1779:173:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":6000,"src":"599:1355:24","usedErrors":[3013,3015]}],"src":"149:1806:24"},"id":24}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/IERC1271.sol":{"IERC1271":{"abi":[{"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC1271 standard signature validation method for contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271]. _Available since v4.1._","kind":"dev","methods":{"isValidSignature(bytes32,bytes)":{"details":"Should return whether the signature provided is valid for the provided data","params":{"hash":"Hash of the data to be signed","signature":"Signature byte array associated with _data"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isValidSignature(bytes32,bytes)":"1626ba7e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC1271 standard signature validation method for contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271]. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"isValidSignature(bytes32,bytes)\":{\"details\":\"Should return whether the signature provided is valid for the provided data\",\"params\":{\"hash\":\"Hash of the data to be signed\",\"signature\":\"Signature byte array associated with _data\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":\"IERC1271\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/IERC5267.sol":{"IERC5267":{"abi":[{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"EIP712DomainChanged()":{"details":"MAY be emitted to signal that the domain could have changed."}},"kind":"dev","methods":{"eip712Domain()":{"details":"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"eip712Domain()":"84b0196e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":\"IERC5267\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/ERC1155.sol":{"ERC1155":{"abi":[{"inputs":[{"internalType":"string","name":"uri_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the basic standard multi-token. See https://eips.ethereum.org/EIPS/eip-1155 Originally based on code by Enjin: https://github.com/enjin/erc-1155 _Available since v3.1._","events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"constructor":{"details":"See {_setURI}."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_196":{"entryPoint":null,"id":196,"parameterSlots":1,"returnSlots":0},"@_setURI_707":{"entryPoint":70,"id":707,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_string_memory_ptr_fromMemory":{"entryPoint":110,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":383,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":466,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":323,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":88,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3779:25","statements":[{"nodeType":"YulBlock","src":"6:3:25","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:25"},"nodeType":"YulFunctionCall","src":"66:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:25"},"nodeType":"YulFunctionCall","src":"56:31:25"},"nodeType":"YulExpressionStatement","src":"56:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:25","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:25"},"nodeType":"YulFunctionCall","src":"96:15:25"},"nodeType":"YulExpressionStatement","src":"96:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:25"},"nodeType":"YulFunctionCall","src":"120:15:25"},"nodeType":"YulExpressionStatement","src":"120:15:25"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:25"},{"body":{"nodeType":"YulBlock","src":"237:951:25","statements":[{"nodeType":"YulVariableDeclaration","src":"247:12:25","value":{"kind":"number","nodeType":"YulLiteral","src":"257:2:25","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"251:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"304:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"313:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"316:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"306:6:25"},"nodeType":"YulFunctionCall","src":"306:12:25"},"nodeType":"YulExpressionStatement","src":"306:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"279:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"288:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"275:3:25"},"nodeType":"YulFunctionCall","src":"275:23:25"},{"name":"_1","nodeType":"YulIdentifier","src":"300:2:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"271:3:25"},"nodeType":"YulFunctionCall","src":"271:32:25"},"nodeType":"YulIf","src":"268:52:25"},{"nodeType":"YulVariableDeclaration","src":"329:30:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"349:9:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"343:5:25"},"nodeType":"YulFunctionCall","src":"343:16:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"333:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"368:28:25","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"386:2:25","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"390:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"382:3:25"},"nodeType":"YulFunctionCall","src":"382:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"394:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"378:3:25"},"nodeType":"YulFunctionCall","src":"378:18:25"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"372:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"423:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"432:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"435:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"425:6:25"},"nodeType":"YulFunctionCall","src":"425:12:25"},"nodeType":"YulExpressionStatement","src":"425:12:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"411:6:25"},{"name":"_2","nodeType":"YulIdentifier","src":"419:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"408:2:25"},"nodeType":"YulFunctionCall","src":"408:14:25"},"nodeType":"YulIf","src":"405:34:25"},{"nodeType":"YulVariableDeclaration","src":"448:32:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"462:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"473:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"458:3:25"},"nodeType":"YulFunctionCall","src":"458:22:25"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"452:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"528:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"537:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"540:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"530:6:25"},"nodeType":"YulFunctionCall","src":"530:12:25"},"nodeType":"YulExpressionStatement","src":"530:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"507:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"511:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"503:3:25"},"nodeType":"YulFunctionCall","src":"503:13:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"518:7:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"499:3:25"},"nodeType":"YulFunctionCall","src":"499:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"492:6:25"},"nodeType":"YulFunctionCall","src":"492:35:25"},"nodeType":"YulIf","src":"489:55:25"},{"nodeType":"YulVariableDeclaration","src":"553:19:25","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"569:2:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"563:5:25"},"nodeType":"YulFunctionCall","src":"563:9:25"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"557:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"595:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"597:16:25"},"nodeType":"YulFunctionCall","src":"597:18:25"},"nodeType":"YulExpressionStatement","src":"597:18:25"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"587:2:25"},{"name":"_2","nodeType":"YulIdentifier","src":"591:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"584:2:25"},"nodeType":"YulFunctionCall","src":"584:10:25"},"nodeType":"YulIf","src":"581:36:25"},{"nodeType":"YulVariableDeclaration","src":"626:17:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"640:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"636:3:25"},"nodeType":"YulFunctionCall","src":"636:7:25"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"630:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"652:23:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"672:2:25","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"666:5:25"},"nodeType":"YulFunctionCall","src":"666:9:25"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"656:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"684:71:25","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"706:6:25"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"730:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"734:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"726:3:25"},"nodeType":"YulFunctionCall","src":"726:13:25"},{"name":"_5","nodeType":"YulIdentifier","src":"741:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"722:3:25"},"nodeType":"YulFunctionCall","src":"722:22:25"},{"kind":"number","nodeType":"YulLiteral","src":"746:2:25","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"718:3:25"},"nodeType":"YulFunctionCall","src":"718:31:25"},{"name":"_5","nodeType":"YulIdentifier","src":"751:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"714:3:25"},"nodeType":"YulFunctionCall","src":"714:40:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"702:3:25"},"nodeType":"YulFunctionCall","src":"702:53:25"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"688:10:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"814:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"816:16:25"},"nodeType":"YulFunctionCall","src":"816:18:25"},"nodeType":"YulExpressionStatement","src":"816:18:25"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"773:10:25"},{"name":"_2","nodeType":"YulIdentifier","src":"785:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"770:2:25"},"nodeType":"YulFunctionCall","src":"770:18:25"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"793:10:25"},{"name":"memPtr","nodeType":"YulIdentifier","src":"805:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"790:2:25"},"nodeType":"YulFunctionCall","src":"790:22:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"767:2:25"},"nodeType":"YulFunctionCall","src":"767:46:25"},"nodeType":"YulIf","src":"764:72:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"852:2:25","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"856:10:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"845:6:25"},"nodeType":"YulFunctionCall","src":"845:22:25"},"nodeType":"YulExpressionStatement","src":"845:22:25"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"883:6:25"},{"name":"_4","nodeType":"YulIdentifier","src":"891:2:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"876:6:25"},"nodeType":"YulFunctionCall","src":"876:18:25"},"nodeType":"YulExpressionStatement","src":"876:18:25"},{"body":{"nodeType":"YulBlock","src":"940:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"949:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"952:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"942:6:25"},"nodeType":"YulFunctionCall","src":"942:12:25"},"nodeType":"YulExpressionStatement","src":"942:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"917:2:25"},{"name":"_4","nodeType":"YulIdentifier","src":"921:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"913:3:25"},"nodeType":"YulFunctionCall","src":"913:11:25"},{"name":"_1","nodeType":"YulIdentifier","src":"926:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"909:3:25"},"nodeType":"YulFunctionCall","src":"909:20:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"931:7:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"906:2:25"},"nodeType":"YulFunctionCall","src":"906:33:25"},"nodeType":"YulIf","src":"903:53:25"},{"nodeType":"YulVariableDeclaration","src":"965:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"974:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"969:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"1030:83:25","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1059:6:25"},{"name":"i","nodeType":"YulIdentifier","src":"1067:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1055:3:25"},"nodeType":"YulFunctionCall","src":"1055:14:25"},{"name":"_1","nodeType":"YulIdentifier","src":"1071:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1051:3:25"},"nodeType":"YulFunctionCall","src":"1051:23:25"},{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1090:2:25"},{"name":"i","nodeType":"YulIdentifier","src":"1094:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1086:3:25"},"nodeType":"YulFunctionCall","src":"1086:10:25"},{"name":"_1","nodeType":"YulIdentifier","src":"1098:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1082:3:25"},"nodeType":"YulFunctionCall","src":"1082:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1076:5:25"},"nodeType":"YulFunctionCall","src":"1076:26:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1044:6:25"},"nodeType":"YulFunctionCall","src":"1044:59:25"},"nodeType":"YulExpressionStatement","src":"1044:59:25"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"995:1:25"},{"name":"_4","nodeType":"YulIdentifier","src":"998:2:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"992:2:25"},"nodeType":"YulFunctionCall","src":"992:9:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1002:19:25","statements":[{"nodeType":"YulAssignment","src":"1004:15:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1013:1:25"},{"name":"_1","nodeType":"YulIdentifier","src":"1016:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1009:3:25"},"nodeType":"YulFunctionCall","src":"1009:10:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1004:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"988:3:25","statements":[]},"src":"984:129:25"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1137:6:25"},{"name":"_4","nodeType":"YulIdentifier","src":"1145:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1133:3:25"},"nodeType":"YulFunctionCall","src":"1133:15:25"},{"name":"_1","nodeType":"YulIdentifier","src":"1150:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1129:3:25"},"nodeType":"YulFunctionCall","src":"1129:24:25"},{"kind":"number","nodeType":"YulLiteral","src":"1155:1:25","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1122:6:25"},"nodeType":"YulFunctionCall","src":"1122:35:25"},"nodeType":"YulExpressionStatement","src":"1122:35:25"},{"nodeType":"YulAssignment","src":"1166:16:25","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1176:6:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1166:6:25"}]}]},"name":"abi_decode_tuple_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"203:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"214:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"226:6:25","type":""}],"src":"146:1042:25"},{"body":{"nodeType":"YulBlock","src":"1248:325:25","statements":[{"nodeType":"YulAssignment","src":"1258:22:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1272:1:25","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1275:4:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1268:3:25"},"nodeType":"YulFunctionCall","src":"1268:12:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1258:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"1289:38:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1319:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"1325:1:25","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1315:3:25"},"nodeType":"YulFunctionCall","src":"1315:12:25"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1293:18:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"1366:31:25","statements":[{"nodeType":"YulAssignment","src":"1368:27:25","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1382:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"1390:4:25","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1378:3:25"},"nodeType":"YulFunctionCall","src":"1378:17:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1368:6:25"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1346:18:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1339:6:25"},"nodeType":"YulFunctionCall","src":"1339:26:25"},"nodeType":"YulIf","src":"1336:61:25"},{"body":{"nodeType":"YulBlock","src":"1456:111:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1477:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1484:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1489:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1480:3:25"},"nodeType":"YulFunctionCall","src":"1480:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1470:6:25"},"nodeType":"YulFunctionCall","src":"1470:31:25"},"nodeType":"YulExpressionStatement","src":"1470:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1521:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1524:4:25","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1514:6:25"},"nodeType":"YulFunctionCall","src":"1514:15:25"},"nodeType":"YulExpressionStatement","src":"1514:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1549:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1552:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1542:6:25"},"nodeType":"YulFunctionCall","src":"1542:15:25"},"nodeType":"YulExpressionStatement","src":"1542:15:25"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1412:18:25"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1435:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"1443:2:25","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1432:2:25"},"nodeType":"YulFunctionCall","src":"1432:14:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1409:2:25"},"nodeType":"YulFunctionCall","src":"1409:38:25"},"nodeType":"YulIf","src":"1406:161:25"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1228:4:25","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1237:6:25","type":""}],"src":"1193:380:25"},{"body":{"nodeType":"YulBlock","src":"1634:65:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1651:1:25","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"1654:3:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1644:6:25"},"nodeType":"YulFunctionCall","src":"1644:14:25"},"nodeType":"YulExpressionStatement","src":"1644:14:25"},{"nodeType":"YulAssignment","src":"1667:26:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1685:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1688:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"1675:9:25"},"nodeType":"YulFunctionCall","src":"1675:18:25"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1667:4:25"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1617:3:25","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"1625:4:25","type":""}],"src":"1578:121:25"},{"body":{"nodeType":"YulBlock","src":"1785:464:25","statements":[{"body":{"nodeType":"YulBlock","src":"1818:425:25","statements":[{"nodeType":"YulVariableDeclaration","src":"1832:11:25","value":{"kind":"number","nodeType":"YulLiteral","src":"1842:1:25","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1836:2:25","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1863:2:25"},{"name":"array","nodeType":"YulIdentifier","src":"1867:5:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1856:6:25"},"nodeType":"YulFunctionCall","src":"1856:17:25"},"nodeType":"YulExpressionStatement","src":"1856:17:25"},{"nodeType":"YulVariableDeclaration","src":"1886:31:25","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1908:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"1912:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"1898:9:25"},"nodeType":"YulFunctionCall","src":"1898:19:25"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"1890:4:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1930:57:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1953:4:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1963:1:25","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"1970:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"1982:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1966:3:25"},"nodeType":"YulFunctionCall","src":"1966:19:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1959:3:25"},"nodeType":"YulFunctionCall","src":"1959:27:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1949:3:25"},"nodeType":"YulFunctionCall","src":"1949:38:25"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"1934:11:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"2024:23:25","statements":[{"nodeType":"YulAssignment","src":"2026:19:25","value":{"name":"data","nodeType":"YulIdentifier","src":"2041:4:25"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"2026:11:25"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2006:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"2018:4:25","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2003:2:25"},"nodeType":"YulFunctionCall","src":"2003:20:25"},"nodeType":"YulIf","src":"2000:47:25"},{"nodeType":"YulVariableDeclaration","src":"2060:41:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2074:4:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2084:1:25","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2091:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"2096:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2087:3:25"},"nodeType":"YulFunctionCall","src":"2087:12:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2080:3:25"},"nodeType":"YulFunctionCall","src":"2080:20:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2070:3:25"},"nodeType":"YulFunctionCall","src":"2070:31:25"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2064:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2114:24:25","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"2127:11:25"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"2118:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"2212:21:25","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2221:5:25"},{"name":"_1","nodeType":"YulIdentifier","src":"2228:2:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2214:6:25"},"nodeType":"YulFunctionCall","src":"2214:17:25"},"nodeType":"YulExpressionStatement","src":"2214:17:25"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2162:5:25"},{"name":"_2","nodeType":"YulIdentifier","src":"2169:2:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2159:2:25"},"nodeType":"YulFunctionCall","src":"2159:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2173:26:25","statements":[{"nodeType":"YulAssignment","src":"2175:22:25","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2188:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"2195:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2184:3:25"},"nodeType":"YulFunctionCall","src":"2184:13:25"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2175:5:25"}]}]},"pre":{"nodeType":"YulBlock","src":"2155:3:25","statements":[]},"src":"2151:82:25"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"1801:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"1806:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1798:2:25"},"nodeType":"YulFunctionCall","src":"1798:11:25"},"nodeType":"YulIf","src":"1795:448:25"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"1757:5:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"1764:3:25","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"1769:10:25","type":""}],"src":"1704:545:25"},{"body":{"nodeType":"YulBlock","src":"2339:81:25","statements":[{"nodeType":"YulAssignment","src":"2349:65:25","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2364:4:25"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2382:1:25","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"2385:3:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2378:3:25"},"nodeType":"YulFunctionCall","src":"2378:11:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2395:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2391:3:25"},"nodeType":"YulFunctionCall","src":"2391:6:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2374:3:25"},"nodeType":"YulFunctionCall","src":"2374:24:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2370:3:25"},"nodeType":"YulFunctionCall","src":"2370:29:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2360:3:25"},"nodeType":"YulFunctionCall","src":"2360:40:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2406:1:25","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"2409:3:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2402:3:25"},"nodeType":"YulFunctionCall","src":"2402:11:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2357:2:25"},"nodeType":"YulFunctionCall","src":"2357:57:25"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"2349:4:25"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2316:4:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"2322:3:25","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"2330:4:25","type":""}],"src":"2254:166:25"},{"body":{"nodeType":"YulBlock","src":"2521:1256:25","statements":[{"nodeType":"YulVariableDeclaration","src":"2531:24:25","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2551:3:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2545:5:25"},"nodeType":"YulFunctionCall","src":"2545:10:25"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"2535:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"2598:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2600:16:25"},"nodeType":"YulFunctionCall","src":"2600:18:25"},"nodeType":"YulExpressionStatement","src":"2600:18:25"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2570:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2586:2:25","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2590:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2582:3:25"},"nodeType":"YulFunctionCall","src":"2582:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"2594:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2578:3:25"},"nodeType":"YulFunctionCall","src":"2578:18:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2567:2:25"},"nodeType":"YulFunctionCall","src":"2567:30:25"},"nodeType":"YulIf","src":"2564:56:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2673:4:25"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2711:4:25"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"2705:5:25"},"nodeType":"YulFunctionCall","src":"2705:11:25"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"2679:25:25"},"nodeType":"YulFunctionCall","src":"2679:38:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"2719:6:25"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"2629:43:25"},"nodeType":"YulFunctionCall","src":"2629:97:25"},"nodeType":"YulExpressionStatement","src":"2629:97:25"},{"nodeType":"YulVariableDeclaration","src":"2735:18:25","value":{"kind":"number","nodeType":"YulLiteral","src":"2752:1:25","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"2739:9:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2762:23:25","value":{"kind":"number","nodeType":"YulLiteral","src":"2781:4:25","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"2766:11:25","type":""}]},{"nodeType":"YulAssignment","src":"2794:24:25","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2807:11:25"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2794:9:25"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"2864:656:25","statements":[{"nodeType":"YulVariableDeclaration","src":"2878:35:25","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2897:6:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2909:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2905:3:25"},"nodeType":"YulFunctionCall","src":"2905:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2893:3:25"},"nodeType":"YulFunctionCall","src":"2893:20:25"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"2882:7:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2926:49:25","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2970:4:25"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"2940:29:25"},"nodeType":"YulFunctionCall","src":"2940:35:25"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"2930:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2988:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"2997:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2992:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"3075:172:25","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3100:6:25"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3118:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3123:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3114:3:25"},"nodeType":"YulFunctionCall","src":"3114:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3108:5:25"},"nodeType":"YulFunctionCall","src":"3108:26:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3093:6:25"},"nodeType":"YulFunctionCall","src":"3093:42:25"},"nodeType":"YulExpressionStatement","src":"3093:42:25"},{"nodeType":"YulAssignment","src":"3152:24:25","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3166:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"3174:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3162:3:25"},"nodeType":"YulFunctionCall","src":"3162:14:25"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3152:6:25"}]},{"nodeType":"YulAssignment","src":"3193:40:25","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3210:9:25"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3221:11:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3206:3:25"},"nodeType":"YulFunctionCall","src":"3206:27:25"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3193:9:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3022:1:25"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"3025:7:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3019:2:25"},"nodeType":"YulFunctionCall","src":"3019:14:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3034:28:25","statements":[{"nodeType":"YulAssignment","src":"3036:24:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3045:1:25"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3048:11:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3041:3:25"},"nodeType":"YulFunctionCall","src":"3041:19:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3036:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"3015:3:25","statements":[]},"src":"3011:236:25"},{"body":{"nodeType":"YulBlock","src":"3295:166:25","statements":[{"nodeType":"YulVariableDeclaration","src":"3313:43:25","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3340:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3345:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3336:3:25"},"nodeType":"YulFunctionCall","src":"3336:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3330:5:25"},"nodeType":"YulFunctionCall","src":"3330:26:25"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"3317:9:25","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3380:6:25"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"3392:9:25"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3419:1:25","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"3422:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3415:3:25"},"nodeType":"YulFunctionCall","src":"3415:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"3431:3:25","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3411:3:25"},"nodeType":"YulFunctionCall","src":"3411:24:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3441:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3437:3:25"},"nodeType":"YulFunctionCall","src":"3437:6:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3407:3:25"},"nodeType":"YulFunctionCall","src":"3407:37:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3403:3:25"},"nodeType":"YulFunctionCall","src":"3403:42:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3388:3:25"},"nodeType":"YulFunctionCall","src":"3388:58:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3373:6:25"},"nodeType":"YulFunctionCall","src":"3373:74:25"},"nodeType":"YulExpressionStatement","src":"3373:74:25"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"3266:7:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"3275:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3263:2:25"},"nodeType":"YulFunctionCall","src":"3263:19:25"},"nodeType":"YulIf","src":"3260:201:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3481:4:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3495:1:25","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"3498:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3491:3:25"},"nodeType":"YulFunctionCall","src":"3491:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"3507:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3487:3:25"},"nodeType":"YulFunctionCall","src":"3487:22:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3474:6:25"},"nodeType":"YulFunctionCall","src":"3474:36:25"},"nodeType":"YulExpressionStatement","src":"3474:36:25"}]},"nodeType":"YulCase","src":"2857:663:25","value":{"kind":"number","nodeType":"YulLiteral","src":"2862:1:25","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"3537:234:25","statements":[{"nodeType":"YulVariableDeclaration","src":"3551:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"3564:1:25","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3555:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"3600:67:25","statements":[{"nodeType":"YulAssignment","src":"3618:35:25","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3637:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3642:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3633:3:25"},"nodeType":"YulFunctionCall","src":"3633:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3627:5:25"},"nodeType":"YulFunctionCall","src":"3627:26:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3618:5:25"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"3581:6:25"},"nodeType":"YulIf","src":"3578:89:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3687:4:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3746:5:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"3753:6:25"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"3693:52:25"},"nodeType":"YulFunctionCall","src":"3693:67:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3680:6:25"},"nodeType":"YulFunctionCall","src":"3680:81:25"},"nodeType":"YulExpressionStatement","src":"3680:81:25"}]},"nodeType":"YulCase","src":"3529:242:25","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2837:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"2845:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2834:2:25"},"nodeType":"YulFunctionCall","src":"2834:14:25"},"nodeType":"YulSwitch","src":"2827:944:25"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"2506:4:25","type":""},{"name":"src","nodeType":"YulTypedName","src":"2512:3:25","type":""}],"src":"2425:1352:25"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := mload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_4, 0x1f), _5), 63), _5))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _4)\n        if gt(add(add(_3, _4), _1), dataEnd) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _4) { i := add(i, _1) }\n        {\n            mstore(add(add(memPtr, i), _1), mload(add(add(_3, i), _1)))\n        }\n        mstore(add(add(memPtr, _4), _1), 0)\n        value0 := memPtr\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":25,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b506040516200162b3803806200162b83398101604081905262000034916200006e565b6200003f8162000046565b506200029e565b6002620000548282620001d2565b5050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200008257600080fd5b82516001600160401b03808211156200009a57600080fd5b818501915085601f830112620000af57600080fd5b815181811115620000c457620000c462000058565b604051601f8201601f19908116603f01168101908382118183101715620000ef57620000ef62000058565b8160405282815288868487010111156200010857600080fd5b600093505b828410156200012c57848401860151818501870152928501926200010d565b600086848301015280965050505050505092915050565b600181811c908216806200015857607f821691505b6020821081036200017957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001cd57600081815260208120601f850160051c81016020861015620001a85750805b601f850160051c820191505b81811015620001c957828155600101620001b4565b5050505b505050565b81516001600160401b03811115620001ee57620001ee62000058565b6200020681620001ff845462000143565b846200017f565b602080601f8311600181146200023e5760008415620002255750858301515b600019600386901b1c1916600185901b178555620001c9565b600085815260208120601f198616915b828110156200026f578886015182559484019460019091019084016200024e565b50858210156200028e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61137d80620002ae6000396000f3fe608060405234801561001057600080fd5b50600436106100875760003560e01c80634e1273f41161005b5780634e1273f41461010a578063a22cb4651461012a578063e985e9c51461013d578063f242432a1461017957600080fd5b8062fdd58e1461008c57806301ffc9a7146100b25780630e89341c146100d55780632eb2c2d6146100f5575b600080fd5b61009f61009a366004610b40565b61018c565b6040519081526020015b60405180910390f35b6100c56100c0366004610b83565b610225565b60405190151581526020016100a9565b6100e86100e3366004610ba7565b610275565b6040516100a99190610c06565b610108610103366004610d65565b610309565b005b61011d610118366004610e0f565b610355565b6040516100a99190610f15565b610108610138366004610f28565b61047f565b6100c561014b366004610f64565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b610108610187366004610f97565b61048e565b60006001600160a01b0383166101fc5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061025657506001600160e01b031982166303a24d0760e21b145b8061021f57506301ffc9a760e01b6001600160e01b031983161461021f565b60606002805461028490610ffc565b80601f01602080910402602001604051908101604052809291908181526020018280546102b090610ffc565b80156102fd5780601f106102d2576101008083540402835291602001916102fd565b820191906000526020600020905b8154815290600101906020018083116102e057829003601f168201915b50505050509050919050565b6001600160a01b0385163314806103255750610325853361014b565b6103415760405162461bcd60e51b81526004016101f390611036565b61034e85858585856104d3565b5050505050565b606081518351146103ba5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016101f3565b6000835167ffffffffffffffff8111156103d6576103d6610c19565b6040519080825280602002602001820160405280156103ff578160200160208202803683370190505b50905060005b84518110156104775761044a85828151811061042357610423611084565b602002602001015185838151811061043d5761043d611084565b602002602001015161018c565b82828151811061045c5761045c611084565b6020908102919091010152610470816110b0565b9050610405565b509392505050565b61048a3383836106b0565b5050565b6001600160a01b0385163314806104aa57506104aa853361014b565b6104c65760405162461bcd60e51b81526004016101f390611036565b61034e8585858585610790565b81518351146105355760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016101f3565b6001600160a01b03841661055b5760405162461bcd60e51b81526004016101f3906110c9565b3360005b845181101561064257600085828151811061057c5761057c611084565b60200260200101519050600085838151811061059a5761059a611084565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156105ea5760405162461bcd60e51b81526004016101f39061110e565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610627908490611158565b925050819055505050508061063b906110b0565b905061055f565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161069292919061116b565b60405180910390a46106a88187878787876108ba565b505050505050565b816001600160a01b0316836001600160a01b0316036107235760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016101f3565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166107b65760405162461bcd60e51b81526004016101f3906110c9565b3360006107c285610a1e565b905060006107cf85610a1e565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156108125760405162461bcd60e51b81526004016101f39061110e565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061084f908490611158565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46108af848a8a8a8a8a610a69565b505050505050505050565b6001600160a01b0384163b156106a85760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906108fe9089908990889088908890600401611199565b6020604051808303816000875af1925050508015610939575060408051601f3d908101601f19168201909252610936918101906111f7565b60015b6109e557610945611214565b806308c379a00361097e5750610959611230565b806109645750610980565b8060405162461bcd60e51b81526004016101f39190610c06565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016101f3565b6001600160e01b0319811663bc197c8160e01b14610a155760405162461bcd60e51b81526004016101f3906112ba565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610a5857610a58611084565b602090810291909101015292915050565b6001600160a01b0384163b156106a85760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610aad9089908990889088908890600401611302565b6020604051808303816000875af1925050508015610ae8575060408051601f3d908101601f19168201909252610ae5918101906111f7565b60015b610af457610945611214565b6001600160e01b0319811663f23a6e6160e01b14610a155760405162461bcd60e51b81526004016101f3906112ba565b80356001600160a01b0381168114610b3b57600080fd5b919050565b60008060408385031215610b5357600080fd5b610b5c83610b24565b946020939093013593505050565b6001600160e01b031981168114610b8057600080fd5b50565b600060208284031215610b9557600080fd5b8135610ba081610b6a565b9392505050565b600060208284031215610bb957600080fd5b5035919050565b6000815180845260005b81811015610be657602081850181015186830182015201610bca565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610ba06020830184610bc0565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715610c5557610c55610c19565b6040525050565b600067ffffffffffffffff821115610c7657610c76610c19565b5060051b60200190565b600082601f830112610c9157600080fd5b81356020610c9e82610c5c565b604051610cab8282610c2f565b83815260059390931b8501820192828101915086841115610ccb57600080fd5b8286015b84811015610ce65780358352918301918301610ccf565b509695505050505050565b600082601f830112610d0257600080fd5b813567ffffffffffffffff811115610d1c57610d1c610c19565b604051610d33601f8301601f191660200182610c2f565b818152846020838601011115610d4857600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215610d7d57600080fd5b610d8686610b24565b9450610d9460208701610b24565b9350604086013567ffffffffffffffff80821115610db157600080fd5b610dbd89838a01610c80565b94506060880135915080821115610dd357600080fd5b610ddf89838a01610c80565b93506080880135915080821115610df557600080fd5b50610e0288828901610cf1565b9150509295509295909350565b60008060408385031215610e2257600080fd5b823567ffffffffffffffff80821115610e3a57600080fd5b818501915085601f830112610e4e57600080fd5b81356020610e5b82610c5c565b604051610e688282610c2f565b83815260059390931b8501820192828101915089841115610e8857600080fd5b948201945b83861015610ead57610e9e86610b24565b82529482019490820190610e8d565b96505086013592505080821115610ec357600080fd5b50610ed085828601610c80565b9150509250929050565b600081518084526020808501945080840160005b83811015610f0a57815187529582019590820190600101610eee565b509495945050505050565b602081526000610ba06020830184610eda565b60008060408385031215610f3b57600080fd5b610f4483610b24565b915060208301358015158114610f5957600080fd5b809150509250929050565b60008060408385031215610f7757600080fd5b610f8083610b24565b9150610f8e60208401610b24565b90509250929050565b600080600080600060a08688031215610faf57600080fd5b610fb886610b24565b9450610fc660208701610b24565b93506040860135925060608601359150608086013567ffffffffffffffff811115610ff057600080fd5b610e0288828901610cf1565b600181811c9082168061101057607f821691505b60208210810361103057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016110c2576110c261109a565b5060010190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b8082018082111561021f5761021f61109a565b60408152600061117e6040830185610eda565b82810360208401526111908185610eda565b95945050505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906111c590830186610eda565b82810360608401526111d78186610eda565b905082810360808401526111eb8185610bc0565b98975050505050505050565b60006020828403121561120957600080fd5b8151610ba081610b6a565b600060033d111561122d5760046000803e5060005160e01c5b90565b600060443d101561123e5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561126e57505050505090565b82850191508151818111156112865750505050505090565b843d87010160208285010111156112a05750505050505090565b6112af60208286010187610c2f565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061133c90830184610bc0565b97965050505050505056fea264697066735822122029f52531444516d92c107687d074f50e713e713c8f0880367fe8f3b0c94b425864736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x162B CODESIZE SUB DUP1 PUSH3 0x162B DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x6E JUMP JUMPDEST PUSH3 0x3F DUP2 PUSH3 0x46 JUMP JUMPDEST POP PUSH3 0x29E JUMP JUMPDEST PUSH1 0x2 PUSH3 0x54 DUP3 DUP3 PUSH3 0x1D2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH3 0xAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH3 0xC4 JUMPI PUSH3 0xC4 PUSH3 0x58 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0xEF JUMPI PUSH3 0xEF PUSH3 0x58 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 DUP7 DUP5 DUP8 ADD ADD GT ISZERO PUSH3 0x108 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP4 POP JUMPDEST DUP3 DUP5 LT ISZERO PUSH3 0x12C JUMPI DUP5 DUP5 ADD DUP7 ADD MLOAD DUP2 DUP6 ADD DUP8 ADD MSTORE SWAP3 DUP6 ADD SWAP3 PUSH3 0x10D JUMP JUMPDEST PUSH1 0x0 DUP7 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x158 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x179 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x1CD JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x1A8 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x1C9 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x1B4 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x1EE JUMPI PUSH3 0x1EE PUSH3 0x58 JUMP JUMPDEST PUSH3 0x206 DUP2 PUSH3 0x1FF DUP5 SLOAD PUSH3 0x143 JUMP JUMPDEST DUP5 PUSH3 0x17F JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x23E JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x225 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x1C9 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x26F JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x24E JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x28E JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x137D DUP1 PUSH3 0x2AE PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4E1273F4 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x10A JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0xF5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0xB40 JUMP JUMPDEST PUSH2 0x18C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC5 PUSH2 0xC0 CALLDATASIZE PUSH1 0x4 PUSH2 0xB83 JUMP JUMPDEST PUSH2 0x225 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA9 JUMP JUMPDEST PUSH2 0xE8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0xBA7 JUMP JUMPDEST PUSH2 0x275 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0xC06 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x103 CALLDATASIZE PUSH1 0x4 PUSH2 0xD65 JUMP JUMPDEST PUSH2 0x309 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11D PUSH2 0x118 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0F JUMP JUMPDEST PUSH2 0x355 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0xF15 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x138 CALLDATASIZE PUSH1 0x4 PUSH2 0xF28 JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x14B CALLDATASIZE PUSH1 0x4 PUSH2 0xF64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x187 CALLDATASIZE PUSH1 0x4 PUSH2 0xF97 JUMP JUMPDEST PUSH2 0x48E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x30B634B21037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x256 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ JUMPDEST DUP1 PUSH2 0x21F JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x21F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x284 SWAP1 PUSH2 0xFFC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B0 SWAP1 PUSH2 0xFFC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x325 JUMPI POP PUSH2 0x325 DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x341 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x1036 JUMP JUMPDEST PUSH2 0x34E DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x4D3 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x40DAD2E6DAC2E8C6D PUSH1 0xBB SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D6 JUMPI PUSH2 0x3D6 PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3FF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x477 JUMPI PUSH2 0x44A DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x423 JUMPI PUSH2 0x423 PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x43D JUMPI PUSH2 0x43D PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x18C JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x45C JUMPI PUSH2 0x45C PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x470 DUP2 PUSH2 0x10B0 JUMP JUMPDEST SWAP1 POP PUSH2 0x405 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x48A CALLER DUP4 DUP4 PUSH2 0x6B0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x4AA JUMPI POP PUSH2 0x4AA DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x4C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x1036 JUMP JUMPDEST PUSH2 0x34E DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x790 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x535 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0xDAD2E6DAC2E8C6D PUSH1 0xC3 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x55B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x10C9 JUMP JUMPDEST CALLER PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x642 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x57C JUMPI PUSH2 0x57C PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x59A JUMPI PUSH2 0x59A PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE DUP1 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x5EA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x110E JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x627 SWAP1 DUP5 SWAP1 PUSH2 0x1158 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x63B SWAP1 PUSH2 0x10B0 JUMP JUMPDEST SWAP1 POP PUSH2 0x55F JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x692 SWAP3 SWAP2 SWAP1 PUSH2 0x116B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x6A8 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x8BA JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x723 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x103337B91039B2B633 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x7B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x10C9 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x7C2 DUP6 PUSH2 0xA1E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7CF DUP6 PUSH2 0xA1E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0x812 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x110E JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0x84F SWAP1 DUP5 SWAP1 PUSH2 0x1158 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x8AF DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0xA69 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x6A8 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0x8FE SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1199 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x939 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x936 SWAP2 DUP2 ADD SWAP1 PUSH2 0x11F7 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x9E5 JUMPI PUSH2 0x945 PUSH2 0x1214 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH2 0x97E JUMPI POP PUSH2 0x959 PUSH2 0x1230 JUMP JUMPDEST DUP1 PUSH2 0x964 JUMPI POP PUSH2 0x980 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0xC06 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x2932B1B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0xA15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x12BA JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xA58 JUMPI PUSH2 0xA58 PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x6A8 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0xAAD SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1302 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xAE8 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xAE5 SWAP2 DUP2 ADD SWAP1 PUSH2 0x11F7 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xAF4 JUMPI PUSH2 0x945 PUSH2 0x1214 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0xA15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x12BA JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB5C DUP4 PUSH2 0xB24 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xB80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBA0 DUP2 PUSH2 0xB6A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xBE6 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xBCA JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xBA0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xBC0 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xC55 JUMPI PUSH2 0xC55 PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xC76 JUMPI PUSH2 0xC76 PUSH2 0xC19 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xC91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xC9E DUP3 PUSH2 0xC5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCAB DUP3 DUP3 PUSH2 0xC2F JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP7 DUP5 GT ISZERO PUSH2 0xCCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xCE6 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0xCCF JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD1C JUMPI PUSH2 0xD1C PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD33 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0xC2F JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0xD48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xD7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD86 DUP7 PUSH2 0xB24 JUMP JUMPDEST SWAP5 POP PUSH2 0xD94 PUSH1 0x20 DUP8 ADD PUSH2 0xB24 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xDB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDBD DUP10 DUP4 DUP11 ADD PUSH2 0xC80 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xDD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDDF DUP10 DUP4 DUP11 ADD PUSH2 0xC80 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xDF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE02 DUP9 DUP3 DUP10 ADD PUSH2 0xCF1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xE5B DUP3 PUSH2 0xC5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE68 DUP3 DUP3 PUSH2 0xC2F JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP10 DUP5 GT ISZERO PUSH2 0xE88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0xEAD JUMPI PUSH2 0xE9E DUP7 PUSH2 0xB24 JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0xE8D JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0xEC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xED0 DUP6 DUP3 DUP7 ADD PUSH2 0xC80 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF0A JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xEEE JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xBA0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xEDA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF44 DUP4 PUSH2 0xB24 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xF59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF80 DUP4 PUSH2 0xB24 JUMP JUMPDEST SWAP2 POP PUSH2 0xF8E PUSH1 0x20 DUP5 ADD PUSH2 0xB24 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xFAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFB8 DUP7 PUSH2 0xB24 JUMP JUMPDEST SWAP5 POP PUSH2 0xFC6 PUSH1 0x20 DUP8 ADD PUSH2 0xB24 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE02 DUP9 DUP3 DUP10 ADD PUSH2 0xCF1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1010 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1030 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x195C881BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x10C2 JUMPI PUSH2 0x10C2 PUSH2 0x109A JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x21F JUMPI PUSH2 0x21F PUSH2 0x109A JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x117E PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xEDA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1190 DUP2 DUP6 PUSH2 0xEDA JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x11C5 SWAP1 DUP4 ADD DUP7 PUSH2 0xEDA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x11D7 DUP2 DUP7 PUSH2 0xEDA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x11EB DUP2 DUP6 PUSH2 0xBC0 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xBA0 DUP2 PUSH2 0xB6A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x122D JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x123E JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH8 0xFFFFFFFFFFFFFFFF DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x126E JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x1286 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x12A0 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x12AF PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH2 0xC2F JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x133C SWAP1 DUP4 ADD DUP5 PUSH2 0xBC0 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 CREATE2 0x25 BALANCE PREVRANDAO GASLIMIT AND 0xD9 0x2C LT PUSH23 0x87D074F50E713E713C8F0880367FE8F3B0C94B42586473 PUSH16 0x6C634300081300330000000000000000 ","sourceMap":"570:16539:3:-:0;;;1107:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1149:13;1157:4;1149:7;:13::i;:::-;1107:62;570:16539;;8149:86;8215:4;:13;8222:6;8215:4;:13;:::i;:::-;;8149:86;:::o;14:127:25:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:1042;226:6;257:2;300;288:9;279:7;275:23;271:32;268:52;;;316:1;313;306:12;268:52;343:16;;-1:-1:-1;;;;;408:14:25;;;405:34;;;435:1;432;425:12;405:34;473:6;462:9;458:22;448:32;;518:7;511:4;507:2;503:13;499:27;489:55;;540:1;537;530:12;489:55;569:2;563:9;591:2;587;584:10;581:36;;;597:18;;:::i;:::-;672:2;666:9;640:2;726:13;;-1:-1:-1;;722:22:25;;;746:2;718:31;714:40;702:53;;;770:18;;;790:22;;;767:46;764:72;;;816:18;;:::i;:::-;856:10;852:2;845:22;891:2;883:6;876:18;931:7;926:2;921;917;913:11;909:20;906:33;903:53;;;952:1;949;942:12;903:53;974:1;965:10;;984:129;998:2;995:1;992:9;984:129;;;1086:10;;;1082:19;;1076:26;1055:14;;;1051:23;;1044:59;1009:10;;;;984:129;;;1155:1;1150:2;1145;1137:6;1133:15;1129:24;1122:35;1176:6;1166:16;;;;;;;;146:1042;;;;:::o;1193:380::-;1272:1;1268:12;;;;1315;;;1336:61;;1390:4;1382:6;1378:17;1368:27;;1336:61;1443:2;1435:6;1432:14;1412:18;1409:38;1406:161;;1489:10;1484:3;1480:20;1477:1;1470:31;1524:4;1521:1;1514:15;1552:4;1549:1;1542:15;1406:161;;1193:380;;;:::o;1704:545::-;1806:2;1801:3;1798:11;1795:448;;;1842:1;1867:5;1863:2;1856:17;1912:4;1908:2;1898:19;1982:2;1970:10;1966:19;1963:1;1959:27;1953:4;1949:38;2018:4;2006:10;2003:20;2000:47;;;-1:-1:-1;2041:4:25;2000:47;2096:2;2091:3;2087:12;2084:1;2080:20;2074:4;2070:31;2060:41;;2151:82;2169:2;2162:5;2159:13;2151:82;;;2214:17;;;2195:1;2184:13;2151:82;;;2155:3;;;1795:448;1704:545;;;:::o;2425:1352::-;2545:10;;-1:-1:-1;;;;;2567:30:25;;2564:56;;;2600:18;;:::i;:::-;2629:97;2719:6;2679:38;2711:4;2705:11;2679:38;:::i;:::-;2673:4;2629:97;:::i;:::-;2781:4;;2845:2;2834:14;;2862:1;2857:663;;;;3564:1;3581:6;3578:89;;;-1:-1:-1;3633:19:25;;;3627:26;3578:89;-1:-1:-1;;2382:1:25;2378:11;;;2374:24;2370:29;2360:40;2406:1;2402:11;;;2357:57;3680:81;;2827:944;;2857:663;1651:1;1644:14;;;1688:4;1675:18;;-1:-1:-1;;2893:20:25;;;3011:236;3025:7;3022:1;3019:14;3011:236;;;3114:19;;;3108:26;3093:42;;3206:27;;;;3174:1;3162:14;;;;3041:19;;3011:236;;;3015:3;3275:6;3266:7;3263:19;3260:201;;;3336:19;;;3330:26;-1:-1:-1;;3419:1:25;3415:14;;;3431:3;3411:24;3407:37;3403:42;3388:58;3373:74;;3260:201;-1:-1:-1;;;;;3507:1:25;3491:14;;;3487:22;3474:36;;-1:-1:-1;2425:1352:25:o;:::-;570:16539:3;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1217":{"entryPoint":null,"id":1217,"parameterSlots":6,"returnSlots":0},"@_asSingletonArray_1373":{"entryPoint":2590,"id":1373,"parameterSlots":1,"returnSlots":1},"@_beforeTokenTransfer_1198":{"entryPoint":null,"id":1198,"parameterSlots":6,"returnSlots":0},"@_doSafeBatchTransferAcceptanceCheck_1345":{"entryPoint":2234,"id":1345,"parameterSlots":6,"returnSlots":0},"@_doSafeTransferAcceptanceCheck_1280":{"entryPoint":2665,"id":1280,"parameterSlots":6,"returnSlots":0},"@_msgSender_2982":{"entryPoint":null,"id":2982,"parameterSlots":0,"returnSlots":1},"@_safeBatchTransferFrom_696":{"entryPoint":1235,"id":696,"parameterSlots":5,"returnSlots":0},"@_safeTransferFrom_561":{"entryPoint":1936,"id":561,"parameterSlots":5,"returnSlots":0},"@_setApprovalForAll_1179":{"entryPoint":1712,"id":1179,"parameterSlots":3,"returnSlots":0},"@balanceOfBatch_331":{"entryPoint":853,"id":331,"parameterSlots":2,"returnSlots":1},"@balanceOf_267":{"entryPoint":396,"id":267,"parameterSlots":2,"returnSlots":1},"@isApprovedForAll_366":{"entryPoint":null,"id":366,"parameterSlots":2,"returnSlots":1},"@isContract_2658":{"entryPoint":null,"id":2658,"parameterSlots":1,"returnSlots":1},"@safeBatchTransferFrom_444":{"entryPoint":777,"id":444,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_404":{"entryPoint":1166,"id":404,"parameterSlots":5,"returnSlots":0},"@setApprovalForAll_348":{"entryPoint":1151,"id":348,"parameterSlots":2,"returnSlots":0},"@supportsInterface_227":{"entryPoint":549,"id":227,"parameterSlots":1,"returnSlots":1},"@supportsInterface_4247":{"entryPoint":null,"id":4247,"parameterSlots":1,"returnSlots":1},"@uri_239":{"entryPoint":629,"id":239,"parameterSlots":1,"returnSlots":1},"abi_decode_address":{"entryPoint":2852,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":3200,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":3313,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":3940,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr":{"entryPoint":3429,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr":{"entryPoint":3991,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_bool":{"entryPoint":3880,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":2880,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":3599,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":2947,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":4599,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":2983,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn":{"entryPoint":3802,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":3008,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4505,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4866,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":3861,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":4459,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3078,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4794,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4150,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4297,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4366,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":3164,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4440,"id":null,"parameterSlots":2,"returnSlots":1},"extract_byte_array_length":{"entryPoint":4092,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":3119,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":4272,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4250,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4228,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3097,"id":null,"parameterSlots":0,"returnSlots":0},"return_data_selector":{"entryPoint":4628,"id":null,"parameterSlots":0,"returnSlots":1},"try_decode_error_message":{"entryPoint":4656,"id":null,"parameterSlots":0,"returnSlots":1},"validator_revert_bytes4":{"entryPoint":2922,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:15860:25","statements":[{"nodeType":"YulBlock","src":"6:3:25","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:124:25","statements":[{"nodeType":"YulAssignment","src":"73:29:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:25"},"nodeType":"YulFunctionCall","src":"82:20:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:25"}]},{"body":{"nodeType":"YulBlock","src":"165:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"174:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"177:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"167:6:25"},"nodeType":"YulFunctionCall","src":"167:12:25"},"nodeType":"YulExpressionStatement","src":"167:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"155:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"146:3:25"},"nodeType":"YulFunctionCall","src":"146:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"142:3:25"},"nodeType":"YulFunctionCall","src":"142:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:25"},"nodeType":"YulFunctionCall","src":"131:31:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:25"},"nodeType":"YulFunctionCall","src":"121:42:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:25"},"nodeType":"YulFunctionCall","src":"114:50:25"},"nodeType":"YulIf","src":"111:70:25"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:25","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:25","type":""}],"src":"14:173:25"},{"body":{"nodeType":"YulBlock","src":"279:167:25","statements":[{"body":{"nodeType":"YulBlock","src":"325:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"337:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"327:6:25"},"nodeType":"YulFunctionCall","src":"327:12:25"},"nodeType":"YulExpressionStatement","src":"327:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"300:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"309:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"296:3:25"},"nodeType":"YulFunctionCall","src":"296:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"321:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"292:3:25"},"nodeType":"YulFunctionCall","src":"292:32:25"},"nodeType":"YulIf","src":"289:52:25"},{"nodeType":"YulAssignment","src":"350:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"379:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"360:18:25"},"nodeType":"YulFunctionCall","src":"360:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"350:6:25"}]},{"nodeType":"YulAssignment","src":"398:42:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"425:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"436:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"421:3:25"},"nodeType":"YulFunctionCall","src":"421:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"408:12:25"},"nodeType":"YulFunctionCall","src":"408:32:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"398:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"237:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"248:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"260:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"268:6:25","type":""}],"src":"192:254:25"},{"body":{"nodeType":"YulBlock","src":"552:76:25","statements":[{"nodeType":"YulAssignment","src":"562:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"574:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"585:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"570:3:25"},"nodeType":"YulFunctionCall","src":"570:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"562:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"604:9:25"},{"name":"value0","nodeType":"YulIdentifier","src":"615:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"597:6:25"},"nodeType":"YulFunctionCall","src":"597:25:25"},"nodeType":"YulExpressionStatement","src":"597:25:25"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"521:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"532:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"543:4:25","type":""}],"src":"451:177:25"},{"body":{"nodeType":"YulBlock","src":"677:87:25","statements":[{"body":{"nodeType":"YulBlock","src":"742:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"751:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"754:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"744:6:25"},"nodeType":"YulFunctionCall","src":"744:12:25"},"nodeType":"YulExpressionStatement","src":"744:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"700:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"711:5:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"722:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"727:10:25","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"718:3:25"},"nodeType":"YulFunctionCall","src":"718:20:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"707:3:25"},"nodeType":"YulFunctionCall","src":"707:32:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"697:2:25"},"nodeType":"YulFunctionCall","src":"697:43:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"690:6:25"},"nodeType":"YulFunctionCall","src":"690:51:25"},"nodeType":"YulIf","src":"687:71:25"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"666:5:25","type":""}],"src":"633:131:25"},{"body":{"nodeType":"YulBlock","src":"838:176:25","statements":[{"body":{"nodeType":"YulBlock","src":"884:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"893:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"896:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"886:6:25"},"nodeType":"YulFunctionCall","src":"886:12:25"},"nodeType":"YulExpressionStatement","src":"886:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"859:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"868:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"855:3:25"},"nodeType":"YulFunctionCall","src":"855:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"880:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"851:3:25"},"nodeType":"YulFunctionCall","src":"851:32:25"},"nodeType":"YulIf","src":"848:52:25"},{"nodeType":"YulVariableDeclaration","src":"909:36:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"935:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"922:12:25"},"nodeType":"YulFunctionCall","src":"922:23:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"913:5:25","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:25"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"954:23:25"},"nodeType":"YulFunctionCall","src":"954:30:25"},"nodeType":"YulExpressionStatement","src":"954:30:25"},{"nodeType":"YulAssignment","src":"993:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"1003:5:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"993:6:25"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"804:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"815:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"827:6:25","type":""}],"src":"769:245:25"},{"body":{"nodeType":"YulBlock","src":"1114:92:25","statements":[{"nodeType":"YulAssignment","src":"1124:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1136:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1147:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1132:3:25"},"nodeType":"YulFunctionCall","src":"1132:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1124:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1166:9:25"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1191:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1184:6:25"},"nodeType":"YulFunctionCall","src":"1184:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1177:6:25"},"nodeType":"YulFunctionCall","src":"1177:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1159:6:25"},"nodeType":"YulFunctionCall","src":"1159:41:25"},"nodeType":"YulExpressionStatement","src":"1159:41:25"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1083:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1094:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1105:4:25","type":""}],"src":"1019:187:25"},{"body":{"nodeType":"YulBlock","src":"1281:110:25","statements":[{"body":{"nodeType":"YulBlock","src":"1327:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1336:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1339:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1329:6:25"},"nodeType":"YulFunctionCall","src":"1329:12:25"},"nodeType":"YulExpressionStatement","src":"1329:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1302:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"1311:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1298:3:25"},"nodeType":"YulFunctionCall","src":"1298:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"1323:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1294:3:25"},"nodeType":"YulFunctionCall","src":"1294:32:25"},"nodeType":"YulIf","src":"1291:52:25"},{"nodeType":"YulAssignment","src":"1352:33:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1375:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1362:12:25"},"nodeType":"YulFunctionCall","src":"1362:23:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1352:6:25"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1247:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1258:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1270:6:25","type":""}],"src":"1211:180:25"},{"body":{"nodeType":"YulBlock","src":"1446:373:25","statements":[{"nodeType":"YulVariableDeclaration","src":"1456:26:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1476:5:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1470:5:25"},"nodeType":"YulFunctionCall","src":"1470:12:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1460:6:25","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1498:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"1503:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1491:6:25"},"nodeType":"YulFunctionCall","src":"1491:19:25"},"nodeType":"YulExpressionStatement","src":"1491:19:25"},{"nodeType":"YulVariableDeclaration","src":"1519:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"1528:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1523:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"1590:110:25","statements":[{"nodeType":"YulVariableDeclaration","src":"1604:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"1614:4:25","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1608:2:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1646:3:25"},{"name":"i","nodeType":"YulIdentifier","src":"1651:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1642:3:25"},"nodeType":"YulFunctionCall","src":"1642:11:25"},{"name":"_1","nodeType":"YulIdentifier","src":"1655:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1638:3:25"},"nodeType":"YulFunctionCall","src":"1638:20:25"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1674:5:25"},{"name":"i","nodeType":"YulIdentifier","src":"1681:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1670:3:25"},"nodeType":"YulFunctionCall","src":"1670:13:25"},{"name":"_1","nodeType":"YulIdentifier","src":"1685:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1666:3:25"},"nodeType":"YulFunctionCall","src":"1666:22:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1660:5:25"},"nodeType":"YulFunctionCall","src":"1660:29:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1631:6:25"},"nodeType":"YulFunctionCall","src":"1631:59:25"},"nodeType":"YulExpressionStatement","src":"1631:59:25"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1549:1:25"},{"name":"length","nodeType":"YulIdentifier","src":"1552:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1546:2:25"},"nodeType":"YulFunctionCall","src":"1546:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1560:21:25","statements":[{"nodeType":"YulAssignment","src":"1562:17:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1571:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"1574:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1567:3:25"},"nodeType":"YulFunctionCall","src":"1567:12:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1562:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"1542:3:25","statements":[]},"src":"1538:162:25"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1724:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"1729:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1720:3:25"},"nodeType":"YulFunctionCall","src":"1720:16:25"},{"kind":"number","nodeType":"YulLiteral","src":"1738:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1716:3:25"},"nodeType":"YulFunctionCall","src":"1716:27:25"},{"kind":"number","nodeType":"YulLiteral","src":"1745:1:25","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1709:6:25"},"nodeType":"YulFunctionCall","src":"1709:38:25"},"nodeType":"YulExpressionStatement","src":"1709:38:25"},{"nodeType":"YulAssignment","src":"1756:57:25","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1771:3:25"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1784:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"1792:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1780:3:25"},"nodeType":"YulFunctionCall","src":"1780:15:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1801:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1797:3:25"},"nodeType":"YulFunctionCall","src":"1797:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1776:3:25"},"nodeType":"YulFunctionCall","src":"1776:29:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1767:3:25"},"nodeType":"YulFunctionCall","src":"1767:39:25"},{"kind":"number","nodeType":"YulLiteral","src":"1808:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1763:3:25"},"nodeType":"YulFunctionCall","src":"1763:50:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1756:3:25"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1423:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1430:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1438:3:25","type":""}],"src":"1396:423:25"},{"body":{"nodeType":"YulBlock","src":"1945:99:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1962:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1973:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1955:6:25"},"nodeType":"YulFunctionCall","src":"1955:21:25"},"nodeType":"YulExpressionStatement","src":"1955:21:25"},{"nodeType":"YulAssignment","src":"1985:53:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2011:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2023:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"2034:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2019:3:25"},"nodeType":"YulFunctionCall","src":"2019:18:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1993:17:25"},"nodeType":"YulFunctionCall","src":"1993:45:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1985:4:25"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1914:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1925:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1936:4:25","type":""}],"src":"1824:220:25"},{"body":{"nodeType":"YulBlock","src":"2081:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2098:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2105:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2110:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2101:3:25"},"nodeType":"YulFunctionCall","src":"2101:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2091:6:25"},"nodeType":"YulFunctionCall","src":"2091:31:25"},"nodeType":"YulExpressionStatement","src":"2091:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2138:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2141:4:25","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2131:6:25"},"nodeType":"YulFunctionCall","src":"2131:15:25"},"nodeType":"YulExpressionStatement","src":"2131:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2162:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2165:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2155:6:25"},"nodeType":"YulFunctionCall","src":"2155:15:25"},"nodeType":"YulExpressionStatement","src":"2155:15:25"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2049:127:25"},{"body":{"nodeType":"YulBlock","src":"2228:202:25","statements":[{"nodeType":"YulVariableDeclaration","src":"2238:58:25","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2260:6:25"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2276:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"2282:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2272:3:25"},"nodeType":"YulFunctionCall","src":"2272:13:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2291:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2287:3:25"},"nodeType":"YulFunctionCall","src":"2287:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2268:3:25"},"nodeType":"YulFunctionCall","src":"2268:27:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2256:3:25"},"nodeType":"YulFunctionCall","src":"2256:40:25"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2242:10:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"2371:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2373:16:25"},"nodeType":"YulFunctionCall","src":"2373:18:25"},"nodeType":"YulExpressionStatement","src":"2373:18:25"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2314:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"2326:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2311:2:25"},"nodeType":"YulFunctionCall","src":"2311:34:25"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2350:10:25"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2362:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2347:2:25"},"nodeType":"YulFunctionCall","src":"2347:22:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2308:2:25"},"nodeType":"YulFunctionCall","src":"2308:62:25"},"nodeType":"YulIf","src":"2305:88:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2409:2:25","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2413:10:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2402:6:25"},"nodeType":"YulFunctionCall","src":"2402:22:25"},"nodeType":"YulExpressionStatement","src":"2402:22:25"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2210:6:25","type":""},{"name":"size","nodeType":"YulTypedName","src":"2218:4:25","type":""}],"src":"2181:249:25"},{"body":{"nodeType":"YulBlock","src":"2504:114:25","statements":[{"body":{"nodeType":"YulBlock","src":"2548:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2550:16:25"},"nodeType":"YulFunctionCall","src":"2550:18:25"},"nodeType":"YulExpressionStatement","src":"2550:18:25"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2520:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"2528:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2517:2:25"},"nodeType":"YulFunctionCall","src":"2517:30:25"},"nodeType":"YulIf","src":"2514:56:25"},{"nodeType":"YulAssignment","src":"2579:33:25","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2595:1:25","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"2598:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2591:3:25"},"nodeType":"YulFunctionCall","src":"2591:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"2607:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2587:3:25"},"nodeType":"YulFunctionCall","src":"2587:25:25"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2579:4:25"}]}]},"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2484:6:25","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2495:4:25","type":""}],"src":"2435:183:25"},{"body":{"nodeType":"YulBlock","src":"2687:660:25","statements":[{"body":{"nodeType":"YulBlock","src":"2736:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2745:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2748:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2738:6:25"},"nodeType":"YulFunctionCall","src":"2738:12:25"},"nodeType":"YulExpressionStatement","src":"2738:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2715:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"2723:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2711:3:25"},"nodeType":"YulFunctionCall","src":"2711:17:25"},{"name":"end","nodeType":"YulIdentifier","src":"2730:3:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2707:3:25"},"nodeType":"YulFunctionCall","src":"2707:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2700:6:25"},"nodeType":"YulFunctionCall","src":"2700:35:25"},"nodeType":"YulIf","src":"2697:55:25"},{"nodeType":"YulVariableDeclaration","src":"2761:30:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2784:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2771:12:25"},"nodeType":"YulFunctionCall","src":"2771:20:25"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2765:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2800:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"2810:4:25","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2804:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2823:53:25","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2873:2:25"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"2833:39:25"},"nodeType":"YulFunctionCall","src":"2833:43:25"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"2827:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2885:23:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2905:2:25","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2899:5:25"},"nodeType":"YulFunctionCall","src":"2899:9:25"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2889:6:25","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2937:6:25"},{"name":"_3","nodeType":"YulIdentifier","src":"2945:2:25"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"2917:19:25"},"nodeType":"YulFunctionCall","src":"2917:31:25"},"nodeType":"YulExpressionStatement","src":"2917:31:25"},{"nodeType":"YulVariableDeclaration","src":"2957:17:25","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"2968:6:25"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2961:3:25","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2990:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"2998:2:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2983:6:25"},"nodeType":"YulFunctionCall","src":"2983:18:25"},"nodeType":"YulExpressionStatement","src":"2983:18:25"},{"nodeType":"YulAssignment","src":"3010:22:25","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3021:6:25"},{"name":"_2","nodeType":"YulIdentifier","src":"3029:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3017:3:25"},"nodeType":"YulFunctionCall","src":"3017:15:25"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3010:3:25"}]},{"nodeType":"YulVariableDeclaration","src":"3041:46:25","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3063:6:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3075:1:25","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"3078:2:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3071:3:25"},"nodeType":"YulFunctionCall","src":"3071:10:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3059:3:25"},"nodeType":"YulFunctionCall","src":"3059:23:25"},{"name":"_2","nodeType":"YulIdentifier","src":"3084:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3055:3:25"},"nodeType":"YulFunctionCall","src":"3055:32:25"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3045:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"3115:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3124:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3127:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3117:6:25"},"nodeType":"YulFunctionCall","src":"3117:12:25"},"nodeType":"YulExpressionStatement","src":"3117:12:25"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3102:6:25"},{"name":"end","nodeType":"YulIdentifier","src":"3110:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3099:2:25"},"nodeType":"YulFunctionCall","src":"3099:15:25"},"nodeType":"YulIf","src":"3096:35:25"},{"nodeType":"YulVariableDeclaration","src":"3140:26:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3155:6:25"},{"name":"_2","nodeType":"YulIdentifier","src":"3163:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3151:3:25"},"nodeType":"YulFunctionCall","src":"3151:15:25"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3144:3:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"3231:86:25","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3252:3:25"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3270:3:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3257:12:25"},"nodeType":"YulFunctionCall","src":"3257:17:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3245:6:25"},"nodeType":"YulFunctionCall","src":"3245:30:25"},"nodeType":"YulExpressionStatement","src":"3245:30:25"},{"nodeType":"YulAssignment","src":"3288:19:25","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3299:3:25"},{"name":"_2","nodeType":"YulIdentifier","src":"3304:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3295:3:25"},"nodeType":"YulFunctionCall","src":"3295:12:25"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3288:3:25"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3186:3:25"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3191:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3183:2:25"},"nodeType":"YulFunctionCall","src":"3183:15:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3199:23:25","statements":[{"nodeType":"YulAssignment","src":"3201:19:25","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3212:3:25"},{"name":"_2","nodeType":"YulIdentifier","src":"3217:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3208:3:25"},"nodeType":"YulFunctionCall","src":"3208:12:25"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3201:3:25"}]}]},"pre":{"nodeType":"YulBlock","src":"3179:3:25","statements":[]},"src":"3175:142:25"},{"nodeType":"YulAssignment","src":"3326:15:25","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3335:6:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3326:5:25"}]}]},"name":"abi_decode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2661:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"2669:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2677:5:25","type":""}],"src":"2623:724:25"},{"body":{"nodeType":"YulBlock","src":"3404:503:25","statements":[{"body":{"nodeType":"YulBlock","src":"3453:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3462:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3465:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3455:6:25"},"nodeType":"YulFunctionCall","src":"3455:12:25"},"nodeType":"YulExpressionStatement","src":"3455:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3432:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"3440:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3428:3:25"},"nodeType":"YulFunctionCall","src":"3428:17:25"},{"name":"end","nodeType":"YulIdentifier","src":"3447:3:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3424:3:25"},"nodeType":"YulFunctionCall","src":"3424:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3417:6:25"},"nodeType":"YulFunctionCall","src":"3417:35:25"},"nodeType":"YulIf","src":"3414:55:25"},{"nodeType":"YulVariableDeclaration","src":"3478:30:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3501:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3488:12:25"},"nodeType":"YulFunctionCall","src":"3488:20:25"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3482:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"3547:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3549:16:25"},"nodeType":"YulFunctionCall","src":"3549:18:25"},"nodeType":"YulExpressionStatement","src":"3549:18:25"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3523:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"3527:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3520:2:25"},"nodeType":"YulFunctionCall","src":"3520:26:25"},"nodeType":"YulIf","src":"3517:52:25"},{"nodeType":"YulVariableDeclaration","src":"3578:23:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3598:2:25","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3592:5:25"},"nodeType":"YulFunctionCall","src":"3592:9:25"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3582:6:25","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3630:6:25"},{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3650:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"3654:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3646:3:25"},"nodeType":"YulFunctionCall","src":"3646:13:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3665:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3661:3:25"},"nodeType":"YulFunctionCall","src":"3661:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3642:3:25"},"nodeType":"YulFunctionCall","src":"3642:27:25"},{"kind":"number","nodeType":"YulLiteral","src":"3671:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3638:3:25"},"nodeType":"YulFunctionCall","src":"3638:38:25"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"3610:19:25"},"nodeType":"YulFunctionCall","src":"3610:67:25"},"nodeType":"YulExpressionStatement","src":"3610:67:25"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3693:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"3701:2:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3686:6:25"},"nodeType":"YulFunctionCall","src":"3686:18:25"},"nodeType":"YulExpressionStatement","src":"3686:18:25"},{"body":{"nodeType":"YulBlock","src":"3752:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3761:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3764:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3754:6:25"},"nodeType":"YulFunctionCall","src":"3754:12:25"},"nodeType":"YulExpressionStatement","src":"3754:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3727:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"3735:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3723:3:25"},"nodeType":"YulFunctionCall","src":"3723:15:25"},{"kind":"number","nodeType":"YulLiteral","src":"3740:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3719:3:25"},"nodeType":"YulFunctionCall","src":"3719:26:25"},{"name":"end","nodeType":"YulIdentifier","src":"3747:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3716:2:25"},"nodeType":"YulFunctionCall","src":"3716:35:25"},"nodeType":"YulIf","src":"3713:55:25"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3794:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"3802:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3790:3:25"},"nodeType":"YulFunctionCall","src":"3790:17:25"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3813:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"3821:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3809:3:25"},"nodeType":"YulFunctionCall","src":"3809:17:25"},{"name":"_1","nodeType":"YulIdentifier","src":"3828:2:25"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3777:12:25"},"nodeType":"YulFunctionCall","src":"3777:54:25"},"nodeType":"YulExpressionStatement","src":"3777:54:25"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3855:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"3863:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3851:3:25"},"nodeType":"YulFunctionCall","src":"3851:15:25"},{"kind":"number","nodeType":"YulLiteral","src":"3868:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3847:3:25"},"nodeType":"YulFunctionCall","src":"3847:26:25"},{"kind":"number","nodeType":"YulLiteral","src":"3875:1:25","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3840:6:25"},"nodeType":"YulFunctionCall","src":"3840:37:25"},"nodeType":"YulExpressionStatement","src":"3840:37:25"},{"nodeType":"YulAssignment","src":"3886:15:25","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3895:6:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3886:5:25"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3378:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"3386:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3394:5:25","type":""}],"src":"3352:555:25"},{"body":{"nodeType":"YulBlock","src":"4109:746:25","statements":[{"body":{"nodeType":"YulBlock","src":"4156:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4165:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4168:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4158:6:25"},"nodeType":"YulFunctionCall","src":"4158:12:25"},"nodeType":"YulExpressionStatement","src":"4158:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4130:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"4139:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4126:3:25"},"nodeType":"YulFunctionCall","src":"4126:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"4151:3:25","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4122:3:25"},"nodeType":"YulFunctionCall","src":"4122:33:25"},"nodeType":"YulIf","src":"4119:53:25"},{"nodeType":"YulAssignment","src":"4181:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4210:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4191:18:25"},"nodeType":"YulFunctionCall","src":"4191:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4181:6:25"}]},{"nodeType":"YulAssignment","src":"4229:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4262:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"4273:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4258:3:25"},"nodeType":"YulFunctionCall","src":"4258:18:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4239:18:25"},"nodeType":"YulFunctionCall","src":"4239:38:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4229:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"4286:46:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4317:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"4328:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4313:3:25"},"nodeType":"YulFunctionCall","src":"4313:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4300:12:25"},"nodeType":"YulFunctionCall","src":"4300:32:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4290:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4341:28:25","value":{"kind":"number","nodeType":"YulLiteral","src":"4351:18:25","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4345:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"4396:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4405:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4408:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4398:6:25"},"nodeType":"YulFunctionCall","src":"4398:12:25"},"nodeType":"YulExpressionStatement","src":"4398:12:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4384:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"4392:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4381:2:25"},"nodeType":"YulFunctionCall","src":"4381:14:25"},"nodeType":"YulIf","src":"4378:34:25"},{"nodeType":"YulAssignment","src":"4421:71:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4464:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"4475:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4460:3:25"},"nodeType":"YulFunctionCall","src":"4460:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4484:7:25"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"4431:28:25"},"nodeType":"YulFunctionCall","src":"4431:61:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4421:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"4501:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4534:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"4545:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4530:3:25"},"nodeType":"YulFunctionCall","src":"4530:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4517:12:25"},"nodeType":"YulFunctionCall","src":"4517:32:25"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"4505:8:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"4578:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4587:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4590:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4580:6:25"},"nodeType":"YulFunctionCall","src":"4580:12:25"},"nodeType":"YulExpressionStatement","src":"4580:12:25"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"4564:8:25"},{"name":"_1","nodeType":"YulIdentifier","src":"4574:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4561:2:25"},"nodeType":"YulFunctionCall","src":"4561:16:25"},"nodeType":"YulIf","src":"4558:36:25"},{"nodeType":"YulAssignment","src":"4603:73:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4646:9:25"},{"name":"offset_1","nodeType":"YulIdentifier","src":"4657:8:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4642:3:25"},"nodeType":"YulFunctionCall","src":"4642:24:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4668:7:25"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"4613:28:25"},"nodeType":"YulFunctionCall","src":"4613:63:25"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4603:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"4685:49:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4718:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"4729:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4714:3:25"},"nodeType":"YulFunctionCall","src":"4714:19:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4701:12:25"},"nodeType":"YulFunctionCall","src":"4701:33:25"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"4689:8:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"4763:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4772:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4775:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4765:6:25"},"nodeType":"YulFunctionCall","src":"4765:12:25"},"nodeType":"YulExpressionStatement","src":"4765:12:25"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"4749:8:25"},{"name":"_1","nodeType":"YulIdentifier","src":"4759:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4746:2:25"},"nodeType":"YulFunctionCall","src":"4746:16:25"},"nodeType":"YulIf","src":"4743:36:25"},{"nodeType":"YulAssignment","src":"4788:61:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4819:9:25"},{"name":"offset_2","nodeType":"YulIdentifier","src":"4830:8:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4815:3:25"},"nodeType":"YulFunctionCall","src":"4815:24:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4841:7:25"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"4798:16:25"},"nodeType":"YulFunctionCall","src":"4798:51:25"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"4788:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4043:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4054:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4066:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4074:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4082:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4090:6:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4098:6:25","type":""}],"src":"3912:943:25"},{"body":{"nodeType":"YulBlock","src":"4997:1071:25","statements":[{"body":{"nodeType":"YulBlock","src":"5043:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5052:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5055:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5045:6:25"},"nodeType":"YulFunctionCall","src":"5045:12:25"},"nodeType":"YulExpressionStatement","src":"5045:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5018:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"5027:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5014:3:25"},"nodeType":"YulFunctionCall","src":"5014:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"5039:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5010:3:25"},"nodeType":"YulFunctionCall","src":"5010:32:25"},"nodeType":"YulIf","src":"5007:52:25"},{"nodeType":"YulVariableDeclaration","src":"5068:37:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5095:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5082:12:25"},"nodeType":"YulFunctionCall","src":"5082:23:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5072:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5114:28:25","value":{"kind":"number","nodeType":"YulLiteral","src":"5124:18:25","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5118:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"5169:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5178:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5181:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5171:6:25"},"nodeType":"YulFunctionCall","src":"5171:12:25"},"nodeType":"YulExpressionStatement","src":"5171:12:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5157:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"5165:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5154:2:25"},"nodeType":"YulFunctionCall","src":"5154:14:25"},"nodeType":"YulIf","src":"5151:34:25"},{"nodeType":"YulVariableDeclaration","src":"5194:32:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5208:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"5219:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5204:3:25"},"nodeType":"YulFunctionCall","src":"5204:22:25"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"5198:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"5274:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5283:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5286:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5276:6:25"},"nodeType":"YulFunctionCall","src":"5276:12:25"},"nodeType":"YulExpressionStatement","src":"5276:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5253:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"5257:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5249:3:25"},"nodeType":"YulFunctionCall","src":"5249:13:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5264:7:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5245:3:25"},"nodeType":"YulFunctionCall","src":"5245:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5238:6:25"},"nodeType":"YulFunctionCall","src":"5238:35:25"},"nodeType":"YulIf","src":"5235:55:25"},{"nodeType":"YulVariableDeclaration","src":"5299:26:25","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5322:2:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5309:12:25"},"nodeType":"YulFunctionCall","src":"5309:16:25"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"5303:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5334:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"5344:4:25","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"5338:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5357:53:25","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"5407:2:25"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"5367:39:25"},"nodeType":"YulFunctionCall","src":"5367:43:25"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"5361:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5419:23:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5439:2:25","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5433:5:25"},"nodeType":"YulFunctionCall","src":"5433:9:25"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5423:6:25","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5471:6:25"},{"name":"_5","nodeType":"YulIdentifier","src":"5479:2:25"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"5451:19:25"},"nodeType":"YulFunctionCall","src":"5451:31:25"},"nodeType":"YulExpressionStatement","src":"5451:31:25"},{"nodeType":"YulVariableDeclaration","src":"5491:17:25","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"5502:6:25"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"5495:3:25","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5524:6:25"},{"name":"_3","nodeType":"YulIdentifier","src":"5532:2:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5517:6:25"},"nodeType":"YulFunctionCall","src":"5517:18:25"},"nodeType":"YulExpressionStatement","src":"5517:18:25"},{"nodeType":"YulAssignment","src":"5544:22:25","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5555:6:25"},{"name":"_4","nodeType":"YulIdentifier","src":"5563:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5551:3:25"},"nodeType":"YulFunctionCall","src":"5551:15:25"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5544:3:25"}]},{"nodeType":"YulVariableDeclaration","src":"5575:42:25","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5597:2:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5605:1:25","type":"","value":"5"},{"name":"_3","nodeType":"YulIdentifier","src":"5608:2:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5601:3:25"},"nodeType":"YulFunctionCall","src":"5601:10:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5593:3:25"},"nodeType":"YulFunctionCall","src":"5593:19:25"},{"name":"_4","nodeType":"YulIdentifier","src":"5614:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5589:3:25"},"nodeType":"YulFunctionCall","src":"5589:28:25"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"5579:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"5649:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5658:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5661:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5651:6:25"},"nodeType":"YulFunctionCall","src":"5651:12:25"},"nodeType":"YulExpressionStatement","src":"5651:12:25"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"5632:6:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5640:7:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5629:2:25"},"nodeType":"YulFunctionCall","src":"5629:19:25"},"nodeType":"YulIf","src":"5626:39:25"},{"nodeType":"YulVariableDeclaration","src":"5674:22:25","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5689:2:25"},{"name":"_4","nodeType":"YulIdentifier","src":"5693:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5685:3:25"},"nodeType":"YulFunctionCall","src":"5685:11:25"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"5678:3:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"5761:92:25","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5782:3:25"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5806:3:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5787:18:25"},"nodeType":"YulFunctionCall","src":"5787:23:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5775:6:25"},"nodeType":"YulFunctionCall","src":"5775:36:25"},"nodeType":"YulExpressionStatement","src":"5775:36:25"},{"nodeType":"YulAssignment","src":"5824:19:25","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5835:3:25"},{"name":"_4","nodeType":"YulIdentifier","src":"5840:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5831:3:25"},"nodeType":"YulFunctionCall","src":"5831:12:25"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5824:3:25"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5716:3:25"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"5721:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5713:2:25"},"nodeType":"YulFunctionCall","src":"5713:15:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5729:23:25","statements":[{"nodeType":"YulAssignment","src":"5731:19:25","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5742:3:25"},{"name":"_4","nodeType":"YulIdentifier","src":"5747:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5738:3:25"},"nodeType":"YulFunctionCall","src":"5738:12:25"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"5731:3:25"}]}]},"pre":{"nodeType":"YulBlock","src":"5709:3:25","statements":[]},"src":"5705:148:25"},{"nodeType":"YulAssignment","src":"5862:16:25","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"5872:6:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5862:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"5887:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5920:9:25"},{"name":"_4","nodeType":"YulIdentifier","src":"5931:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5916:3:25"},"nodeType":"YulFunctionCall","src":"5916:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5903:12:25"},"nodeType":"YulFunctionCall","src":"5903:32:25"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"5891:8:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"5964:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5973:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5976:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5966:6:25"},"nodeType":"YulFunctionCall","src":"5966:12:25"},"nodeType":"YulExpressionStatement","src":"5966:12:25"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5950:8:25"},{"name":"_1","nodeType":"YulIdentifier","src":"5960:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5947:2:25"},"nodeType":"YulFunctionCall","src":"5947:16:25"},"nodeType":"YulIf","src":"5944:36:25"},{"nodeType":"YulAssignment","src":"5989:73:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6032:9:25"},{"name":"offset_1","nodeType":"YulIdentifier","src":"6043:8:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6028:3:25"},"nodeType":"YulFunctionCall","src":"6028:24:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6054:7:25"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"5999:28:25"},"nodeType":"YulFunctionCall","src":"5999:63:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5989:6:25"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4955:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4966:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4978:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4986:6:25","type":""}],"src":"4860:1208:25"},{"body":{"nodeType":"YulBlock","src":"6134:374:25","statements":[{"nodeType":"YulVariableDeclaration","src":"6144:26:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6164:5:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6158:5:25"},"nodeType":"YulFunctionCall","src":"6158:12:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6148:6:25","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6186:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"6191:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6179:6:25"},"nodeType":"YulFunctionCall","src":"6179:19:25"},"nodeType":"YulExpressionStatement","src":"6179:19:25"},{"nodeType":"YulVariableDeclaration","src":"6207:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"6217:4:25","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6211:2:25","type":""}]},{"nodeType":"YulAssignment","src":"6230:19:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6241:3:25"},{"name":"_1","nodeType":"YulIdentifier","src":"6246:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6237:3:25"},"nodeType":"YulFunctionCall","src":"6237:12:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6230:3:25"}]},{"nodeType":"YulVariableDeclaration","src":"6258:28:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6276:5:25"},{"name":"_1","nodeType":"YulIdentifier","src":"6283:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6272:3:25"},"nodeType":"YulFunctionCall","src":"6272:14:25"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"6262:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6295:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"6304:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"6299:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"6363:120:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6384:3:25"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6395:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6389:5:25"},"nodeType":"YulFunctionCall","src":"6389:13:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6377:6:25"},"nodeType":"YulFunctionCall","src":"6377:26:25"},"nodeType":"YulExpressionStatement","src":"6377:26:25"},{"nodeType":"YulAssignment","src":"6416:19:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6427:3:25"},{"name":"_1","nodeType":"YulIdentifier","src":"6432:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6423:3:25"},"nodeType":"YulFunctionCall","src":"6423:12:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6416:3:25"}]},{"nodeType":"YulAssignment","src":"6448:25:25","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6462:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"6470:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6458:3:25"},"nodeType":"YulFunctionCall","src":"6458:15:25"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"6448:6:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6325:1:25"},{"name":"length","nodeType":"YulIdentifier","src":"6328:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6322:2:25"},"nodeType":"YulFunctionCall","src":"6322:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6336:18:25","statements":[{"nodeType":"YulAssignment","src":"6338:14:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6347:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"6350:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6343:3:25"},"nodeType":"YulFunctionCall","src":"6343:9:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6338:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"6318:3:25","statements":[]},"src":"6314:169:25"},{"nodeType":"YulAssignment","src":"6492:10:25","value":{"name":"pos","nodeType":"YulIdentifier","src":"6499:3:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6492:3:25"}]}]},"name":"abi_encode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6111:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6118:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6126:3:25","type":""}],"src":"6073:435:25"},{"body":{"nodeType":"YulBlock","src":"6664:110:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6681:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"6692:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6674:6:25"},"nodeType":"YulFunctionCall","src":"6674:21:25"},"nodeType":"YulExpressionStatement","src":"6674:21:25"},{"nodeType":"YulAssignment","src":"6704:64:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6741:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6753:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"6764:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6749:3:25"},"nodeType":"YulFunctionCall","src":"6749:18:25"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"6712:28:25"},"nodeType":"YulFunctionCall","src":"6712:56:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6704:4:25"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6633:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6644:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6655:4:25","type":""}],"src":"6513:261:25"},{"body":{"nodeType":"YulBlock","src":"6863:263:25","statements":[{"body":{"nodeType":"YulBlock","src":"6909:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6918:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6921:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6911:6:25"},"nodeType":"YulFunctionCall","src":"6911:12:25"},"nodeType":"YulExpressionStatement","src":"6911:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6884:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"6893:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6880:3:25"},"nodeType":"YulFunctionCall","src":"6880:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"6905:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6876:3:25"},"nodeType":"YulFunctionCall","src":"6876:32:25"},"nodeType":"YulIf","src":"6873:52:25"},{"nodeType":"YulAssignment","src":"6934:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6963:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6944:18:25"},"nodeType":"YulFunctionCall","src":"6944:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6934:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"6982:45:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7012:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7023:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7008:3:25"},"nodeType":"YulFunctionCall","src":"7008:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6995:12:25"},"nodeType":"YulFunctionCall","src":"6995:32:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6986:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"7080:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7089:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7092:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7082:6:25"},"nodeType":"YulFunctionCall","src":"7082:12:25"},"nodeType":"YulExpressionStatement","src":"7082:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7049:5:25"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7070:5:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7063:6:25"},"nodeType":"YulFunctionCall","src":"7063:13:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7056:6:25"},"nodeType":"YulFunctionCall","src":"7056:21:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7046:2:25"},"nodeType":"YulFunctionCall","src":"7046:32:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7039:6:25"},"nodeType":"YulFunctionCall","src":"7039:40:25"},"nodeType":"YulIf","src":"7036:60:25"},{"nodeType":"YulAssignment","src":"7105:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"7115:5:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7105:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6821:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6832:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6844:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6852:6:25","type":""}],"src":"6779:347:25"},{"body":{"nodeType":"YulBlock","src":"7218:173:25","statements":[{"body":{"nodeType":"YulBlock","src":"7264:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7273:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7276:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7266:6:25"},"nodeType":"YulFunctionCall","src":"7266:12:25"},"nodeType":"YulExpressionStatement","src":"7266:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7239:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"7248:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7235:3:25"},"nodeType":"YulFunctionCall","src":"7235:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"7260:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7231:3:25"},"nodeType":"YulFunctionCall","src":"7231:32:25"},"nodeType":"YulIf","src":"7228:52:25"},{"nodeType":"YulAssignment","src":"7289:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7318:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7299:18:25"},"nodeType":"YulFunctionCall","src":"7299:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7289:6:25"}]},{"nodeType":"YulAssignment","src":"7337:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7370:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7381:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7366:3:25"},"nodeType":"YulFunctionCall","src":"7366:18:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7347:18:25"},"nodeType":"YulFunctionCall","src":"7347:38:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7337:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7176:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7187:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7199:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7207:6:25","type":""}],"src":"7131:260:25"},{"body":{"nodeType":"YulBlock","src":"7543:459:25","statements":[{"body":{"nodeType":"YulBlock","src":"7590:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7599:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7602:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7592:6:25"},"nodeType":"YulFunctionCall","src":"7592:12:25"},"nodeType":"YulExpressionStatement","src":"7592:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7564:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"7573:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7560:3:25"},"nodeType":"YulFunctionCall","src":"7560:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"7585:3:25","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7556:3:25"},"nodeType":"YulFunctionCall","src":"7556:33:25"},"nodeType":"YulIf","src":"7553:53:25"},{"nodeType":"YulAssignment","src":"7615:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7644:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7625:18:25"},"nodeType":"YulFunctionCall","src":"7625:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7615:6:25"}]},{"nodeType":"YulAssignment","src":"7663:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7696:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7707:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7692:3:25"},"nodeType":"YulFunctionCall","src":"7692:18:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7673:18:25"},"nodeType":"YulFunctionCall","src":"7673:38:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7663:6:25"}]},{"nodeType":"YulAssignment","src":"7720:42:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7747:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7758:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7743:3:25"},"nodeType":"YulFunctionCall","src":"7743:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7730:12:25"},"nodeType":"YulFunctionCall","src":"7730:32:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7720:6:25"}]},{"nodeType":"YulAssignment","src":"7771:42:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7798:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7809:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7794:3:25"},"nodeType":"YulFunctionCall","src":"7794:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7781:12:25"},"nodeType":"YulFunctionCall","src":"7781:32:25"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7771:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"7822:47:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7853:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7864:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7849:3:25"},"nodeType":"YulFunctionCall","src":"7849:19:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7836:12:25"},"nodeType":"YulFunctionCall","src":"7836:33:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7826:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"7912:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7921:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7924:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7914:6:25"},"nodeType":"YulFunctionCall","src":"7914:12:25"},"nodeType":"YulExpressionStatement","src":"7914:12:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7884:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"7892:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7881:2:25"},"nodeType":"YulFunctionCall","src":"7881:30:25"},"nodeType":"YulIf","src":"7878:50:25"},{"nodeType":"YulAssignment","src":"7937:59:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7968:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"7979:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7964:3:25"},"nodeType":"YulFunctionCall","src":"7964:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7988:7:25"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"7947:16:25"},"nodeType":"YulFunctionCall","src":"7947:49:25"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"7937:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7477:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7488:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7500:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7508:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7516:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7524:6:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7532:6:25","type":""}],"src":"7396:606:25"},{"body":{"nodeType":"YulBlock","src":"8181:232:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8198:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8209:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8191:6:25"},"nodeType":"YulFunctionCall","src":"8191:21:25"},"nodeType":"YulExpressionStatement","src":"8191:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8232:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8243:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8228:3:25"},"nodeType":"YulFunctionCall","src":"8228:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"8248:2:25","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8221:6:25"},"nodeType":"YulFunctionCall","src":"8221:30:25"},"nodeType":"YulExpressionStatement","src":"8221:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8271:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8282:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8267:3:25"},"nodeType":"YulFunctionCall","src":"8267:18:25"},{"hexValue":"455243313135353a2061646472657373207a65726f206973206e6f7420612076","kind":"string","nodeType":"YulLiteral","src":"8287:34:25","type":"","value":"ERC1155: address zero is not a v"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8260:6:25"},"nodeType":"YulFunctionCall","src":"8260:62:25"},"nodeType":"YulExpressionStatement","src":"8260:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8342:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8353:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8338:3:25"},"nodeType":"YulFunctionCall","src":"8338:18:25"},{"hexValue":"616c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"8358:12:25","type":"","value":"alid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8331:6:25"},"nodeType":"YulFunctionCall","src":"8331:40:25"},"nodeType":"YulExpressionStatement","src":"8331:40:25"},{"nodeType":"YulAssignment","src":"8380:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8392:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8403:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8388:3:25"},"nodeType":"YulFunctionCall","src":"8388:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8380:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8158:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8172:4:25","type":""}],"src":"8007:406:25"},{"body":{"nodeType":"YulBlock","src":"8473:325:25","statements":[{"nodeType":"YulAssignment","src":"8483:22:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8497:1:25","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"8500:4:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8493:3:25"},"nodeType":"YulFunctionCall","src":"8493:12:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8483:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"8514:38:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"8544:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"8550:1:25","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8540:3:25"},"nodeType":"YulFunctionCall","src":"8540:12:25"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"8518:18:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"8591:31:25","statements":[{"nodeType":"YulAssignment","src":"8593:27:25","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8607:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"8615:4:25","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8603:3:25"},"nodeType":"YulFunctionCall","src":"8603:17:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8593:6:25"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"8571:18:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8564:6:25"},"nodeType":"YulFunctionCall","src":"8564:26:25"},"nodeType":"YulIf","src":"8561:61:25"},{"body":{"nodeType":"YulBlock","src":"8681:111:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8702:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8709:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"8714:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8705:3:25"},"nodeType":"YulFunctionCall","src":"8705:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8695:6:25"},"nodeType":"YulFunctionCall","src":"8695:31:25"},"nodeType":"YulExpressionStatement","src":"8695:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8746:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8749:4:25","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8739:6:25"},"nodeType":"YulFunctionCall","src":"8739:15:25"},"nodeType":"YulExpressionStatement","src":"8739:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8774:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8777:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8767:6:25"},"nodeType":"YulFunctionCall","src":"8767:15:25"},"nodeType":"YulExpressionStatement","src":"8767:15:25"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"8637:18:25"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8660:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"8668:2:25","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8657:2:25"},"nodeType":"YulFunctionCall","src":"8657:14:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8634:2:25"},"nodeType":"YulFunctionCall","src":"8634:38:25"},"nodeType":"YulIf","src":"8631:161:25"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"8453:4:25","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"8462:6:25","type":""}],"src":"8418:380:25"},{"body":{"nodeType":"YulBlock","src":"8977:236:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8994:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9005:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8987:6:25"},"nodeType":"YulFunctionCall","src":"8987:21:25"},"nodeType":"YulExpressionStatement","src":"8987:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9028:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9039:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9024:3:25"},"nodeType":"YulFunctionCall","src":"9024:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"9044:2:25","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9017:6:25"},"nodeType":"YulFunctionCall","src":"9017:30:25"},"nodeType":"YulExpressionStatement","src":"9017:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9067:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9078:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9063:3:25"},"nodeType":"YulFunctionCall","src":"9063:18:25"},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e","kind":"string","nodeType":"YulLiteral","src":"9083:34:25","type":"","value":"ERC1155: caller is not token own"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9056:6:25"},"nodeType":"YulFunctionCall","src":"9056:62:25"},"nodeType":"YulExpressionStatement","src":"9056:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9138:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9149:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9134:3:25"},"nodeType":"YulFunctionCall","src":"9134:18:25"},{"hexValue":"6572206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"9154:16:25","type":"","value":"er or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9127:6:25"},"nodeType":"YulFunctionCall","src":"9127:44:25"},"nodeType":"YulExpressionStatement","src":"9127:44:25"},{"nodeType":"YulAssignment","src":"9180:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9192:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9203:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9188:3:25"},"nodeType":"YulFunctionCall","src":"9188:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9180:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8954:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8968:4:25","type":""}],"src":"8803:410:25"},{"body":{"nodeType":"YulBlock","src":"9392:231:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9409:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9420:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9402:6:25"},"nodeType":"YulFunctionCall","src":"9402:21:25"},"nodeType":"YulExpressionStatement","src":"9402:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9443:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9454:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9439:3:25"},"nodeType":"YulFunctionCall","src":"9439:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"9459:2:25","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9432:6:25"},"nodeType":"YulFunctionCall","src":"9432:30:25"},"nodeType":"YulExpressionStatement","src":"9432:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9482:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9493:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9478:3:25"},"nodeType":"YulFunctionCall","src":"9478:18:25"},{"hexValue":"455243313135353a206163636f756e747320616e6420696473206c656e677468","kind":"string","nodeType":"YulLiteral","src":"9498:34:25","type":"","value":"ERC1155: accounts and ids length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9471:6:25"},"nodeType":"YulFunctionCall","src":"9471:62:25"},"nodeType":"YulExpressionStatement","src":"9471:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9553:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9564:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9549:3:25"},"nodeType":"YulFunctionCall","src":"9549:18:25"},{"hexValue":"206d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"9569:11:25","type":"","value":" mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9542:6:25"},"nodeType":"YulFunctionCall","src":"9542:39:25"},"nodeType":"YulExpressionStatement","src":"9542:39:25"},{"nodeType":"YulAssignment","src":"9590:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9602:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9613:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9598:3:25"},"nodeType":"YulFunctionCall","src":"9598:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9590:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9369:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9383:4:25","type":""}],"src":"9218:405:25"},{"body":{"nodeType":"YulBlock","src":"9660:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9677:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9684:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9689:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9680:3:25"},"nodeType":"YulFunctionCall","src":"9680:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9670:6:25"},"nodeType":"YulFunctionCall","src":"9670:31:25"},"nodeType":"YulExpressionStatement","src":"9670:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9717:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9720:4:25","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9710:6:25"},"nodeType":"YulFunctionCall","src":"9710:15:25"},"nodeType":"YulExpressionStatement","src":"9710:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9741:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9744:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9734:6:25"},"nodeType":"YulFunctionCall","src":"9734:15:25"},"nodeType":"YulExpressionStatement","src":"9734:15:25"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"9628:127:25"},{"body":{"nodeType":"YulBlock","src":"9792:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9809:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9816:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9821:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9812:3:25"},"nodeType":"YulFunctionCall","src":"9812:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9802:6:25"},"nodeType":"YulFunctionCall","src":"9802:31:25"},"nodeType":"YulExpressionStatement","src":"9802:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9849:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9852:4:25","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9842:6:25"},"nodeType":"YulFunctionCall","src":"9842:15:25"},"nodeType":"YulExpressionStatement","src":"9842:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9873:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9876:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9866:6:25"},"nodeType":"YulFunctionCall","src":"9866:15:25"},"nodeType":"YulExpressionStatement","src":"9866:15:25"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"9760:127:25"},{"body":{"nodeType":"YulBlock","src":"9939:88:25","statements":[{"body":{"nodeType":"YulBlock","src":"9970:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9972:16:25"},"nodeType":"YulFunctionCall","src":"9972:18:25"},"nodeType":"YulExpressionStatement","src":"9972:18:25"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9955:5:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9966:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9962:3:25"},"nodeType":"YulFunctionCall","src":"9962:6:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9952:2:25"},"nodeType":"YulFunctionCall","src":"9952:17:25"},"nodeType":"YulIf","src":"9949:43:25"},{"nodeType":"YulAssignment","src":"10001:20:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10012:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"10019:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10008:3:25"},"nodeType":"YulFunctionCall","src":"10008:13:25"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"10001:3:25"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9921:5:25","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"9931:3:25","type":""}],"src":"9892:135:25"},{"body":{"nodeType":"YulBlock","src":"10206:230:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10223:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10234:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10216:6:25"},"nodeType":"YulFunctionCall","src":"10216:21:25"},"nodeType":"YulExpressionStatement","src":"10216:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10257:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10268:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10253:3:25"},"nodeType":"YulFunctionCall","src":"10253:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"10273:2:25","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10246:6:25"},"nodeType":"YulFunctionCall","src":"10246:30:25"},"nodeType":"YulExpressionStatement","src":"10246:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10296:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10307:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10292:3:25"},"nodeType":"YulFunctionCall","src":"10292:18:25"},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e67746820","kind":"string","nodeType":"YulLiteral","src":"10312:34:25","type":"","value":"ERC1155: ids and amounts length "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10285:6:25"},"nodeType":"YulFunctionCall","src":"10285:62:25"},"nodeType":"YulExpressionStatement","src":"10285:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10367:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10378:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10363:3:25"},"nodeType":"YulFunctionCall","src":"10363:18:25"},{"hexValue":"6d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"10383:10:25","type":"","value":"mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10356:6:25"},"nodeType":"YulFunctionCall","src":"10356:38:25"},"nodeType":"YulExpressionStatement","src":"10356:38:25"},{"nodeType":"YulAssignment","src":"10403:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10415:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10426:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10411:3:25"},"nodeType":"YulFunctionCall","src":"10411:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10403:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10183:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10197:4:25","type":""}],"src":"10032:404:25"},{"body":{"nodeType":"YulBlock","src":"10615:227:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10632:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10643:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10625:6:25"},"nodeType":"YulFunctionCall","src":"10625:21:25"},"nodeType":"YulExpressionStatement","src":"10625:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10666:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10677:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10662:3:25"},"nodeType":"YulFunctionCall","src":"10662:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"10682:2:25","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10655:6:25"},"nodeType":"YulFunctionCall","src":"10655:30:25"},"nodeType":"YulExpressionStatement","src":"10655:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10705:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10716:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10701:3:25"},"nodeType":"YulFunctionCall","src":"10701:18:25"},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"10721:34:25","type":"","value":"ERC1155: transfer to the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10694:6:25"},"nodeType":"YulFunctionCall","src":"10694:62:25"},"nodeType":"YulExpressionStatement","src":"10694:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10776:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10787:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10772:3:25"},"nodeType":"YulFunctionCall","src":"10772:18:25"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"10792:7:25","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10765:6:25"},"nodeType":"YulFunctionCall","src":"10765:35:25"},"nodeType":"YulExpressionStatement","src":"10765:35:25"},{"nodeType":"YulAssignment","src":"10809:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10821:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10832:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10817:3:25"},"nodeType":"YulFunctionCall","src":"10817:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10809:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10592:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10606:4:25","type":""}],"src":"10441:401:25"},{"body":{"nodeType":"YulBlock","src":"11021:232:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11038:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11049:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11031:6:25"},"nodeType":"YulFunctionCall","src":"11031:21:25"},"nodeType":"YulExpressionStatement","src":"11031:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11072:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11083:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11068:3:25"},"nodeType":"YulFunctionCall","src":"11068:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"11088:2:25","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11061:6:25"},"nodeType":"YulFunctionCall","src":"11061:30:25"},"nodeType":"YulExpressionStatement","src":"11061:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11111:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11122:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11107:3:25"},"nodeType":"YulFunctionCall","src":"11107:18:25"},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"11127:34:25","type":"","value":"ERC1155: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11100:6:25"},"nodeType":"YulFunctionCall","src":"11100:62:25"},"nodeType":"YulExpressionStatement","src":"11100:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11182:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11193:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11178:3:25"},"nodeType":"YulFunctionCall","src":"11178:18:25"},{"hexValue":"72207472616e73666572","kind":"string","nodeType":"YulLiteral","src":"11198:12:25","type":"","value":"r transfer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11171:6:25"},"nodeType":"YulFunctionCall","src":"11171:40:25"},"nodeType":"YulExpressionStatement","src":"11171:40:25"},{"nodeType":"YulAssignment","src":"11220:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11232:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11243:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11228:3:25"},"nodeType":"YulFunctionCall","src":"11228:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11220:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10998:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11012:4:25","type":""}],"src":"10847:406:25"},{"body":{"nodeType":"YulBlock","src":"11306:77:25","statements":[{"nodeType":"YulAssignment","src":"11316:16:25","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11327:1:25"},{"name":"y","nodeType":"YulIdentifier","src":"11330:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11323:3:25"},"nodeType":"YulFunctionCall","src":"11323:9:25"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"11316:3:25"}]},{"body":{"nodeType":"YulBlock","src":"11355:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11357:16:25"},"nodeType":"YulFunctionCall","src":"11357:18:25"},"nodeType":"YulExpressionStatement","src":"11357:18:25"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11347:1:25"},{"name":"sum","nodeType":"YulIdentifier","src":"11350:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11344:2:25"},"nodeType":"YulFunctionCall","src":"11344:10:25"},"nodeType":"YulIf","src":"11341:36:25"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11289:1:25","type":""},{"name":"y","nodeType":"YulTypedName","src":"11292:1:25","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"11298:3:25","type":""}],"src":"11258:125:25"},{"body":{"nodeType":"YulBlock","src":"11617:236:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11634:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11645:2:25","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11627:6:25"},"nodeType":"YulFunctionCall","src":"11627:21:25"},"nodeType":"YulExpressionStatement","src":"11627:21:25"},{"nodeType":"YulVariableDeclaration","src":"11657:70:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11700:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11712:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11723:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11708:3:25"},"nodeType":"YulFunctionCall","src":"11708:18:25"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"11671:28:25"},"nodeType":"YulFunctionCall","src":"11671:56:25"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"11661:6:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11747:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11758:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11743:3:25"},"nodeType":"YulFunctionCall","src":"11743:18:25"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"11767:6:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"11775:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11763:3:25"},"nodeType":"YulFunctionCall","src":"11763:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11736:6:25"},"nodeType":"YulFunctionCall","src":"11736:50:25"},"nodeType":"YulExpressionStatement","src":"11736:50:25"},{"nodeType":"YulAssignment","src":"11795:52:25","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11832:6:25"},{"name":"tail_1","nodeType":"YulIdentifier","src":"11840:6:25"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"11803:28:25"},"nodeType":"YulFunctionCall","src":"11803:44:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11795:4:25"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11578:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11589:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11597:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11608:4:25","type":""}],"src":"11388:465:25"},{"body":{"nodeType":"YulBlock","src":"12032:231:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12049:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"12060:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12042:6:25"},"nodeType":"YulFunctionCall","src":"12042:21:25"},"nodeType":"YulExpressionStatement","src":"12042:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12083:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"12094:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12079:3:25"},"nodeType":"YulFunctionCall","src":"12079:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"12099:2:25","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12072:6:25"},"nodeType":"YulFunctionCall","src":"12072:30:25"},"nodeType":"YulExpressionStatement","src":"12072:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12122:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"12133:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12118:3:25"},"nodeType":"YulFunctionCall","src":"12118:18:25"},{"hexValue":"455243313135353a2073657474696e6720617070726f76616c20737461747573","kind":"string","nodeType":"YulLiteral","src":"12138:34:25","type":"","value":"ERC1155: setting approval status"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12111:6:25"},"nodeType":"YulFunctionCall","src":"12111:62:25"},"nodeType":"YulExpressionStatement","src":"12111:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12193:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"12204:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12189:3:25"},"nodeType":"YulFunctionCall","src":"12189:18:25"},{"hexValue":"20666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"12209:11:25","type":"","value":" for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12182:6:25"},"nodeType":"YulFunctionCall","src":"12182:39:25"},"nodeType":"YulExpressionStatement","src":"12182:39:25"},{"nodeType":"YulAssignment","src":"12230:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12242:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"12253:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12238:3:25"},"nodeType":"YulFunctionCall","src":"12238:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12230:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12009:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12023:4:25","type":""}],"src":"11858:405:25"},{"body":{"nodeType":"YulBlock","src":"12397:119:25","statements":[{"nodeType":"YulAssignment","src":"12407:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12419:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"12430:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12415:3:25"},"nodeType":"YulFunctionCall","src":"12415:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12407:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12449:9:25"},{"name":"value0","nodeType":"YulIdentifier","src":"12460:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12442:6:25"},"nodeType":"YulFunctionCall","src":"12442:25:25"},"nodeType":"YulExpressionStatement","src":"12442:25:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12487:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"12498:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12483:3:25"},"nodeType":"YulFunctionCall","src":"12483:18:25"},{"name":"value1","nodeType":"YulIdentifier","src":"12503:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12476:6:25"},"nodeType":"YulFunctionCall","src":"12476:34:25"},"nodeType":"YulExpressionStatement","src":"12476:34:25"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12358:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12369:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12377:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12388:4:25","type":""}],"src":"12268:248:25"},{"body":{"nodeType":"YulBlock","src":"12852:496:25","statements":[{"nodeType":"YulVariableDeclaration","src":"12862:29:25","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12880:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"12885:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12876:3:25"},"nodeType":"YulFunctionCall","src":"12876:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"12889:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12872:3:25"},"nodeType":"YulFunctionCall","src":"12872:19:25"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"12866:2:25","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12907:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12922:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"12930:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12918:3:25"},"nodeType":"YulFunctionCall","src":"12918:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12900:6:25"},"nodeType":"YulFunctionCall","src":"12900:34:25"},"nodeType":"YulExpressionStatement","src":"12900:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12954:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"12965:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12950:3:25"},"nodeType":"YulFunctionCall","src":"12950:18:25"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12974:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"12982:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12970:3:25"},"nodeType":"YulFunctionCall","src":"12970:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12943:6:25"},"nodeType":"YulFunctionCall","src":"12943:43:25"},"nodeType":"YulExpressionStatement","src":"12943:43:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13006:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13017:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13002:3:25"},"nodeType":"YulFunctionCall","src":"13002:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"13022:3:25","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12995:6:25"},"nodeType":"YulFunctionCall","src":"12995:31:25"},"nodeType":"YulExpressionStatement","src":"12995:31:25"},{"nodeType":"YulVariableDeclaration","src":"13035:71:25","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"13078:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13090:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13101:3:25","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13086:3:25"},"nodeType":"YulFunctionCall","src":"13086:19:25"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"13049:28:25"},"nodeType":"YulFunctionCall","src":"13049:57:25"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"13039:6:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13126:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13137:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13122:3:25"},"nodeType":"YulFunctionCall","src":"13122:18:25"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"13146:6:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"13154:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13142:3:25"},"nodeType":"YulFunctionCall","src":"13142:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13115:6:25"},"nodeType":"YulFunctionCall","src":"13115:50:25"},"nodeType":"YulExpressionStatement","src":"13115:50:25"},{"nodeType":"YulVariableDeclaration","src":"13174:58:25","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"13217:6:25"},{"name":"tail_1","nodeType":"YulIdentifier","src":"13225:6:25"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"13188:28:25"},"nodeType":"YulFunctionCall","src":"13188:44:25"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"13178:6:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13252:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13263:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13248:3:25"},"nodeType":"YulFunctionCall","src":"13248:19:25"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"13273:6:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"13281:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13269:3:25"},"nodeType":"YulFunctionCall","src":"13269:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13241:6:25"},"nodeType":"YulFunctionCall","src":"13241:51:25"},"nodeType":"YulExpressionStatement","src":"13241:51:25"},{"nodeType":"YulAssignment","src":"13301:41:25","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"13327:6:25"},{"name":"tail_2","nodeType":"YulIdentifier","src":"13335:6:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"13309:17:25"},"nodeType":"YulFunctionCall","src":"13309:33:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13301:4:25"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12789:9:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"12800:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12808:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12816:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12824:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12832:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12843:4:25","type":""}],"src":"12521:827:25"},{"body":{"nodeType":"YulBlock","src":"13433:169:25","statements":[{"body":{"nodeType":"YulBlock","src":"13479:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13488:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13491:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13481:6:25"},"nodeType":"YulFunctionCall","src":"13481:12:25"},"nodeType":"YulExpressionStatement","src":"13481:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13454:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"13463:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13450:3:25"},"nodeType":"YulFunctionCall","src":"13450:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"13475:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13446:3:25"},"nodeType":"YulFunctionCall","src":"13446:32:25"},"nodeType":"YulIf","src":"13443:52:25"},{"nodeType":"YulVariableDeclaration","src":"13504:29:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13523:9:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13517:5:25"},"nodeType":"YulFunctionCall","src":"13517:16:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"13508:5:25","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13566:5:25"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"13542:23:25"},"nodeType":"YulFunctionCall","src":"13542:30:25"},"nodeType":"YulExpressionStatement","src":"13542:30:25"},{"nodeType":"YulAssignment","src":"13581:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"13591:5:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13581:6:25"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13399:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13410:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13422:6:25","type":""}],"src":"13353:249:25"},{"body":{"nodeType":"YulBlock","src":"13650:136:25","statements":[{"body":{"nodeType":"YulBlock","src":"13695:85:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13724:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13727:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13730:1:25","type":"","value":"4"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"13709:14:25"},"nodeType":"YulFunctionCall","src":"13709:23:25"},"nodeType":"YulExpressionStatement","src":"13709:23:25"},{"nodeType":"YulAssignment","src":"13745:25:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13756:3:25","type":"","value":"224"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13767:1:25","type":"","value":"0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13761:5:25"},"nodeType":"YulFunctionCall","src":"13761:8:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"13752:3:25"},"nodeType":"YulFunctionCall","src":"13752:18:25"},"variableNames":[{"name":"sig","nodeType":"YulIdentifier","src":"13745:3:25"}]}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"13666:14:25"},"nodeType":"YulFunctionCall","src":"13666:16:25"},{"kind":"number","nodeType":"YulLiteral","src":"13684:1:25","type":"","value":"3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13663:2:25"},"nodeType":"YulFunctionCall","src":"13663:23:25"},"nodeType":"YulIf","src":"13660:120:25"}]},"name":"return_data_selector","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"sig","nodeType":"YulTypedName","src":"13642:3:25","type":""}],"src":"13607:179:25"},{"body":{"nodeType":"YulBlock","src":"13838:624:25","statements":[{"body":{"nodeType":"YulBlock","src":"13878:9:25","statements":[{"nodeType":"YulLeave","src":"13880:5:25"}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"13854:14:25"},"nodeType":"YulFunctionCall","src":"13854:16:25"},{"kind":"number","nodeType":"YulLiteral","src":"13872:4:25","type":"","value":"0x44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13851:2:25"},"nodeType":"YulFunctionCall","src":"13851:26:25"},"nodeType":"YulIf","src":"13848:39:25"},{"nodeType":"YulVariableDeclaration","src":"13896:21:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13914:2:25","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13908:5:25"},"nodeType":"YulFunctionCall","src":"13908:9:25"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"13900:4:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13926:16:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13940:1:25","type":"","value":"3"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13936:3:25"},"nodeType":"YulFunctionCall","src":"13936:6:25"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"13930:2:25","type":""}]},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"13966:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"13972:1:25","type":"","value":"4"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"13979:14:25"},"nodeType":"YulFunctionCall","src":"13979:16:25"},{"name":"_1","nodeType":"YulIdentifier","src":"13997:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13975:3:25"},"nodeType":"YulFunctionCall","src":"13975:25:25"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"13951:14:25"},"nodeType":"YulFunctionCall","src":"13951:50:25"},"nodeType":"YulExpressionStatement","src":"13951:50:25"},{"nodeType":"YulVariableDeclaration","src":"14010:25:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14030:4:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14024:5:25"},"nodeType":"YulFunctionCall","src":"14024:11:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14014:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14044:26:25","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"14054:14:25"},"nodeType":"YulFunctionCall","src":"14054:16:25"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"14048:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14079:28:25","value":{"kind":"number","nodeType":"YulLiteral","src":"14089:18:25","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"14083:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"14165:9:25","statements":[{"nodeType":"YulLeave","src":"14167:5:25"}]},"condition":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14125:6:25"},{"name":"_3","nodeType":"YulIdentifier","src":"14133:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14122:2:25"},"nodeType":"YulFunctionCall","src":"14122:14:25"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14145:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"14153:4:25","type":"","value":"0x24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14141:3:25"},"nodeType":"YulFunctionCall","src":"14141:17:25"},{"name":"_2","nodeType":"YulIdentifier","src":"14160:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14138:2:25"},"nodeType":"YulFunctionCall","src":"14138:25:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"14119:2:25"},"nodeType":"YulFunctionCall","src":"14119:45:25"},"nodeType":"YulIf","src":"14116:58:25"},{"nodeType":"YulVariableDeclaration","src":"14183:28:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14198:4:25"},{"name":"offset","nodeType":"YulIdentifier","src":"14204:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14194:3:25"},"nodeType":"YulFunctionCall","src":"14194:17:25"},"variables":[{"name":"msg","nodeType":"YulTypedName","src":"14187:3:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14220:24:25","value":{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"14240:3:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14234:5:25"},"nodeType":"YulFunctionCall","src":"14234:10:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14224:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"14271:9:25","statements":[{"nodeType":"YulLeave","src":"14273:5:25"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"14259:6:25"},{"name":"_3","nodeType":"YulIdentifier","src":"14267:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14256:2:25"},"nodeType":"YulFunctionCall","src":"14256:14:25"},"nodeType":"YulIf","src":"14253:27:25"},{"body":{"nodeType":"YulBlock","src":"14362:9:25","statements":[{"nodeType":"YulLeave","src":"14364:5:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"14303:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"14308:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14299:3:25"},"nodeType":"YulFunctionCall","src":"14299:16:25"},{"kind":"number","nodeType":"YulLiteral","src":"14317:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14295:3:25"},"nodeType":"YulFunctionCall","src":"14295:27:25"},{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14332:4:25"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"14338:14:25"},"nodeType":"YulFunctionCall","src":"14338:16:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14328:3:25"},"nodeType":"YulFunctionCall","src":"14328:27:25"},{"name":"_1","nodeType":"YulIdentifier","src":"14357:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14324:3:25"},"nodeType":"YulFunctionCall","src":"14324:36:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14292:2:25"},"nodeType":"YulFunctionCall","src":"14292:69:25"},"nodeType":"YulIf","src":"14289:82:25"},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"14400:4:25"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14414:6:25"},{"name":"length","nodeType":"YulIdentifier","src":"14422:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14410:3:25"},"nodeType":"YulFunctionCall","src":"14410:19:25"},{"kind":"number","nodeType":"YulLiteral","src":"14431:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14406:3:25"},"nodeType":"YulFunctionCall","src":"14406:30:25"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"14380:19:25"},"nodeType":"YulFunctionCall","src":"14380:57:25"},"nodeType":"YulExpressionStatement","src":"14380:57:25"},{"nodeType":"YulAssignment","src":"14446:10:25","value":{"name":"msg","nodeType":"YulIdentifier","src":"14453:3:25"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"14446:3:25"}]}]},"name":"try_decode_error_message","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13830:3:25","type":""}],"src":"13791:671:25"},{"body":{"nodeType":"YulBlock","src":"14641:242:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14658:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14669:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14651:6:25"},"nodeType":"YulFunctionCall","src":"14651:21:25"},"nodeType":"YulExpressionStatement","src":"14651:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14692:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14703:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14688:3:25"},"nodeType":"YulFunctionCall","src":"14688:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"14708:2:25","type":"","value":"52"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14681:6:25"},"nodeType":"YulFunctionCall","src":"14681:30:25"},"nodeType":"YulExpressionStatement","src":"14681:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14731:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14742:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14727:3:25"},"nodeType":"YulFunctionCall","src":"14727:18:25"},{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2d45524331313535","kind":"string","nodeType":"YulLiteral","src":"14747:34:25","type":"","value":"ERC1155: transfer to non-ERC1155"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14720:6:25"},"nodeType":"YulFunctionCall","src":"14720:62:25"},"nodeType":"YulExpressionStatement","src":"14720:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14802:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14813:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14798:3:25"},"nodeType":"YulFunctionCall","src":"14798:18:25"},{"hexValue":"526563656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"14818:22:25","type":"","value":"Receiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14791:6:25"},"nodeType":"YulFunctionCall","src":"14791:50:25"},"nodeType":"YulExpressionStatement","src":"14791:50:25"},{"nodeType":"YulAssignment","src":"14850:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14862:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14873:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14858:3:25"},"nodeType":"YulFunctionCall","src":"14858:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14850:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14618:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14632:4:25","type":""}],"src":"14467:416:25"},{"body":{"nodeType":"YulBlock","src":"15062:230:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15079:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15090:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15072:6:25"},"nodeType":"YulFunctionCall","src":"15072:21:25"},"nodeType":"YulExpressionStatement","src":"15072:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15113:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15124:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15109:3:25"},"nodeType":"YulFunctionCall","src":"15109:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"15129:2:25","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15102:6:25"},"nodeType":"YulFunctionCall","src":"15102:30:25"},"nodeType":"YulExpressionStatement","src":"15102:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15152:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15163:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15148:3:25"},"nodeType":"YulFunctionCall","src":"15148:18:25"},{"hexValue":"455243313135353a204552433131353552656365697665722072656a65637465","kind":"string","nodeType":"YulLiteral","src":"15168:34:25","type":"","value":"ERC1155: ERC1155Receiver rejecte"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15141:6:25"},"nodeType":"YulFunctionCall","src":"15141:62:25"},"nodeType":"YulExpressionStatement","src":"15141:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15223:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15234:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15219:3:25"},"nodeType":"YulFunctionCall","src":"15219:18:25"},{"hexValue":"6420746f6b656e73","kind":"string","nodeType":"YulLiteral","src":"15239:10:25","type":"","value":"d tokens"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15212:6:25"},"nodeType":"YulFunctionCall","src":"15212:38:25"},"nodeType":"YulExpressionStatement","src":"15212:38:25"},{"nodeType":"YulAssignment","src":"15259:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15271:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15282:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15267:3:25"},"nodeType":"YulFunctionCall","src":"15267:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15259:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15039:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15053:4:25","type":""}],"src":"14888:404:25"},{"body":{"nodeType":"YulBlock","src":"15528:330:25","statements":[{"nodeType":"YulVariableDeclaration","src":"15538:29:25","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15556:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"15561:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15552:3:25"},"nodeType":"YulFunctionCall","src":"15552:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"15565:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15548:3:25"},"nodeType":"YulFunctionCall","src":"15548:19:25"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"15542:2:25","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15583:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15598:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"15606:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15594:3:25"},"nodeType":"YulFunctionCall","src":"15594:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15576:6:25"},"nodeType":"YulFunctionCall","src":"15576:34:25"},"nodeType":"YulExpressionStatement","src":"15576:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15630:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15641:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15626:3:25"},"nodeType":"YulFunctionCall","src":"15626:18:25"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15650:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"15658:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15646:3:25"},"nodeType":"YulFunctionCall","src":"15646:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15619:6:25"},"nodeType":"YulFunctionCall","src":"15619:43:25"},"nodeType":"YulExpressionStatement","src":"15619:43:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15682:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15693:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15678:3:25"},"nodeType":"YulFunctionCall","src":"15678:18:25"},{"name":"value2","nodeType":"YulIdentifier","src":"15698:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15671:6:25"},"nodeType":"YulFunctionCall","src":"15671:34:25"},"nodeType":"YulExpressionStatement","src":"15671:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15725:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15736:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15721:3:25"},"nodeType":"YulFunctionCall","src":"15721:18:25"},{"name":"value3","nodeType":"YulIdentifier","src":"15741:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15714:6:25"},"nodeType":"YulFunctionCall","src":"15714:34:25"},"nodeType":"YulExpressionStatement","src":"15714:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15768:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15779:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15764:3:25"},"nodeType":"YulFunctionCall","src":"15764:19:25"},{"kind":"number","nodeType":"YulLiteral","src":"15785:3:25","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15757:6:25"},"nodeType":"YulFunctionCall","src":"15757:32:25"},"nodeType":"YulExpressionStatement","src":"15757:32:25"},{"nodeType":"YulAssignment","src":"15798:54:25","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"15824:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15836:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15847:3:25","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15832:3:25"},"nodeType":"YulFunctionCall","src":"15832:19:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"15806:17:25"},"nodeType":"YulFunctionCall","src":"15806:46:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15798:4:25"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15465:9:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"15476:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"15484:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15492:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15500:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15508:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15519:4:25","type":""}],"src":"15297:561:25"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function finalize_allocation(memPtr, size)\n    {\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_uint256_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let _3 := array_allocation_size_array_uint256_dyn(_1)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, _3)\n        let dst := memPtr\n        mstore(memPtr, _1)\n        dst := add(memPtr, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := memPtr\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value3 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        let _5 := array_allocation_size_array_uint256_dyn(_3)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, _5)\n        let dst := memPtr\n        mstore(memPtr, _3)\n        dst := add(memPtr, _4)\n        let srcEnd := add(add(_2, shl(5, _3)), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            mstore(dst, abi_decode_address(src))\n            dst := add(dst, _4)\n        }\n        value0 := memPtr\n        let offset_1 := calldataload(add(headStart, _4))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_array_uint256_dyn(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: address zero is not a v\")\n        mstore(add(headStart, 96), \"alid owner\")\n        tail := add(headStart, 128)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1155: caller is not token own\")\n        mstore(add(headStart, 96), \"er or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: accounts and ids length\")\n        mstore(add(headStart, 96), \" mismatch\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ids and amounts length \")\n        mstore(add(headStart, 96), \"mismatch\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC1155: transfer to the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r transfer\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_array_uint256_dyn(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn(value1, tail_1)\n    }\n    function abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: setting approval status\")\n        mstore(add(headStart, 96), \" for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), 160)\n        let tail_1 := abi_encode_array_uint256_dyn(value2, add(headStart, 160))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value3, tail_1)\n        mstore(add(headStart, 128), sub(tail_2, headStart))\n        tail := abi_encode_string(value4, tail_2)\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function return_data_selector() -> sig\n    {\n        if gt(returndatasize(), 3)\n        {\n            returndatacopy(0, 0, 4)\n            sig := shr(224, mload(0))\n        }\n    }\n    function try_decode_error_message() -> ret\n    {\n        if lt(returndatasize(), 0x44) { leave }\n        let data := mload(64)\n        let _1 := not(3)\n        returndatacopy(data, 4, add(returndatasize(), _1))\n        let offset := mload(data)\n        let _2 := returndatasize()\n        let _3 := 0xffffffffffffffff\n        if or(gt(offset, _3), gt(add(offset, 0x24), _2)) { leave }\n        let msg := add(data, offset)\n        let length := mload(msg)\n        if gt(length, _3) { leave }\n        if gt(add(add(msg, length), 0x20), add(add(data, returndatasize()), _1)) { leave }\n        finalize_allocation(data, add(add(offset, length), 0x20))\n        ret := msg\n    }\n    function abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 52)\n        mstore(add(headStart, 64), \"ERC1155: transfer to non-ERC1155\")\n        mstore(add(headStart, 96), \"Receiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ERC1155Receiver rejecte\")\n        mstore(add(headStart, 96), \"d tokens\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_string(value4, add(headStart, 160))\n    }\n}","id":25,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100875760003560e01c80634e1273f41161005b5780634e1273f41461010a578063a22cb4651461012a578063e985e9c51461013d578063f242432a1461017957600080fd5b8062fdd58e1461008c57806301ffc9a7146100b25780630e89341c146100d55780632eb2c2d6146100f5575b600080fd5b61009f61009a366004610b40565b61018c565b6040519081526020015b60405180910390f35b6100c56100c0366004610b83565b610225565b60405190151581526020016100a9565b6100e86100e3366004610ba7565b610275565b6040516100a99190610c06565b610108610103366004610d65565b610309565b005b61011d610118366004610e0f565b610355565b6040516100a99190610f15565b610108610138366004610f28565b61047f565b6100c561014b366004610f64565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b610108610187366004610f97565b61048e565b60006001600160a01b0383166101fc5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061025657506001600160e01b031982166303a24d0760e21b145b8061021f57506301ffc9a760e01b6001600160e01b031983161461021f565b60606002805461028490610ffc565b80601f01602080910402602001604051908101604052809291908181526020018280546102b090610ffc565b80156102fd5780601f106102d2576101008083540402835291602001916102fd565b820191906000526020600020905b8154815290600101906020018083116102e057829003601f168201915b50505050509050919050565b6001600160a01b0385163314806103255750610325853361014b565b6103415760405162461bcd60e51b81526004016101f390611036565b61034e85858585856104d3565b5050505050565b606081518351146103ba5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016101f3565b6000835167ffffffffffffffff8111156103d6576103d6610c19565b6040519080825280602002602001820160405280156103ff578160200160208202803683370190505b50905060005b84518110156104775761044a85828151811061042357610423611084565b602002602001015185838151811061043d5761043d611084565b602002602001015161018c565b82828151811061045c5761045c611084565b6020908102919091010152610470816110b0565b9050610405565b509392505050565b61048a3383836106b0565b5050565b6001600160a01b0385163314806104aa57506104aa853361014b565b6104c65760405162461bcd60e51b81526004016101f390611036565b61034e8585858585610790565b81518351146105355760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016101f3565b6001600160a01b03841661055b5760405162461bcd60e51b81526004016101f3906110c9565b3360005b845181101561064257600085828151811061057c5761057c611084565b60200260200101519050600085838151811061059a5761059a611084565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156105ea5760405162461bcd60e51b81526004016101f39061110e565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610627908490611158565b925050819055505050508061063b906110b0565b905061055f565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161069292919061116b565b60405180910390a46106a88187878787876108ba565b505050505050565b816001600160a01b0316836001600160a01b0316036107235760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016101f3565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166107b65760405162461bcd60e51b81526004016101f3906110c9565b3360006107c285610a1e565b905060006107cf85610a1e565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156108125760405162461bcd60e51b81526004016101f39061110e565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061084f908490611158565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46108af848a8a8a8a8a610a69565b505050505050505050565b6001600160a01b0384163b156106a85760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906108fe9089908990889088908890600401611199565b6020604051808303816000875af1925050508015610939575060408051601f3d908101601f19168201909252610936918101906111f7565b60015b6109e557610945611214565b806308c379a00361097e5750610959611230565b806109645750610980565b8060405162461bcd60e51b81526004016101f39190610c06565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016101f3565b6001600160e01b0319811663bc197c8160e01b14610a155760405162461bcd60e51b81526004016101f3906112ba565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610a5857610a58611084565b602090810291909101015292915050565b6001600160a01b0384163b156106a85760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610aad9089908990889088908890600401611302565b6020604051808303816000875af1925050508015610ae8575060408051601f3d908101601f19168201909252610ae5918101906111f7565b60015b610af457610945611214565b6001600160e01b0319811663f23a6e6160e01b14610a155760405162461bcd60e51b81526004016101f3906112ba565b80356001600160a01b0381168114610b3b57600080fd5b919050565b60008060408385031215610b5357600080fd5b610b5c83610b24565b946020939093013593505050565b6001600160e01b031981168114610b8057600080fd5b50565b600060208284031215610b9557600080fd5b8135610ba081610b6a565b9392505050565b600060208284031215610bb957600080fd5b5035919050565b6000815180845260005b81811015610be657602081850181015186830182015201610bca565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610ba06020830184610bc0565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715610c5557610c55610c19565b6040525050565b600067ffffffffffffffff821115610c7657610c76610c19565b5060051b60200190565b600082601f830112610c9157600080fd5b81356020610c9e82610c5c565b604051610cab8282610c2f565b83815260059390931b8501820192828101915086841115610ccb57600080fd5b8286015b84811015610ce65780358352918301918301610ccf565b509695505050505050565b600082601f830112610d0257600080fd5b813567ffffffffffffffff811115610d1c57610d1c610c19565b604051610d33601f8301601f191660200182610c2f565b818152846020838601011115610d4857600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215610d7d57600080fd5b610d8686610b24565b9450610d9460208701610b24565b9350604086013567ffffffffffffffff80821115610db157600080fd5b610dbd89838a01610c80565b94506060880135915080821115610dd357600080fd5b610ddf89838a01610c80565b93506080880135915080821115610df557600080fd5b50610e0288828901610cf1565b9150509295509295909350565b60008060408385031215610e2257600080fd5b823567ffffffffffffffff80821115610e3a57600080fd5b818501915085601f830112610e4e57600080fd5b81356020610e5b82610c5c565b604051610e688282610c2f565b83815260059390931b8501820192828101915089841115610e8857600080fd5b948201945b83861015610ead57610e9e86610b24565b82529482019490820190610e8d565b96505086013592505080821115610ec357600080fd5b50610ed085828601610c80565b9150509250929050565b600081518084526020808501945080840160005b83811015610f0a57815187529582019590820190600101610eee565b509495945050505050565b602081526000610ba06020830184610eda565b60008060408385031215610f3b57600080fd5b610f4483610b24565b915060208301358015158114610f5957600080fd5b809150509250929050565b60008060408385031215610f7757600080fd5b610f8083610b24565b9150610f8e60208401610b24565b90509250929050565b600080600080600060a08688031215610faf57600080fd5b610fb886610b24565b9450610fc660208701610b24565b93506040860135925060608601359150608086013567ffffffffffffffff811115610ff057600080fd5b610e0288828901610cf1565b600181811c9082168061101057607f821691505b60208210810361103057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016110c2576110c261109a565b5060010190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b8082018082111561021f5761021f61109a565b60408152600061117e6040830185610eda565b82810360208401526111908185610eda565b95945050505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906111c590830186610eda565b82810360608401526111d78186610eda565b905082810360808401526111eb8185610bc0565b98975050505050505050565b60006020828403121561120957600080fd5b8151610ba081610b6a565b600060033d111561122d5760046000803e5060005160e01c5b90565b600060443d101561123e5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561126e57505050505090565b82850191508151818111156112865750505050505090565b843d87010160208285010111156112a05750505050505090565b6112af60208286010187610c2f565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061133c90830184610bc0565b97965050505050505056fea264697066735822122029f52531444516d92c107687d074f50e713e713c8f0880367fe8f3b0c94b425864736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4E1273F4 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x10A JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x179 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0xF5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0xB40 JUMP JUMPDEST PUSH2 0x18C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC5 PUSH2 0xC0 CALLDATASIZE PUSH1 0x4 PUSH2 0xB83 JUMP JUMPDEST PUSH2 0x225 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA9 JUMP JUMPDEST PUSH2 0xE8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0xBA7 JUMP JUMPDEST PUSH2 0x275 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0xC06 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x103 CALLDATASIZE PUSH1 0x4 PUSH2 0xD65 JUMP JUMPDEST PUSH2 0x309 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11D PUSH2 0x118 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0F JUMP JUMPDEST PUSH2 0x355 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0xF15 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x138 CALLDATASIZE PUSH1 0x4 PUSH2 0xF28 JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x14B CALLDATASIZE PUSH1 0x4 PUSH2 0xF64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x187 CALLDATASIZE PUSH1 0x4 PUSH2 0xF97 JUMP JUMPDEST PUSH2 0x48E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x30B634B21037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x256 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ JUMPDEST DUP1 PUSH2 0x21F JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x21F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x284 SWAP1 PUSH2 0xFFC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B0 SWAP1 PUSH2 0xFFC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x325 JUMPI POP PUSH2 0x325 DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x341 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x1036 JUMP JUMPDEST PUSH2 0x34E DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x4D3 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x40DAD2E6DAC2E8C6D PUSH1 0xBB SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D6 JUMPI PUSH2 0x3D6 PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3FF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x477 JUMPI PUSH2 0x44A DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x423 JUMPI PUSH2 0x423 PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x43D JUMPI PUSH2 0x43D PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x18C JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x45C JUMPI PUSH2 0x45C PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x470 DUP2 PUSH2 0x10B0 JUMP JUMPDEST SWAP1 POP PUSH2 0x405 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x48A CALLER DUP4 DUP4 PUSH2 0x6B0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x4AA JUMPI POP PUSH2 0x4AA DUP6 CALLER PUSH2 0x14B JUMP JUMPDEST PUSH2 0x4C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x1036 JUMP JUMPDEST PUSH2 0x34E DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x790 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x535 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0xDAD2E6DAC2E8C6D PUSH1 0xC3 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x55B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x10C9 JUMP JUMPDEST CALLER PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x642 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x57C JUMPI PUSH2 0x57C PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x59A JUMPI PUSH2 0x59A PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE DUP1 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x5EA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x110E JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x627 SWAP1 DUP5 SWAP1 PUSH2 0x1158 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x63B SWAP1 PUSH2 0x10B0 JUMP JUMPDEST SWAP1 POP PUSH2 0x55F JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x692 SWAP3 SWAP2 SWAP1 PUSH2 0x116B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x6A8 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x8BA JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x723 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x103337B91039B2B633 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x7B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x10C9 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x7C2 DUP6 PUSH2 0xA1E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7CF DUP6 PUSH2 0xA1E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0x812 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x110E JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0x84F SWAP1 DUP5 SWAP1 PUSH2 0x1158 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x8AF DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0xA69 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x6A8 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0x8FE SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1199 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x939 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x936 SWAP2 DUP2 ADD SWAP1 PUSH2 0x11F7 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x9E5 JUMPI PUSH2 0x945 PUSH2 0x1214 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH2 0x97E JUMPI POP PUSH2 0x959 PUSH2 0x1230 JUMP JUMPDEST DUP1 PUSH2 0x964 JUMPI POP PUSH2 0x980 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0xC06 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x2932B1B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0xA15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x12BA JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xA58 JUMPI PUSH2 0xA58 PUSH2 0x1084 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x6A8 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0xAAD SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1302 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xAE8 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xAE5 SWAP2 DUP2 ADD SWAP1 PUSH2 0x11F7 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xAF4 JUMPI PUSH2 0x945 PUSH2 0x1214 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0xA15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F3 SWAP1 PUSH2 0x12BA JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB5C DUP4 PUSH2 0xB24 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xB80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBA0 DUP2 PUSH2 0xB6A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xBE6 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0xBCA JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xBA0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xBC0 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xC55 JUMPI PUSH2 0xC55 PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xC76 JUMPI PUSH2 0xC76 PUSH2 0xC19 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xC91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xC9E DUP3 PUSH2 0xC5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCAB DUP3 DUP3 PUSH2 0xC2F JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP7 DUP5 GT ISZERO PUSH2 0xCCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xCE6 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0xCCF JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD1C JUMPI PUSH2 0xD1C PUSH2 0xC19 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD33 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0xC2F JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0xD48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xD7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD86 DUP7 PUSH2 0xB24 JUMP JUMPDEST SWAP5 POP PUSH2 0xD94 PUSH1 0x20 DUP8 ADD PUSH2 0xB24 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xDB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDBD DUP10 DUP4 DUP11 ADD PUSH2 0xC80 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xDD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDDF DUP10 DUP4 DUP11 ADD PUSH2 0xC80 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xDF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE02 DUP9 DUP3 DUP10 ADD PUSH2 0xCF1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xE5B DUP3 PUSH2 0xC5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE68 DUP3 DUP3 PUSH2 0xC2F JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP10 DUP5 GT ISZERO PUSH2 0xE88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0xEAD JUMPI PUSH2 0xE9E DUP7 PUSH2 0xB24 JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0xE8D JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0xEC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xED0 DUP6 DUP3 DUP7 ADD PUSH2 0xC80 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF0A JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xEEE JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xBA0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xEDA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF44 DUP4 PUSH2 0xB24 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xF59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF80 DUP4 PUSH2 0xB24 JUMP JUMPDEST SWAP2 POP PUSH2 0xF8E PUSH1 0x20 DUP5 ADD PUSH2 0xB24 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xFAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFB8 DUP7 PUSH2 0xB24 JUMP JUMPDEST SWAP5 POP PUSH2 0xFC6 PUSH1 0x20 DUP8 ADD PUSH2 0xB24 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE02 DUP9 DUP3 DUP10 ADD PUSH2 0xCF1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1010 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1030 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x195C881BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x10C2 JUMPI PUSH2 0x10C2 PUSH2 0x109A JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x21F JUMPI PUSH2 0x21F PUSH2 0x109A JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x117E PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xEDA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1190 DUP2 DUP6 PUSH2 0xEDA JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x11C5 SWAP1 DUP4 ADD DUP7 PUSH2 0xEDA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x11D7 DUP2 DUP7 PUSH2 0xEDA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x11EB DUP2 DUP6 PUSH2 0xBC0 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xBA0 DUP2 PUSH2 0xB6A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x122D JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x123E JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH8 0xFFFFFFFFFFFFFFFF DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x126E JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x1286 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x12A0 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x12AF PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH2 0xC2F JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x133C SWAP1 DUP4 ADD DUP5 PUSH2 0xBC0 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 CREATE2 0x25 BALANCE PREVRANDAO GASLIMIT AND 0xD9 0x2C LT PUSH23 0x87D074F50E713E713C8F0880367FE8F3B0C94B42586473 PUSH16 0x6C634300081300330000000000000000 ","sourceMap":"570:16539:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2185:227;;;;;;:::i;:::-;;:::i;:::-;;;597:25:25;;;585:2;570:18;2185:227:3;;;;;;;;1236:305;;;;;;:::i;:::-;;:::i;:::-;;;1184:14:25;;1177:22;1159:41;;1147:2;1132:18;1236:305:3;1019:187:25;1940:103:3;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4042:426::-;;;;;;:::i;:::-;;:::i;:::-;;2569:486;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3123:153::-;;;;;;:::i;:::-;;:::i;3343:166::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3465:27:3;;;3442:4;3465:27;;;:18;:27;;;;;;;;:37;;;;;;;;;;;;;;;3343:166;3576:394;;;;;;:::i;:::-;;:::i;2185:227::-;2271:7;-1:-1:-1;;;;;2298:21:3;;2290:76;;;;-1:-1:-1;;;2290:76:3;;8209:2:25;2290:76:3;;;8191:21:25;8248:2;8228:18;;;8221:30;8287:34;8267:18;;;8260:62;-1:-1:-1;;;8338:18:25;;;8331:40;8388:19;;2290:76:3;;;;;;;;;-1:-1:-1;2383:9:3;:13;;;;;;;;;;;-1:-1:-1;;;;;2383:22:3;;;;;;;;;;2185:227;;;;;:::o;1236:305::-;1338:4;-1:-1:-1;;;;;;1373:41:3;;-1:-1:-1;;;1373:41:3;;:109;;-1:-1:-1;;;;;;;1430:52:3;;-1:-1:-1;;;1430:52:3;1373:109;:161;;;-1:-1:-1;;;;;;;;;;937:40:19;;;1498:36:3;829:155:19;1940:103:3;2000:13;2032:4;2025:11;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1940:103;;;:::o;4042:426::-;-1:-1:-1;;;;;4267:20:3;;734:10:12;4267:20:3;;:60;;-1:-1:-1;4291:36:3;4308:4;734:10:12;3343:166:3;:::i;4291:36::-;4246:153;;;;-1:-1:-1;;;4246:153:3;;;;;;;:::i;:::-;4409:52;4432:4;4438:2;4442:3;4447:7;4456:4;4409:22;:52::i;:::-;4042:426;;;;;:::o;2569:486::-;2702:16;2757:3;:10;2738:8;:15;:29;2730:83;;;;-1:-1:-1;;;2730:83:3;;9420:2:25;2730:83:3;;;9402:21:25;9459:2;9439:18;;;9432:30;9498:34;9478:18;;;9471:62;-1:-1:-1;;;9549:18:25;;;9542:39;9598:19;;2730:83:3;9218:405:25;2730:83:3;2824:30;2871:8;:15;2857:30;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2857:30:3;;2824:63;;2903:9;2898:120;2922:8;:15;2918:1;:19;2898:120;;;2977:30;2987:8;2996:1;2987:11;;;;;;;;:::i;:::-;;;;;;;3000:3;3004:1;3000:6;;;;;;;;:::i;:::-;;;;;;;2977:9;:30::i;:::-;2958:13;2972:1;2958:16;;;;;;;;:::i;:::-;;;;;;;;;;:49;2939:3;;;:::i;:::-;;;2898:120;;;-1:-1:-1;3035:13:3;2569:486;-1:-1:-1;;;2569:486:3:o;3123:153::-;3217:52;734:10:12;3250:8:3;3260;3217:18;:52::i;:::-;3123:153;;:::o;3576:394::-;-1:-1:-1;;;;;3776:20:3;;734:10:12;3776:20:3;;:60;;-1:-1:-1;3800:36:3;3817:4;734:10:12;3343:166:3;:::i;3800:36::-;3755:153;;;;-1:-1:-1;;;3755:153:3;;;;;;;:::i;:::-;3918:45;3936:4;3942:2;3946;3950:6;3958:4;3918:17;:45::i;6211:1115::-;6431:7;:14;6417:3;:10;:28;6409:81;;;;-1:-1:-1;;;6409:81:3;;10234:2:25;6409:81:3;;;10216:21:25;10273:2;10253:18;;;10246:30;10312:34;10292:18;;;10285:62;-1:-1:-1;;;10363:18:25;;;10356:38;10411:19;;6409:81:3;10032:404:25;6409:81:3;-1:-1:-1;;;;;6508:16:3;;6500:66;;;;-1:-1:-1;;;6500:66:3;;;;;;;:::i;:::-;734:10:12;6577:16:3;6690:411;6714:3;:10;6710:1;:14;6690:411;;;6745:10;6758:3;6762:1;6758:6;;;;;;;;:::i;:::-;;;;;;;6745:19;;6778:14;6795:7;6803:1;6795:10;;;;;;;;:::i;:::-;;;;;;;;;;;;6820:19;6842:13;;;;;;;;;;-1:-1:-1;;;;;6842:19:3;;;;;;;;;;;;6795:10;;-1:-1:-1;6883:21:3;;;;6875:76;;;;-1:-1:-1;;;6875:76:3;;;;;;;:::i;:::-;6993:9;:13;;;;;;;;;;;-1:-1:-1;;;;;6993:19:3;;;;;;;;;;7015:20;;;6993:42;;7063:17;;;;;;;:27;;7015:20;;6993:9;7063:27;;7015:20;;7063:27;:::i;:::-;;;;;;;;6731:370;;;6726:3;;;;:::i;:::-;;;6690:411;;;;7146:2;-1:-1:-1;;;;;7116:47:3;7140:4;-1:-1:-1;;;;;7116:47:3;7130:8;-1:-1:-1;;;;;7116:47:3;;7150:3;7155:7;7116:47;;;;;;;:::i;:::-;;;;;;;;7244:75;7280:8;7290:4;7296:2;7300:3;7305:7;7314:4;7244:35;:75::i;:::-;6399:927;6211:1115;;;;;:::o;12790:293::-;12910:8;-1:-1:-1;;;;;12901:17:3;:5;-1:-1:-1;;;;;12901:17:3;;12893:71;;;;-1:-1:-1;;;12893:71:3;;12060:2:25;12893:71:3;;;12042:21:25;12099:2;12079:18;;;12072:30;12138:34;12118:18;;;12111:62;-1:-1:-1;;;12189:18:25;;;12182:39;12238:19;;12893:71:3;11858:405:25;12893:71:3;-1:-1:-1;;;;;12974:25:3;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;12974:46:3;;;;;;;;;;13035:41;;1159::25;;;13035::3;;1132:18:25;13035:41:3;;;;;;;12790:293;;;:::o;4918:947::-;-1:-1:-1;;;;;5099:16:3;;5091:66;;;;-1:-1:-1;;;5091:66:3;;;;;;;:::i;:::-;734:10:12;5168:16:3;5232:21;5250:2;5232:17;:21::i;:::-;5209:44;;5263:24;5290:25;5308:6;5290:17;:25::i;:::-;5263:52;;5397:19;5419:13;;;;;;;;;;;-1:-1:-1;;;;;5419:19:3;;;;;;;;;;5456:21;;;;5448:76;;;;-1:-1:-1;;;5448:76:3;;;;;;;:::i;:::-;5558:9;:13;;;;;;;;;;;-1:-1:-1;;;;;5558:19:3;;;;;;;;;;5580:20;;;5558:42;;5620:17;;;;;;;:27;;5580:20;;5558:9;5620:27;;5580:20;;5620:27;:::i;:::-;;;;-1:-1:-1;;5663:46:3;;;12442:25:25;;;12498:2;12483:18;;12476:34;;;-1:-1:-1;;;;;5663:46:3;;;;;;;;;;;;;;12415:18:25;5663:46:3;;;;;;;5790:68;5821:8;5831:4;5837:2;5841;5845:6;5853:4;5790:30;:68::i;:::-;5081:784;;;;4918:947;;;;;:::o;16116:792::-;-1:-1:-1;;;;;16348:13:3;;1702:19:11;:23;16344:558:3;;16383:79;;-1:-1:-1;;;16383:79:3;;-1:-1:-1;;;;;16383:43:3;;;;;:79;;16427:8;;16437:4;;16443:3;;16448:7;;16457:4;;16383:79;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16383:79:3;;;;;;;;-1:-1:-1;;16383:79:3;;;;;;;;;;;;:::i;:::-;;;16379:513;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;16768:6;16761:14;;-1:-1:-1;;;16761:14:3;;;;;;;;:::i;16379:513::-;;;16815:62;;-1:-1:-1;;;16815:62:3;;14669:2:25;16815:62:3;;;14651:21:25;14708:2;14688:18;;;14681:30;14747:34;14727:18;;;14720:62;-1:-1:-1;;;14798:18:25;;;14791:50;14858:19;;16815:62:3;14467:416:25;16379:513:3;-1:-1:-1;;;;;;16541:60:3;;-1:-1:-1;;;16541:60:3;16537:157;;16625:50;;-1:-1:-1;;;16625:50:3;;;;;;;:::i;16537:157::-;16463:245;16116:792;;;;;;:::o;16914:193::-;17033:16;;;17047:1;17033:16;;;;;;;;;16980;;17008:22;;17033:16;;;;;;;;;;;;-1:-1:-1;17033:16:3;17008:41;;17070:7;17059:5;17065:1;17059:8;;;;;;;;:::i;:::-;;;;;;;;;;:18;17095:5;16914:193;-1:-1:-1;;16914:193:3:o;15385:725::-;-1:-1:-1;;;;;15592:13:3;;1702:19:11;:23;15588:516:3;;15627:72;;-1:-1:-1;;;15627:72:3;;-1:-1:-1;;;;;15627:38:3;;;;;:72;;15666:8;;15676:4;;15682:2;;15686:6;;15694:4;;15627:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15627:72:3;;;;;;;;-1:-1:-1;;15627:72:3;;;;;;;;;;;;:::i;:::-;;;15623:471;;;;:::i;:::-;-1:-1:-1;;;;;;15748:55:3;;-1:-1:-1;;;15748:55:3;15744:152;;15827:50;;-1:-1:-1;;;15827:50:3;;;;;;;:::i;14:173:25:-;82:20;;-1:-1:-1;;;;;131:31:25;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:254::-;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;360:29;379:9;360:29;:::i;:::-;350:39;436:2;421:18;;;;408:32;;-1:-1:-1;;;192:254:25:o;633:131::-;-1:-1:-1;;;;;;707:32:25;;697:43;;687:71;;754:1;751;744:12;687:71;633:131;:::o;769:245::-;827:6;880:2;868:9;859:7;855:23;851:32;848:52;;;896:1;893;886:12;848:52;935:9;922:23;954:30;978:5;954:30;:::i;:::-;1003:5;769:245;-1:-1:-1;;;769:245:25:o;1211:180::-;1270:6;1323:2;1311:9;1302:7;1298:23;1294:32;1291:52;;;1339:1;1336;1329:12;1291:52;-1:-1:-1;1362:23:25;;1211:180;-1:-1:-1;1211:180:25:o;1396:423::-;1438:3;1476:5;1470:12;1503:6;1498:3;1491:19;1528:1;1538:162;1552:6;1549:1;1546:13;1538:162;;;1614:4;1670:13;;;1666:22;;1660:29;1642:11;;;1638:20;;1631:59;1567:12;1538:162;;;1542:3;1745:1;1738:4;1729:6;1724:3;1720:16;1716:27;1709:38;1808:4;1801:2;1797:7;1792:2;1784:6;1780:15;1776:29;1771:3;1767:39;1763:50;1756:57;;;1396:423;;;;:::o;1824:220::-;1973:2;1962:9;1955:21;1936:4;1993:45;2034:2;2023:9;2019:18;2011:6;1993:45;:::i;2049:127::-;2110:10;2105:3;2101:20;2098:1;2091:31;2141:4;2138:1;2131:15;2165:4;2162:1;2155:15;2181:249;2291:2;2272:13;;-1:-1:-1;;2268:27:25;2256:40;;2326:18;2311:34;;2347:22;;;2308:62;2305:88;;;2373:18;;:::i;:::-;2409:2;2402:22;-1:-1:-1;;2181:249:25:o;2435:183::-;2495:4;2528:18;2520:6;2517:30;2514:56;;;2550:18;;:::i;:::-;-1:-1:-1;2595:1:25;2591:14;2607:4;2587:25;;2435:183::o;2623:724::-;2677:5;2730:3;2723:4;2715:6;2711:17;2707:27;2697:55;;2748:1;2745;2738:12;2697:55;2784:6;2771:20;2810:4;2833:43;2873:2;2833:43;:::i;:::-;2905:2;2899:9;2917:31;2945:2;2937:6;2917:31;:::i;:::-;2983:18;;;3075:1;3071:10;;;;3059:23;;3055:32;;;3017:15;;;;-1:-1:-1;3099:15:25;;;3096:35;;;3127:1;3124;3117:12;3096:35;3163:2;3155:6;3151:15;3175:142;3191:6;3186:3;3183:15;3175:142;;;3257:17;;3245:30;;3295:12;;;;3208;;3175:142;;;-1:-1:-1;3335:6:25;2623:724;-1:-1:-1;;;;;;2623:724:25:o;3352:555::-;3394:5;3447:3;3440:4;3432:6;3428:17;3424:27;3414:55;;3465:1;3462;3455:12;3414:55;3501:6;3488:20;3527:18;3523:2;3520:26;3517:52;;;3549:18;;:::i;:::-;3598:2;3592:9;3610:67;3665:2;3646:13;;-1:-1:-1;;3642:27:25;3671:4;3638:38;3592:9;3610:67;:::i;:::-;3701:2;3693:6;3686:18;3747:3;3740:4;3735:2;3727:6;3723:15;3719:26;3716:35;3713:55;;;3764:1;3761;3754:12;3713:55;3828:2;3821:4;3813:6;3809:17;3802:4;3794:6;3790:17;3777:54;3875:1;3851:15;;;3868:4;3847:26;3840:37;;;;3855:6;3352:555;-1:-1:-1;;;3352:555:25:o;3912:943::-;4066:6;4074;4082;4090;4098;4151:3;4139:9;4130:7;4126:23;4122:33;4119:53;;;4168:1;4165;4158:12;4119:53;4191:29;4210:9;4191:29;:::i;:::-;4181:39;;4239:38;4273:2;4262:9;4258:18;4239:38;:::i;:::-;4229:48;;4328:2;4317:9;4313:18;4300:32;4351:18;4392:2;4384:6;4381:14;4378:34;;;4408:1;4405;4398:12;4378:34;4431:61;4484:7;4475:6;4464:9;4460:22;4431:61;:::i;:::-;4421:71;;4545:2;4534:9;4530:18;4517:32;4501:48;;4574:2;4564:8;4561:16;4558:36;;;4590:1;4587;4580:12;4558:36;4613:63;4668:7;4657:8;4646:9;4642:24;4613:63;:::i;:::-;4603:73;;4729:3;4718:9;4714:19;4701:33;4685:49;;4759:2;4749:8;4746:16;4743:36;;;4775:1;4772;4765:12;4743:36;;4798:51;4841:7;4830:8;4819:9;4815:24;4798:51;:::i;:::-;4788:61;;;3912:943;;;;;;;;:::o;4860:1208::-;4978:6;4986;5039:2;5027:9;5018:7;5014:23;5010:32;5007:52;;;5055:1;5052;5045:12;5007:52;5095:9;5082:23;5124:18;5165:2;5157:6;5154:14;5151:34;;;5181:1;5178;5171:12;5151:34;5219:6;5208:9;5204:22;5194:32;;5264:7;5257:4;5253:2;5249:13;5245:27;5235:55;;5286:1;5283;5276:12;5235:55;5322:2;5309:16;5344:4;5367:43;5407:2;5367:43;:::i;:::-;5439:2;5433:9;5451:31;5479:2;5471:6;5451:31;:::i;:::-;5517:18;;;5605:1;5601:10;;;;5593:19;;5589:28;;;5551:15;;;;-1:-1:-1;5629:19:25;;;5626:39;;;5661:1;5658;5651:12;5626:39;5685:11;;;;5705:148;5721:6;5716:3;5713:15;5705:148;;;5787:23;5806:3;5787:23;:::i;:::-;5775:36;;5738:12;;;;5831;;;;5705:148;;;5872:6;-1:-1:-1;;5916:18:25;;5903:32;;-1:-1:-1;;5947:16:25;;;5944:36;;;5976:1;5973;5966:12;5944:36;;5999:63;6054:7;6043:8;6032:9;6028:24;5999:63;:::i;:::-;5989:73;;;4860:1208;;;;;:::o;6073:435::-;6126:3;6164:5;6158:12;6191:6;6186:3;6179:19;6217:4;6246:2;6241:3;6237:12;6230:19;;6283:2;6276:5;6272:14;6304:1;6314:169;6328:6;6325:1;6322:13;6314:169;;;6389:13;;6377:26;;6423:12;;;;6458:15;;;;6350:1;6343:9;6314:169;;;-1:-1:-1;6499:3:25;;6073:435;-1:-1:-1;;;;;6073:435:25:o;6513:261::-;6692:2;6681:9;6674:21;6655:4;6712:56;6764:2;6753:9;6749:18;6741:6;6712:56;:::i;6779:347::-;6844:6;6852;6905:2;6893:9;6884:7;6880:23;6876:32;6873:52;;;6921:1;6918;6911:12;6873:52;6944:29;6963:9;6944:29;:::i;:::-;6934:39;;7023:2;7012:9;7008:18;6995:32;7070:5;7063:13;7056:21;7049:5;7046:32;7036:60;;7092:1;7089;7082:12;7036:60;7115:5;7105:15;;;6779:347;;;;;:::o;7131:260::-;7199:6;7207;7260:2;7248:9;7239:7;7235:23;7231:32;7228:52;;;7276:1;7273;7266:12;7228:52;7299:29;7318:9;7299:29;:::i;:::-;7289:39;;7347:38;7381:2;7370:9;7366:18;7347:38;:::i;:::-;7337:48;;7131:260;;;;;:::o;7396:606::-;7500:6;7508;7516;7524;7532;7585:3;7573:9;7564:7;7560:23;7556:33;7553:53;;;7602:1;7599;7592:12;7553:53;7625:29;7644:9;7625:29;:::i;:::-;7615:39;;7673:38;7707:2;7696:9;7692:18;7673:38;:::i;:::-;7663:48;;7758:2;7747:9;7743:18;7730:32;7720:42;;7809:2;7798:9;7794:18;7781:32;7771:42;;7864:3;7853:9;7849:19;7836:33;7892:18;7884:6;7881:30;7878:50;;;7924:1;7921;7914:12;7878:50;7947:49;7988:7;7979:6;7968:9;7964:22;7947:49;:::i;8418:380::-;8497:1;8493:12;;;;8540;;;8561:61;;8615:4;8607:6;8603:17;8593:27;;8561:61;8668:2;8660:6;8657:14;8637:18;8634:38;8631:161;;8714:10;8709:3;8705:20;8702:1;8695:31;8749:4;8746:1;8739:15;8777:4;8774:1;8767:15;8631:161;;8418:380;;;:::o;8803:410::-;9005:2;8987:21;;;9044:2;9024:18;;;9017:30;9083:34;9078:2;9063:18;;9056:62;-1:-1:-1;;;9149:2:25;9134:18;;9127:44;9203:3;9188:19;;8803:410::o;9628:127::-;9689:10;9684:3;9680:20;9677:1;9670:31;9720:4;9717:1;9710:15;9744:4;9741:1;9734:15;9760:127;9821:10;9816:3;9812:20;9809:1;9802:31;9852:4;9849:1;9842:15;9876:4;9873:1;9866:15;9892:135;9931:3;9952:17;;;9949:43;;9972:18;;:::i;:::-;-1:-1:-1;10019:1:25;10008:13;;9892:135::o;10441:401::-;10643:2;10625:21;;;10682:2;10662:18;;;10655:30;10721:34;10716:2;10701:18;;10694:62;-1:-1:-1;;;10787:2:25;10772:18;;10765:35;10832:3;10817:19;;10441:401::o;10847:406::-;11049:2;11031:21;;;11088:2;11068:18;;;11061:30;11127:34;11122:2;11107:18;;11100:62;-1:-1:-1;;;11193:2:25;11178:18;;11171:40;11243:3;11228:19;;10847:406::o;11258:125::-;11323:9;;;11344:10;;;11341:36;;;11357:18;;:::i;11388:465::-;11645:2;11634:9;11627:21;11608:4;11671:56;11723:2;11712:9;11708:18;11700:6;11671:56;:::i;:::-;11775:9;11767:6;11763:22;11758:2;11747:9;11743:18;11736:50;11803:44;11840:6;11832;11803:44;:::i;:::-;11795:52;11388:465;-1:-1:-1;;;;;11388:465:25:o;12521:827::-;-1:-1:-1;;;;;12918:15:25;;;12900:34;;12970:15;;12965:2;12950:18;;12943:43;12880:3;13017:2;13002:18;;12995:31;;;12843:4;;13049:57;;13086:19;;13078:6;13049:57;:::i;:::-;13154:9;13146:6;13142:22;13137:2;13126:9;13122:18;13115:50;13188:44;13225:6;13217;13188:44;:::i;:::-;13174:58;;13281:9;13273:6;13269:22;13263:3;13252:9;13248:19;13241:51;13309:33;13335:6;13327;13309:33;:::i;:::-;13301:41;12521:827;-1:-1:-1;;;;;;;;12521:827:25:o;13353:249::-;13422:6;13475:2;13463:9;13454:7;13450:23;13446:32;13443:52;;;13491:1;13488;13481:12;13443:52;13523:9;13517:16;13542:30;13566:5;13542:30;:::i;13607:179::-;13642:3;13684:1;13666:16;13663:23;13660:120;;;13730:1;13727;13724;13709:23;-1:-1:-1;13767:1:25;13761:8;13756:3;13752:18;13660:120;13607:179;:::o;13791:671::-;13830:3;13872:4;13854:16;13851:26;13848:39;;;13791:671;:::o;13848:39::-;13914:2;13908:9;-1:-1:-1;;13979:16:25;13975:25;;13972:1;13908:9;13951:50;14030:4;14024:11;14054:16;14089:18;14160:2;14153:4;14145:6;14141:17;14138:25;14133:2;14125:6;14122:14;14119:45;14116:58;;;14167:5;;;;;13791:671;:::o;14116:58::-;14204:6;14198:4;14194:17;14183:28;;14240:3;14234:10;14267:2;14259:6;14256:14;14253:27;;;14273:5;;;;;;13791:671;:::o;14253:27::-;14357:2;14338:16;14332:4;14328:27;14324:36;14317:4;14308:6;14303:3;14299:16;14295:27;14292:69;14289:82;;;14364:5;;;;;;13791:671;:::o;14289:82::-;14380:57;14431:4;14422:6;14414;14410:19;14406:30;14400:4;14380:57;:::i;:::-;-1:-1:-1;14453:3:25;;13791:671;-1:-1:-1;;;;;13791:671:25:o;14888:404::-;15090:2;15072:21;;;15129:2;15109:18;;;15102:30;15168:34;15163:2;15148:18;;15141:62;-1:-1:-1;;;15234:2:25;15219:18;;15212:38;15282:3;15267:19;;14888:404::o;15297:561::-;-1:-1:-1;;;;;15594:15:25;;;15576:34;;15646:15;;15641:2;15626:18;;15619:43;15693:2;15678:18;;15671:34;;;15736:2;15721:18;;15714:34;;;15556:3;15779;15764:19;;15757:32;;;15519:4;;15806:46;;15832:19;;15824:6;15806:46;:::i;:::-;15798:54;15297:561;-1:-1:-1;;;;;;;15297:561:25:o"},"gasEstimates":{"creation":{"codeDepositCost":"997800","executionCost":"infinite","totalCost":"infinite"},"external":{"balanceOf(address,uint256)":"2677","balanceOfBatch(address[],uint256[])":"infinite","isApprovedForAll(address,address)":"infinite","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"infinite","safeTransferFrom(address,address,uint256,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26705","supportsInterface(bytes4)":"555","uri(uint256)":"infinite"},"internal":{"_afterTokenTransfer(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_asSingletonArray(uint256)":"infinite","_beforeTokenTransfer(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_burn(address,uint256,uint256)":"infinite","_burnBatch(address,uint256[] memory,uint256[] memory)":"infinite","_doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes memory)":"infinite","_mint(address,uint256,uint256,bytes memory)":"infinite","_mintBatch(address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_safeBatchTransferFrom(address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_safeTransferFrom(address,address,uint256,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_setURI(string memory)":"infinite"}},"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the basic standard multi-token. See https://eips.ethereum.org/EIPS/eip-1155 Originally based on code by Enjin: https://github.com/enjin/erc-1155 _Available since v3.1._\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"constructor\":{\"details\":\"See {_setURI}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":\"ERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x81149353c99ccf8ff18af7701bc3f38665c7a97e344cdc0d27f927f03d22af0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":177,"contract":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":183,"contract":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155","label":"_operatorApprovals","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":185,"contract":"@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155","label":"_uri","offset":0,"slot":"2","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"IERC1155":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP]. _Available since v3.1._","events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP]. _Available since v3.1._\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":\"IERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"IERC1155Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"_Available since v3.1._","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match ids array)"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"_Available since v3.1._\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":\"IERC1155Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol":{"IERC1155MetadataURI":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the optional ERC1155MetadataExtension interface, as defined in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP]. _Available since v3.1._","events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"uri(uint256)":{"details":"Returns the URI for token type `id`. If the `\\{id\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the optional ERC1155MetadataExtension interface, as defined in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP]. _Available since v3.1._\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"uri(uint256)\":{\"details\":\"Returns the URI for token type `id`. If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":\"IERC1155MetadataURI\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1615":{"entryPoint":null,"id":1615,"parameterSlots":2,"returnSlots":0},"abi_decode_string_fromMemory":{"entryPoint":112,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":287,"id":null,"parameterSlots":2,"returnSlots":2},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":453,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":536,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":393,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":90,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4144:25","statements":[{"nodeType":"YulBlock","src":"6:3:25","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:25"},"nodeType":"YulFunctionCall","src":"66:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:25"},"nodeType":"YulFunctionCall","src":"56:31:25"},"nodeType":"YulExpressionStatement","src":"56:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:25","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:25"},"nodeType":"YulFunctionCall","src":"96:15:25"},"nodeType":"YulExpressionStatement","src":"96:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:25"},"nodeType":"YulFunctionCall","src":"120:15:25"},"nodeType":"YulExpressionStatement","src":"120:15:25"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:25"},{"body":{"nodeType":"YulBlock","src":"210:776:25","statements":[{"body":{"nodeType":"YulBlock","src":"259:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"268:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"271:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"261:6:25"},"nodeType":"YulFunctionCall","src":"261:12:25"},"nodeType":"YulExpressionStatement","src":"261:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"238:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"246:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"234:3:25"},"nodeType":"YulFunctionCall","src":"234:17:25"},{"name":"end","nodeType":"YulIdentifier","src":"253:3:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"230:3:25"},"nodeType":"YulFunctionCall","src":"230:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"223:6:25"},"nodeType":"YulFunctionCall","src":"223:35:25"},"nodeType":"YulIf","src":"220:55:25"},{"nodeType":"YulVariableDeclaration","src":"284:23:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"300:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"294:5:25"},"nodeType":"YulFunctionCall","src":"294:13:25"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"288:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"316:28:25","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:2:25","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"338:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"330:3:25"},"nodeType":"YulFunctionCall","src":"330:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"342:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"326:3:25"},"nodeType":"YulFunctionCall","src":"326:18:25"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"320:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"367:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"369:16:25"},"nodeType":"YulFunctionCall","src":"369:18:25"},"nodeType":"YulExpressionStatement","src":"369:18:25"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"359:2:25"},{"name":"_2","nodeType":"YulIdentifier","src":"363:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"356:2:25"},"nodeType":"YulFunctionCall","src":"356:10:25"},"nodeType":"YulIf","src":"353:36:25"},{"nodeType":"YulVariableDeclaration","src":"398:17:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"412:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"408:3:25"},"nodeType":"YulFunctionCall","src":"408:7:25"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"402:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"424:23:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:25","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"438:5:25"},"nodeType":"YulFunctionCall","src":"438:9:25"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"428:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"456:71:25","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"478:6:25"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"502:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"506:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"498:3:25"},"nodeType":"YulFunctionCall","src":"498:13:25"},{"name":"_3","nodeType":"YulIdentifier","src":"513:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"494:3:25"},"nodeType":"YulFunctionCall","src":"494:22:25"},{"kind":"number","nodeType":"YulLiteral","src":"518:2:25","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"490:3:25"},"nodeType":"YulFunctionCall","src":"490:31:25"},{"name":"_3","nodeType":"YulIdentifier","src":"523:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"486:3:25"},"nodeType":"YulFunctionCall","src":"486:40:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"474:3:25"},"nodeType":"YulFunctionCall","src":"474:53:25"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"460:10:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"586:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"588:16:25"},"nodeType":"YulFunctionCall","src":"588:18:25"},"nodeType":"YulExpressionStatement","src":"588:18:25"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"545:10:25"},{"name":"_2","nodeType":"YulIdentifier","src":"557:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"542:2:25"},"nodeType":"YulFunctionCall","src":"542:18:25"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"565:10:25"},{"name":"memPtr","nodeType":"YulIdentifier","src":"577:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"562:2:25"},"nodeType":"YulFunctionCall","src":"562:22:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"539:2:25"},"nodeType":"YulFunctionCall","src":"539:46:25"},"nodeType":"YulIf","src":"536:72:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"624:2:25","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"628:10:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"617:6:25"},"nodeType":"YulFunctionCall","src":"617:22:25"},"nodeType":"YulExpressionStatement","src":"617:22:25"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"655:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"663:2:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:25"},"nodeType":"YulFunctionCall","src":"648:18:25"},"nodeType":"YulExpressionStatement","src":"648:18:25"},{"nodeType":"YulVariableDeclaration","src":"675:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"685:4:25","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"679:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"735:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"744:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"747:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"737:6:25"},"nodeType":"YulFunctionCall","src":"737:12:25"},"nodeType":"YulExpressionStatement","src":"737:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"712:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"720:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"708:3:25"},"nodeType":"YulFunctionCall","src":"708:15:25"},{"name":"_4","nodeType":"YulIdentifier","src":"725:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"704:3:25"},"nodeType":"YulFunctionCall","src":"704:24:25"},{"name":"end","nodeType":"YulIdentifier","src":"730:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"701:2:25"},"nodeType":"YulFunctionCall","src":"701:33:25"},"nodeType":"YulIf","src":"698:53:25"},{"nodeType":"YulVariableDeclaration","src":"760:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"769:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"764:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"825:87:25","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"854:6:25"},{"name":"i","nodeType":"YulIdentifier","src":"862:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"850:3:25"},"nodeType":"YulFunctionCall","src":"850:14:25"},{"name":"_4","nodeType":"YulIdentifier","src":"866:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"846:3:25"},"nodeType":"YulFunctionCall","src":"846:23:25"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"885:6:25"},{"name":"i","nodeType":"YulIdentifier","src":"893:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"881:3:25"},"nodeType":"YulFunctionCall","src":"881:14:25"},{"name":"_4","nodeType":"YulIdentifier","src":"897:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"877:3:25"},"nodeType":"YulFunctionCall","src":"877:23:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"871:5:25"},"nodeType":"YulFunctionCall","src":"871:30:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"839:6:25"},"nodeType":"YulFunctionCall","src":"839:63:25"},"nodeType":"YulExpressionStatement","src":"839:63:25"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"790:1:25"},{"name":"_1","nodeType":"YulIdentifier","src":"793:2:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"787:2:25"},"nodeType":"YulFunctionCall","src":"787:9:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"797:19:25","statements":[{"nodeType":"YulAssignment","src":"799:15:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"808:1:25"},{"name":"_4","nodeType":"YulIdentifier","src":"811:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:25"},"nodeType":"YulFunctionCall","src":"804:10:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"799:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"783:3:25","statements":[]},"src":"779:133:25"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"936:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"944:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"932:3:25"},"nodeType":"YulFunctionCall","src":"932:15:25"},{"name":"_4","nodeType":"YulIdentifier","src":"949:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"928:3:25"},"nodeType":"YulFunctionCall","src":"928:24:25"},{"kind":"number","nodeType":"YulLiteral","src":"954:1:25","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"921:6:25"},"nodeType":"YulFunctionCall","src":"921:35:25"},"nodeType":"YulExpressionStatement","src":"921:35:25"},{"nodeType":"YulAssignment","src":"965:15:25","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"974:6:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"965:5:25"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"184:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"192:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"200:5:25","type":""}],"src":"146:840:25"},{"body":{"nodeType":"YulBlock","src":"1109:444:25","statements":[{"body":{"nodeType":"YulBlock","src":"1155:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1164:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1167:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1157:6:25"},"nodeType":"YulFunctionCall","src":"1157:12:25"},"nodeType":"YulExpressionStatement","src":"1157:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1130:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"1139:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1126:3:25"},"nodeType":"YulFunctionCall","src":"1126:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"1151:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1122:3:25"},"nodeType":"YulFunctionCall","src":"1122:32:25"},"nodeType":"YulIf","src":"1119:52:25"},{"nodeType":"YulVariableDeclaration","src":"1180:30:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1200:9:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1194:5:25"},"nodeType":"YulFunctionCall","src":"1194:16:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1184:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1219:28:25","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1237:2:25","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1241:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1233:3:25"},"nodeType":"YulFunctionCall","src":"1233:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"1245:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1229:3:25"},"nodeType":"YulFunctionCall","src":"1229:18:25"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1223:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"1274:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1283:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1286:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1276:6:25"},"nodeType":"YulFunctionCall","src":"1276:12:25"},"nodeType":"YulExpressionStatement","src":"1276:12:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1262:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"1270:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1259:2:25"},"nodeType":"YulFunctionCall","src":"1259:14:25"},"nodeType":"YulIf","src":"1256:34:25"},{"nodeType":"YulAssignment","src":"1299:71:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1342:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"1353:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1338:3:25"},"nodeType":"YulFunctionCall","src":"1338:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1362:7:25"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1309:28:25"},"nodeType":"YulFunctionCall","src":"1309:61:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1299:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"1379:41:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1405:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1416:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1401:3:25"},"nodeType":"YulFunctionCall","src":"1401:18:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1395:5:25"},"nodeType":"YulFunctionCall","src":"1395:25:25"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1383:8:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"1449:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1458:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1461:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1451:6:25"},"nodeType":"YulFunctionCall","src":"1451:12:25"},"nodeType":"YulExpressionStatement","src":"1451:12:25"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1435:8:25"},{"name":"_1","nodeType":"YulIdentifier","src":"1445:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1432:2:25"},"nodeType":"YulFunctionCall","src":"1432:16:25"},"nodeType":"YulIf","src":"1429:36:25"},{"nodeType":"YulAssignment","src":"1474:73:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1517:9:25"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1528:8:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1513:3:25"},"nodeType":"YulFunctionCall","src":"1513:24:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1539:7:25"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1484:28:25"},"nodeType":"YulFunctionCall","src":"1484:63:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1474:6:25"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1067:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1078:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1090:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1098:6:25","type":""}],"src":"991:562:25"},{"body":{"nodeType":"YulBlock","src":"1613:325:25","statements":[{"nodeType":"YulAssignment","src":"1623:22:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1637:1:25","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1640:4:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1633:3:25"},"nodeType":"YulFunctionCall","src":"1633:12:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1623:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"1654:38:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1684:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"1690:1:25","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1680:3:25"},"nodeType":"YulFunctionCall","src":"1680:12:25"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1658:18:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"1731:31:25","statements":[{"nodeType":"YulAssignment","src":"1733:27:25","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1747:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"1755:4:25","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1743:3:25"},"nodeType":"YulFunctionCall","src":"1743:17:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1733:6:25"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1711:18:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1704:6:25"},"nodeType":"YulFunctionCall","src":"1704:26:25"},"nodeType":"YulIf","src":"1701:61:25"},{"body":{"nodeType":"YulBlock","src":"1821:111:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1842:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1849:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1854:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1845:3:25"},"nodeType":"YulFunctionCall","src":"1845:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1835:6:25"},"nodeType":"YulFunctionCall","src":"1835:31:25"},"nodeType":"YulExpressionStatement","src":"1835:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1886:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1889:4:25","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1879:6:25"},"nodeType":"YulFunctionCall","src":"1879:15:25"},"nodeType":"YulExpressionStatement","src":"1879:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1914:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1917:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1907:6:25"},"nodeType":"YulFunctionCall","src":"1907:15:25"},"nodeType":"YulExpressionStatement","src":"1907:15:25"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1777:18:25"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1800:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"1808:2:25","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1797:2:25"},"nodeType":"YulFunctionCall","src":"1797:14:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1774:2:25"},"nodeType":"YulFunctionCall","src":"1774:38:25"},"nodeType":"YulIf","src":"1771:161:25"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1593:4:25","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1602:6:25","type":""}],"src":"1558:380:25"},{"body":{"nodeType":"YulBlock","src":"1999:65:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2016:1:25","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"2019:3:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2009:6:25"},"nodeType":"YulFunctionCall","src":"2009:14:25"},"nodeType":"YulExpressionStatement","src":"2009:14:25"},{"nodeType":"YulAssignment","src":"2032:26:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2050:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2053:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2040:9:25"},"nodeType":"YulFunctionCall","src":"2040:18:25"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"2032:4:25"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1982:3:25","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"1990:4:25","type":""}],"src":"1943:121:25"},{"body":{"nodeType":"YulBlock","src":"2150:464:25","statements":[{"body":{"nodeType":"YulBlock","src":"2183:425:25","statements":[{"nodeType":"YulVariableDeclaration","src":"2197:11:25","value":{"kind":"number","nodeType":"YulLiteral","src":"2207:1:25","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2201:2:25","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2228:2:25"},{"name":"array","nodeType":"YulIdentifier","src":"2232:5:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2221:6:25"},"nodeType":"YulFunctionCall","src":"2221:17:25"},"nodeType":"YulExpressionStatement","src":"2221:17:25"},{"nodeType":"YulVariableDeclaration","src":"2251:31:25","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2273:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"2277:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2263:9:25"},"nodeType":"YulFunctionCall","src":"2263:19:25"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"2255:4:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2295:57:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2318:4:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2328:1:25","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2335:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"2347:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2331:3:25"},"nodeType":"YulFunctionCall","src":"2331:19:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2324:3:25"},"nodeType":"YulFunctionCall","src":"2324:27:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2314:3:25"},"nodeType":"YulFunctionCall","src":"2314:38:25"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"2299:11:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"2389:23:25","statements":[{"nodeType":"YulAssignment","src":"2391:19:25","value":{"name":"data","nodeType":"YulIdentifier","src":"2406:4:25"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"2391:11:25"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2371:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"2383:4:25","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2368:2:25"},"nodeType":"YulFunctionCall","src":"2368:20:25"},"nodeType":"YulIf","src":"2365:47:25"},{"nodeType":"YulVariableDeclaration","src":"2425:41:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2439:4:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2449:1:25","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2456:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"2461:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2452:3:25"},"nodeType":"YulFunctionCall","src":"2452:12:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2445:3:25"},"nodeType":"YulFunctionCall","src":"2445:20:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2435:3:25"},"nodeType":"YulFunctionCall","src":"2435:31:25"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2429:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2479:24:25","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"2492:11:25"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"2483:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"2577:21:25","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2586:5:25"},{"name":"_1","nodeType":"YulIdentifier","src":"2593:2:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2579:6:25"},"nodeType":"YulFunctionCall","src":"2579:17:25"},"nodeType":"YulExpressionStatement","src":"2579:17:25"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2527:5:25"},{"name":"_2","nodeType":"YulIdentifier","src":"2534:2:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2524:2:25"},"nodeType":"YulFunctionCall","src":"2524:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2538:26:25","statements":[{"nodeType":"YulAssignment","src":"2540:22:25","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2553:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"2560:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2549:3:25"},"nodeType":"YulFunctionCall","src":"2549:13:25"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2540:5:25"}]}]},"pre":{"nodeType":"YulBlock","src":"2520:3:25","statements":[]},"src":"2516:82:25"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2166:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"2171:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2163:2:25"},"nodeType":"YulFunctionCall","src":"2163:11:25"},"nodeType":"YulIf","src":"2160:448:25"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2122:5:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"2129:3:25","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2134:10:25","type":""}],"src":"2069:545:25"},{"body":{"nodeType":"YulBlock","src":"2704:81:25","statements":[{"nodeType":"YulAssignment","src":"2714:65:25","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2729:4:25"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2747:1:25","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"2750:3:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2743:3:25"},"nodeType":"YulFunctionCall","src":"2743:11:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2760:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2756:3:25"},"nodeType":"YulFunctionCall","src":"2756:6:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2739:3:25"},"nodeType":"YulFunctionCall","src":"2739:24:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2735:3:25"},"nodeType":"YulFunctionCall","src":"2735:29:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2725:3:25"},"nodeType":"YulFunctionCall","src":"2725:40:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2771:1:25","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"2774:3:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2767:3:25"},"nodeType":"YulFunctionCall","src":"2767:11:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2722:2:25"},"nodeType":"YulFunctionCall","src":"2722:57:25"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"2714:4:25"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2681:4:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"2687:3:25","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"2695:4:25","type":""}],"src":"2619:166:25"},{"body":{"nodeType":"YulBlock","src":"2886:1256:25","statements":[{"nodeType":"YulVariableDeclaration","src":"2896:24:25","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2916:3:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2910:5:25"},"nodeType":"YulFunctionCall","src":"2910:10:25"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"2900:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"2963:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2965:16:25"},"nodeType":"YulFunctionCall","src":"2965:18:25"},"nodeType":"YulExpressionStatement","src":"2965:18:25"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2935:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2951:2:25","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2955:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2947:3:25"},"nodeType":"YulFunctionCall","src":"2947:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"2959:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2943:3:25"},"nodeType":"YulFunctionCall","src":"2943:18:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2932:2:25"},"nodeType":"YulFunctionCall","src":"2932:30:25"},"nodeType":"YulIf","src":"2929:56:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3038:4:25"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3076:4:25"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3070:5:25"},"nodeType":"YulFunctionCall","src":"3070:11:25"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"3044:25:25"},"nodeType":"YulFunctionCall","src":"3044:38:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"3084:6:25"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"2994:43:25"},"nodeType":"YulFunctionCall","src":"2994:97:25"},"nodeType":"YulExpressionStatement","src":"2994:97:25"},{"nodeType":"YulVariableDeclaration","src":"3100:18:25","value":{"kind":"number","nodeType":"YulLiteral","src":"3117:1:25","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"3104:9:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3127:23:25","value":{"kind":"number","nodeType":"YulLiteral","src":"3146:4:25","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"3131:11:25","type":""}]},{"nodeType":"YulAssignment","src":"3159:24:25","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3172:11:25"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3159:9:25"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"3229:656:25","statements":[{"nodeType":"YulVariableDeclaration","src":"3243:35:25","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3262:6:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3274:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3270:3:25"},"nodeType":"YulFunctionCall","src":"3270:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3258:3:25"},"nodeType":"YulFunctionCall","src":"3258:20:25"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"3247:7:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3291:49:25","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3335:4:25"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"3305:29:25"},"nodeType":"YulFunctionCall","src":"3305:35:25"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"3295:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3353:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"3362:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3357:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"3440:172:25","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3465:6:25"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3483:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3488:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3479:3:25"},"nodeType":"YulFunctionCall","src":"3479:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3473:5:25"},"nodeType":"YulFunctionCall","src":"3473:26:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3458:6:25"},"nodeType":"YulFunctionCall","src":"3458:42:25"},"nodeType":"YulExpressionStatement","src":"3458:42:25"},{"nodeType":"YulAssignment","src":"3517:24:25","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3531:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"3539:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3527:3:25"},"nodeType":"YulFunctionCall","src":"3527:14:25"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3517:6:25"}]},{"nodeType":"YulAssignment","src":"3558:40:25","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3575:9:25"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3586:11:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3571:3:25"},"nodeType":"YulFunctionCall","src":"3571:27:25"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3558:9:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3387:1:25"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"3390:7:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3384:2:25"},"nodeType":"YulFunctionCall","src":"3384:14:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3399:28:25","statements":[{"nodeType":"YulAssignment","src":"3401:24:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3410:1:25"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3413:11:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3406:3:25"},"nodeType":"YulFunctionCall","src":"3406:19:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3401:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"3380:3:25","statements":[]},"src":"3376:236:25"},{"body":{"nodeType":"YulBlock","src":"3660:166:25","statements":[{"nodeType":"YulVariableDeclaration","src":"3678:43:25","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3705:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3710:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3701:3:25"},"nodeType":"YulFunctionCall","src":"3701:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3695:5:25"},"nodeType":"YulFunctionCall","src":"3695:26:25"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"3682:9:25","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3745:6:25"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"3757:9:25"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3784:1:25","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"3787:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3780:3:25"},"nodeType":"YulFunctionCall","src":"3780:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"3796:3:25","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3776:3:25"},"nodeType":"YulFunctionCall","src":"3776:24:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3806:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3802:3:25"},"nodeType":"YulFunctionCall","src":"3802:6:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3772:3:25"},"nodeType":"YulFunctionCall","src":"3772:37:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3768:3:25"},"nodeType":"YulFunctionCall","src":"3768:42:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3753:3:25"},"nodeType":"YulFunctionCall","src":"3753:58:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3738:6:25"},"nodeType":"YulFunctionCall","src":"3738:74:25"},"nodeType":"YulExpressionStatement","src":"3738:74:25"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"3631:7:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"3640:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3628:2:25"},"nodeType":"YulFunctionCall","src":"3628:19:25"},"nodeType":"YulIf","src":"3625:201:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3846:4:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3860:1:25","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"3863:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3856:3:25"},"nodeType":"YulFunctionCall","src":"3856:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"3872:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3852:3:25"},"nodeType":"YulFunctionCall","src":"3852:22:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3839:6:25"},"nodeType":"YulFunctionCall","src":"3839:36:25"},"nodeType":"YulExpressionStatement","src":"3839:36:25"}]},"nodeType":"YulCase","src":"3222:663:25","value":{"kind":"number","nodeType":"YulLiteral","src":"3227:1:25","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"3902:234:25","statements":[{"nodeType":"YulVariableDeclaration","src":"3916:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"3929:1:25","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3920:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"3965:67:25","statements":[{"nodeType":"YulAssignment","src":"3983:35:25","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4002:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4007:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:25"},"nodeType":"YulFunctionCall","src":"3998:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3992:5:25"},"nodeType":"YulFunctionCall","src":"3992:26:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3983:5:25"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"3946:6:25"},"nodeType":"YulIf","src":"3943:89:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4052:4:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4111:5:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"4118:6:25"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"4058:52:25"},"nodeType":"YulFunctionCall","src":"4058:67:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4045:6:25"},"nodeType":"YulFunctionCall","src":"4045:81:25"},"nodeType":"YulExpressionStatement","src":"4045:81:25"}]},"nodeType":"YulCase","src":"3894:242:25","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3202:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"3210:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3199:2:25"},"nodeType":"YulFunctionCall","src":"3199:14:25"},"nodeType":"YulSwitch","src":"3192:944:25"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"2871:4:25","type":""},{"name":"src","nodeType":"YulTypedName","src":"2877:3:25","type":""}],"src":"2790:1352:25"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        mstore(add(add(memPtr, _1), _4), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":25,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x13E7 CODESIZE SUB DUP1 PUSH3 0x13E7 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x11F JUMP JUMPDEST PUSH1 0x0 PUSH3 0x42 DUP4 DUP3 PUSH3 0x218 JUMP JUMPDEST POP PUSH1 0x1 PUSH3 0x51 DUP3 DUP3 PUSH3 0x218 JUMP JUMPDEST POP POP POP PUSH3 0x2E4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x9F JUMPI PUSH3 0x9F PUSH3 0x5A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0xCA JUMPI PUSH3 0xCA PUSH3 0x5A JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0xE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x10B JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0xEC JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP2 ADD SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x133 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x14B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x159 DUP7 DUP4 DUP8 ADD PUSH3 0x70 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x170 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x17F DUP6 DUP3 DUP7 ADD PUSH3 0x70 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x19E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x1BF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x213 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x1EE JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x20F JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x1FA JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x234 JUMPI PUSH3 0x234 PUSH3 0x5A JUMP JUMPDEST PUSH3 0x24C DUP2 PUSH3 0x245 DUP5 SLOAD PUSH3 0x189 JUMP JUMPDEST DUP5 PUSH3 0x1C5 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x284 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x26B JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x20F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x2B5 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x294 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x2D4 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x10F3 DUP1 PUSH3 0x2F4 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x111 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x164 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE7 PUSH2 0xE2 CALLDATASIZE PUSH1 0x4 PUSH2 0xC7F JUMP JUMPDEST PUSH2 0x228 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x27A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xCEC JUMP JUMPDEST PUSH2 0x124 PUSH2 0x11F CALLDATASIZE PUSH1 0x4 PUSH2 0xCFF JUMP JUMPDEST PUSH2 0x30C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF3 JUMP JUMPDEST PUSH2 0x14F PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0xD34 JUMP JUMPDEST PUSH2 0x333 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x14F PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0xD5E JUMP JUMPDEST PUSH2 0x44D JUMP JUMPDEST PUSH2 0x14F PUSH2 0x172 CALLDATASIZE PUSH1 0x4 PUSH2 0xD5E JUMP JUMPDEST PUSH2 0x47E JUMP JUMPDEST PUSH2 0x124 PUSH2 0x185 CALLDATASIZE PUSH1 0x4 PUSH2 0xCFF JUMP JUMPDEST PUSH2 0x499 JUMP JUMPDEST PUSH2 0x19D PUSH2 0x198 CALLDATASIZE PUSH1 0x4 PUSH2 0xD9A JUMP JUMPDEST PUSH2 0x4F9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF3 JUMP JUMPDEST PUSH2 0x104 PUSH2 0x57F JUMP JUMPDEST PUSH2 0x14F PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0xDB5 JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST PUSH2 0x14F PUSH2 0x1D4 CALLDATASIZE PUSH1 0x4 PUSH2 0xE07 JUMP JUMPDEST PUSH2 0x59D JUMP JUMPDEST PUSH2 0x104 PUSH2 0x1E7 CALLDATASIZE PUSH1 0x4 PUSH2 0xCFF JUMP JUMPDEST PUSH2 0x5D5 JUMP JUMPDEST PUSH2 0xE7 PUSH2 0x1FA CALLDATASIZE PUSH1 0x4 PUSH2 0xEE3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x259 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x274 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x289 SWAP1 PUSH2 0xF16 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B5 SWAP1 PUSH2 0xF16 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x302 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x302 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x317 DUP3 PUSH2 0x649 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33E DUP3 PUSH2 0x499 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x3B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x3CC JUMPI POP PUSH2 0x3CC DUP2 CALLER PUSH2 0x1FA JUMP JUMPDEST PUSH2 0x43E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH2 0x448 DUP4 DUP4 PUSH2 0x6AB JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x457 CALLER DUP3 PUSH2 0x719 JUMP JUMPDEST PUSH2 0x473 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0xF50 JUMP JUMPDEST PUSH2 0x448 DUP4 DUP4 DUP4 PUSH2 0x798 JUMP JUMPDEST PUSH2 0x448 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x59D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x274 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x563 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x289 SWAP1 PUSH2 0xF16 JUMP JUMPDEST PUSH2 0x599 CALLER DUP4 DUP4 PUSH2 0x8FC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x5A7 CALLER DUP4 PUSH2 0x719 JUMP JUMPDEST PUSH2 0x5C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0xF50 JUMP JUMPDEST PUSH2 0x5CF DUP5 DUP5 DUP5 DUP5 PUSH2 0x9CA JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5E0 DUP3 PUSH2 0x649 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F7 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x617 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x642 JUMP JUMPDEST DUP1 PUSH2 0x621 DUP5 PUSH2 0x9FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x632 SWAP3 SWAP2 SWAP1 PUSH2 0xF9D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x6E0 DUP3 PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x725 DUP4 PUSH2 0x499 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x76C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0x790 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x785 DUP5 PUSH2 0x30C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7AB DUP3 PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0xFCC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x833 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A7 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x846 DUP3 PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x86C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0xFCC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x95D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x9D5 DUP5 DUP5 DUP5 PUSH2 0x798 JUMP JUMPDEST PUSH2 0x9E1 DUP5 DUP5 DUP5 DUP5 PUSH2 0xA90 JUMP JUMPDEST PUSH2 0x5CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0x1011 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xA0A DUP4 PUSH2 0xB91 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA2A JUMPI PUSH2 0xA2A PUSH2 0xDF1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA54 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xA5E JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xB86 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xAD4 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1063 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xB0F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xB0C SWAP2 DUP2 ADD SWAP1 PUSH2 0x10A0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xB6C JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xB3D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB42 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xB64 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0x1011 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x790 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0xBD0 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xBFC JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xC1A JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xC32 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xC46 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xC58 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x274 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x6A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x642 DUP2 PUSH2 0xC69 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCB7 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC9F JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xCD8 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xC9C JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x642 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCC0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD50 DUP4 PUSH2 0xD18 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xD73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD7C DUP5 PUSH2 0xD18 JUMP JUMPDEST SWAP3 POP PUSH2 0xD8A PUSH1 0x20 DUP6 ADD PUSH2 0xD18 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x642 DUP3 PUSH2 0xD18 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDD1 DUP4 PUSH2 0xD18 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xDE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xE1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE26 DUP6 PUSH2 0xD18 JUMP JUMPDEST SWAP4 POP PUSH2 0xE34 PUSH1 0x20 DUP7 ADD PUSH2 0xD18 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xE7E JUMPI PUSH2 0xE7E PUSH2 0xDF1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xEA6 JUMPI PUSH2 0xEA6 PUSH2 0xDF1 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xEBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEFF DUP4 PUSH2 0xD18 JUMP JUMPDEST SWAP2 POP PUSH2 0xF0D PUSH1 0x20 DUP5 ADD PUSH2 0xD18 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xF2A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xF4A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0xFAF DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xC9C JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0xFC3 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xC9C JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1096 SWAP1 DUP4 ADD DUP5 PUSH2 0xCC0 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x642 DUP2 PUSH2 0xC69 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC 0xE9 CALLDATALOAD 0xB8 XOR 0xCE CODECOPY 0xBA 0xC5 0xC PREVRANDAO 0xC SELFBALANCE 0xED 0xD7 DIV PUSH12 0x22350AF4353CB77C1BC205F2 0x4F 0xB6 LOG3 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"628:16377:7:-:0;;;1390:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1456:5;:13;1464:5;1456;:13;:::i;:::-;-1:-1:-1;1479:7:7;:17;1489:7;1479;:17;:::i;:::-;;1390:113;;628:16377;;14:127:25;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:840;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:25;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:25;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;954:1;932:15;;;928:24;;;921:35;;;;936:6;146:840;-1:-1:-1;;;;146:840:25:o;991:562::-;1090:6;1098;1151:2;1139:9;1130:7;1126:23;1122:32;1119:52;;;1167:1;1164;1157:12;1119:52;1194:16;;-1:-1:-1;;;;;1259:14:25;;;1256:34;;;1286:1;1283;1276:12;1256:34;1309:61;1362:7;1353:6;1342:9;1338:22;1309:61;:::i;:::-;1299:71;;1416:2;1405:9;1401:18;1395:25;1379:41;;1445:2;1435:8;1432:16;1429:36;;;1461:1;1458;1451:12;1429:36;;1484:63;1539:7;1528:8;1517:9;1513:24;1484:63;:::i;:::-;1474:73;;;991:562;;;;;:::o;1558:380::-;1637:1;1633:12;;;;1680;;;1701:61;;1755:4;1747:6;1743:17;1733:27;;1701:61;1808:2;1800:6;1797:14;1777:18;1774:38;1771:161;;1854:10;1849:3;1845:20;1842:1;1835:31;1889:4;1886:1;1879:15;1917:4;1914:1;1907:15;1771:161;;1558:380;;;:::o;2069:545::-;2171:2;2166:3;2163:11;2160:448;;;2207:1;2232:5;2228:2;2221:17;2277:4;2273:2;2263:19;2347:2;2335:10;2331:19;2328:1;2324:27;2318:4;2314:38;2383:4;2371:10;2368:20;2365:47;;;-1:-1:-1;2406:4:25;2365:47;2461:2;2456:3;2452:12;2449:1;2445:20;2439:4;2435:31;2425:41;;2516:82;2534:2;2527:5;2524:13;2516:82;;;2579:17;;;2560:1;2549:13;2516:82;;;2520:3;;;2160:448;2069:545;;;:::o;2790:1352::-;2910:10;;-1:-1:-1;;;;;2932:30:25;;2929:56;;;2965:18;;:::i;:::-;2994:97;3084:6;3044:38;3076:4;3070:11;3044:38;:::i;:::-;3038:4;2994:97;:::i;:::-;3146:4;;3210:2;3199:14;;3227:1;3222:663;;;;3929:1;3946:6;3943:89;;;-1:-1:-1;3998:19:25;;;3992:26;3943:89;-1:-1:-1;;2747:1:25;2743:11;;;2739:24;2735:29;2725:40;2771:1;2767:11;;;2722:57;4045:81;;3192:944;;3222:663;2016:1;2009:14;;;2053:4;2040:18;;-1:-1:-1;;3258:20:25;;;3376:236;3390:7;3387:1;3384:14;3376:236;;;3479:19;;;3473:26;3458:42;;3571:27;;;;3539:1;3527:14;;;;3406:19;;3376:236;;;3380:3;3640:6;3631:7;3628:19;3625:201;;;3701:19;;;3695:26;-1:-1:-1;;3784:1:25;3780:14;;;3796:3;3776:24;3772:37;3768:42;3753:58;3738:74;;3625:201;-1:-1:-1;;;;;3872:1:25;3856:14;;;3852:22;3839:36;;-1:-1:-1;2790:1352:25:o;:::-;628:16377:7;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_2463":{"entryPoint":null,"id":2463,"parameterSlots":4,"returnSlots":0},"@_approve_2329":{"entryPoint":1707,"id":2329,"parameterSlots":2,"returnSlots":0},"@_baseURI_1766":{"entryPoint":null,"id":1766,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_2450":{"entryPoint":null,"id":2450,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_2437":{"entryPoint":2704,"id":2437,"parameterSlots":4,"returnSlots":1},"@_exists_1998":{"entryPoint":null,"id":1998,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_2032":{"entryPoint":1817,"id":2032,"parameterSlots":2,"returnSlots":1},"@_msgSender_2982":{"entryPoint":null,"id":2982,"parameterSlots":0,"returnSlots":1},"@_ownerOf_1980":{"entryPoint":null,"id":1980,"parameterSlots":1,"returnSlots":1},"@_requireMinted_2375":{"entryPoint":1609,"id":2375,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_1967":{"entryPoint":2506,"id":1967,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_2361":{"entryPoint":2300,"id":2361,"parameterSlots":3,"returnSlots":0},"@_transfer_2305":{"entryPoint":1944,"id":2305,"parameterSlots":3,"returnSlots":0},"@approve_1809":{"entryPoint":819,"id":1809,"parameterSlots":2,"returnSlots":0},"@balanceOf_1670":{"entryPoint":1273,"id":1670,"parameterSlots":1,"returnSlots":1},"@getApproved_1827":{"entryPoint":780,"id":1827,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_1862":{"entryPoint":null,"id":1862,"parameterSlots":2,"returnSlots":1},"@isContract_2658":{"entryPoint":null,"id":2658,"parameterSlots":1,"returnSlots":1},"@log10_4963":{"entryPoint":2961,"id":4963,"parameterSlots":1,"returnSlots":1},"@name_1708":{"entryPoint":634,"id":1708,"parameterSlots":0,"returnSlots":1},"@ownerOf_1698":{"entryPoint":1177,"id":1698,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_1908":{"entryPoint":1150,"id":1908,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_1938":{"entryPoint":1437,"id":1938,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_1844":{"entryPoint":1422,"id":1844,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1646":{"entryPoint":552,"id":1646,"parameterSlots":1,"returnSlots":1},"@supportsInterface_4247":{"entryPoint":null,"id":4247,"parameterSlots":1,"returnSlots":1},"@symbol_1718":{"entryPoint":1407,"id":1718,"parameterSlots":0,"returnSlots":1},"@toString_3385":{"entryPoint":2557,"id":3385,"parameterSlots":1,"returnSlots":1},"@tokenURI_1757":{"entryPoint":1493,"id":1757,"parameterSlots":1,"returnSlots":1},"@transferFrom_1889":{"entryPoint":1101,"id":1889,"parameterSlots":3,"returnSlots":0},"abi_decode_address":{"entryPoint":3352,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3482,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":3811,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":3422,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":3591,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":3509,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":3380,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":3199,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":4256,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":3327,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":3264,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":3997,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4195,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3308,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3920,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4113,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4044,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":3228,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":3862,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3569,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":3177,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:10132:25","statements":[{"nodeType":"YulBlock","src":"6:3:25","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:87:25","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:25"},"nodeType":"YulFunctionCall","src":"125:12:25"},"nodeType":"YulExpressionStatement","src":"125:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"108:10:25","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"99:3:25"},"nodeType":"YulFunctionCall","src":"99:20:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:25"},"nodeType":"YulFunctionCall","src":"88:32:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:25"},"nodeType":"YulFunctionCall","src":"78:43:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:25"},"nodeType":"YulFunctionCall","src":"71:51:25"},"nodeType":"YulIf","src":"68:71:25"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:25","type":""}],"src":"14:131:25"},{"body":{"nodeType":"YulBlock","src":"219:176:25","statements":[{"body":{"nodeType":"YulBlock","src":"265:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"274:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"277:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"267:6:25"},"nodeType":"YulFunctionCall","src":"267:12:25"},"nodeType":"YulExpressionStatement","src":"267:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"240:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"249:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"236:3:25"},"nodeType":"YulFunctionCall","src":"236:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"261:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"232:3:25"},"nodeType":"YulFunctionCall","src":"232:32:25"},"nodeType":"YulIf","src":"229:52:25"},{"nodeType":"YulVariableDeclaration","src":"290:36:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"316:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"303:12:25"},"nodeType":"YulFunctionCall","src":"303:23:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"294:5:25","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"359:5:25"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"335:23:25"},"nodeType":"YulFunctionCall","src":"335:30:25"},"nodeType":"YulExpressionStatement","src":"335:30:25"},{"nodeType":"YulAssignment","src":"374:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"384:5:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"374:6:25"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"185:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"196:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"208:6:25","type":""}],"src":"150:245:25"},{"body":{"nodeType":"YulBlock","src":"495:92:25","statements":[{"nodeType":"YulAssignment","src":"505:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"517:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"528:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"513:3:25"},"nodeType":"YulFunctionCall","src":"513:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"505:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"547:9:25"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"572:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"565:6:25"},"nodeType":"YulFunctionCall","src":"565:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"558:6:25"},"nodeType":"YulFunctionCall","src":"558:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"540:6:25"},"nodeType":"YulFunctionCall","src":"540:41:25"},"nodeType":"YulExpressionStatement","src":"540:41:25"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"464:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"475:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"486:4:25","type":""}],"src":"400:187:25"},{"body":{"nodeType":"YulBlock","src":"658:184:25","statements":[{"nodeType":"YulVariableDeclaration","src":"668:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"677:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"672:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"737:63:25","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"762:3:25"},{"name":"i","nodeType":"YulIdentifier","src":"767:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"758:3:25"},"nodeType":"YulFunctionCall","src":"758:11:25"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"781:3:25"},{"name":"i","nodeType":"YulIdentifier","src":"786:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:25"},"nodeType":"YulFunctionCall","src":"777:11:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"771:5:25"},"nodeType":"YulFunctionCall","src":"771:18:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"751:6:25"},"nodeType":"YulFunctionCall","src":"751:39:25"},"nodeType":"YulExpressionStatement","src":"751:39:25"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"698:1:25"},{"name":"length","nodeType":"YulIdentifier","src":"701:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"695:2:25"},"nodeType":"YulFunctionCall","src":"695:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"709:19:25","statements":[{"nodeType":"YulAssignment","src":"711:15:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"720:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"723:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"716:3:25"},"nodeType":"YulFunctionCall","src":"716:10:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"711:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"691:3:25","statements":[]},"src":"687:113:25"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"820:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"825:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"816:3:25"},"nodeType":"YulFunctionCall","src":"816:16:25"},{"kind":"number","nodeType":"YulLiteral","src":"834:1:25","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"809:6:25"},"nodeType":"YulFunctionCall","src":"809:27:25"},"nodeType":"YulExpressionStatement","src":"809:27:25"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"636:3:25","type":""},{"name":"dst","nodeType":"YulTypedName","src":"641:3:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"646:6:25","type":""}],"src":"592:250:25"},{"body":{"nodeType":"YulBlock","src":"897:221:25","statements":[{"nodeType":"YulVariableDeclaration","src":"907:26:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"927:5:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"921:5:25"},"nodeType":"YulFunctionCall","src":"921:12:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"911:6:25","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"949:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"954:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"942:6:25"},"nodeType":"YulFunctionCall","src":"942:19:25"},"nodeType":"YulExpressionStatement","src":"942:19:25"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1009:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"1016:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1005:3:25"},"nodeType":"YulFunctionCall","src":"1005:16:25"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1027:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"1032:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1023:3:25"},"nodeType":"YulFunctionCall","src":"1023:14:25"},{"name":"length","nodeType":"YulIdentifier","src":"1039:6:25"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"970:34:25"},"nodeType":"YulFunctionCall","src":"970:76:25"},"nodeType":"YulExpressionStatement","src":"970:76:25"},{"nodeType":"YulAssignment","src":"1055:57:25","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1070:3:25"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1083:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"1091:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1079:3:25"},"nodeType":"YulFunctionCall","src":"1079:15:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1100:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1096:3:25"},"nodeType":"YulFunctionCall","src":"1096:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1075:3:25"},"nodeType":"YulFunctionCall","src":"1075:29:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1066:3:25"},"nodeType":"YulFunctionCall","src":"1066:39:25"},{"kind":"number","nodeType":"YulLiteral","src":"1107:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1062:3:25"},"nodeType":"YulFunctionCall","src":"1062:50:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1055:3:25"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"874:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"881:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"889:3:25","type":""}],"src":"847:271:25"},{"body":{"nodeType":"YulBlock","src":"1244:99:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1261:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1272:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1254:6:25"},"nodeType":"YulFunctionCall","src":"1254:21:25"},"nodeType":"YulExpressionStatement","src":"1254:21:25"},{"nodeType":"YulAssignment","src":"1284:53:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1310:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1322:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1333:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1318:3:25"},"nodeType":"YulFunctionCall","src":"1318:18:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1292:17:25"},"nodeType":"YulFunctionCall","src":"1292:45:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1284:4:25"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1213:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1224:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1235:4:25","type":""}],"src":"1123:220:25"},{"body":{"nodeType":"YulBlock","src":"1418:110:25","statements":[{"body":{"nodeType":"YulBlock","src":"1464:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1473:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1476:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1466:6:25"},"nodeType":"YulFunctionCall","src":"1466:12:25"},"nodeType":"YulExpressionStatement","src":"1466:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1439:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"1448:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1435:3:25"},"nodeType":"YulFunctionCall","src":"1435:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"1460:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1431:3:25"},"nodeType":"YulFunctionCall","src":"1431:32:25"},"nodeType":"YulIf","src":"1428:52:25"},{"nodeType":"YulAssignment","src":"1489:33:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1512:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1499:12:25"},"nodeType":"YulFunctionCall","src":"1499:23:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1489:6:25"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1384:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1395:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1407:6:25","type":""}],"src":"1348:180:25"},{"body":{"nodeType":"YulBlock","src":"1634:102:25","statements":[{"nodeType":"YulAssignment","src":"1644:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1656:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1667:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1652:3:25"},"nodeType":"YulFunctionCall","src":"1652:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1644:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1686:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1701:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1717:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1722:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1713:3:25"},"nodeType":"YulFunctionCall","src":"1713:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"1726:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1709:3:25"},"nodeType":"YulFunctionCall","src":"1709:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1697:3:25"},"nodeType":"YulFunctionCall","src":"1697:32:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1679:6:25"},"nodeType":"YulFunctionCall","src":"1679:51:25"},"nodeType":"YulExpressionStatement","src":"1679:51:25"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1603:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1614:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1625:4:25","type":""}],"src":"1533:203:25"},{"body":{"nodeType":"YulBlock","src":"1790:124:25","statements":[{"nodeType":"YulAssignment","src":"1800:29:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1822:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1809:12:25"},"nodeType":"YulFunctionCall","src":"1809:20:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1800:5:25"}]},{"body":{"nodeType":"YulBlock","src":"1892:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1901:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1904:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1894:6:25"},"nodeType":"YulFunctionCall","src":"1894:12:25"},"nodeType":"YulExpressionStatement","src":"1894:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1851:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1862:5:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1877:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1882:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1873:3:25"},"nodeType":"YulFunctionCall","src":"1873:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"1886:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1869:3:25"},"nodeType":"YulFunctionCall","src":"1869:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1858:3:25"},"nodeType":"YulFunctionCall","src":"1858:31:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1848:2:25"},"nodeType":"YulFunctionCall","src":"1848:42:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1841:6:25"},"nodeType":"YulFunctionCall","src":"1841:50:25"},"nodeType":"YulIf","src":"1838:70:25"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1769:6:25","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1780:5:25","type":""}],"src":"1741:173:25"},{"body":{"nodeType":"YulBlock","src":"2006:167:25","statements":[{"body":{"nodeType":"YulBlock","src":"2052:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2061:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2064:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2054:6:25"},"nodeType":"YulFunctionCall","src":"2054:12:25"},"nodeType":"YulExpressionStatement","src":"2054:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2027:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"2036:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2023:3:25"},"nodeType":"YulFunctionCall","src":"2023:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"2048:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2019:3:25"},"nodeType":"YulFunctionCall","src":"2019:32:25"},"nodeType":"YulIf","src":"2016:52:25"},{"nodeType":"YulAssignment","src":"2077:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2106:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2087:18:25"},"nodeType":"YulFunctionCall","src":"2087:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2077:6:25"}]},{"nodeType":"YulAssignment","src":"2125:42:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2152:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"2163:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2148:3:25"},"nodeType":"YulFunctionCall","src":"2148:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2135:12:25"},"nodeType":"YulFunctionCall","src":"2135:32:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2125:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1964:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1975:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1987:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1995:6:25","type":""}],"src":"1919:254:25"},{"body":{"nodeType":"YulBlock","src":"2282:224:25","statements":[{"body":{"nodeType":"YulBlock","src":"2328:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2337:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2340:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2330:6:25"},"nodeType":"YulFunctionCall","src":"2330:12:25"},"nodeType":"YulExpressionStatement","src":"2330:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2303:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"2312:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2299:3:25"},"nodeType":"YulFunctionCall","src":"2299:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"2324:2:25","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2295:3:25"},"nodeType":"YulFunctionCall","src":"2295:32:25"},"nodeType":"YulIf","src":"2292:52:25"},{"nodeType":"YulAssignment","src":"2353:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2382:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2363:18:25"},"nodeType":"YulFunctionCall","src":"2363:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2353:6:25"}]},{"nodeType":"YulAssignment","src":"2401:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2434:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"2445:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2430:3:25"},"nodeType":"YulFunctionCall","src":"2430:18:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2411:18:25"},"nodeType":"YulFunctionCall","src":"2411:38:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2401:6:25"}]},{"nodeType":"YulAssignment","src":"2458:42:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2485:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"2496:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2481:3:25"},"nodeType":"YulFunctionCall","src":"2481:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2468:12:25"},"nodeType":"YulFunctionCall","src":"2468:32:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2458:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2232:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2243:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2255:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2263:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2271:6:25","type":""}],"src":"2178:328:25"},{"body":{"nodeType":"YulBlock","src":"2581:116:25","statements":[{"body":{"nodeType":"YulBlock","src":"2627:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2636:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2639:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2629:6:25"},"nodeType":"YulFunctionCall","src":"2629:12:25"},"nodeType":"YulExpressionStatement","src":"2629:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2602:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"2611:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2598:3:25"},"nodeType":"YulFunctionCall","src":"2598:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"2623:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2594:3:25"},"nodeType":"YulFunctionCall","src":"2594:32:25"},"nodeType":"YulIf","src":"2591:52:25"},{"nodeType":"YulAssignment","src":"2652:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2681:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2662:18:25"},"nodeType":"YulFunctionCall","src":"2662:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2652:6:25"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2547:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2558:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2570:6:25","type":""}],"src":"2511:186:25"},{"body":{"nodeType":"YulBlock","src":"2803:76:25","statements":[{"nodeType":"YulAssignment","src":"2813:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2825:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"2836:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2821:3:25"},"nodeType":"YulFunctionCall","src":"2821:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2813:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2855:9:25"},{"name":"value0","nodeType":"YulIdentifier","src":"2866:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2848:6:25"},"nodeType":"YulFunctionCall","src":"2848:25:25"},"nodeType":"YulExpressionStatement","src":"2848:25:25"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2772:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2783:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2794:4:25","type":""}],"src":"2702:177:25"},{"body":{"nodeType":"YulBlock","src":"2968:263:25","statements":[{"body":{"nodeType":"YulBlock","src":"3014:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3023:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3026:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3016:6:25"},"nodeType":"YulFunctionCall","src":"3016:12:25"},"nodeType":"YulExpressionStatement","src":"3016:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2989:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"2998:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2985:3:25"},"nodeType":"YulFunctionCall","src":"2985:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"3010:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2981:3:25"},"nodeType":"YulFunctionCall","src":"2981:32:25"},"nodeType":"YulIf","src":"2978:52:25"},{"nodeType":"YulAssignment","src":"3039:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3068:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3049:18:25"},"nodeType":"YulFunctionCall","src":"3049:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3039:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"3087:45:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3117:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3128:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3113:3:25"},"nodeType":"YulFunctionCall","src":"3113:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3100:12:25"},"nodeType":"YulFunctionCall","src":"3100:32:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3091:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"3185:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3194:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3197:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3187:6:25"},"nodeType":"YulFunctionCall","src":"3187:12:25"},"nodeType":"YulExpressionStatement","src":"3187:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3154:5:25"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3175:5:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3168:6:25"},"nodeType":"YulFunctionCall","src":"3168:13:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3161:6:25"},"nodeType":"YulFunctionCall","src":"3161:21:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3151:2:25"},"nodeType":"YulFunctionCall","src":"3151:32:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3144:6:25"},"nodeType":"YulFunctionCall","src":"3144:40:25"},"nodeType":"YulIf","src":"3141:60:25"},{"nodeType":"YulAssignment","src":"3210:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"3220:5:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3210:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2926:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2937:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2949:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2957:6:25","type":""}],"src":"2884:347:25"},{"body":{"nodeType":"YulBlock","src":"3268:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3285:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3292:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3297:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3288:3:25"},"nodeType":"YulFunctionCall","src":"3288:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3278:6:25"},"nodeType":"YulFunctionCall","src":"3278:31:25"},"nodeType":"YulExpressionStatement","src":"3278:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3325:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3328:4:25","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3318:6:25"},"nodeType":"YulFunctionCall","src":"3318:15:25"},"nodeType":"YulExpressionStatement","src":"3318:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3349:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3352:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3342:6:25"},"nodeType":"YulFunctionCall","src":"3342:15:25"},"nodeType":"YulExpressionStatement","src":"3342:15:25"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3236:127:25"},{"body":{"nodeType":"YulBlock","src":"3498:1008:25","statements":[{"body":{"nodeType":"YulBlock","src":"3545:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3554:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3557:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3547:6:25"},"nodeType":"YulFunctionCall","src":"3547:12:25"},"nodeType":"YulExpressionStatement","src":"3547:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3519:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"3528:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3515:3:25"},"nodeType":"YulFunctionCall","src":"3515:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"3540:3:25","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3511:3:25"},"nodeType":"YulFunctionCall","src":"3511:33:25"},"nodeType":"YulIf","src":"3508:53:25"},{"nodeType":"YulAssignment","src":"3570:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3599:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3580:18:25"},"nodeType":"YulFunctionCall","src":"3580:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3570:6:25"}]},{"nodeType":"YulAssignment","src":"3618:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3651:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3662:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3647:3:25"},"nodeType":"YulFunctionCall","src":"3647:18:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3628:18:25"},"nodeType":"YulFunctionCall","src":"3628:38:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3618:6:25"}]},{"nodeType":"YulAssignment","src":"3675:42:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3702:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3713:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3698:3:25"},"nodeType":"YulFunctionCall","src":"3698:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3685:12:25"},"nodeType":"YulFunctionCall","src":"3685:32:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3675:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"3726:46:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3757:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3768:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3753:3:25"},"nodeType":"YulFunctionCall","src":"3753:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3740:12:25"},"nodeType":"YulFunctionCall","src":"3740:32:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3730:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3781:28:25","value":{"kind":"number","nodeType":"YulLiteral","src":"3791:18:25","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3785:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"3836:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3845:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3848:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3838:6:25"},"nodeType":"YulFunctionCall","src":"3838:12:25"},"nodeType":"YulExpressionStatement","src":"3838:12:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3824:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"3832:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3821:2:25"},"nodeType":"YulFunctionCall","src":"3821:14:25"},"nodeType":"YulIf","src":"3818:34:25"},{"nodeType":"YulVariableDeclaration","src":"3861:32:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3875:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"3886:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3871:3:25"},"nodeType":"YulFunctionCall","src":"3871:22:25"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3865:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"3941:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3950:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3953:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3943:6:25"},"nodeType":"YulFunctionCall","src":"3943:12:25"},"nodeType":"YulExpressionStatement","src":"3943:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3920:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"3924:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3916:3:25"},"nodeType":"YulFunctionCall","src":"3916:13:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3931:7:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3912:3:25"},"nodeType":"YulFunctionCall","src":"3912:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3905:6:25"},"nodeType":"YulFunctionCall","src":"3905:35:25"},"nodeType":"YulIf","src":"3902:55:25"},{"nodeType":"YulVariableDeclaration","src":"3966:26:25","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3989:2:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3976:12:25"},"nodeType":"YulFunctionCall","src":"3976:16:25"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3970:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"4015:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4017:16:25"},"nodeType":"YulFunctionCall","src":"4017:18:25"},"nodeType":"YulExpressionStatement","src":"4017:18:25"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4007:2:25"},{"name":"_1","nodeType":"YulIdentifier","src":"4011:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4004:2:25"},"nodeType":"YulFunctionCall","src":"4004:10:25"},"nodeType":"YulIf","src":"4001:36:25"},{"nodeType":"YulVariableDeclaration","src":"4046:17:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4060:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4056:3:25"},"nodeType":"YulFunctionCall","src":"4056:7:25"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"4050:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4072:23:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4092:2:25","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4086:5:25"},"nodeType":"YulFunctionCall","src":"4086:9:25"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4076:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4104:71:25","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4126:6:25"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4150:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"4154:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4146:3:25"},"nodeType":"YulFunctionCall","src":"4146:13:25"},{"name":"_4","nodeType":"YulIdentifier","src":"4161:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4142:3:25"},"nodeType":"YulFunctionCall","src":"4142:22:25"},{"kind":"number","nodeType":"YulLiteral","src":"4166:2:25","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4138:3:25"},"nodeType":"YulFunctionCall","src":"4138:31:25"},{"name":"_4","nodeType":"YulIdentifier","src":"4171:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4134:3:25"},"nodeType":"YulFunctionCall","src":"4134:40:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4122:3:25"},"nodeType":"YulFunctionCall","src":"4122:53:25"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"4108:10:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"4234:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4236:16:25"},"nodeType":"YulFunctionCall","src":"4236:18:25"},"nodeType":"YulExpressionStatement","src":"4236:18:25"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4193:10:25"},{"name":"_1","nodeType":"YulIdentifier","src":"4205:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4190:2:25"},"nodeType":"YulFunctionCall","src":"4190:18:25"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4213:10:25"},{"name":"memPtr","nodeType":"YulIdentifier","src":"4225:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4210:2:25"},"nodeType":"YulFunctionCall","src":"4210:22:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4187:2:25"},"nodeType":"YulFunctionCall","src":"4187:46:25"},"nodeType":"YulIf","src":"4184:72:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4272:2:25","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4276:10:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4265:6:25"},"nodeType":"YulFunctionCall","src":"4265:22:25"},"nodeType":"YulExpressionStatement","src":"4265:22:25"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4303:6:25"},{"name":"_3","nodeType":"YulIdentifier","src":"4311:2:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4296:6:25"},"nodeType":"YulFunctionCall","src":"4296:18:25"},"nodeType":"YulExpressionStatement","src":"4296:18:25"},{"body":{"nodeType":"YulBlock","src":"4360:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4369:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4372:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4362:6:25"},"nodeType":"YulFunctionCall","src":"4362:12:25"},"nodeType":"YulExpressionStatement","src":"4362:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4337:2:25"},{"name":"_3","nodeType":"YulIdentifier","src":"4341:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4333:3:25"},"nodeType":"YulFunctionCall","src":"4333:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"4346:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4329:3:25"},"nodeType":"YulFunctionCall","src":"4329:20:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4351:7:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4326:2:25"},"nodeType":"YulFunctionCall","src":"4326:33:25"},"nodeType":"YulIf","src":"4323:53:25"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4402:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"4410:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4398:3:25"},"nodeType":"YulFunctionCall","src":"4398:15:25"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4419:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"4423:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4415:3:25"},"nodeType":"YulFunctionCall","src":"4415:11:25"},{"name":"_3","nodeType":"YulIdentifier","src":"4428:2:25"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4385:12:25"},"nodeType":"YulFunctionCall","src":"4385:46:25"},"nodeType":"YulExpressionStatement","src":"4385:46:25"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4455:6:25"},{"name":"_3","nodeType":"YulIdentifier","src":"4463:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4451:3:25"},"nodeType":"YulFunctionCall","src":"4451:15:25"},{"kind":"number","nodeType":"YulLiteral","src":"4468:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4447:3:25"},"nodeType":"YulFunctionCall","src":"4447:24:25"},{"kind":"number","nodeType":"YulLiteral","src":"4473:1:25","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4440:6:25"},"nodeType":"YulFunctionCall","src":"4440:35:25"},"nodeType":"YulExpressionStatement","src":"4440:35:25"},{"nodeType":"YulAssignment","src":"4484:16:25","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4494:6:25"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4484:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3440:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3451:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3463:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3471:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3479:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3487:6:25","type":""}],"src":"3368:1138:25"},{"body":{"nodeType":"YulBlock","src":"4598:173:25","statements":[{"body":{"nodeType":"YulBlock","src":"4644:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4653:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4656:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4646:6:25"},"nodeType":"YulFunctionCall","src":"4646:12:25"},"nodeType":"YulExpressionStatement","src":"4646:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4619:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"4628:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4615:3:25"},"nodeType":"YulFunctionCall","src":"4615:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"4640:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4611:3:25"},"nodeType":"YulFunctionCall","src":"4611:32:25"},"nodeType":"YulIf","src":"4608:52:25"},{"nodeType":"YulAssignment","src":"4669:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4698:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4679:18:25"},"nodeType":"YulFunctionCall","src":"4679:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4669:6:25"}]},{"nodeType":"YulAssignment","src":"4717:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4750:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"4761:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4746:3:25"},"nodeType":"YulFunctionCall","src":"4746:18:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4727:18:25"},"nodeType":"YulFunctionCall","src":"4727:38:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4717:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4556:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4567:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4579:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4587:6:25","type":""}],"src":"4511:260:25"},{"body":{"nodeType":"YulBlock","src":"4831:325:25","statements":[{"nodeType":"YulAssignment","src":"4841:22:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4855:1:25","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"4858:4:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4851:3:25"},"nodeType":"YulFunctionCall","src":"4851:12:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4841:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"4872:38:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4902:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"4908:1:25","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4898:3:25"},"nodeType":"YulFunctionCall","src":"4898:12:25"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"4876:18:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"4949:31:25","statements":[{"nodeType":"YulAssignment","src":"4951:27:25","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4965:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"4973:4:25","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4961:3:25"},"nodeType":"YulFunctionCall","src":"4961:17:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4951:6:25"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4929:18:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4922:6:25"},"nodeType":"YulFunctionCall","src":"4922:26:25"},"nodeType":"YulIf","src":"4919:61:25"},{"body":{"nodeType":"YulBlock","src":"5039:111:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5060:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5067:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5072:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5063:3:25"},"nodeType":"YulFunctionCall","src":"5063:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5053:6:25"},"nodeType":"YulFunctionCall","src":"5053:31:25"},"nodeType":"YulExpressionStatement","src":"5053:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5104:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5107:4:25","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5097:6:25"},"nodeType":"YulFunctionCall","src":"5097:15:25"},"nodeType":"YulExpressionStatement","src":"5097:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5132:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5135:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5125:6:25"},"nodeType":"YulFunctionCall","src":"5125:15:25"},"nodeType":"YulExpressionStatement","src":"5125:15:25"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4995:18:25"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5018:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"5026:2:25","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5015:2:25"},"nodeType":"YulFunctionCall","src":"5015:14:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4992:2:25"},"nodeType":"YulFunctionCall","src":"4992:38:25"},"nodeType":"YulIf","src":"4989:161:25"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"4811:4:25","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"4820:6:25","type":""}],"src":"4776:380:25"},{"body":{"nodeType":"YulBlock","src":"5335:223:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5352:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5363:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5345:6:25"},"nodeType":"YulFunctionCall","src":"5345:21:25"},"nodeType":"YulExpressionStatement","src":"5345:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5386:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5397:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5382:3:25"},"nodeType":"YulFunctionCall","src":"5382:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"5402:2:25","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5375:6:25"},"nodeType":"YulFunctionCall","src":"5375:30:25"},"nodeType":"YulExpressionStatement","src":"5375:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5425:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5436:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5421:3:25"},"nodeType":"YulFunctionCall","src":"5421:18:25"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"5441:34:25","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5414:6:25"},"nodeType":"YulFunctionCall","src":"5414:62:25"},"nodeType":"YulExpressionStatement","src":"5414:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5496:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5507:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5492:3:25"},"nodeType":"YulFunctionCall","src":"5492:18:25"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"5512:3:25","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5485:6:25"},"nodeType":"YulFunctionCall","src":"5485:31:25"},"nodeType":"YulExpressionStatement","src":"5485:31:25"},{"nodeType":"YulAssignment","src":"5525:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5537:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5548:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5533:3:25"},"nodeType":"YulFunctionCall","src":"5533:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5525:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5312:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5326:4:25","type":""}],"src":"5161:397:25"},{"body":{"nodeType":"YulBlock","src":"5737:251:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5754:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5765:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5747:6:25"},"nodeType":"YulFunctionCall","src":"5747:21:25"},"nodeType":"YulExpressionStatement","src":"5747:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5788:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5799:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5784:3:25"},"nodeType":"YulFunctionCall","src":"5784:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"5804:2:25","type":"","value":"61"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5777:6:25"},"nodeType":"YulFunctionCall","src":"5777:30:25"},"nodeType":"YulExpressionStatement","src":"5777:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5827:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5838:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5823:3:25"},"nodeType":"YulFunctionCall","src":"5823:18:25"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"5843:34:25","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5816:6:25"},"nodeType":"YulFunctionCall","src":"5816:62:25"},"nodeType":"YulExpressionStatement","src":"5816:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5898:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5909:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5894:3:25"},"nodeType":"YulFunctionCall","src":"5894:18:25"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"5914:31:25","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5887:6:25"},"nodeType":"YulFunctionCall","src":"5887:59:25"},"nodeType":"YulExpressionStatement","src":"5887:59:25"},{"nodeType":"YulAssignment","src":"5955:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5967:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5978:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5963:3:25"},"nodeType":"YulFunctionCall","src":"5963:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5955:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5714:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5728:4:25","type":""}],"src":"5563:425:25"},{"body":{"nodeType":"YulBlock","src":"6167:235:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6184:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"6195:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6177:6:25"},"nodeType":"YulFunctionCall","src":"6177:21:25"},"nodeType":"YulExpressionStatement","src":"6177:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6218:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"6229:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6214:3:25"},"nodeType":"YulFunctionCall","src":"6214:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"6234:2:25","type":"","value":"45"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6207:6:25"},"nodeType":"YulFunctionCall","src":"6207:30:25"},"nodeType":"YulExpressionStatement","src":"6207:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6257:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"6268:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6253:3:25"},"nodeType":"YulFunctionCall","src":"6253:18:25"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"6273:34:25","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6246:6:25"},"nodeType":"YulFunctionCall","src":"6246:62:25"},"nodeType":"YulExpressionStatement","src":"6246:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6328:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"6339:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6324:3:25"},"nodeType":"YulFunctionCall","src":"6324:18:25"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"6344:15:25","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6317:6:25"},"nodeType":"YulFunctionCall","src":"6317:43:25"},"nodeType":"YulExpressionStatement","src":"6317:43:25"},{"nodeType":"YulAssignment","src":"6369:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6381:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"6392:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6377:3:25"},"nodeType":"YulFunctionCall","src":"6377:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6369:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6144:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6158:4:25","type":""}],"src":"5993:409:25"},{"body":{"nodeType":"YulBlock","src":"6581:174:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6598:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"6609:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6591:6:25"},"nodeType":"YulFunctionCall","src":"6591:21:25"},"nodeType":"YulExpressionStatement","src":"6591:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6632:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"6643:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6628:3:25"},"nodeType":"YulFunctionCall","src":"6628:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"6648:2:25","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6621:6:25"},"nodeType":"YulFunctionCall","src":"6621:30:25"},"nodeType":"YulExpressionStatement","src":"6621:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6671:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"6682:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6667:3:25"},"nodeType":"YulFunctionCall","src":"6667:18:25"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"6687:26:25","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6660:6:25"},"nodeType":"YulFunctionCall","src":"6660:54:25"},"nodeType":"YulExpressionStatement","src":"6660:54:25"},{"nodeType":"YulAssignment","src":"6723:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6735:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"6746:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6731:3:25"},"nodeType":"YulFunctionCall","src":"6731:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6723:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6558:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6572:4:25","type":""}],"src":"6407:348:25"},{"body":{"nodeType":"YulBlock","src":"6934:231:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6951:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"6962:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6944:6:25"},"nodeType":"YulFunctionCall","src":"6944:21:25"},"nodeType":"YulExpressionStatement","src":"6944:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6985:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"6996:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6981:3:25"},"nodeType":"YulFunctionCall","src":"6981:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"7001:2:25","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6974:6:25"},"nodeType":"YulFunctionCall","src":"6974:30:25"},"nodeType":"YulExpressionStatement","src":"6974:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7024:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7035:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7020:3:25"},"nodeType":"YulFunctionCall","src":"7020:18:25"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"7040:34:25","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7013:6:25"},"nodeType":"YulFunctionCall","src":"7013:62:25"},"nodeType":"YulExpressionStatement","src":"7013:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7095:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7106:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7091:3:25"},"nodeType":"YulFunctionCall","src":"7091:18:25"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"7111:11:25","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7084:6:25"},"nodeType":"YulFunctionCall","src":"7084:39:25"},"nodeType":"YulExpressionStatement","src":"7084:39:25"},{"nodeType":"YulAssignment","src":"7132:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7144:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7155:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7140:3:25"},"nodeType":"YulFunctionCall","src":"7140:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7132:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6911:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6925:4:25","type":""}],"src":"6760:405:25"},{"body":{"nodeType":"YulBlock","src":"7357:309:25","statements":[{"nodeType":"YulVariableDeclaration","src":"7367:27:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7387:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7381:5:25"},"nodeType":"YulFunctionCall","src":"7381:13:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7371:6:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7442:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"7450:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7438:3:25"},"nodeType":"YulFunctionCall","src":"7438:17:25"},{"name":"pos","nodeType":"YulIdentifier","src":"7457:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"7462:6:25"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7403:34:25"},"nodeType":"YulFunctionCall","src":"7403:66:25"},"nodeType":"YulExpressionStatement","src":"7403:66:25"},{"nodeType":"YulVariableDeclaration","src":"7478:29:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7495:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"7500:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7491:3:25"},"nodeType":"YulFunctionCall","src":"7491:16:25"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"7482:5:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7516:29:25","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7538:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7532:5:25"},"nodeType":"YulFunctionCall","src":"7532:13:25"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"7520:8:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7593:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"7601:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7589:3:25"},"nodeType":"YulFunctionCall","src":"7589:17:25"},{"name":"end_1","nodeType":"YulIdentifier","src":"7608:5:25"},{"name":"length_1","nodeType":"YulIdentifier","src":"7615:8:25"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7554:34:25"},"nodeType":"YulFunctionCall","src":"7554:70:25"},"nodeType":"YulExpressionStatement","src":"7554:70:25"},{"nodeType":"YulAssignment","src":"7633:27:25","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"7644:5:25"},{"name":"length_1","nodeType":"YulIdentifier","src":"7651:8:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7640:3:25"},"nodeType":"YulFunctionCall","src":"7640:20:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7633:3:25"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7325:3:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7330:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7338:6:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7349:3:25","type":""}],"src":"7170:496:25"},{"body":{"nodeType":"YulBlock","src":"7845:227:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7862:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7873:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7855:6:25"},"nodeType":"YulFunctionCall","src":"7855:21:25"},"nodeType":"YulExpressionStatement","src":"7855:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7896:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7907:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7892:3:25"},"nodeType":"YulFunctionCall","src":"7892:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"7912:2:25","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7885:6:25"},"nodeType":"YulFunctionCall","src":"7885:30:25"},"nodeType":"YulExpressionStatement","src":"7885:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7935:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7946:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7931:3:25"},"nodeType":"YulFunctionCall","src":"7931:18:25"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"7951:34:25","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7924:6:25"},"nodeType":"YulFunctionCall","src":"7924:62:25"},"nodeType":"YulExpressionStatement","src":"7924:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8006:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8017:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8002:3:25"},"nodeType":"YulFunctionCall","src":"8002:18:25"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"8022:7:25","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7995:6:25"},"nodeType":"YulFunctionCall","src":"7995:35:25"},"nodeType":"YulExpressionStatement","src":"7995:35:25"},{"nodeType":"YulAssignment","src":"8039:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8051:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8062:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8047:3:25"},"nodeType":"YulFunctionCall","src":"8047:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8039:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7822:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7836:4:25","type":""}],"src":"7671:401:25"},{"body":{"nodeType":"YulBlock","src":"8251:226:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8268:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8279:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8261:6:25"},"nodeType":"YulFunctionCall","src":"8261:21:25"},"nodeType":"YulExpressionStatement","src":"8261:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8302:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8313:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8298:3:25"},"nodeType":"YulFunctionCall","src":"8298:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"8318:2:25","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8291:6:25"},"nodeType":"YulFunctionCall","src":"8291:30:25"},"nodeType":"YulExpressionStatement","src":"8291:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8341:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8352:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8337:3:25"},"nodeType":"YulFunctionCall","src":"8337:18:25"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"8357:34:25","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8330:6:25"},"nodeType":"YulFunctionCall","src":"8330:62:25"},"nodeType":"YulExpressionStatement","src":"8330:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8412:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8423:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8408:3:25"},"nodeType":"YulFunctionCall","src":"8408:18:25"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"8428:6:25","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8401:6:25"},"nodeType":"YulFunctionCall","src":"8401:34:25"},"nodeType":"YulExpressionStatement","src":"8401:34:25"},{"nodeType":"YulAssignment","src":"8444:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8456:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8467:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8452:3:25"},"nodeType":"YulFunctionCall","src":"8452:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8444:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8228:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8242:4:25","type":""}],"src":"8077:400:25"},{"body":{"nodeType":"YulBlock","src":"8656:175:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8673:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8684:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8666:6:25"},"nodeType":"YulFunctionCall","src":"8666:21:25"},"nodeType":"YulExpressionStatement","src":"8666:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8707:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8718:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8703:3:25"},"nodeType":"YulFunctionCall","src":"8703:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"8723:2:25","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8696:6:25"},"nodeType":"YulFunctionCall","src":"8696:30:25"},"nodeType":"YulExpressionStatement","src":"8696:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8746:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8757:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8742:3:25"},"nodeType":"YulFunctionCall","src":"8742:18:25"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"8762:27:25","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8735:6:25"},"nodeType":"YulFunctionCall","src":"8735:55:25"},"nodeType":"YulExpressionStatement","src":"8735:55:25"},{"nodeType":"YulAssignment","src":"8799:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8811:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8822:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8807:3:25"},"nodeType":"YulFunctionCall","src":"8807:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8799:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8633:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8647:4:25","type":""}],"src":"8482:349:25"},{"body":{"nodeType":"YulBlock","src":"9010:240:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9027:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9038:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9020:6:25"},"nodeType":"YulFunctionCall","src":"9020:21:25"},"nodeType":"YulExpressionStatement","src":"9020:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9061:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9072:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9057:3:25"},"nodeType":"YulFunctionCall","src":"9057:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"9077:2:25","type":"","value":"50"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9050:6:25"},"nodeType":"YulFunctionCall","src":"9050:30:25"},"nodeType":"YulExpressionStatement","src":"9050:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9100:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9111:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9096:3:25"},"nodeType":"YulFunctionCall","src":"9096:18:25"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"9116:34:25","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9089:6:25"},"nodeType":"YulFunctionCall","src":"9089:62:25"},"nodeType":"YulExpressionStatement","src":"9089:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9171:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9182:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9167:3:25"},"nodeType":"YulFunctionCall","src":"9167:18:25"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"9187:20:25","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9160:6:25"},"nodeType":"YulFunctionCall","src":"9160:48:25"},"nodeType":"YulExpressionStatement","src":"9160:48:25"},{"nodeType":"YulAssignment","src":"9217:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9229:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9240:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9225:3:25"},"nodeType":"YulFunctionCall","src":"9225:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9217:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8987:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9001:4:25","type":""}],"src":"8836:414:25"},{"body":{"nodeType":"YulBlock","src":"9287:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9304:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9311:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9316:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9307:3:25"},"nodeType":"YulFunctionCall","src":"9307:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9297:6:25"},"nodeType":"YulFunctionCall","src":"9297:31:25"},"nodeType":"YulExpressionStatement","src":"9297:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9344:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9347:4:25","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9337:6:25"},"nodeType":"YulFunctionCall","src":"9337:15:25"},"nodeType":"YulExpressionStatement","src":"9337:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9368:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9371:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9361:6:25"},"nodeType":"YulFunctionCall","src":"9361:15:25"},"nodeType":"YulExpressionStatement","src":"9361:15:25"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"9255:127:25"},{"body":{"nodeType":"YulBlock","src":"9590:286:25","statements":[{"nodeType":"YulVariableDeclaration","src":"9600:29:25","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9618:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"9623:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9614:3:25"},"nodeType":"YulFunctionCall","src":"9614:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"9627:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9610:3:25"},"nodeType":"YulFunctionCall","src":"9610:19:25"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9604:2:25","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9645:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9660:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"9668:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9656:3:25"},"nodeType":"YulFunctionCall","src":"9656:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9638:6:25"},"nodeType":"YulFunctionCall","src":"9638:34:25"},"nodeType":"YulExpressionStatement","src":"9638:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9692:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9703:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9688:3:25"},"nodeType":"YulFunctionCall","src":"9688:18:25"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9712:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"9720:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9708:3:25"},"nodeType":"YulFunctionCall","src":"9708:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9681:6:25"},"nodeType":"YulFunctionCall","src":"9681:43:25"},"nodeType":"YulExpressionStatement","src":"9681:43:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9744:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9755:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9740:3:25"},"nodeType":"YulFunctionCall","src":"9740:18:25"},{"name":"value2","nodeType":"YulIdentifier","src":"9760:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9733:6:25"},"nodeType":"YulFunctionCall","src":"9733:34:25"},"nodeType":"YulExpressionStatement","src":"9733:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9787:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9798:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9783:3:25"},"nodeType":"YulFunctionCall","src":"9783:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"9803:3:25","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9776:6:25"},"nodeType":"YulFunctionCall","src":"9776:31:25"},"nodeType":"YulExpressionStatement","src":"9776:31:25"},{"nodeType":"YulAssignment","src":"9816:54:25","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"9842:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9854:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9865:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9850:3:25"},"nodeType":"YulFunctionCall","src":"9850:19:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"9824:17:25"},"nodeType":"YulFunctionCall","src":"9824:46:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9816:4:25"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9535:9:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9546:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9554:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9562:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9570:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9581:4:25","type":""}],"src":"9387:489:25"},{"body":{"nodeType":"YulBlock","src":"9961:169:25","statements":[{"body":{"nodeType":"YulBlock","src":"10007:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10016:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10019:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10009:6:25"},"nodeType":"YulFunctionCall","src":"10009:12:25"},"nodeType":"YulExpressionStatement","src":"10009:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9982:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"9991:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9978:3:25"},"nodeType":"YulFunctionCall","src":"9978:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"10003:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9974:3:25"},"nodeType":"YulFunctionCall","src":"9974:32:25"},"nodeType":"YulIf","src":"9971:52:25"},{"nodeType":"YulVariableDeclaration","src":"10032:29:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10051:9:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10045:5:25"},"nodeType":"YulFunctionCall","src":"10045:16:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"10036:5:25","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10094:5:25"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"10070:23:25"},"nodeType":"YulFunctionCall","src":"10070:30:25"},"nodeType":"YulExpressionStatement","src":"10070:30:25"},{"nodeType":"YulAssignment","src":"10109:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"10119:5:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10109:6:25"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9927:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9938:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9950:6:25","type":""}],"src":"9881:249:25"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 61)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not to\")\n        mstore(add(headStart, 96), \"ken owner or approved for all\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC721: caller is not token owne\")\n        mstore(add(headStart, 96), \"r or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ERC721: invalid token ID\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: address zero is not a va\")\n        mstore(add(headStart, 96), \"lid owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC721: transfer from incorrect \")\n        mstore(add(headStart, 96), \"owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n}","id":25,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x111 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x164 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE7 PUSH2 0xE2 CALLDATASIZE PUSH1 0x4 PUSH2 0xC7F JUMP JUMPDEST PUSH2 0x228 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x27A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xCEC JUMP JUMPDEST PUSH2 0x124 PUSH2 0x11F CALLDATASIZE PUSH1 0x4 PUSH2 0xCFF JUMP JUMPDEST PUSH2 0x30C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF3 JUMP JUMPDEST PUSH2 0x14F PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0xD34 JUMP JUMPDEST PUSH2 0x333 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x14F PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0xD5E JUMP JUMPDEST PUSH2 0x44D JUMP JUMPDEST PUSH2 0x14F PUSH2 0x172 CALLDATASIZE PUSH1 0x4 PUSH2 0xD5E JUMP JUMPDEST PUSH2 0x47E JUMP JUMPDEST PUSH2 0x124 PUSH2 0x185 CALLDATASIZE PUSH1 0x4 PUSH2 0xCFF JUMP JUMPDEST PUSH2 0x499 JUMP JUMPDEST PUSH2 0x19D PUSH2 0x198 CALLDATASIZE PUSH1 0x4 PUSH2 0xD9A JUMP JUMPDEST PUSH2 0x4F9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF3 JUMP JUMPDEST PUSH2 0x104 PUSH2 0x57F JUMP JUMPDEST PUSH2 0x14F PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0xDB5 JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST PUSH2 0x14F PUSH2 0x1D4 CALLDATASIZE PUSH1 0x4 PUSH2 0xE07 JUMP JUMPDEST PUSH2 0x59D JUMP JUMPDEST PUSH2 0x104 PUSH2 0x1E7 CALLDATASIZE PUSH1 0x4 PUSH2 0xCFF JUMP JUMPDEST PUSH2 0x5D5 JUMP JUMPDEST PUSH2 0xE7 PUSH2 0x1FA CALLDATASIZE PUSH1 0x4 PUSH2 0xEE3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x259 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x274 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x289 SWAP1 PUSH2 0xF16 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B5 SWAP1 PUSH2 0xF16 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x302 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x302 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x317 DUP3 PUSH2 0x649 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33E DUP3 PUSH2 0x499 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x3B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x3CC JUMPI POP PUSH2 0x3CC DUP2 CALLER PUSH2 0x1FA JUMP JUMPDEST PUSH2 0x43E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH2 0x448 DUP4 DUP4 PUSH2 0x6AB JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x457 CALLER DUP3 PUSH2 0x719 JUMP JUMPDEST PUSH2 0x473 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0xF50 JUMP JUMPDEST PUSH2 0x448 DUP4 DUP4 DUP4 PUSH2 0x798 JUMP JUMPDEST PUSH2 0x448 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x59D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x274 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x563 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x289 SWAP1 PUSH2 0xF16 JUMP JUMPDEST PUSH2 0x599 CALLER DUP4 DUP4 PUSH2 0x8FC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x5A7 CALLER DUP4 PUSH2 0x719 JUMP JUMPDEST PUSH2 0x5C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0xF50 JUMP JUMPDEST PUSH2 0x5CF DUP5 DUP5 DUP5 DUP5 PUSH2 0x9CA JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5E0 DUP3 PUSH2 0x649 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F7 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x617 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x642 JUMP JUMPDEST DUP1 PUSH2 0x621 DUP5 PUSH2 0x9FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x632 SWAP3 SWAP2 SWAP1 PUSH2 0xF9D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x6E0 DUP3 PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x725 DUP4 PUSH2 0x499 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x76C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0x790 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x785 DUP5 PUSH2 0x30C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7AB DUP3 PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0xFCC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x833 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A7 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x846 DUP3 PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x86C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0xFCC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x95D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x9D5 DUP5 DUP5 DUP5 PUSH2 0x798 JUMP JUMPDEST PUSH2 0x9E1 DUP5 DUP5 DUP5 DUP5 PUSH2 0xA90 JUMP JUMPDEST PUSH2 0x5CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0x1011 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xA0A DUP4 PUSH2 0xB91 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA2A JUMPI PUSH2 0xA2A PUSH2 0xDF1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA54 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xA5E JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xB86 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xAD4 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1063 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xB0F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xB0C SWAP2 DUP2 ADD SWAP1 PUSH2 0x10A0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xB6C JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xB3D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB42 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xB64 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0x1011 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x790 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0xBD0 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xBFC JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xC1A JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xC32 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xC46 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xC58 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x274 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x6A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x642 DUP2 PUSH2 0xC69 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCB7 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC9F JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xCD8 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xC9C JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x642 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCC0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD50 DUP4 PUSH2 0xD18 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xD73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD7C DUP5 PUSH2 0xD18 JUMP JUMPDEST SWAP3 POP PUSH2 0xD8A PUSH1 0x20 DUP6 ADD PUSH2 0xD18 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x642 DUP3 PUSH2 0xD18 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDD1 DUP4 PUSH2 0xD18 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xDE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xE1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE26 DUP6 PUSH2 0xD18 JUMP JUMPDEST SWAP4 POP PUSH2 0xE34 PUSH1 0x20 DUP7 ADD PUSH2 0xD18 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xE7E JUMPI PUSH2 0xE7E PUSH2 0xDF1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xEA6 JUMPI PUSH2 0xEA6 PUSH2 0xDF1 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xEBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEFF DUP4 PUSH2 0xD18 JUMP JUMPDEST SWAP2 POP PUSH2 0xF0D PUSH1 0x20 DUP5 ADD PUSH2 0xD18 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xF2A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xF4A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0xFAF DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xC9C JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0xFC3 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xC9C JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1096 SWAP1 DUP4 ADD DUP5 PUSH2 0xCC0 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x642 DUP2 PUSH2 0xC69 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC 0xE9 CALLDATALOAD 0xB8 XOR 0xCE CODECOPY 0xBA 0xC5 0xC PREVRANDAO 0xC SELFBALANCE 0xED 0xD7 DIV PUSH12 0x22350AF4353CB77C1BC205F2 0x4F 0xB6 LOG3 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"628:16377:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300;;;;;;:::i;:::-;;:::i;:::-;;;565:14:25;;558:22;540:41;;528:2;513:18;1570:300:7;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;3935:167::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1697:32:25;;;1679:51;;1667:2;1652:18;3935:167:7;1533:203:25;3468:406:7;;;;;;:::i;:::-;;:::i;:::-;;4612:296;;;;;;:::i;:::-;;:::i;4974:149::-;;;;;;:::i;:::-;;:::i;2190:219::-;;;;;;:::i;:::-;;:::i;1929:204::-;;;;;;:::i;:::-;;:::i;:::-;;;2848:25:25;;;2836:2;2821:18;1929:204:7;2702:177:25;2633:102:7;;;:::i;4169:153::-;;;;;;:::i;:::-;;:::i;5189:276::-;;;;;;:::i;:::-;;:::i;2801:::-;;;;;;:::i;:::-;;:::i;4388:162::-;;;;;;:::i;:::-;-1:-1:-1;;;;;4508:25:7;;;4485:4;4508:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4388:162;1570:300;1672:4;-1:-1:-1;;;;;;1707:40:7;;-1:-1:-1;;;1707:40:7;;:104;;-1:-1:-1;;;;;;;1763:48:7;;-1:-1:-1;;;1763:48:7;1707:104;:156;;;-1:-1:-1;;;;;;;;;;937:40:19;;;1827:36:7;1688:175;1570:300;-1:-1:-1;;1570:300:7:o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;-1:-1:-1;4071:24:7;;;;:15;:24;;;;;;-1:-1:-1;;;;;4071:24:7;;3935:167::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;-1:-1:-1;;;;;3605:11:7;:2;-1:-1:-1;;;;;3605:11:7;;3597:57;;;;-1:-1:-1;;;3597:57:7;;5363:2:25;3597:57:7;;;5345:21:25;5402:2;5382:18;;;5375:30;5441:34;5421:18;;;5414:62;-1:-1:-1;;;5492:18:25;;;5485:31;5533:19;;3597:57:7;;;;;;;;;734:10:12;-1:-1:-1;;;;;3686:21:7;;;;:62;;-1:-1:-1;3711:37:7;3728:5;734:10:12;4388:162:7;:::i;3711:37::-;3665:170;;;;-1:-1:-1;;;3665:170:7;;5765:2:25;3665:170:7;;;5747:21:25;5804:2;5784:18;;;5777:30;5843:34;5823:18;;;5816:62;5914:31;5894:18;;;5887:59;5963:19;;3665:170:7;5563:425:25;3665:170:7;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;4612:296::-;4771:41;734:10:12;4804:7:7;4771:18;:41::i;:::-;4763:99;;;;-1:-1:-1;;;4763:99:7;;;;;;;:::i;:::-;4873:28;4883:4;4889:2;4893:7;4873:9;:28::i;4974:149::-;5077:39;5094:4;5100:2;5104:7;5077:39;;;;;;;;;;;;:16;:39::i;2190:219::-;2262:7;6794:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6794:16:7;;2324:56;;;;-1:-1:-1;;;2324:56:7;;6609:2:25;2324:56:7;;;6591:21:25;6648:2;6628:18;;;6621:30;-1:-1:-1;;;6667:18:25;;;6660:54;6731:18;;2324:56:7;6407:348:25;1929:204:7;2001:7;-1:-1:-1;;;;;2028:19:7;;2020:73;;;;-1:-1:-1;;;2020:73:7;;6962:2:25;2020:73:7;;;6944:21:25;7001:2;6981:18;;;6974:30;7040:34;7020:18;;;7013:62;-1:-1:-1;;;7091:18:25;;;7084:39;7140:19;;2020:73:7;6760:405:25;2020:73:7;-1:-1:-1;;;;;;2110:16:7;;;;;:9;:16;;;;;;;1929:204::o;2633:102::-;2689:13;2721:7;2714:14;;;;;:::i;4169:153::-;4263:52;734:10:12;4296:8:7;4306;4263:18;:52::i;:::-;4169:153;;:::o;5189:276::-;5319:41;734:10:12;5352:7:7;5319:18;:41::i;:::-;5311:99;;;;-1:-1:-1;;;5311:99:7;;;;;;;:::i;:::-;5420:38;5434:4;5440:2;5444:7;5453:4;5420:13;:38::i;:::-;5189:276;;;;:::o;2801:::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;3395:9;;;;;;;;;-1:-1:-1;3395:9:7;;;3319:92;2957:10;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;2801:276;-1:-1:-1;;;2801:276:7:o;13240:133::-;7185:4;6794:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6794:16:7;13313:53;;;;-1:-1:-1;;;13313:53:7;;6609:2:25;13313:53:7;;;6591:21:25;6648:2;6628:18;;;6621:30;-1:-1:-1;;;6667:18:25;;;6660:54;6731:18;;13313:53:7;6407:348:25;13313:53:7;13240:133;:::o;12572:171::-;12646:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;12646:29:7;-1:-1:-1;;;;;12646:29:7;;;;;;;;:24;;12699:23;12646:24;12699:14;:23::i;:::-;-1:-1:-1;;;;;12690:46:7;;;;;;;;;;;12572:171;;:::o;7404:261::-;7497:4;7513:13;7529:23;7544:7;7529:14;:23::i;:::-;7513:39;;7581:5;-1:-1:-1;;;;;7570:16:7;:7;-1:-1:-1;;;;;7570:16:7;;:52;;;-1:-1:-1;;;;;;4508:25:7;;;4485:4;4508:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;7590:32;7570:87;;;;7650:7;-1:-1:-1;;;;;7626:31:7;:20;7638:7;7626:11;:20::i;:::-;-1:-1:-1;;;;;7626:31:7;;7570:87;7562:96;7404:261;-1:-1:-1;;;;7404:261:7:o;11257:1203::-;11381:4;-1:-1:-1;;;;;11354:31:7;:23;11369:7;11354:14;:23::i;:::-;-1:-1:-1;;;;;11354:31:7;;11346:81;;;;-1:-1:-1;;;11346:81:7;;;;;;;:::i;:::-;-1:-1:-1;;;;;11445:16:7;;11437:65;;;;-1:-1:-1;;;11437:65:7;;8279:2:25;11437:65:7;;;8261:21:25;8318:2;8298:18;;;8291:30;8357:34;8337:18;;;8330:62;-1:-1:-1;;;8408:18:25;;;8401:34;8452:19;;11437:65:7;8077:400:25;11437:65:7;11682:4;-1:-1:-1;;;;;11655:31:7;:23;11670:7;11655:14;:23::i;:::-;-1:-1:-1;;;;;11655:31:7;;11647:81;;;;-1:-1:-1;;;11647:81:7;;;;;;;:::i;:::-;11797:24;;;;:15;:24;;;;;;;;11790:31;;-1:-1:-1;;;;;;11790:31:7;;;;;;-1:-1:-1;;;;;12265:15:7;;;;;;:9;:15;;;;;:20;;-1:-1:-1;;12265:20:7;;;12299:13;;;;;;;;;:18;;11790:31;12299:18;;;12337:16;;;:7;:16;;;;;;:21;;;;;;;;;;12374:27;;11813:7;;12374:27;;;3538:336;3468:406;;:::o;12879:277::-;12999:8;-1:-1:-1;;;;;12990:17:7;:5;-1:-1:-1;;;;;12990:17:7;;12982:55;;;;-1:-1:-1;;;12982:55:7;;8684:2:25;12982:55:7;;;8666:21:25;8723:2;8703:18;;;8696:30;8762:27;8742:18;;;8735:55;8807:18;;12982:55:7;8482:349:25;12982:55:7;-1:-1:-1;;;;;13047:25:7;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;13047:46:7;;;;;;;;;;13108:41;;540::25;;;13108::7;;513:18:25;13108:41:7;;;;;;;12879:277;;;:::o;6326:267::-;6438:28;6448:4;6454:2;6458:7;6438:9;:28::i;:::-;6484:47;6507:4;6513:2;6517:7;6526:4;6484:22;:47::i;:::-;6476:110;;;;-1:-1:-1;;;6476:110:7;;;;;;;:::i;447:696:15:-;503:13;552:14;569:17;580:5;569:10;:17::i;:::-;589:1;569:21;552:38;;604:20;638:6;627:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;627:18:15;-1:-1:-1;604:41:15;-1:-1:-1;765:28:15;;;781:2;765:28;820:280;-1:-1:-1;;851:5:15;-1:-1:-1;;;985:2:15;974:14;;969:30;851:5;956:44;1044:2;1035:11;;;-1:-1:-1;1064:21:15;820:280;1064:21;-1:-1:-1;1120:6:15;447:696;-1:-1:-1;;;447:696:15:o;13925:831:7:-;14074:4;-1:-1:-1;;;;;14094:13:7;;1702:19:11;:23;14090:660:7;;14129:71;;-1:-1:-1;;;14129:71:7;;-1:-1:-1;;;;;14129:36:7;;;;;:71;;734:10:12;;14180:4:7;;14186:7;;14195:4;;14129:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14129:71:7;;;;;;;;-1:-1:-1;;14129:71:7;;;;;;;;;;;;:::i;:::-;;;14125:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14367:6;:13;14384:1;14367:18;14363:321;;14409:60;;-1:-1:-1;;;14409:60:7;;;;;;;:::i;14363:321::-;14636:6;14630:13;14621:6;14617:2;14613:15;14606:38;14125:573;-1:-1:-1;;;;;;14250:51:7;-1:-1:-1;;;14250:51:7;;-1:-1:-1;14243:58:7;;14090:660;-1:-1:-1;14735:4:7;13925:831;;;;;;:::o;10139:916:21:-;10192:7;;-1:-1:-1;;;10267:17:21;;10263:103;;-1:-1:-1;;;10304:17:21;;;-1:-1:-1;10349:2:21;10339:12;10263:103;10392:8;10383:5;:17;10379:103;;10429:8;10420:17;;;-1:-1:-1;10465:2:21;10455:12;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;-1:-1:-1;10581:2:21;10571:12;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;-1:-1:-1;10695:1:21;10685:11;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;-1:-1:-1;10808:1:21;10798:11;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;-1:-1:-1;10921:1:21;10911:11;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;11042:6;10139:916;-1:-1:-1;;10139:916:21:o;14:131:25:-;-1:-1:-1;;;;;;88:32:25;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:250::-;677:1;687:113;701:6;698:1;695:13;687:113;;;777:11;;;771:18;758:11;;;751:39;723:2;716:10;687:113;;;-1:-1:-1;;834:1:25;816:16;;809:27;592:250::o;847:271::-;889:3;927:5;921:12;954:6;949:3;942:19;970:76;1039:6;1032:4;1027:3;1023:14;1016:4;1009:5;1005:16;970:76;:::i;:::-;1100:2;1079:15;-1:-1:-1;;1075:29:25;1066:39;;;;1107:4;1062:50;;847:271;-1:-1:-1;;847:271:25:o;1123:220::-;1272:2;1261:9;1254:21;1235:4;1292:45;1333:2;1322:9;1318:18;1310:6;1292:45;:::i;1348:180::-;1407:6;1460:2;1448:9;1439:7;1435:23;1431:32;1428:52;;;1476:1;1473;1466:12;1428:52;-1:-1:-1;1499:23:25;;1348:180;-1:-1:-1;1348:180:25:o;1741:173::-;1809:20;;-1:-1:-1;;;;;1858:31:25;;1848:42;;1838:70;;1904:1;1901;1894:12;1838:70;1741:173;;;:::o;1919:254::-;1987:6;1995;2048:2;2036:9;2027:7;2023:23;2019:32;2016:52;;;2064:1;2061;2054:12;2016:52;2087:29;2106:9;2087:29;:::i;:::-;2077:39;2163:2;2148:18;;;;2135:32;;-1:-1:-1;;;1919:254:25:o;2178:328::-;2255:6;2263;2271;2324:2;2312:9;2303:7;2299:23;2295:32;2292:52;;;2340:1;2337;2330:12;2292:52;2363:29;2382:9;2363:29;:::i;:::-;2353:39;;2411:38;2445:2;2434:9;2430:18;2411:38;:::i;:::-;2401:48;;2496:2;2485:9;2481:18;2468:32;2458:42;;2178:328;;;;;:::o;2511:186::-;2570:6;2623:2;2611:9;2602:7;2598:23;2594:32;2591:52;;;2639:1;2636;2629:12;2591:52;2662:29;2681:9;2662:29;:::i;2884:347::-;2949:6;2957;3010:2;2998:9;2989:7;2985:23;2981:32;2978:52;;;3026:1;3023;3016:12;2978:52;3049:29;3068:9;3049:29;:::i;:::-;3039:39;;3128:2;3117:9;3113:18;3100:32;3175:5;3168:13;3161:21;3154:5;3151:32;3141:60;;3197:1;3194;3187:12;3141:60;3220:5;3210:15;;;2884:347;;;;;:::o;3236:127::-;3297:10;3292:3;3288:20;3285:1;3278:31;3328:4;3325:1;3318:15;3352:4;3349:1;3342:15;3368:1138;3463:6;3471;3479;3487;3540:3;3528:9;3519:7;3515:23;3511:33;3508:53;;;3557:1;3554;3547:12;3508:53;3580:29;3599:9;3580:29;:::i;:::-;3570:39;;3628:38;3662:2;3651:9;3647:18;3628:38;:::i;:::-;3618:48;;3713:2;3702:9;3698:18;3685:32;3675:42;;3768:2;3757:9;3753:18;3740:32;3791:18;3832:2;3824:6;3821:14;3818:34;;;3848:1;3845;3838:12;3818:34;3886:6;3875:9;3871:22;3861:32;;3931:7;3924:4;3920:2;3916:13;3912:27;3902:55;;3953:1;3950;3943:12;3902:55;3989:2;3976:16;4011:2;4007;4004:10;4001:36;;;4017:18;;:::i;:::-;4092:2;4086:9;4060:2;4146:13;;-1:-1:-1;;4142:22:25;;;4166:2;4138:31;4134:40;4122:53;;;4190:18;;;4210:22;;;4187:46;4184:72;;;4236:18;;:::i;:::-;4276:10;4272:2;4265:22;4311:2;4303:6;4296:18;4351:7;4346:2;4341;4337;4333:11;4329:20;4326:33;4323:53;;;4372:1;4369;4362:12;4323:53;4428:2;4423;4419;4415:11;4410:2;4402:6;4398:15;4385:46;4473:1;4468:2;4463;4455:6;4451:15;4447:24;4440:35;4494:6;4484:16;;;;;;;3368:1138;;;;;;;:::o;4511:260::-;4579:6;4587;4640:2;4628:9;4619:7;4615:23;4611:32;4608:52;;;4656:1;4653;4646:12;4608:52;4679:29;4698:9;4679:29;:::i;:::-;4669:39;;4727:38;4761:2;4750:9;4746:18;4727:38;:::i;:::-;4717:48;;4511:260;;;;;:::o;4776:380::-;4855:1;4851:12;;;;4898;;;4919:61;;4973:4;4965:6;4961:17;4951:27;;4919:61;5026:2;5018:6;5015:14;4995:18;4992:38;4989:161;;5072:10;5067:3;5063:20;5060:1;5053:31;5107:4;5104:1;5097:15;5135:4;5132:1;5125:15;4989:161;;4776:380;;;:::o;5993:409::-;6195:2;6177:21;;;6234:2;6214:18;;;6207:30;6273:34;6268:2;6253:18;;6246:62;-1:-1:-1;;;6339:2:25;6324:18;;6317:43;6392:3;6377:19;;5993:409::o;7170:496::-;7349:3;7387:6;7381:13;7403:66;7462:6;7457:3;7450:4;7442:6;7438:17;7403:66;:::i;:::-;7532:13;;7491:16;;;;7554:70;7532:13;7491:16;7601:4;7589:17;;7554:70;:::i;:::-;7640:20;;7170:496;-1:-1:-1;;;;7170:496:25:o;7671:401::-;7873:2;7855:21;;;7912:2;7892:18;;;7885:30;7951:34;7946:2;7931:18;;7924:62;-1:-1:-1;;;8017:2:25;8002:18;;7995:35;8062:3;8047:19;;7671:401::o;8836:414::-;9038:2;9020:21;;;9077:2;9057:18;;;9050:30;9116:34;9111:2;9096:18;;9089:62;-1:-1:-1;;;9182:2:25;9167:18;;9160:48;9240:3;9225:19;;8836:414::o;9387:489::-;-1:-1:-1;;;;;9656:15:25;;;9638:34;;9708:15;;9703:2;9688:18;;9681:43;9755:2;9740:18;;9733:34;;;9803:3;9798:2;9783:18;;9776:31;;;9581:4;;9824:46;;9850:19;;9842:6;9824:46;:::i;:::-;9816:54;9387:489;-1:-1:-1;;;;;;9387:489:25:o;9881:249::-;9950:6;10003:2;9991:9;9982:7;9978:23;9974:32;9971:52;;;10019:1;10016;10009:12;9971:52;10051:9;10045:16;10070:30;10094:5;10070:30;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"867800","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2634","getApproved(uint256)":"4769","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"2561","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26705","supportsInterface(bytes4)":"511","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"},"internal":{"__unsafe_increaseBalance(address,uint256)":"infinite","_afterTokenTransfer(address,address,uint256,uint256)":"infinite","_approve(address,uint256)":"infinite","_baseURI()":"infinite","_beforeTokenTransfer(address,address,uint256,uint256)":"infinite","_burn(uint256)":"infinite","_checkOnERC721Received(address,address,uint256,bytes memory)":"infinite","_exists(uint256)":"infinite","_isApprovedOrOwner(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_ownerOf(uint256)":"infinite","_requireMinted(uint256)":"infinite","_safeMint(address,uint256)":"infinite","_safeMint(address,uint256,bytes memory)":"infinite","_safeTransfer(address,address,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1578,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":1580,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":1584,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":1588,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":1592,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":1598,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220763943e5289ca23d46fb4872ed18a2464026e0e2b63f1151766fa1bfff0461c364736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH23 0x3943E5289CA23D46FB4872ED18A2464026E0E2B63F1151 PUSH23 0x6FA1BFFF0461C364736F6C634300081300330000000000 ","sourceMap":"194:9169:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9169:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220763943e5289ca23d46fb4872ed18a2464026e0e2b63f1151766fa1bfff0461c364736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH23 0x3943E5289CA23D46FB4872ED18A2464026E0E2B63F1151 PUSH23 0x6FA1BFFF0461C364736F6C634300081300330000000000 ","sourceMap":"194:9169:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/ShortStrings.sol":{"ShortStrings":{"abi":[{"inputs":[],"name":"InvalidShortString","type":"error"},{"inputs":[{"internalType":"string","name":"str","type":"string"}],"name":"StringTooLong","type":"error"}],"devdoc":{"details":"This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220903f2e52d9a50ef307afa98bb449d058a8c6f19201106d3c0631288cf1bd9e2664736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP1 EXTCODEHASH 0x2E MSTORE 0xD9 0xA5 0xE RETURN SMOD 0xAF 0xA9 DUP12 0xB4 0x49 0xD0 PC 0xA8 0xC6 CALL SWAP3 ADD LT PUSH14 0x3C0631288CF1BD9E2664736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ","sourceMap":"1235:3050:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1235:3050:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220903f2e52d9a50ef307afa98bb449d058a8c6f19201106d3c0631288cf1bd9e2664736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP1 EXTCODEHASH 0x2E MSTORE 0xD9 0xA5 0xE RETURN SMOD 0xAF 0xA9 DUP12 0xB4 0x49 0xD0 PC 0xA8 0xC6 CALL SWAP3 ADD LT PUSH14 0x3C0631288CF1BD9E2664736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ","sourceMap":"1235:3050:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"byteLength(ShortString)":"infinite","byteLengthWithFallback(ShortString,string storage pointer)":"infinite","toShortString(string memory)":"infinite","toShortStringWithFallback(string memory,string storage pointer)":"infinite","toString(ShortString)":"infinite","toStringWithFallback(ShortString,string storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ShortStrings.sol\":\"ShortStrings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a2eefceaa9d156a219d5a5fe723f6ce58e8d965334c6dc6ba3f1119ae0961ded64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 0xEE 0xFC 0xEA 0xA9 0xD1 JUMP LOG2 NOT 0xD5 0xA5 INVALID PUSH19 0x3F6CE58E8D965334C6DC6BA3F1119AE0961DED PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"1420:2685:14:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1420:2685:14;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a2eefceaa9d156a219d5a5fe723f6ce58e8d965334c6dc6ba3f1119ae0961ded64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 0xEE 0xFC 0xEA 0xA9 0xD1 JUMP LOG2 NOT 0xD5 0xA5 INVALID PUSH19 0x3F6CE58E8D965334C6DC6BA3F1119AE0961DED PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"1420:2685:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f10e3915e24522481e5a1a0de9fa798046c1f8cc22bf352b4fbb68afaab1609064736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL 0xE CODECOPY ISZERO 0xE2 GASLIMIT 0x22 BASEFEE 0x1E GAS BYTE 0xD 0xE9 STATICCALL PUSH26 0x8046C1F8CC22BF352B4FBB68AFAAB1609064736F6C6343000813 STOP CALLER ","sourceMap":"220:2559:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;220:2559:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f10e3915e24522481e5a1a0de9fa798046c1f8cc22bf352b4fbb68afaab1609064736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL 0xE CODECOPY ISZERO 0xE2 GASLIMIT 0x22 BASEFEE 0x1E GAS BYTE 0xD 0xE9 STATICCALL PUSH26 0x8046C1F8CC22BF352B4FBB68AFAAB1609064736F6C6343000813 STOP CALLER ","sourceMap":"220:2559:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208895791e376eaf8c81409cfbd0204054511f325382985a4f20c38a59deffbaa664736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP9 SWAP6 PUSH26 0x1E376EAF8C81409CFBD0204054511F325382985A4F20C38A59DE SELFDESTRUCT 0xBA 0xA6 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"369:8761:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;369:8761:16;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208895791e376eaf8c81409cfbd0204054511f325382985a4f20c38a59deffbaa664736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP9 SWAP6 PUSH26 0x1E376EAF8C81409CFBD0204054511F325382985A4F20C38A59DE SELFDESTRUCT 0xBA 0xA6 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"369:8761:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_throwError(enum ECDSA.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toDataWithIntendedValidatorHash(address,bytes memory)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/EIP712.sol":{"EIP712":{"abi":[{"inputs":[],"name":"InvalidShortString","type":"error"},{"inputs":[{"internalType":"string","name":"str","type":"string"}],"name":"StringTooLong","type":"error"},{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"state-variable-immutable state-variable-assignment","details":"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage. _Available since v3.4._","events":{"EIP712DomainChanged()":{"details":"MAY be emitted to signal that the domain could have changed."}},"kind":"dev","methods":{"constructor":{"details":"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade]."},"eip712Domain()":{"details":"See {EIP-5267}. _Available since v4.9._"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"eip712Domain()":"84b0196e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable state-variable-assignment\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage. _Available since v3.4._\",\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8432884527a7ad91e6eed1cfc5a0811ae2073e5bca107bd0ca442e9236b03dbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3954,"contract":"@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712","label":"_nameFallback","offset":0,"slot":"0","type":"t_string_storage"},{"astId":3956,"contract":"@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712","label":"_versionFallback","offset":0,"slot":"1","type":"t_string_storage"}],"types":{"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol":{"SignatureChecker":{"abi":[],"devdoc":{"details":"Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like Argent and Gnosis Safe. _Available since v4.1._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220db3965c4b6912ed3759a0b378a5ddde90c93d972ff844dfd0c2ee3ada12f7de364736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDB CODECOPY PUSH6 0xC4B6912ED375 SWAP11 SIGNEXTEND CALLDATACOPY DUP11 0x5D 0xDD 0xE9 0xC SWAP4 0xD9 PUSH19 0xFF844DFD0C2EE3ADA12F7DE364736F6C634300 ADDMOD SGT STOP CALLER ","sourceMap":"506:1755:18:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;506:1755:18;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220db3965c4b6912ed3759a0b378a5ddde90c93d972ff844dfd0c2ee3ada12f7de364736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDB CODECOPY PUSH6 0xC4B6912ED375 SWAP11 SIGNEXTEND CALLDATACOPY DUP11 0x5D 0xDD 0xE9 0xC SWAP4 0xD9 PUSH19 0xFF844DFD0C2EE3ADA12F7DE364736F6C634300 ADDMOD SGT STOP CALLER ","sourceMap":"506:1755:18:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"isValidERC1271SignatureNow(address,bytes32,bytes memory)":"infinite","isValidSignatureNow(address,bytes32,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like Argent and Gnosis Safe. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":\"SignatureChecker\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x3af3ca86df39aac39a0514c84459d691434a108d2151c8ce9d69f32e315cab80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220765816f29ba456b8ec2a4d8f710cfa5de929f52bfee4c59cab2e4ee9b6dd7fb664736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH23 0x5816F29BA456B8EC2A4D8F710CFA5DE929F52BFEE4C59C 0xAB 0x2E 0x4E 0xE9 0xB6 0xDD PUSH32 0xB664736F6C634300081300330000000000000000000000000000000000000000 ","sourceMap":"202:12582:21:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12582:21;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220765816f29ba456b8ec2a4d8f710cfa5de929f52bfee4c59cab2e4ee9b6dd7fb664736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH23 0x5816F29BA456B8EC2A4D8F710CFA5DE929F52BFEE4C59C 0xAB 0x2E 0x4E 0xE9 0xB6 0xDD PUSH32 0xB664736F6C634300081300330000000000000000000000000000000000000000 ","sourceMap":"202:12582:21:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200808c2527f727a5dd582227df2fd31a2da483c5750fe3f1d935b0d386ac945c664736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD ADDMOD 0xC2 MSTORE PUSH32 0x727A5DD582227DF2FD31A2DA483C5750FE3F1D935B0D386AC945C664736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ","sourceMap":"215:1047:22:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;215:1047:22;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200808c2527f727a5dd582227df2fd31a2da483c5750fe3f1d935b0d386ac945c664736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD ADDMOD 0xC2 MSTORE PUSH32 0x727A5DD582227DF2FD31A2DA483C5750FE3F1D935B0D386AC945C664736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ","sourceMap":"215:1047:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/BasePaint.sol":{"BasePaint":{"abi":[{"inputs":[{"internalType":"contract IBasePaintBrush","name":"_brushes","type":"address"},{"internalType":"uint256","name":"_epochDuration","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"day","type":"uint256"},{"indexed":false,"internalType":"address","name":"author","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ArtistWithdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"day","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ArtistsEarned","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"}],"name":"OpenEditionPriceUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"}],"name":"OwnerFeeUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"to","type":"address"}],"name":"OwnerWithdrew","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"day","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"address","name":"author","type":"address"},{"indexed":false,"internalType":"bytes","name":"pixels","type":"bytes"}],"name":"Painted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"Started","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"uint256[]","name":"indexes","type":"uint256[]"}],"name":"authorWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"day","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"brushUsed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"brushes","outputs":[{"internalType":"contract IBasePaintBrush","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"canvases","outputs":[{"internalType":"uint256","name":"totalContributions","type":"uint256"},{"internalType":"uint256","name":"totalRaised","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"day","type":"uint256"},{"internalType":"address","name":"author","type":"address"}],"name":"contribution","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"epochDuration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"day","type":"uint256"},{"internalType":"uint256","name":"count","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"openEditionPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ownerEarned","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ownerFeePartsPerMillion","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"day","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"pixels","type":"bytes"}],"name":"paint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newPrice","type":"uint256"}],"name":"setOpenEditionPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"setOwnerFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"newuri","type":"string"}],"name":"setURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"start","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"startedAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"today","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_196":{"entryPoint":null,"id":196,"parameterSlots":1,"returnSlots":0},"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_5336":{"entryPoint":null,"id":5336,"parameterSlots":2,"returnSlots":0},"@_msgSender_2982":{"entryPoint":null,"id":2982,"parameterSlots":0,"returnSlots":1},"@_setURI_707":{"entryPoint":161,"id":707,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_111":{"entryPoint":179,"id":111,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_contract$_IBasePaintBrush_$5844t_uint256_fromMemory":{"entryPoint":261,"id":null,"parameterSlots":2,"returnSlots":2},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":403,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":486,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":343,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":321,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3112:25","statements":[{"nodeType":"YulBlock","src":"6:3:25","statements":[]},{"body":{"nodeType":"YulBlock","src":"136:253:25","statements":[{"body":{"nodeType":"YulBlock","src":"182:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"191:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"194:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"184:6:25"},"nodeType":"YulFunctionCall","src":"184:12:25"},"nodeType":"YulExpressionStatement","src":"184:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"157:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"166:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"153:3:25"},"nodeType":"YulFunctionCall","src":"153:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"178:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"149:3:25"},"nodeType":"YulFunctionCall","src":"149:32:25"},"nodeType":"YulIf","src":"146:52:25"},{"nodeType":"YulVariableDeclaration","src":"207:29:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"226:9:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"220:5:25"},"nodeType":"YulFunctionCall","src":"220:16:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"211:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"299:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"308:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"311:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"301:6:25"},"nodeType":"YulFunctionCall","src":"301:12:25"},"nodeType":"YulExpressionStatement","src":"301:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"258:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"269:5:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"284:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"289:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"280:3:25"},"nodeType":"YulFunctionCall","src":"280:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"293:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"276:3:25"},"nodeType":"YulFunctionCall","src":"276:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"265:3:25"},"nodeType":"YulFunctionCall","src":"265:31:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"255:2:25"},"nodeType":"YulFunctionCall","src":"255:42:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"248:6:25"},"nodeType":"YulFunctionCall","src":"248:50:25"},"nodeType":"YulIf","src":"245:70:25"},{"nodeType":"YulAssignment","src":"324:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"334:5:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"324:6:25"}]},{"nodeType":"YulAssignment","src":"348:35:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"368:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"379:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"364:3:25"},"nodeType":"YulFunctionCall","src":"364:18:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"358:5:25"},"nodeType":"YulFunctionCall","src":"358:25:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"348:6:25"}]}]},"name":"abi_decode_tuple_t_contract$_IBasePaintBrush_$5844t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"94:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"105:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"117:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"125:6:25","type":""}],"src":"14:375:25"},{"body":{"nodeType":"YulBlock","src":"426:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"443:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"450:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"455:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"446:3:25"},"nodeType":"YulFunctionCall","src":"446:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"436:6:25"},"nodeType":"YulFunctionCall","src":"436:31:25"},"nodeType":"YulExpressionStatement","src":"436:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"483:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"486:4:25","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"476:6:25"},"nodeType":"YulFunctionCall","src":"476:15:25"},"nodeType":"YulExpressionStatement","src":"476:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"507:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"510:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"500:6:25"},"nodeType":"YulFunctionCall","src":"500:15:25"},"nodeType":"YulExpressionStatement","src":"500:15:25"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"394:127:25"},{"body":{"nodeType":"YulBlock","src":"581:325:25","statements":[{"nodeType":"YulAssignment","src":"591:22:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"605:1:25","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"608:4:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"601:3:25"},"nodeType":"YulFunctionCall","src":"601:12:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"591:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"622:38:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"652:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"658:1:25","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"648:3:25"},"nodeType":"YulFunctionCall","src":"648:12:25"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"626:18:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"699:31:25","statements":[{"nodeType":"YulAssignment","src":"701:27:25","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"715:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"723:4:25","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"711:3:25"},"nodeType":"YulFunctionCall","src":"711:17:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"701:6:25"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"679:18:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"672:6:25"},"nodeType":"YulFunctionCall","src":"672:26:25"},"nodeType":"YulIf","src":"669:61:25"},{"body":{"nodeType":"YulBlock","src":"789:111:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"810:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"817:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"822:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"813:3:25"},"nodeType":"YulFunctionCall","src":"813:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"803:6:25"},"nodeType":"YulFunctionCall","src":"803:31:25"},"nodeType":"YulExpressionStatement","src":"803:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"854:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"857:4:25","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"847:6:25"},"nodeType":"YulFunctionCall","src":"847:15:25"},"nodeType":"YulExpressionStatement","src":"847:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"882:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"885:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"875:6:25"},"nodeType":"YulFunctionCall","src":"875:15:25"},"nodeType":"YulExpressionStatement","src":"875:15:25"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"745:18:25"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"768:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"776:2:25","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"765:2:25"},"nodeType":"YulFunctionCall","src":"765:14:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"742:2:25"},"nodeType":"YulFunctionCall","src":"742:38:25"},"nodeType":"YulIf","src":"739:161:25"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"561:4:25","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"570:6:25","type":""}],"src":"526:380:25"},{"body":{"nodeType":"YulBlock","src":"967:65:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"984:1:25","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"987:3:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"977:6:25"},"nodeType":"YulFunctionCall","src":"977:14:25"},"nodeType":"YulExpressionStatement","src":"977:14:25"},{"nodeType":"YulAssignment","src":"1000:26:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1018:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1021:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"1008:9:25"},"nodeType":"YulFunctionCall","src":"1008:18:25"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1000:4:25"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"950:3:25","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"958:4:25","type":""}],"src":"911:121:25"},{"body":{"nodeType":"YulBlock","src":"1118:464:25","statements":[{"body":{"nodeType":"YulBlock","src":"1151:425:25","statements":[{"nodeType":"YulVariableDeclaration","src":"1165:11:25","value":{"kind":"number","nodeType":"YulLiteral","src":"1175:1:25","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1169:2:25","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1196:2:25"},{"name":"array","nodeType":"YulIdentifier","src":"1200:5:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1189:6:25"},"nodeType":"YulFunctionCall","src":"1189:17:25"},"nodeType":"YulExpressionStatement","src":"1189:17:25"},{"nodeType":"YulVariableDeclaration","src":"1219:31:25","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1241:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"1245:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"1231:9:25"},"nodeType":"YulFunctionCall","src":"1231:19:25"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"1223:4:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1263:57:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1286:4:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1296:1:25","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"1303:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"1315:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1299:3:25"},"nodeType":"YulFunctionCall","src":"1299:19:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1292:3:25"},"nodeType":"YulFunctionCall","src":"1292:27:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1282:3:25"},"nodeType":"YulFunctionCall","src":"1282:38:25"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"1267:11:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"1357:23:25","statements":[{"nodeType":"YulAssignment","src":"1359:19:25","value":{"name":"data","nodeType":"YulIdentifier","src":"1374:4:25"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"1359:11:25"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"1339:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"1351:4:25","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1336:2:25"},"nodeType":"YulFunctionCall","src":"1336:20:25"},"nodeType":"YulIf","src":"1333:47:25"},{"nodeType":"YulVariableDeclaration","src":"1393:41:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1407:4:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1417:1:25","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"1424:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"1429:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1420:3:25"},"nodeType":"YulFunctionCall","src":"1420:12:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1413:3:25"},"nodeType":"YulFunctionCall","src":"1413:20:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1403:3:25"},"nodeType":"YulFunctionCall","src":"1403:31:25"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1397:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1447:24:25","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"1460:11:25"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"1451:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"1545:21:25","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1554:5:25"},{"name":"_1","nodeType":"YulIdentifier","src":"1561:2:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"1547:6:25"},"nodeType":"YulFunctionCall","src":"1547:17:25"},"nodeType":"YulExpressionStatement","src":"1547:17:25"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1495:5:25"},{"name":"_2","nodeType":"YulIdentifier","src":"1502:2:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1492:2:25"},"nodeType":"YulFunctionCall","src":"1492:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1506:26:25","statements":[{"nodeType":"YulAssignment","src":"1508:22:25","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1521:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"1528:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1517:3:25"},"nodeType":"YulFunctionCall","src":"1517:13:25"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"1508:5:25"}]}]},"pre":{"nodeType":"YulBlock","src":"1488:3:25","statements":[]},"src":"1484:82:25"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"1134:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"1139:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1131:2:25"},"nodeType":"YulFunctionCall","src":"1131:11:25"},"nodeType":"YulIf","src":"1128:448:25"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"1090:5:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"1097:3:25","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"1102:10:25","type":""}],"src":"1037:545:25"},{"body":{"nodeType":"YulBlock","src":"1672:81:25","statements":[{"nodeType":"YulAssignment","src":"1682:65:25","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1697:4:25"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1715:1:25","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"1718:3:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1711:3:25"},"nodeType":"YulFunctionCall","src":"1711:11:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1728:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1724:3:25"},"nodeType":"YulFunctionCall","src":"1724:6:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1707:3:25"},"nodeType":"YulFunctionCall","src":"1707:24:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1703:3:25"},"nodeType":"YulFunctionCall","src":"1703:29:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1693:3:25"},"nodeType":"YulFunctionCall","src":"1693:40:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1739:1:25","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"1742:3:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1735:3:25"},"nodeType":"YulFunctionCall","src":"1735:11:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1690:2:25"},"nodeType":"YulFunctionCall","src":"1690:57:25"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"1682:4:25"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1649:4:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"1655:3:25","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"1663:4:25","type":""}],"src":"1587:166:25"},{"body":{"nodeType":"YulBlock","src":"1854:1256:25","statements":[{"nodeType":"YulVariableDeclaration","src":"1864:24:25","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1884:3:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1878:5:25"},"nodeType":"YulFunctionCall","src":"1878:10:25"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"1868:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"1931:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1933:16:25"},"nodeType":"YulFunctionCall","src":"1933:18:25"},"nodeType":"YulExpressionStatement","src":"1933:18:25"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1903:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1919:2:25","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1923:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1915:3:25"},"nodeType":"YulFunctionCall","src":"1915:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"1927:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1911:3:25"},"nodeType":"YulFunctionCall","src":"1911:18:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1900:2:25"},"nodeType":"YulFunctionCall","src":"1900:30:25"},"nodeType":"YulIf","src":"1897:56:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2006:4:25"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2044:4:25"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"2038:5:25"},"nodeType":"YulFunctionCall","src":"2038:11:25"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"2012:25:25"},"nodeType":"YulFunctionCall","src":"2012:38:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"2052:6:25"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"1962:43:25"},"nodeType":"YulFunctionCall","src":"1962:97:25"},"nodeType":"YulExpressionStatement","src":"1962:97:25"},{"nodeType":"YulVariableDeclaration","src":"2068:18:25","value":{"kind":"number","nodeType":"YulLiteral","src":"2085:1:25","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"2072:9:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2095:23:25","value":{"kind":"number","nodeType":"YulLiteral","src":"2114:4:25","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"2099:11:25","type":""}]},{"nodeType":"YulAssignment","src":"2127:24:25","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2140:11:25"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2127:9:25"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"2197:656:25","statements":[{"nodeType":"YulVariableDeclaration","src":"2211:35:25","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2230:6:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2242:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2238:3:25"},"nodeType":"YulFunctionCall","src":"2238:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2226:3:25"},"nodeType":"YulFunctionCall","src":"2226:20:25"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"2215:7:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2259:49:25","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2303:4:25"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"2273:29:25"},"nodeType":"YulFunctionCall","src":"2273:35:25"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"2263:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2321:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"2330:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2325:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"2408:172:25","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2433:6:25"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2451:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2456:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2447:3:25"},"nodeType":"YulFunctionCall","src":"2447:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2441:5:25"},"nodeType":"YulFunctionCall","src":"2441:26:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2426:6:25"},"nodeType":"YulFunctionCall","src":"2426:42:25"},"nodeType":"YulExpressionStatement","src":"2426:42:25"},{"nodeType":"YulAssignment","src":"2485:24:25","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2499:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"2507:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2495:3:25"},"nodeType":"YulFunctionCall","src":"2495:14:25"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2485:6:25"}]},{"nodeType":"YulAssignment","src":"2526:40:25","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2543:9:25"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2554:11:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2539:3:25"},"nodeType":"YulFunctionCall","src":"2539:27:25"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2526:9:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2355:1:25"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"2358:7:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2352:2:25"},"nodeType":"YulFunctionCall","src":"2352:14:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2367:28:25","statements":[{"nodeType":"YulAssignment","src":"2369:24:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2378:1:25"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2381:11:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2374:3:25"},"nodeType":"YulFunctionCall","src":"2374:19:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2369:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"2348:3:25","statements":[]},"src":"2344:236:25"},{"body":{"nodeType":"YulBlock","src":"2628:166:25","statements":[{"nodeType":"YulVariableDeclaration","src":"2646:43:25","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2673:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2678:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2669:3:25"},"nodeType":"YulFunctionCall","src":"2669:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2663:5:25"},"nodeType":"YulFunctionCall","src":"2663:26:25"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"2650:9:25","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2713:6:25"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"2725:9:25"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2752:1:25","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"2755:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2748:3:25"},"nodeType":"YulFunctionCall","src":"2748:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"2764:3:25","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2744:3:25"},"nodeType":"YulFunctionCall","src":"2744:24:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2774:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2770:3:25"},"nodeType":"YulFunctionCall","src":"2770:6:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2740:3:25"},"nodeType":"YulFunctionCall","src":"2740:37:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2736:3:25"},"nodeType":"YulFunctionCall","src":"2736:42:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2721:3:25"},"nodeType":"YulFunctionCall","src":"2721:58:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2706:6:25"},"nodeType":"YulFunctionCall","src":"2706:74:25"},"nodeType":"YulExpressionStatement","src":"2706:74:25"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"2599:7:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"2608:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2596:2:25"},"nodeType":"YulFunctionCall","src":"2596:19:25"},"nodeType":"YulIf","src":"2593:201:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2814:4:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2828:1:25","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"2831:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2824:3:25"},"nodeType":"YulFunctionCall","src":"2824:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"2840:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2820:3:25"},"nodeType":"YulFunctionCall","src":"2820:22:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2807:6:25"},"nodeType":"YulFunctionCall","src":"2807:36:25"},"nodeType":"YulExpressionStatement","src":"2807:36:25"}]},"nodeType":"YulCase","src":"2190:663:25","value":{"kind":"number","nodeType":"YulLiteral","src":"2195:1:25","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"2870:234:25","statements":[{"nodeType":"YulVariableDeclaration","src":"2884:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"2897:1:25","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2888:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"2933:67:25","statements":[{"nodeType":"YulAssignment","src":"2951:35:25","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2970:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2975:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2966:3:25"},"nodeType":"YulFunctionCall","src":"2966:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2960:5:25"},"nodeType":"YulFunctionCall","src":"2960:26:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2951:5:25"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"2914:6:25"},"nodeType":"YulIf","src":"2911:89:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3020:4:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3079:5:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"3086:6:25"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"3026:52:25"},"nodeType":"YulFunctionCall","src":"3026:67:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3013:6:25"},"nodeType":"YulFunctionCall","src":"3013:81:25"},"nodeType":"YulExpressionStatement","src":"3013:81:25"}]},"nodeType":"YulCase","src":"2862:242:25","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2170:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"2178:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2167:2:25"},"nodeType":"YulFunctionCall","src":"2167:14:25"},"nodeType":"YulSwitch","src":"2160:944:25"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"1839:4:25","type":""},{"name":"src","nodeType":"YulTypedName","src":"1845:3:25","type":""}],"src":"1758:1352:25"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_contract$_IBasePaintBrush_$5844t_uint256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        value1 := mload(add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":25,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a060405266093cafac6a8000600755620186a06008553480156200002357600080fd5b5060405162002b7e38038062002b7e833981016040819052620000469162000105565b60405180606001604052806022815260200162002b5c602291396200006b81620000a1565b506200007733620000b3565b600480546001600160a01b0319166001600160a01b039390931692909217909155608052620002b2565b6002620000af8282620001e6565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080604083850312156200011957600080fd5b82516001600160a01b03811681146200013157600080fd5b6020939093015192949293505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200016c57607f821691505b6020821081036200018d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001e157600081815260208120601f850160051c81016020861015620001bc5750805b601f850160051c820191505b81811015620001dd57828155600101620001c8565b5050505b505050565b81516001600160401b0381111562000202576200020262000141565b6200021a8162000213845462000157565b8462000193565b602080601f831160018114620002525760008415620002395750858301515b600019600386901b1c1916600185901b178555620001dd565b600085815260208120601f198616915b82811015620002835788860151825594840194600190910190840162000262565b5085821015620002a25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051612887620002d560003960008181610374015261121101526128876000f3fe6080604052600436106101c15760003560e01c80638abe0991116100f7578063dfa3a43211610095578063f242432a11610064578063f242432a14610598578063f2fde38b146105b8578063f9af6c58146105d8578063fbf0ade1146105ee57600080fd5b8063dfa3a432146104d2578063e985e9c514610519578063f0e639e114610562578063f21f537d1461058257600080fd5b8063b079bbcc116100d1578063b079bbcc1461043f578063b74e452b1461045f578063be9a655514610474578063d9d197a61461048957600080fd5b80638abe0991146103e15780638da5cb5b14610401578063a22cb4651461041f57600080fd5b80632eb2c2d6116101645780634ff0876a1161013e5780634ff0876a1461036257806351cff8d91461039657806369865686146103b6578063715018a6146103cc57600080fd5b80632eb2c2d6146102dd57806349621c3f146102fd5780634e1273f41461033557600080fd5b80630e89341c116101a05780630e89341c1461024b57806314de57cb146102785780631b2ef1ca1461028e5780632ac70a2d146102a157600080fd5b8062fdd58e146101c657806301ffc9a7146101f957806302fe530514610229575b600080fd5b3480156101d257600080fd5b506101e66101e1366004611c84565b61060e565b6040519081526020015b60405180910390f35b34801561020557600080fd5b50610219610214366004611cc6565b6106a7565b60405190151581526020016101f0565b34801561023557600080fd5b50610249610244366004611d32565b6106f7565b005b34801561025757600080fd5b5061026b610266366004611d73565b610742565b6040516101f09190611dd2565b34801561028457600080fd5b506101e660085481565b61024961029c366004611de5565b6107d6565b3480156102ad57600080fd5b506101e66102bc366004611de5565b60009182526005602090815260408084209284526003909201905290205490565b3480156102e957600080fd5b506102496102f8366004611f50565b6109a3565b34801561030957600080fd5b5060045461031d906001600160a01b031681565b6040516001600160a01b0390911681526020016101f0565b34801561034157600080fd5b50610355610350366004611ffd565b6109ef565b6040516101f09190612104565b34801561036e57600080fd5b506101e67f000000000000000000000000000000000000000000000000000000000000000081565b3480156103a257600080fd5b506102496103b1366004612117565b610b18565b3480156103c257600080fd5b506101e660075481565b3480156103d857600080fd5b50610249610c03565b3480156103ed57600080fd5b506102496103fc366004612134565b610c17565b34801561040d57600080fd5b506003546001600160a01b031661031d565b34801561042b57600080fd5b5061024961043a3660046121a8565b610ec0565b34801561044b57600080fd5b5061024961045a3660046121e6565b610ecb565b34801561046b57600080fd5b506101e661120d565b34801561048057600080fd5b50610249611258565b34801561049557600080fd5b506104bd6104a4366004611d73565b6005602052600090815260409020805460019091015482565b604080519283526020830191909152016101f0565b3480156104de57600080fd5b506101e66104ed366004612238565b60008281526005602090815260408083206001600160a01b038516845260020190915290205492915050565b34801561052557600080fd5b5061021961053436600461225d565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561056e57600080fd5b5061024961057d366004611d73565b6112dc565b34801561058e57600080fd5b506101e660065481565b3480156105a457600080fd5b506102496105b336600461228b565b611320565b3480156105c457600080fd5b506102496105d3366004612117565b611365565b3480156105e457600080fd5b506101e660095481565b3480156105fa57600080fd5b50610249610609366004611d73565b6113de565b60006001600160a01b03831661067e5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806106d857506001600160e01b031982166303a24d0760e21b145b806106a157506301ffc9a760e01b6001600160e01b03198316146106a1565b6106ff61145b565b61073e82828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114b592505050565b5050565b606060028054610751906122f3565b80601f016020809104026020016040519081016040528092919081815260200182805461077d906122f3565b80156107ca5780601f1061079f576101008083540402835291602001916107ca565b820191906000526020600020905b8154815290600101906020018083116107ad57829003601f168201915b50505050509050919050565b6000600654116108165760405162461bcd60e51b815260206004820152600b60248201526a139bdd081cdd185c9d195960aa1b6044820152606401610675565b61081e61120d565b610829836001612343565b146108465760405162461bcd60e51b815260040161067590612356565b80600754610854919061237b565b3410156108935760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420707269636560981b6044820152606401610675565b6000828152600560205260409020546108dd5760405162461bcd60e51b815260206004820152600c60248201526b456d7074792063616e76617360a01b6044820152606401610675565b6108f8338383604051806020016040528060008152506114c1565b6000620f42406008543461090c919061237b565b61091691906123a8565b9050806009600082825461092a9190612343565b9091555061093a905081346123bc565b6000848152600560205260408120600101805490919061095b908490612343565b909155508390507f1033721d007e6103a21cb6edd862fc6eb6a601285ee27d595c4d9f9e597a183761098d83346123bc565b60405190815260200160405180910390a2505050565b6001600160a01b0385163314806109bf57506109bf8533610534565b6109db5760405162461bcd60e51b8152600401610675906123cf565b6109e885858585856115d5565b5050505050565b60608151835114610a545760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610675565b600083516001600160401b03811115610a6f57610a6f611e07565b604051908082528060200260200182016040528015610a98578160200160208202803683370190505b50905060005b8451811015610b1057610ae3858281518110610abc57610abc61241d565b6020026020010151858381518110610ad657610ad661241d565b602002602001015161060e565b828281518110610af557610af561241d565b6020908102919091010152610b0981612433565b9050610a9e565b509392505050565b610b2061145b565b600980546000918290556040519091906001600160a01b0384169083908381818185875af1925050503d8060008114610b75576040519150601f19603f3d011682016040523d82523d6000602084013e610b7a565b606091505b5050905080610bbd5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610675565b604080518381526001600160a01b03851660208201527f5bbdd53ba1d6d75026c4b60ff971e848d7bd18fd647eaeaa174c913f3f0f1bdf910160405180910390a1505050565b610c0b61145b565b610c1560006117b2565b565b60006001610c2361120d565b610c2d91906123bc565b905060005b82811015610eba576000848483818110610c4e57610c4e61241d565b905060200201359050828110610c765760405162461bcd60e51b815260040161067590612356565b60008181526005602052604090206001810154610ccc5760405162461bcd60e51b81526020600482015260146024820152734e6f2066756e647320746f20776974686472617760601b6044820152606401610675565b8054610d095760405162461bcd60e51b815260206004820152600c60248201526b456d7074792063616e76617360a01b6044820152606401610675565b336000908152600282016020526040902054610d5a5760405162461bcd60e51b815260206004820152601060248201526f4e6f20636f6e747269627574696f6e7360801b6044820152606401610675565b80543360009081526002830160205260408120546001840154919291610d80919061237b565b610d8a91906123a8565b905080826001016000828254610da091906123bc565b9091555050336000908152600283016020526040812054835490918491610dc89084906123bc565b90915550503360008181526002840160205260408082208290555190919083908381818185875af1925050503d8060008114610e20576040519150601f19603f3d011682016040523d82523d6000602084013e610e25565b606091505b5050905080610e685760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610675565b604080513381526020810184905285917fcc1db7b1578c9fa756ff3c2d490732a4790a5a1181ab6eb5829daa870e246d95910160405180910390a2505050508080610eb290612433565b915050610c32565b50505050565b61073e338383611804565b600060065411610f0b5760405162461bcd60e51b815260206004820152600b60248201526a139bdd081cdd185c9d195960aa1b6044820152606401610675565b610f1361120d565b8414610f315760405162461bcd60e51b815260040161067590612356565b600480546040516331a9108f60e11b815291820185905233916001600160a01b0390911690636352211e90602401602060405180830381865afa158015610f7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa0919061244c565b6001600160a01b031614610ff65760405162461bcd60e51b815260206004820152601860248201527f596f7520646f6e2774206f776e207468697320627275736800000000000000006044820152606401610675565b611001600382612469565b156110435760405162461bcd60e51b8152602060048201526012602482015271496e76616c696420706978656c206461746160701b6044820152606401610675565b806110855760405162461bcd60e51b8152602060048201526012602482015271496e76616c696420706978656c206461746160701b6044820152606401610675565b60006110926003836123a8565b6000868152600560209081526040808320338452600281019092528220805493945090928492906110c4908490612343565b90915550506000858152600382016020526040812080548492906110e9908490612343565b9091555050805482908290600090611102908490612343565b9091555050600480546040516377bbe0c360e11b81529182018790526001600160a01b03169063ef77c18690602401602060405180830381865afa15801561114e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611172919061247d565b600086815260038301602052604090205411156111c75760405162461bcd60e51b8152602060048201526013602482015272084e4eae6d040eae6cac840e8dede40daeac6d606b1b6044820152606401610675565b857f4ecc3f51341c13c2f7214d794dfea90b5bab5d7ff3951ca088f6329255a5dda2863387876040516111fd9493929190612496565b60405180910390a2505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006006544261123e91906123bc565b61124891906123a8565b611253906001612343565b905090565b61126061145b565b600654156112a25760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481cdd185c9d1959608a1b6044820152606401610675565b4260068190556040519081527e6e0c97de781a7389d44ba8fd35d1467cabb17ed04d038d166d34ab819213f39060200160405180910390a1565b6112e461145b565b60078190556040518181527f8824e69bdb6ace1cae2d46266847d0b140caf4a17ea02b2317c95e62f5cf341a906020015b60405180910390a150565b6001600160a01b03851633148061133c575061133c8533610534565b6113585760405162461bcd60e51b8152600401610675906123cf565b6109e885858585856118e4565b61136d61145b565b6001600160a01b0381166113d25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610675565b6113db816117b2565b50565b6113e661145b565b620f424081106114265760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642066656560a81b6044820152606401610675565b60088190556040518181527f5d366c044b06faba913c60796eaeecb48b0ecfe9f5834c86a239955a90054abb90602001611315565b6003546001600160a01b03163314610c155760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610675565b600261073e8282612528565b6001600160a01b0384166115215760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610675565b33600061152d85611a0e565b9050600061153a85611a0e565b90506000868152602081815260408083206001600160a01b038b1684529091528120805487929061156c908490612343565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46115cc83600089898989611a59565b50505050505050565b81518351146116375760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610675565b6001600160a01b03841661165d5760405162461bcd60e51b8152600401610675906125e7565b3360005b845181101561174457600085828151811061167e5761167e61241d565b60200260200101519050600085838151811061169c5761169c61241d565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156116ec5760405162461bcd60e51b81526004016106759061262c565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611729908490612343565b925050819055505050508061173d90612433565b9050611661565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611794929190612676565b60405180910390a46117aa818787878787611bb4565b505050505050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036118775760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610675565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b03841661190a5760405162461bcd60e51b8152600401610675906125e7565b33600061191685611a0e565b9050600061192385611a0e565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156119665760405162461bcd60e51b81526004016106759061262c565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906119a3908490612343565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611a03848a8a8a8a8a611a59565b505050505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611a4857611a4861241d565b602090810291909101015292915050565b6001600160a01b0384163b156117aa5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611a9d90899089908890889088906004016126a4565b6020604051808303816000875af1925050508015611ad8575060408051601f3d908101601f19168201909252611ad5918101906126e9565b60015b611b8457611ae4612706565b806308c379a003611b1d5750611af8612722565b80611b035750611b1f565b8060405162461bcd60e51b81526004016106759190611dd2565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610675565b6001600160e01b0319811663f23a6e6160e01b146115cc5760405162461bcd60e51b8152600401610675906127ab565b6001600160a01b0384163b156117aa5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611bf890899089908890889088906004016127f3565b6020604051808303816000875af1925050508015611c33575060408051601f3d908101601f19168201909252611c30918101906126e9565b60015b611c3f57611ae4612706565b6001600160e01b0319811663bc197c8160e01b146115cc5760405162461bcd60e51b8152600401610675906127ab565b6001600160a01b03811681146113db57600080fd5b60008060408385031215611c9757600080fd5b8235611ca281611c6f565b946020939093013593505050565b6001600160e01b0319811681146113db57600080fd5b600060208284031215611cd857600080fd5b8135611ce381611cb0565b9392505050565b60008083601f840112611cfc57600080fd5b5081356001600160401b03811115611d1357600080fd5b602083019150836020828501011115611d2b57600080fd5b9250929050565b60008060208385031215611d4557600080fd5b82356001600160401b03811115611d5b57600080fd5b611d6785828601611cea565b90969095509350505050565b600060208284031215611d8557600080fd5b5035919050565b6000815180845260005b81811015611db257602081850181015186830182015201611d96565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611ce36020830184611d8c565b60008060408385031215611df857600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715611e4257611e42611e07565b6040525050565b60006001600160401b03821115611e6257611e62611e07565b5060051b60200190565b600082601f830112611e7d57600080fd5b81356020611e8a82611e49565b604051611e978282611e1d565b83815260059390931b8501820192828101915086841115611eb757600080fd5b8286015b84811015611ed25780358352918301918301611ebb565b509695505050505050565b600082601f830112611eee57600080fd5b81356001600160401b03811115611f0757611f07611e07565b604051611f1e601f8301601f191660200182611e1d565b818152846020838601011115611f3357600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611f6857600080fd5b8535611f7381611c6f565b94506020860135611f8381611c6f565b935060408601356001600160401b0380821115611f9f57600080fd5b611fab89838a01611e6c565b94506060880135915080821115611fc157600080fd5b611fcd89838a01611e6c565b93506080880135915080821115611fe357600080fd5b50611ff088828901611edd565b9150509295509295909350565b6000806040838503121561201057600080fd5b82356001600160401b038082111561202757600080fd5b818501915085601f83011261203b57600080fd5b8135602061204882611e49565b6040516120558282611e1d565b83815260059390931b850182019282810191508984111561207557600080fd5b948201945b8386101561209c57853561208d81611c6f565b8252948201949082019061207a565b965050860135925050808211156120b257600080fd5b506120bf85828601611e6c565b9150509250929050565b600081518084526020808501945080840160005b838110156120f9578151875295820195908201906001016120dd565b509495945050505050565b602081526000611ce360208301846120c9565b60006020828403121561212957600080fd5b8135611ce381611c6f565b6000806020838503121561214757600080fd5b82356001600160401b038082111561215e57600080fd5b818501915085601f83011261217257600080fd5b81358181111561218157600080fd5b8660208260051b850101111561219657600080fd5b60209290920196919550909350505050565b600080604083850312156121bb57600080fd5b82356121c681611c6f565b9150602083013580151581146121db57600080fd5b809150509250929050565b600080600080606085870312156121fc57600080fd5b843593506020850135925060408501356001600160401b0381111561222057600080fd5b61222c87828801611cea565b95989497509550505050565b6000806040838503121561224b57600080fd5b8235915060208301356121db81611c6f565b6000806040838503121561227057600080fd5b823561227b81611c6f565b915060208301356121db81611c6f565b600080600080600060a086880312156122a357600080fd5b85356122ae81611c6f565b945060208601356122be81611c6f565b9350604086013592506060860135915060808601356001600160401b038111156122e757600080fd5b611ff088828901611edd565b600181811c9082168061230757607f821691505b60208210810361232757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156106a1576106a161232d565b6020808252600b908201526a496e76616c69642064617960a81b604082015260600190565b80820281158282048414176106a1576106a161232d565b634e487b7160e01b600052601260045260246000fd5b6000826123b7576123b7612392565b500490565b818103818111156106a1576106a161232d565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600182016124455761244561232d565b5060010190565b60006020828403121561245e57600080fd5b8151611ce381611c6f565b60008261247857612478612392565b500690565b60006020828403121561248f57600080fd5b5051919050565b8481526001600160a01b03841660208201526060604082018190528101829052818360808301376000818301608090810191909152601f909201601f191601019392505050565b601f82111561252357600081815260208120601f850160051c810160208610156125045750805b601f850160051c820191505b818110156117aa57828155600101612510565b505050565b81516001600160401b0381111561254157612541611e07565b6125558161254f84546122f3565b846124dd565b602080601f83116001811461258a57600084156125725750858301515b600019600386901b1c1916600185901b1785556117aa565b600085815260208120601f198616915b828110156125b95788860151825594840194600190910190840161259a565b50858210156125d75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60408152600061268960408301856120c9565b828103602084015261269b81856120c9565b95945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906126de90830184611d8c565b979650505050505050565b6000602082840312156126fb57600080fd5b8151611ce381611cb0565b600060033d111561271f5760046000803e5060005160e01c5b90565b600060443d10156127305790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561275f57505050505090565b82850191508151818111156127775750505050505090565b843d87010160208285010111156127915750505050505090565b6127a060208286010187611e1d565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a06040820181905260009061281f908301866120c9565b828103606084015261283181866120c9565b905082810360808401526128458185611d8c565b9897505050505050505056fea2646970667358221220c99cda4c4efcfa48e6e2e5eb030c5801e40e7a7d023522ed1ac0166663ae6a0864736f6c6343000813003368747470733a2f2f626173657061696e742e78797a2f6170692f6172742f7b69647d","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE PUSH7 0x93CAFAC6A8000 PUSH1 0x7 SSTORE PUSH3 0x186A0 PUSH1 0x8 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2B7E CODESIZE SUB DUP1 PUSH3 0x2B7E DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x46 SWAP2 PUSH3 0x105 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x2B5C PUSH1 0x22 SWAP2 CODECOPY PUSH3 0x6B DUP2 PUSH3 0xA1 JUMP JUMPDEST POP PUSH3 0x77 CALLER PUSH3 0xB3 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x80 MSTORE PUSH3 0x2B2 JUMP JUMPDEST PUSH1 0x2 PUSH3 0xAF DUP3 DUP3 PUSH3 0x1E6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x131 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD MLOAD SWAP3 SWAP5 SWAP3 SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x16C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x18D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x1E1 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x1BC JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x1DD JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x1C8 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x202 JUMPI PUSH3 0x202 PUSH3 0x141 JUMP JUMPDEST PUSH3 0x21A DUP2 PUSH3 0x213 DUP5 SLOAD PUSH3 0x157 JUMP JUMPDEST DUP5 PUSH3 0x193 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x252 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x239 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x1DD JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x283 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x262 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x2A2 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x2887 PUSH3 0x2D5 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x374 ADD MSTORE PUSH2 0x1211 ADD MSTORE PUSH2 0x2887 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C1 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8ABE0991 GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xDFA3A432 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xF242432A GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x598 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5B8 JUMPI DUP1 PUSH4 0xF9AF6C58 EQ PUSH2 0x5D8 JUMPI DUP1 PUSH4 0xFBF0ADE1 EQ PUSH2 0x5EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xDFA3A432 EQ PUSH2 0x4D2 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x519 JUMPI DUP1 PUSH4 0xF0E639E1 EQ PUSH2 0x562 JUMPI DUP1 PUSH4 0xF21F537D EQ PUSH2 0x582 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB079BBCC GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xB079BBCC EQ PUSH2 0x43F JUMPI DUP1 PUSH4 0xB74E452B EQ PUSH2 0x45F JUMPI DUP1 PUSH4 0xBE9A6555 EQ PUSH2 0x474 JUMPI DUP1 PUSH4 0xD9D197A6 EQ PUSH2 0x489 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8ABE0991 EQ PUSH2 0x3E1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x401 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x41F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2EB2C2D6 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x4FF0876A GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x4FF0876A EQ PUSH2 0x362 JUMPI DUP1 PUSH4 0x51CFF8D9 EQ PUSH2 0x396 JUMPI DUP1 PUSH4 0x69865686 EQ PUSH2 0x3B6 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x2DD JUMPI DUP1 PUSH4 0x49621C3F EQ PUSH2 0x2FD JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x335 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xE89341C GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x24B JUMPI DUP1 PUSH4 0x14DE57CB EQ PUSH2 0x278 JUMPI DUP1 PUSH4 0x1B2EF1CA EQ PUSH2 0x28E JUMPI DUP1 PUSH4 0x2AC70A2D EQ PUSH2 0x2A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1F9 JUMPI DUP1 PUSH4 0x2FE5305 EQ PUSH2 0x229 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E6 PUSH2 0x1E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C84 JUMP JUMPDEST PUSH2 0x60E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x205 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x219 PUSH2 0x214 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CC6 JUMP JUMPDEST PUSH2 0x6A7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x235 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x244 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D32 JUMP JUMPDEST PUSH2 0x6F7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D73 JUMP JUMPDEST PUSH2 0x742 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F0 SWAP2 SWAP1 PUSH2 0x1DD2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x284 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E6 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x249 PUSH2 0x29C CALLDATASIZE PUSH1 0x4 PUSH2 0x1DE5 JUMP JUMPDEST PUSH2 0x7D6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E6 PUSH2 0x2BC CALLDATASIZE PUSH1 0x4 PUSH2 0x1DE5 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP3 DUP5 MSTORE PUSH1 0x3 SWAP1 SWAP3 ADD SWAP1 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x2F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F50 JUMP JUMPDEST PUSH2 0x9A3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x309 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 SLOAD PUSH2 0x31D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x341 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x355 PUSH2 0x350 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FFD JUMP JUMPDEST PUSH2 0x9EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F0 SWAP2 SWAP1 PUSH2 0x2104 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E6 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x3B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2117 JUMP JUMPDEST PUSH2 0xB18 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E6 PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0xC03 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x3FC CALLDATASIZE PUSH1 0x4 PUSH2 0x2134 JUMP JUMPDEST PUSH2 0xC17 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x31D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x43A CALLDATASIZE PUSH1 0x4 PUSH2 0x21A8 JUMP JUMPDEST PUSH2 0xEC0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x45A CALLDATASIZE PUSH1 0x4 PUSH2 0x21E6 JUMP JUMPDEST PUSH2 0xECB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E6 PUSH2 0x120D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x1258 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4BD PUSH2 0x4A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D73 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x1F0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E6 PUSH2 0x4ED CALLDATASIZE PUSH1 0x4 PUSH2 0x2238 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE PUSH1 0x2 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x525 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x219 PUSH2 0x534 CALLDATASIZE PUSH1 0x4 PUSH2 0x225D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x57D CALLDATASIZE PUSH1 0x4 PUSH2 0x1D73 JUMP JUMPDEST PUSH2 0x12DC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E6 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x5B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x228B JUMP JUMPDEST PUSH2 0x1320 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x5D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2117 JUMP JUMPDEST PUSH2 0x1365 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E6 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x609 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D73 JUMP JUMPDEST PUSH2 0x13DE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x67E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x30B634B21037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x6D8 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ JUMPDEST DUP1 PUSH2 0x6A1 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x6A1 JUMP JUMPDEST PUSH2 0x6FF PUSH2 0x145B JUMP JUMPDEST PUSH2 0x73E DUP3 DUP3 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x14B5 SWAP3 POP POP POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x751 SWAP1 PUSH2 0x22F3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x77D SWAP1 PUSH2 0x22F3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7CA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x79F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7CA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7AD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 SLOAD GT PUSH2 0x816 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x139BDD081CDD185C9D1959 PUSH1 0xAA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST PUSH2 0x81E PUSH2 0x120D JUMP JUMPDEST PUSH2 0x829 DUP4 PUSH1 0x1 PUSH2 0x2343 JUMP JUMPDEST EQ PUSH2 0x846 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP1 PUSH2 0x2356 JUMP JUMPDEST DUP1 PUSH1 0x7 SLOAD PUSH2 0x854 SWAP2 SWAP1 PUSH2 0x237B JUMP JUMPDEST CALLVALUE LT ISZERO PUSH2 0x893 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x496E76616C6964207072696365 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x8DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x456D7074792063616E766173 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST PUSH2 0x8F8 CALLER DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x14C1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0xF4240 PUSH1 0x8 SLOAD CALLVALUE PUSH2 0x90C SWAP2 SWAP1 PUSH2 0x237B JUMP JUMPDEST PUSH2 0x916 SWAP2 SWAP1 PUSH2 0x23A8 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x9 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x92A SWAP2 SWAP1 PUSH2 0x2343 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x93A SWAP1 POP DUP2 CALLVALUE PUSH2 0x23BC JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x95B SWAP1 DUP5 SWAP1 PUSH2 0x2343 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP DUP4 SWAP1 POP PUSH32 0x1033721D007E6103A21CB6EDD862FC6EB6A601285EE27D595C4D9F9E597A1837 PUSH2 0x98D DUP4 CALLVALUE PUSH2 0x23BC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x9BF JUMPI POP PUSH2 0x9BF DUP6 CALLER PUSH2 0x534 JUMP JUMPDEST PUSH2 0x9DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP1 PUSH2 0x23CF JUMP JUMPDEST PUSH2 0x9E8 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x15D5 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0xA54 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x40DAD2E6DAC2E8C6D PUSH1 0xBB SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x675 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA6F JUMPI PUSH2 0xA6F PUSH2 0x1E07 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA98 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xB10 JUMPI PUSH2 0xAE3 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xABC JUMPI PUSH2 0xABC PUSH2 0x241D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xAD6 JUMPI PUSH2 0xAD6 PUSH2 0x241D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x60E JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xAF5 JUMPI PUSH2 0xAF5 PUSH2 0x241D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0xB09 DUP2 PUSH2 0x2433 JUMP JUMPDEST SWAP1 POP PUSH2 0xA9E JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xB20 PUSH2 0x145B JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH1 0x0 SWAP2 DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xB75 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB7A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xBBD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5BBDD53BA1D6D75026C4B60FF971E848D7BD18FD647EAEAA174C913F3F0F1BDF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0xC0B PUSH2 0x145B JUMP JUMPDEST PUSH2 0xC15 PUSH1 0x0 PUSH2 0x17B2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0xC23 PUSH2 0x120D JUMP JUMPDEST PUSH2 0xC2D SWAP2 SWAP1 PUSH2 0x23BC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xEBA JUMPI PUSH1 0x0 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0xC4E JUMPI PUSH2 0xC4E PUSH2 0x241D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP3 DUP2 LT PUSH2 0xC76 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP1 PUSH2 0x2356 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0xCCC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x4E6F2066756E647320746F207769746864726177 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST DUP1 SLOAD PUSH2 0xD09 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x456D7074792063616E766173 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xD5A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x4E6F20636F6E747269627574696F6E73 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST DUP1 SLOAD CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 DUP5 ADD SLOAD SWAP2 SWAP3 SWAP2 PUSH2 0xD80 SWAP2 SWAP1 PUSH2 0x237B JUMP JUMPDEST PUSH2 0xD8A SWAP2 SWAP1 PUSH2 0x23A8 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xDA0 SWAP2 SWAP1 PUSH2 0x23BC JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP4 SLOAD SWAP1 SWAP2 DUP5 SWAP2 PUSH2 0xDC8 SWAP1 DUP5 SWAP1 PUSH2 0x23BC JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP3 SWAP1 SSTORE MLOAD SWAP1 SWAP2 SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xE20 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE25 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xE68 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE DUP6 SWAP2 PUSH32 0xCC1DB7B1578C9FA756FF3C2D490732A4790A5A1181AB6EB5829DAA870E246D95 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP DUP1 DUP1 PUSH2 0xEB2 SWAP1 PUSH2 0x2433 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC32 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x73E CALLER DUP4 DUP4 PUSH2 0x1804 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 SLOAD GT PUSH2 0xF0B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x139BDD081CDD185C9D1959 PUSH1 0xAA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST PUSH2 0xF13 PUSH2 0x120D JUMP JUMPDEST DUP5 EQ PUSH2 0xF31 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP1 PUSH2 0x2356 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 DUP3 ADD DUP6 SWAP1 MSTORE CALLER SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF7C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFA0 SWAP2 SWAP1 PUSH2 0x244C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xFF6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7520646F6E2774206F776E20746869732062727573680000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST PUSH2 0x1001 PUSH1 0x3 DUP3 PUSH2 0x2469 JUMP JUMPDEST ISZERO PUSH2 0x1043 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x496E76616C696420706978656C2064617461 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST DUP1 PUSH2 0x1085 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x496E76616C696420706978656C2064617461 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1092 PUSH1 0x3 DUP4 PUSH2 0x23A8 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE PUSH1 0x2 DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD SWAP4 SWAP5 POP SWAP1 SWAP3 DUP5 SWAP3 SWAP1 PUSH2 0x10C4 SWAP1 DUP5 SWAP1 PUSH2 0x2343 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x10E9 SWAP1 DUP5 SWAP1 PUSH2 0x2343 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP1 SLOAD DUP3 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x1102 SWAP1 DUP5 SWAP1 PUSH2 0x2343 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x77BBE0C3 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 DUP3 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xEF77C186 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x114E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1172 SWAP2 SWAP1 PUSH2 0x247D JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x3 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD GT ISZERO PUSH2 0x11C7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x84E4EAE6D040EAE6CAC840E8DEDE40DAEAC6D PUSH1 0x6B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST DUP6 PUSH32 0x4ECC3F51341C13C2F7214D794DFEA90B5BAB5D7FF3951CA088F6329255A5DDA2 DUP7 CALLER DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x11FD SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2496 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x6 SLOAD TIMESTAMP PUSH2 0x123E SWAP2 SWAP1 PUSH2 0x23BC JUMP JUMPDEST PUSH2 0x1248 SWAP2 SWAP1 PUSH2 0x23A8 JUMP JUMPDEST PUSH2 0x1253 SWAP1 PUSH1 0x1 PUSH2 0x2343 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1260 PUSH2 0x145B JUMP JUMPDEST PUSH1 0x6 SLOAD ISZERO PUSH2 0x12A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x105B1C9958591E481CDD185C9D1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST TIMESTAMP PUSH1 0x6 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH31 0x6E0C97DE781A7389D44BA8FD35D1467CABB17ED04D038D166D34AB819213F3 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x12E4 PUSH2 0x145B JUMP JUMPDEST PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0x8824E69BDB6ACE1CAE2D46266847D0B140CAF4A17EA02B2317C95E62F5CF341A SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x133C JUMPI POP PUSH2 0x133C DUP6 CALLER PUSH2 0x534 JUMP JUMPDEST PUSH2 0x1358 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP1 PUSH2 0x23CF JUMP JUMPDEST PUSH2 0x9E8 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x18E4 JUMP JUMPDEST PUSH2 0x136D PUSH2 0x145B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x13D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x675 JUMP JUMPDEST PUSH2 0x13DB DUP2 PUSH2 0x17B2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x13E6 PUSH2 0x145B JUMP JUMPDEST PUSH3 0xF4240 DUP2 LT PUSH2 0x1426 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x496E76616C696420666565 PUSH1 0xA8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0x5D366C044B06FABA913C60796EAEECB48B0ECFE9F5834C86A239955A90054ABB SWAP1 PUSH1 0x20 ADD PUSH2 0x1315 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST PUSH1 0x2 PUSH2 0x73E DUP3 DUP3 PUSH2 0x2528 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1521 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206D696E7420746F20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x675 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x152D DUP6 PUSH2 0x1A0E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x153A DUP6 PUSH2 0x1A0E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP8 SWAP3 SWAP1 PUSH2 0x156C SWAP1 DUP5 SWAP1 PUSH2 0x2343 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP3 PUSH1 0x0 SWAP3 SWAP2 DUP8 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x15CC DUP4 PUSH1 0x0 DUP10 DUP10 DUP10 DUP10 PUSH2 0x1A59 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x1637 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0xDAD2E6DAC2E8C6D PUSH1 0xC3 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x675 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x165D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP1 PUSH2 0x25E7 JUMP JUMPDEST CALLER PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1744 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x167E JUMPI PUSH2 0x167E PUSH2 0x241D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x169C JUMPI PUSH2 0x169C PUSH2 0x241D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE DUP1 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x16EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP1 PUSH2 0x262C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x1729 SWAP1 DUP5 SWAP1 PUSH2 0x2343 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x173D SWAP1 PUSH2 0x2433 JUMP JUMPDEST SWAP1 POP PUSH2 0x1661 JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1794 SWAP3 SWAP2 SWAP1 PUSH2 0x2676 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x17AA DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1BB4 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x1877 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x103337B91039B2B633 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x675 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x190A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP1 PUSH2 0x25E7 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x1916 DUP6 PUSH2 0x1A0E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1923 DUP6 PUSH2 0x1A0E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0x1966 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP1 PUSH2 0x262C JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0x19A3 SWAP1 DUP5 SWAP1 PUSH2 0x2343 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1A03 DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x1A59 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1A48 JUMPI PUSH2 0x1A48 PUSH2 0x241D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x17AA JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0x1A9D SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x26A4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1AD8 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1AD5 SWAP2 DUP2 ADD SWAP1 PUSH2 0x26E9 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1B84 JUMPI PUSH2 0x1AE4 PUSH2 0x2706 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH2 0x1B1D JUMPI POP PUSH2 0x1AF8 PUSH2 0x2722 JUMP JUMPDEST DUP1 PUSH2 0x1B03 JUMPI POP PUSH2 0x1B1F JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP2 SWAP1 PUSH2 0x1DD2 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x2932B1B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x675 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0x15CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP1 PUSH2 0x27AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x17AA JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0x1BF8 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x27F3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1C33 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1C30 SWAP2 DUP2 ADD SWAP1 PUSH2 0x26E9 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1C3F JUMPI PUSH2 0x1AE4 PUSH2 0x2706 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0x15CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP1 PUSH2 0x27AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x13DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1CA2 DUP2 PUSH2 0x1C6F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x13DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1CE3 DUP2 PUSH2 0x1CB0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1CFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1D13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1D2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1D5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D67 DUP6 DUP3 DUP7 ADD PUSH2 0x1CEA JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1DB2 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x1D96 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1CE3 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1D8C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1DF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1E42 JUMPI PUSH2 0x1E42 PUSH2 0x1E07 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x1E62 JUMPI PUSH2 0x1E62 PUSH2 0x1E07 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1E8A DUP3 PUSH2 0x1E49 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E97 DUP3 DUP3 PUSH2 0x1E1D JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP7 DUP5 GT ISZERO PUSH2 0x1EB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1ED2 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x1EBB JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1EEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1F07 JUMPI PUSH2 0x1F07 PUSH2 0x1E07 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F1E PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0x1E1D JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1F33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1F68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1F73 DUP2 PUSH2 0x1C6F JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1F83 DUP2 PUSH2 0x1C6F JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1F9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FAB DUP10 DUP4 DUP11 ADD PUSH2 0x1E6C JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1FC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FCD DUP10 DUP4 DUP11 ADD PUSH2 0x1E6C JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1FE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FF0 DUP9 DUP3 DUP10 ADD PUSH2 0x1EDD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2010 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2027 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x203B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x2048 DUP3 PUSH2 0x1E49 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2055 DUP3 DUP3 PUSH2 0x1E1D JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP10 DUP5 GT ISZERO PUSH2 0x2075 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x209C JUMPI DUP6 CALLDATALOAD PUSH2 0x208D DUP2 PUSH2 0x1C6F JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0x207A JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0x20B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20BF DUP6 DUP3 DUP7 ADD PUSH2 0x1E6C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x20F9 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x20DD JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1CE3 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x20C9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2129 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1CE3 DUP2 PUSH2 0x1C6F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x215E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x2181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2196 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x21BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x21C6 DUP2 PUSH2 0x1C6F JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x21DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x21FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2220 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x222C DUP8 DUP3 DUP9 ADD PUSH2 0x1CEA JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x224B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x21DB DUP2 PUSH2 0x1C6F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x227B DUP2 PUSH2 0x1C6F JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x21DB DUP2 PUSH2 0x1C6F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x22A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x22AE DUP2 PUSH2 0x1C6F JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x22BE DUP2 PUSH2 0x1C6F JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x22E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FF0 DUP9 DUP3 DUP10 ADD PUSH2 0x1EDD JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2307 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2327 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x6A1 JUMPI PUSH2 0x6A1 PUSH2 0x232D JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xB SWAP1 DUP3 ADD MSTORE PUSH11 0x496E76616C696420646179 PUSH1 0xA8 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x6A1 JUMPI PUSH2 0x6A1 PUSH2 0x232D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x23B7 JUMPI PUSH2 0x23B7 PUSH2 0x2392 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x6A1 JUMPI PUSH2 0x6A1 PUSH2 0x232D JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x195C881BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2445 JUMPI PUSH2 0x2445 PUSH2 0x232D JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x245E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1CE3 DUP2 PUSH2 0x1C6F JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2478 JUMPI PUSH2 0x2478 PUSH2 0x2392 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x248F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE DUP2 ADD DUP3 SWAP1 MSTORE DUP2 DUP4 PUSH1 0x80 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x80 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x2523 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x2504 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17AA JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2510 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2541 JUMPI PUSH2 0x2541 PUSH2 0x1E07 JUMP JUMPDEST PUSH2 0x2555 DUP2 PUSH2 0x254F DUP5 SLOAD PUSH2 0x22F3 JUMP JUMPDEST DUP5 PUSH2 0x24DD JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x258A JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2572 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x25B9 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x259A JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x25D7 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2689 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x20C9 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x269B DUP2 DUP6 PUSH2 0x20C9 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x26DE SWAP1 DUP4 ADD DUP5 PUSH2 0x1D8C JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1CE3 DUP2 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x271F JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x2730 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x275F JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x2777 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2791 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x27A0 PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH2 0x1E1D JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x281F SWAP1 DUP4 ADD DUP7 PUSH2 0x20C9 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x2831 DUP2 DUP7 PUSH2 0x20C9 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x2845 DUP2 DUP6 PUSH2 0x1D8C JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 SWAP13 0xDA 0x4C 0x4E 0xFC STATICCALL BASEFEE 0xE6 0xE2 0xE5 0xEB SUB 0xC PC ADD 0xE4 0xE PUSH27 0x7D023522ED1AC0166663AE6A0864736F6C63430008130033687474 PUSH17 0x733A2F2F626173657061696E742E78797A 0x2F PUSH2 0x7069 0x2F PUSH2 0x7274 0x2F PUSH28 0x69647D00000000000000000000000000000000000000000000000000 ","sourceMap":"344:4803:23:-:0;;;773:12;739:46;;832:7;791:48;;1301:183;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1107:62:3;;;;;;;;;;;;;;;;;1149:13;1157:4;1149:7;:13::i;:::-;-1:-1:-1;936:32:0;734:10:12;936:18:0;:32::i;:::-;1419:7:23::1;:18:::0;;-1:-1:-1;;;;;;1419:18:23::1;-1:-1:-1::0;;;;;1419:18:23;;;::::1;::::0;;;::::1;::::0;;;1447:30:::1;::::0;344:4803;;8149:86:3;8215:4;:13;8222:6;8215:4;:13;:::i;:::-;;8149:86;:::o;2426:187:0:-;2518:6;;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;;2566:40;;2518:6;;;2534:17;2518:6;;2566:40;;2499:16;;2566:40;2489:124;2426:187;:::o;14:375:25:-;117:6;125;178:2;166:9;157:7;153:23;149:32;146:52;;;194:1;191;184:12;146:52;220:16;;-1:-1:-1;;;;;265:31:25;;255:42;;245:70;;311:1;308;301:12;245:70;379:2;364:18;;;;358:25;334:5;;358:25;;-1:-1:-1;;;14:375:25:o;394:127::-;455:10;450:3;446:20;443:1;436:31;486:4;483:1;476:15;510:4;507:1;500:15;526:380;605:1;601:12;;;;648;;;669:61;;723:4;715:6;711:17;701:27;;669:61;776:2;768:6;765:14;745:18;742:38;739:161;;822:10;817:3;813:20;810:1;803:31;857:4;854:1;847:15;885:4;882:1;875:15;739:161;;526:380;;;:::o;1037:545::-;1139:2;1134:3;1131:11;1128:448;;;1175:1;1200:5;1196:2;1189:17;1245:4;1241:2;1231:19;1315:2;1303:10;1299:19;1296:1;1292:27;1286:4;1282:38;1351:4;1339:10;1336:20;1333:47;;;-1:-1:-1;1374:4:25;1333:47;1429:2;1424:3;1420:12;1417:1;1413:20;1407:4;1403:31;1393:41;;1484:82;1502:2;1495:5;1492:13;1484:82;;;1547:17;;;1528:1;1517:13;1484:82;;;1488:3;;;1128:448;1037:545;;;:::o;1758:1352::-;1878:10;;-1:-1:-1;;;;;1900:30:25;;1897:56;;;1933:18;;:::i;:::-;1962:97;2052:6;2012:38;2044:4;2038:11;2012:38;:::i;:::-;2006:4;1962:97;:::i;:::-;2114:4;;2178:2;2167:14;;2195:1;2190:663;;;;2897:1;2914:6;2911:89;;;-1:-1:-1;2966:19:25;;;2960:26;2911:89;-1:-1:-1;;1715:1:25;1711:11;;;1707:24;1703:29;1693:40;1739:1;1735:11;;;1690:57;3013:81;;2160:944;;2190:663;984:1;977:14;;;1021:4;1008:18;;-1:-1:-1;;2226:20:25;;;2344:236;2358:7;2355:1;2352:14;2344:236;;;2447:19;;;2441:26;2426:42;;2539:27;;;;2507:1;2495:14;;;;2374:19;;2344:236;;;2348:3;2608:6;2599:7;2596:19;2593:201;;;2669:19;;;2663:26;-1:-1:-1;;2752:1:25;2748:14;;;2764:3;2744:24;2740:37;2736:42;2721:58;2706:74;;2593:201;-1:-1:-1;;;;;2840:1:25;2824:14;;;2820:22;2807:36;;-1:-1:-1;1758:1352:25:o;:::-;344:4803:23;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1217":{"entryPoint":null,"id":1217,"parameterSlots":6,"returnSlots":0},"@_asSingletonArray_1373":{"entryPoint":6670,"id":1373,"parameterSlots":1,"returnSlots":1},"@_beforeTokenTransfer_1198":{"entryPoint":null,"id":1198,"parameterSlots":6,"returnSlots":0},"@_checkOwner_54":{"entryPoint":5211,"id":54,"parameterSlots":0,"returnSlots":0},"@_doSafeBatchTransferAcceptanceCheck_1345":{"entryPoint":7092,"id":1345,"parameterSlots":6,"returnSlots":0},"@_doSafeTransferAcceptanceCheck_1280":{"entryPoint":6745,"id":1280,"parameterSlots":6,"returnSlots":0},"@_mint_808":{"entryPoint":5313,"id":808,"parameterSlots":4,"returnSlots":0},"@_msgSender_2982":{"entryPoint":null,"id":2982,"parameterSlots":0,"returnSlots":1},"@_safeBatchTransferFrom_696":{"entryPoint":5589,"id":696,"parameterSlots":5,"returnSlots":0},"@_safeTransferFrom_561":{"entryPoint":6372,"id":561,"parameterSlots":5,"returnSlots":0},"@_setApprovalForAll_1179":{"entryPoint":6148,"id":1179,"parameterSlots":3,"returnSlots":0},"@_setURI_707":{"entryPoint":5301,"id":707,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_111":{"entryPoint":6066,"id":111,"parameterSlots":1,"returnSlots":0},"@authorWithdraw_5718":{"entryPoint":3095,"id":5718,"parameterSlots":2,"returnSlots":0},"@balanceOfBatch_331":{"entryPoint":2543,"id":331,"parameterSlots":2,"returnSlots":1},"@balanceOf_267":{"entryPoint":1550,"id":267,"parameterSlots":2,"returnSlots":1},"@brushUsed_5566":{"entryPoint":null,"id":5566,"parameterSlots":2,"returnSlots":1},"@brushes_5244":{"entryPoint":null,"id":5244,"parameterSlots":0,"returnSlots":0},"@canvases_5264":{"entryPoint":null,"id":5264,"parameterSlots":0,"returnSlots":0},"@contribution_5549":{"entryPoint":null,"id":5549,"parameterSlots":2,"returnSlots":1},"@epochDuration_5246":{"entryPoint":null,"id":5246,"parameterSlots":0,"returnSlots":0},"@isApprovedForAll_366":{"entryPoint":null,"id":366,"parameterSlots":2,"returnSlots":1},"@isContract_2658":{"entryPoint":null,"id":2658,"parameterSlots":1,"returnSlots":1},"@mint_5420":{"entryPoint":2006,"id":5420,"parameterSlots":2,"returnSlots":0},"@openEditionPrice_5269":{"entryPoint":null,"id":5269,"parameterSlots":0,"returnSlots":0},"@ownerEarned_5274":{"entryPoint":null,"id":5274,"parameterSlots":0,"returnSlots":0},"@ownerFeePartsPerMillion_5272":{"entryPoint":null,"id":5272,"parameterSlots":0,"returnSlots":0},"@owner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@paint_5532":{"entryPoint":3787,"id":5532,"parameterSlots":4,"returnSlots":0},"@renounceOwnership_68":{"entryPoint":3075,"id":68,"parameterSlots":0,"returnSlots":0},"@safeBatchTransferFrom_444":{"entryPoint":2467,"id":444,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_404":{"entryPoint":4896,"id":404,"parameterSlots":5,"returnSlots":0},"@setApprovalForAll_348":{"entryPoint":3776,"id":348,"parameterSlots":2,"returnSlots":0},"@setOpenEditionPrice_5791":{"entryPoint":4828,"id":5791,"parameterSlots":1,"returnSlots":0},"@setOwnerFee_5775":{"entryPoint":5086,"id":5775,"parameterSlots":1,"returnSlots":0},"@setURI_5752":{"entryPoint":1783,"id":5752,"parameterSlots":2,"returnSlots":0},"@start_5740":{"entryPoint":4696,"id":5740,"parameterSlots":0,"returnSlots":0},"@startedAt_5266":{"entryPoint":null,"id":5266,"parameterSlots":0,"returnSlots":0},"@supportsInterface_227":{"entryPoint":1703,"id":227,"parameterSlots":1,"returnSlots":1},"@supportsInterface_4247":{"entryPoint":null,"id":4247,"parameterSlots":1,"returnSlots":1},"@today_5583":{"entryPoint":4621,"id":5583,"parameterSlots":0,"returnSlots":1},"@transferOwnership_91":{"entryPoint":4965,"id":91,"parameterSlots":1,"returnSlots":0},"@uri_239":{"entryPoint":1858,"id":239,"parameterSlots":1,"returnSlots":1},"@withdraw_5826":{"entryPoint":2840,"id":5826,"parameterSlots":1,"returnSlots":0},"abi_decode_array_uint256_dyn":{"entryPoint":7788,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":7901,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_string_calldata":{"entryPoint":7402,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":8471,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":9292,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":8797,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr":{"entryPoint":8016,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr":{"entryPoint":8843,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_bool":{"entryPoint":8616,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":7300,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":8189,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":8500,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":7366,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":9961,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_calldata_ptr":{"entryPoint":7474,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256":{"entryPoint":7539,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":9341,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address":{"entryPoint":8760,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":7653,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256t_bytes_calldata_ptr":{"entryPoint":8678,"id":null,"parameterSlots":2,"returnSlots":4},"abi_encode_array_uint256_dyn":{"entryPoint":8393,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":7564,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":10227,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":9892,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":8452,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":9846,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IBasePaintBrush_$5844__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7634,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10155,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d4c94f69f8b7e0961e88f9636d9f77fffa457b39c4f4dfb1516d377b0308603__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9167,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4acae158723a2a1ded16d661c6996469d8495895a0bc1556e7cbd5adfcb24208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4b4cc99522fdcee4d97d6d2d3cbabeb353d40433850bd46ba29c08dbfba843f9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_55ab3174a5323a5cf1c9a30c7e43cc6ccd65bdd10d3571758b8ba8dbb82736a6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6e44432d9ae63e2829c6f8f2758edfa5a1bfee3e8b1cca3f560b2fd694999578__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9046,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9703,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7ff6289abbb0687399ebc1aafeab18832fc5a110fcdbd805e18f72d422711e7a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9772,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a4ae2b81cf1f00a8f3dffd1b5f6fce615157e47012c48e094e545aeb46d225f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e004b49046650d027883dbb60be120e8744aabb2d60ba79ed02289cddcd73c53__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e898f8ccd4c210573d12d900c20fca6d8cf7a9ab1db17c5b39361b7b1a36c89c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_eaa01effe6abd0543e9529d3961b0f5d26980f0661c156a79b89c39a093463f7__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_address_t_bytes_calldata_ptr__to_t_uint256_t_address_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":9366,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":7753,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":9027,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":9128,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":9083,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":9148,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":9437,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":9512,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":8947,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":7709,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":9267,"id":null,"parameterSlots":1,"returnSlots":1},"mod_t_uint256":{"entryPoint":9321,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":9005,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":9106,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":9245,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":7687,"id":null,"parameterSlots":0,"returnSlots":0},"return_data_selector":{"entryPoint":9990,"id":null,"parameterSlots":0,"returnSlots":1},"try_decode_error_message":{"entryPoint":10018,"id":null,"parameterSlots":0,"returnSlots":1},"validator_revert_address":{"entryPoint":7279,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":7344,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:29570:25","statements":[{"nodeType":"YulBlock","src":"6:3:25","statements":[]},{"body":{"nodeType":"YulBlock","src":"59:86:25","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:25"},"nodeType":"YulFunctionCall","src":"125:12:25"},"nodeType":"YulExpressionStatement","src":"125:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"82:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"108:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"113:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"104:3:25"},"nodeType":"YulFunctionCall","src":"104:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"117:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:25"},"nodeType":"YulFunctionCall","src":"100:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"89:3:25"},"nodeType":"YulFunctionCall","src":"89:31:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"79:2:25"},"nodeType":"YulFunctionCall","src":"79:42:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"72:6:25"},"nodeType":"YulFunctionCall","src":"72:50:25"},"nodeType":"YulIf","src":"69:70:25"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"48:5:25","type":""}],"src":"14:131:25"},{"body":{"nodeType":"YulBlock","src":"237:228:25","statements":[{"body":{"nodeType":"YulBlock","src":"283:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"292:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"295:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"285:6:25"},"nodeType":"YulFunctionCall","src":"285:12:25"},"nodeType":"YulExpressionStatement","src":"285:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"258:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"267:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"254:3:25"},"nodeType":"YulFunctionCall","src":"254:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"279:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"250:3:25"},"nodeType":"YulFunctionCall","src":"250:32:25"},"nodeType":"YulIf","src":"247:52:25"},{"nodeType":"YulVariableDeclaration","src":"308:36:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"334:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"321:12:25"},"nodeType":"YulFunctionCall","src":"321:23:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"312:5:25","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"378:5:25"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"353:24:25"},"nodeType":"YulFunctionCall","src":"353:31:25"},"nodeType":"YulExpressionStatement","src":"353:31:25"},{"nodeType":"YulAssignment","src":"393:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"403:5:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"393:6:25"}]},{"nodeType":"YulAssignment","src":"417:42:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"444:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"455:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"440:3:25"},"nodeType":"YulFunctionCall","src":"440:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"427:12:25"},"nodeType":"YulFunctionCall","src":"427:32:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"417:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"195:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"206:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"218:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"226:6:25","type":""}],"src":"150:315:25"},{"body":{"nodeType":"YulBlock","src":"571:76:25","statements":[{"nodeType":"YulAssignment","src":"581:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"593:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"604:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"589:3:25"},"nodeType":"YulFunctionCall","src":"589:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"581:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"623:9:25"},{"name":"value0","nodeType":"YulIdentifier","src":"634:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"616:6:25"},"nodeType":"YulFunctionCall","src":"616:25:25"},"nodeType":"YulExpressionStatement","src":"616:25:25"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"540:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"551:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"562:4:25","type":""}],"src":"470:177:25"},{"body":{"nodeType":"YulBlock","src":"696:87:25","statements":[{"body":{"nodeType":"YulBlock","src":"761:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"770:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"773:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"763:6:25"},"nodeType":"YulFunctionCall","src":"763:12:25"},"nodeType":"YulExpressionStatement","src":"763:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"719:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"730:5:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"741:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"746:10:25","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"737:3:25"},"nodeType":"YulFunctionCall","src":"737:20:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"726:3:25"},"nodeType":"YulFunctionCall","src":"726:32:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"716:2:25"},"nodeType":"YulFunctionCall","src":"716:43:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"709:6:25"},"nodeType":"YulFunctionCall","src":"709:51:25"},"nodeType":"YulIf","src":"706:71:25"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"685:5:25","type":""}],"src":"652:131:25"},{"body":{"nodeType":"YulBlock","src":"857:176:25","statements":[{"body":{"nodeType":"YulBlock","src":"903:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"912:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"915:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"905:6:25"},"nodeType":"YulFunctionCall","src":"905:12:25"},"nodeType":"YulExpressionStatement","src":"905:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"878:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"887:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"874:3:25"},"nodeType":"YulFunctionCall","src":"874:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"899:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"870:3:25"},"nodeType":"YulFunctionCall","src":"870:32:25"},"nodeType":"YulIf","src":"867:52:25"},{"nodeType":"YulVariableDeclaration","src":"928:36:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"954:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"941:12:25"},"nodeType":"YulFunctionCall","src":"941:23:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"932:5:25","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"997:5:25"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"973:23:25"},"nodeType":"YulFunctionCall","src":"973:30:25"},"nodeType":"YulExpressionStatement","src":"973:30:25"},{"nodeType":"YulAssignment","src":"1012:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"1022:5:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1012:6:25"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"823:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"834:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"846:6:25","type":""}],"src":"788:245:25"},{"body":{"nodeType":"YulBlock","src":"1133:92:25","statements":[{"nodeType":"YulAssignment","src":"1143:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1155:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1166:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1151:3:25"},"nodeType":"YulFunctionCall","src":"1151:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1143:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1185:9:25"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1210:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1203:6:25"},"nodeType":"YulFunctionCall","src":"1203:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1196:6:25"},"nodeType":"YulFunctionCall","src":"1196:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1178:6:25"},"nodeType":"YulFunctionCall","src":"1178:41:25"},"nodeType":"YulExpressionStatement","src":"1178:41:25"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1102:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1113:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1124:4:25","type":""}],"src":"1038:187:25"},{"body":{"nodeType":"YulBlock","src":"1303:275:25","statements":[{"body":{"nodeType":"YulBlock","src":"1352:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1361:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1364:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1354:6:25"},"nodeType":"YulFunctionCall","src":"1354:12:25"},"nodeType":"YulExpressionStatement","src":"1354:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1331:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"1339:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1327:3:25"},"nodeType":"YulFunctionCall","src":"1327:17:25"},{"name":"end","nodeType":"YulIdentifier","src":"1346:3:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1323:3:25"},"nodeType":"YulFunctionCall","src":"1323:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1316:6:25"},"nodeType":"YulFunctionCall","src":"1316:35:25"},"nodeType":"YulIf","src":"1313:55:25"},{"nodeType":"YulAssignment","src":"1377:30:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1400:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1387:12:25"},"nodeType":"YulFunctionCall","src":"1387:20:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1377:6:25"}]},{"body":{"nodeType":"YulBlock","src":"1450:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1459:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1462:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1452:6:25"},"nodeType":"YulFunctionCall","src":"1452:12:25"},"nodeType":"YulExpressionStatement","src":"1452:12:25"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1422:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"1430:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1419:2:25"},"nodeType":"YulFunctionCall","src":"1419:30:25"},"nodeType":"YulIf","src":"1416:50:25"},{"nodeType":"YulAssignment","src":"1475:29:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1491:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"1499:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:25"},"nodeType":"YulFunctionCall","src":"1487:17:25"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"1475:8:25"}]},{"body":{"nodeType":"YulBlock","src":"1556:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1565:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1568:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1558:6:25"},"nodeType":"YulFunctionCall","src":"1558:12:25"},"nodeType":"YulExpressionStatement","src":"1558:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1527:6:25"},{"name":"length","nodeType":"YulIdentifier","src":"1535:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1523:3:25"},"nodeType":"YulFunctionCall","src":"1523:19:25"},{"kind":"number","nodeType":"YulLiteral","src":"1544:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1519:3:25"},"nodeType":"YulFunctionCall","src":"1519:30:25"},{"name":"end","nodeType":"YulIdentifier","src":"1551:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1516:2:25"},"nodeType":"YulFunctionCall","src":"1516:39:25"},"nodeType":"YulIf","src":"1513:59:25"}]},"name":"abi_decode_string_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1266:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"1274:3:25","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"1282:8:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"1292:6:25","type":""}],"src":"1230:348:25"},{"body":{"nodeType":"YulBlock","src":"1673:321:25","statements":[{"body":{"nodeType":"YulBlock","src":"1719:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1728:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1731:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1721:6:25"},"nodeType":"YulFunctionCall","src":"1721:12:25"},"nodeType":"YulExpressionStatement","src":"1721:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1694:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"1703:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1690:3:25"},"nodeType":"YulFunctionCall","src":"1690:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"1715:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1686:3:25"},"nodeType":"YulFunctionCall","src":"1686:32:25"},"nodeType":"YulIf","src":"1683:52:25"},{"nodeType":"YulVariableDeclaration","src":"1744:37:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1771:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1758:12:25"},"nodeType":"YulFunctionCall","src":"1758:23:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1748:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"1824:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1833:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1836:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1826:6:25"},"nodeType":"YulFunctionCall","src":"1826:12:25"},"nodeType":"YulExpressionStatement","src":"1826:12:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1796:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"1804:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1793:2:25"},"nodeType":"YulFunctionCall","src":"1793:30:25"},"nodeType":"YulIf","src":"1790:50:25"},{"nodeType":"YulVariableDeclaration","src":"1849:85:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1906:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"1917:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1902:3:25"},"nodeType":"YulFunctionCall","src":"1902:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1926:7:25"}],"functionName":{"name":"abi_decode_string_calldata","nodeType":"YulIdentifier","src":"1875:26:25"},"nodeType":"YulFunctionCall","src":"1875:59:25"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"1853:8:25","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"1863:8:25","type":""}]},{"nodeType":"YulAssignment","src":"1943:18:25","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"1953:8:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1943:6:25"}]},{"nodeType":"YulAssignment","src":"1970:18:25","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"1980:8:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1970:6:25"}]}]},"name":"abi_decode_tuple_t_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1631:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1642:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1654:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1662:6:25","type":""}],"src":"1583:411:25"},{"body":{"nodeType":"YulBlock","src":"2069:110:25","statements":[{"body":{"nodeType":"YulBlock","src":"2115:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2124:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2127:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2117:6:25"},"nodeType":"YulFunctionCall","src":"2117:12:25"},"nodeType":"YulExpressionStatement","src":"2117:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2090:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"2099:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2086:3:25"},"nodeType":"YulFunctionCall","src":"2086:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"2111:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2082:3:25"},"nodeType":"YulFunctionCall","src":"2082:32:25"},"nodeType":"YulIf","src":"2079:52:25"},{"nodeType":"YulAssignment","src":"2140:33:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2163:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2150:12:25"},"nodeType":"YulFunctionCall","src":"2150:23:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2140:6:25"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2035:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2046:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2058:6:25","type":""}],"src":"1999:180:25"},{"body":{"nodeType":"YulBlock","src":"2234:373:25","statements":[{"nodeType":"YulVariableDeclaration","src":"2244:26:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2264:5:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2258:5:25"},"nodeType":"YulFunctionCall","src":"2258:12:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2248:6:25","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2286:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"2291:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2279:6:25"},"nodeType":"YulFunctionCall","src":"2279:19:25"},"nodeType":"YulExpressionStatement","src":"2279:19:25"},{"nodeType":"YulVariableDeclaration","src":"2307:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"2316:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2311:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"2378:110:25","statements":[{"nodeType":"YulVariableDeclaration","src":"2392:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"2402:4:25","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2396:2:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2434:3:25"},{"name":"i","nodeType":"YulIdentifier","src":"2439:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2430:3:25"},"nodeType":"YulFunctionCall","src":"2430:11:25"},{"name":"_1","nodeType":"YulIdentifier","src":"2443:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2426:3:25"},"nodeType":"YulFunctionCall","src":"2426:20:25"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2462:5:25"},{"name":"i","nodeType":"YulIdentifier","src":"2469:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2458:3:25"},"nodeType":"YulFunctionCall","src":"2458:13:25"},{"name":"_1","nodeType":"YulIdentifier","src":"2473:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2454:3:25"},"nodeType":"YulFunctionCall","src":"2454:22:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2448:5:25"},"nodeType":"YulFunctionCall","src":"2448:29:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2419:6:25"},"nodeType":"YulFunctionCall","src":"2419:59:25"},"nodeType":"YulExpressionStatement","src":"2419:59:25"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2337:1:25"},{"name":"length","nodeType":"YulIdentifier","src":"2340:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2334:2:25"},"nodeType":"YulFunctionCall","src":"2334:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2348:21:25","statements":[{"nodeType":"YulAssignment","src":"2350:17:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2359:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"2362:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2355:3:25"},"nodeType":"YulFunctionCall","src":"2355:12:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2350:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"2330:3:25","statements":[]},"src":"2326:162:25"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2512:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"2517:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2508:3:25"},"nodeType":"YulFunctionCall","src":"2508:16:25"},{"kind":"number","nodeType":"YulLiteral","src":"2526:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2504:3:25"},"nodeType":"YulFunctionCall","src":"2504:27:25"},{"kind":"number","nodeType":"YulLiteral","src":"2533:1:25","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2497:6:25"},"nodeType":"YulFunctionCall","src":"2497:38:25"},"nodeType":"YulExpressionStatement","src":"2497:38:25"},{"nodeType":"YulAssignment","src":"2544:57:25","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2559:3:25"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2572:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"2580:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2568:3:25"},"nodeType":"YulFunctionCall","src":"2568:15:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2589:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2585:3:25"},"nodeType":"YulFunctionCall","src":"2585:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2564:3:25"},"nodeType":"YulFunctionCall","src":"2564:29:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2555:3:25"},"nodeType":"YulFunctionCall","src":"2555:39:25"},{"kind":"number","nodeType":"YulLiteral","src":"2596:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2551:3:25"},"nodeType":"YulFunctionCall","src":"2551:50:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2544:3:25"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2211:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2218:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2226:3:25","type":""}],"src":"2184:423:25"},{"body":{"nodeType":"YulBlock","src":"2733:99:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2750:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"2761:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2743:6:25"},"nodeType":"YulFunctionCall","src":"2743:21:25"},"nodeType":"YulExpressionStatement","src":"2743:21:25"},{"nodeType":"YulAssignment","src":"2773:53:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2799:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2811:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"2822:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2807:3:25"},"nodeType":"YulFunctionCall","src":"2807:18:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"2781:17:25"},"nodeType":"YulFunctionCall","src":"2781:45:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2773:4:25"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2702:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2713:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2724:4:25","type":""}],"src":"2612:220:25"},{"body":{"nodeType":"YulBlock","src":"2924:161:25","statements":[{"body":{"nodeType":"YulBlock","src":"2970:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2979:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2982:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2972:6:25"},"nodeType":"YulFunctionCall","src":"2972:12:25"},"nodeType":"YulExpressionStatement","src":"2972:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2945:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"2954:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2941:3:25"},"nodeType":"YulFunctionCall","src":"2941:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"2966:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2937:3:25"},"nodeType":"YulFunctionCall","src":"2937:32:25"},"nodeType":"YulIf","src":"2934:52:25"},{"nodeType":"YulAssignment","src":"2995:33:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3018:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3005:12:25"},"nodeType":"YulFunctionCall","src":"3005:23:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2995:6:25"}]},{"nodeType":"YulAssignment","src":"3037:42:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3064:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3075:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3060:3:25"},"nodeType":"YulFunctionCall","src":"3060:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3047:12:25"},"nodeType":"YulFunctionCall","src":"3047:32:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3037:6:25"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2882:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2893:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2905:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2913:6:25","type":""}],"src":"2837:248:25"},{"body":{"nodeType":"YulBlock","src":"3122:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3139:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3146:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3151:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3142:3:25"},"nodeType":"YulFunctionCall","src":"3142:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3132:6:25"},"nodeType":"YulFunctionCall","src":"3132:31:25"},"nodeType":"YulExpressionStatement","src":"3132:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3179:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3182:4:25","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3172:6:25"},"nodeType":"YulFunctionCall","src":"3172:15:25"},"nodeType":"YulExpressionStatement","src":"3172:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3203:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3206:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3196:6:25"},"nodeType":"YulFunctionCall","src":"3196:15:25"},"nodeType":"YulExpressionStatement","src":"3196:15:25"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3090:127:25"},{"body":{"nodeType":"YulBlock","src":"3269:202:25","statements":[{"nodeType":"YulVariableDeclaration","src":"3279:58:25","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3301:6:25"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"3317:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"3323:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3313:3:25"},"nodeType":"YulFunctionCall","src":"3313:13:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3332:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3328:3:25"},"nodeType":"YulFunctionCall","src":"3328:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3309:3:25"},"nodeType":"YulFunctionCall","src":"3309:27:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3297:3:25"},"nodeType":"YulFunctionCall","src":"3297:40:25"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"3283:10:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"3412:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3414:16:25"},"nodeType":"YulFunctionCall","src":"3414:18:25"},"nodeType":"YulExpressionStatement","src":"3414:18:25"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3355:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"3367:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3352:2:25"},"nodeType":"YulFunctionCall","src":"3352:34:25"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3391:10:25"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3403:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3388:2:25"},"nodeType":"YulFunctionCall","src":"3388:22:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3349:2:25"},"nodeType":"YulFunctionCall","src":"3349:62:25"},"nodeType":"YulIf","src":"3346:88:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3450:2:25","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3454:10:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3443:6:25"},"nodeType":"YulFunctionCall","src":"3443:22:25"},"nodeType":"YulExpressionStatement","src":"3443:22:25"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"3251:6:25","type":""},{"name":"size","nodeType":"YulTypedName","src":"3259:4:25","type":""}],"src":"3222:249:25"},{"body":{"nodeType":"YulBlock","src":"3545:114:25","statements":[{"body":{"nodeType":"YulBlock","src":"3589:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3591:16:25"},"nodeType":"YulFunctionCall","src":"3591:18:25"},"nodeType":"YulExpressionStatement","src":"3591:18:25"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3561:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"3569:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3558:2:25"},"nodeType":"YulFunctionCall","src":"3558:30:25"},"nodeType":"YulIf","src":"3555:56:25"},{"nodeType":"YulAssignment","src":"3620:33:25","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3636:1:25","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"3639:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3632:3:25"},"nodeType":"YulFunctionCall","src":"3632:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"3648:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3628:3:25"},"nodeType":"YulFunctionCall","src":"3628:25:25"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"3620:4:25"}]}]},"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"3525:6:25","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"3536:4:25","type":""}],"src":"3476:183:25"},{"body":{"nodeType":"YulBlock","src":"3728:660:25","statements":[{"body":{"nodeType":"YulBlock","src":"3777:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3786:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3789:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3779:6:25"},"nodeType":"YulFunctionCall","src":"3779:12:25"},"nodeType":"YulExpressionStatement","src":"3779:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3756:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"3764:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3752:3:25"},"nodeType":"YulFunctionCall","src":"3752:17:25"},{"name":"end","nodeType":"YulIdentifier","src":"3771:3:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3748:3:25"},"nodeType":"YulFunctionCall","src":"3748:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3741:6:25"},"nodeType":"YulFunctionCall","src":"3741:35:25"},"nodeType":"YulIf","src":"3738:55:25"},{"nodeType":"YulVariableDeclaration","src":"3802:30:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3825:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3812:12:25"},"nodeType":"YulFunctionCall","src":"3812:20:25"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3806:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3841:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"3851:4:25","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3845:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3864:53:25","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3914:2:25"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"3874:39:25"},"nodeType":"YulFunctionCall","src":"3874:43:25"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3868:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3926:23:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3946:2:25","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3940:5:25"},"nodeType":"YulFunctionCall","src":"3940:9:25"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3930:6:25","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3978:6:25"},{"name":"_3","nodeType":"YulIdentifier","src":"3986:2:25"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"3958:19:25"},"nodeType":"YulFunctionCall","src":"3958:31:25"},"nodeType":"YulExpressionStatement","src":"3958:31:25"},{"nodeType":"YulVariableDeclaration","src":"3998:17:25","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4009:6:25"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"4002:3:25","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4031:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"4039:2:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4024:6:25"},"nodeType":"YulFunctionCall","src":"4024:18:25"},"nodeType":"YulExpressionStatement","src":"4024:18:25"},{"nodeType":"YulAssignment","src":"4051:22:25","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4062:6:25"},{"name":"_2","nodeType":"YulIdentifier","src":"4070:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4058:3:25"},"nodeType":"YulFunctionCall","src":"4058:15:25"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4051:3:25"}]},{"nodeType":"YulVariableDeclaration","src":"4082:46:25","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4104:6:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4116:1:25","type":"","value":"5"},{"name":"_1","nodeType":"YulIdentifier","src":"4119:2:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4112:3:25"},"nodeType":"YulFunctionCall","src":"4112:10:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4100:3:25"},"nodeType":"YulFunctionCall","src":"4100:23:25"},{"name":"_2","nodeType":"YulIdentifier","src":"4125:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4096:3:25"},"nodeType":"YulFunctionCall","src":"4096:32:25"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"4086:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"4156:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4165:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4168:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4158:6:25"},"nodeType":"YulFunctionCall","src":"4158:12:25"},"nodeType":"YulExpressionStatement","src":"4158:12:25"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"4143:6:25"},{"name":"end","nodeType":"YulIdentifier","src":"4151:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4140:2:25"},"nodeType":"YulFunctionCall","src":"4140:15:25"},"nodeType":"YulIf","src":"4137:35:25"},{"nodeType":"YulVariableDeclaration","src":"4181:26:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4196:6:25"},{"name":"_2","nodeType":"YulIdentifier","src":"4204:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4192:3:25"},"nodeType":"YulFunctionCall","src":"4192:15:25"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"4185:3:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"4272:86:25","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4293:3:25"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4311:3:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4298:12:25"},"nodeType":"YulFunctionCall","src":"4298:17:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4286:6:25"},"nodeType":"YulFunctionCall","src":"4286:30:25"},"nodeType":"YulExpressionStatement","src":"4286:30:25"},{"nodeType":"YulAssignment","src":"4329:19:25","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4340:3:25"},{"name":"_2","nodeType":"YulIdentifier","src":"4345:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4336:3:25"},"nodeType":"YulFunctionCall","src":"4336:12:25"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"4329:3:25"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4227:3:25"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"4232:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4224:2:25"},"nodeType":"YulFunctionCall","src":"4224:15:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4240:23:25","statements":[{"nodeType":"YulAssignment","src":"4242:19:25","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4253:3:25"},{"name":"_2","nodeType":"YulIdentifier","src":"4258:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4249:3:25"},"nodeType":"YulFunctionCall","src":"4249:12:25"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"4242:3:25"}]}]},"pre":{"nodeType":"YulBlock","src":"4220:3:25","statements":[]},"src":"4216:142:25"},{"nodeType":"YulAssignment","src":"4367:15:25","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4376:6:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4367:5:25"}]}]},"name":"abi_decode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3702:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"3710:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3718:5:25","type":""}],"src":"3664:724:25"},{"body":{"nodeType":"YulBlock","src":"4445:503:25","statements":[{"body":{"nodeType":"YulBlock","src":"4494:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4503:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4506:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4496:6:25"},"nodeType":"YulFunctionCall","src":"4496:12:25"},"nodeType":"YulExpressionStatement","src":"4496:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4473:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"4481:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4469:3:25"},"nodeType":"YulFunctionCall","src":"4469:17:25"},{"name":"end","nodeType":"YulIdentifier","src":"4488:3:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4465:3:25"},"nodeType":"YulFunctionCall","src":"4465:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4458:6:25"},"nodeType":"YulFunctionCall","src":"4458:35:25"},"nodeType":"YulIf","src":"4455:55:25"},{"nodeType":"YulVariableDeclaration","src":"4519:30:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4542:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4529:12:25"},"nodeType":"YulFunctionCall","src":"4529:20:25"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4523:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"4588:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4590:16:25"},"nodeType":"YulFunctionCall","src":"4590:18:25"},"nodeType":"YulExpressionStatement","src":"4590:18:25"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4564:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"4568:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4561:2:25"},"nodeType":"YulFunctionCall","src":"4561:26:25"},"nodeType":"YulIf","src":"4558:52:25"},{"nodeType":"YulVariableDeclaration","src":"4619:23:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4639:2:25","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4633:5:25"},"nodeType":"YulFunctionCall","src":"4633:9:25"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4623:6:25","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4671:6:25"},{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4691:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"4695:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4687:3:25"},"nodeType":"YulFunctionCall","src":"4687:13:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4706:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4702:3:25"},"nodeType":"YulFunctionCall","src":"4702:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4683:3:25"},"nodeType":"YulFunctionCall","src":"4683:27:25"},{"kind":"number","nodeType":"YulLiteral","src":"4712:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4679:3:25"},"nodeType":"YulFunctionCall","src":"4679:38:25"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"4651:19:25"},"nodeType":"YulFunctionCall","src":"4651:67:25"},"nodeType":"YulExpressionStatement","src":"4651:67:25"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4734:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"4742:2:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4727:6:25"},"nodeType":"YulFunctionCall","src":"4727:18:25"},"nodeType":"YulExpressionStatement","src":"4727:18:25"},{"body":{"nodeType":"YulBlock","src":"4793:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4802:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4805:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4795:6:25"},"nodeType":"YulFunctionCall","src":"4795:12:25"},"nodeType":"YulExpressionStatement","src":"4795:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4768:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"4776:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4764:3:25"},"nodeType":"YulFunctionCall","src":"4764:15:25"},{"kind":"number","nodeType":"YulLiteral","src":"4781:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4760:3:25"},"nodeType":"YulFunctionCall","src":"4760:26:25"},{"name":"end","nodeType":"YulIdentifier","src":"4788:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4757:2:25"},"nodeType":"YulFunctionCall","src":"4757:35:25"},"nodeType":"YulIf","src":"4754:55:25"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4835:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"4843:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4831:3:25"},"nodeType":"YulFunctionCall","src":"4831:17:25"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4854:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"4862:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4850:3:25"},"nodeType":"YulFunctionCall","src":"4850:17:25"},{"name":"_1","nodeType":"YulIdentifier","src":"4869:2:25"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4818:12:25"},"nodeType":"YulFunctionCall","src":"4818:54:25"},"nodeType":"YulExpressionStatement","src":"4818:54:25"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4896:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"4904:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4892:3:25"},"nodeType":"YulFunctionCall","src":"4892:15:25"},{"kind":"number","nodeType":"YulLiteral","src":"4909:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4888:3:25"},"nodeType":"YulFunctionCall","src":"4888:26:25"},{"kind":"number","nodeType":"YulLiteral","src":"4916:1:25","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4881:6:25"},"nodeType":"YulFunctionCall","src":"4881:37:25"},"nodeType":"YulExpressionStatement","src":"4881:37:25"},{"nodeType":"YulAssignment","src":"4927:15:25","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4936:6:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4927:5:25"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4419:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"4427:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"4435:5:25","type":""}],"src":"4393:555:25"},{"body":{"nodeType":"YulBlock","src":"5150:874:25","statements":[{"body":{"nodeType":"YulBlock","src":"5197:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5206:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5209:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5199:6:25"},"nodeType":"YulFunctionCall","src":"5199:12:25"},"nodeType":"YulExpressionStatement","src":"5199:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5171:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"5180:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5167:3:25"},"nodeType":"YulFunctionCall","src":"5167:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"5192:3:25","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5163:3:25"},"nodeType":"YulFunctionCall","src":"5163:33:25"},"nodeType":"YulIf","src":"5160:53:25"},{"nodeType":"YulVariableDeclaration","src":"5222:36:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5248:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5235:12:25"},"nodeType":"YulFunctionCall","src":"5235:23:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5226:5:25","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5292:5:25"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5267:24:25"},"nodeType":"YulFunctionCall","src":"5267:31:25"},"nodeType":"YulExpressionStatement","src":"5267:31:25"},{"nodeType":"YulAssignment","src":"5307:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"5317:5:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5307:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"5331:47:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5363:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5374:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5359:3:25"},"nodeType":"YulFunctionCall","src":"5359:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5346:12:25"},"nodeType":"YulFunctionCall","src":"5346:32:25"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"5335:7:25","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"5412:7:25"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5387:24:25"},"nodeType":"YulFunctionCall","src":"5387:33:25"},"nodeType":"YulExpressionStatement","src":"5387:33:25"},{"nodeType":"YulAssignment","src":"5429:17:25","value":{"name":"value_1","nodeType":"YulIdentifier","src":"5439:7:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5429:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"5455:46:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5486:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5497:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5482:3:25"},"nodeType":"YulFunctionCall","src":"5482:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5469:12:25"},"nodeType":"YulFunctionCall","src":"5469:32:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5459:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5510:28:25","value":{"kind":"number","nodeType":"YulLiteral","src":"5520:18:25","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5514:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"5565:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5574:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5577:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5567:6:25"},"nodeType":"YulFunctionCall","src":"5567:12:25"},"nodeType":"YulExpressionStatement","src":"5567:12:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5553:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"5561:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5550:2:25"},"nodeType":"YulFunctionCall","src":"5550:14:25"},"nodeType":"YulIf","src":"5547:34:25"},{"nodeType":"YulAssignment","src":"5590:71:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5633:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"5644:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5629:3:25"},"nodeType":"YulFunctionCall","src":"5629:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5653:7:25"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"5600:28:25"},"nodeType":"YulFunctionCall","src":"5600:61:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5590:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"5670:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5703:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5714:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5699:3:25"},"nodeType":"YulFunctionCall","src":"5699:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5686:12:25"},"nodeType":"YulFunctionCall","src":"5686:32:25"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"5674:8:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"5747:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5756:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5759:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5749:6:25"},"nodeType":"YulFunctionCall","src":"5749:12:25"},"nodeType":"YulExpressionStatement","src":"5749:12:25"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5733:8:25"},{"name":"_1","nodeType":"YulIdentifier","src":"5743:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5730:2:25"},"nodeType":"YulFunctionCall","src":"5730:16:25"},"nodeType":"YulIf","src":"5727:36:25"},{"nodeType":"YulAssignment","src":"5772:73:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5815:9:25"},{"name":"offset_1","nodeType":"YulIdentifier","src":"5826:8:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5811:3:25"},"nodeType":"YulFunctionCall","src":"5811:24:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5837:7:25"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"5782:28:25"},"nodeType":"YulFunctionCall","src":"5782:63:25"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5772:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"5854:49:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5887:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5898:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5883:3:25"},"nodeType":"YulFunctionCall","src":"5883:19:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5870:12:25"},"nodeType":"YulFunctionCall","src":"5870:33:25"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"5858:8:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"5932:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5941:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5944:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5934:6:25"},"nodeType":"YulFunctionCall","src":"5934:12:25"},"nodeType":"YulExpressionStatement","src":"5934:12:25"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"5918:8:25"},{"name":"_1","nodeType":"YulIdentifier","src":"5928:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5915:2:25"},"nodeType":"YulFunctionCall","src":"5915:16:25"},"nodeType":"YulIf","src":"5912:36:25"},{"nodeType":"YulAssignment","src":"5957:61:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5988:9:25"},{"name":"offset_2","nodeType":"YulIdentifier","src":"5999:8:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5984:3:25"},"nodeType":"YulFunctionCall","src":"5984:24:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6010:7:25"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"5967:16:25"},"nodeType":"YulFunctionCall","src":"5967:51:25"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"5957:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5084:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5095:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5107:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5115:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5123:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5131:6:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"5139:6:25","type":""}],"src":"4953:1071:25"},{"body":{"nodeType":"YulBlock","src":"6154:102:25","statements":[{"nodeType":"YulAssignment","src":"6164:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6176:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"6187:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6172:3:25"},"nodeType":"YulFunctionCall","src":"6172:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6164:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6206:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6221:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6237:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"6242:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6233:3:25"},"nodeType":"YulFunctionCall","src":"6233:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"6246:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6229:3:25"},"nodeType":"YulFunctionCall","src":"6229:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6217:3:25"},"nodeType":"YulFunctionCall","src":"6217:32:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6199:6:25"},"nodeType":"YulFunctionCall","src":"6199:51:25"},"nodeType":"YulExpressionStatement","src":"6199:51:25"}]},"name":"abi_encode_tuple_t_contract$_IBasePaintBrush_$5844__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6123:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6134:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6145:4:25","type":""}],"src":"6029:227:25"},{"body":{"nodeType":"YulBlock","src":"6398:1140:25","statements":[{"body":{"nodeType":"YulBlock","src":"6444:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6453:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6456:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6446:6:25"},"nodeType":"YulFunctionCall","src":"6446:12:25"},"nodeType":"YulExpressionStatement","src":"6446:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6419:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"6428:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6415:3:25"},"nodeType":"YulFunctionCall","src":"6415:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"6440:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6411:3:25"},"nodeType":"YulFunctionCall","src":"6411:32:25"},"nodeType":"YulIf","src":"6408:52:25"},{"nodeType":"YulVariableDeclaration","src":"6469:37:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6496:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6483:12:25"},"nodeType":"YulFunctionCall","src":"6483:23:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6473:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6515:28:25","value":{"kind":"number","nodeType":"YulLiteral","src":"6525:18:25","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6519:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"6570:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6579:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6582:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6572:6:25"},"nodeType":"YulFunctionCall","src":"6572:12:25"},"nodeType":"YulExpressionStatement","src":"6572:12:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6558:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"6566:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6555:2:25"},"nodeType":"YulFunctionCall","src":"6555:14:25"},"nodeType":"YulIf","src":"6552:34:25"},{"nodeType":"YulVariableDeclaration","src":"6595:32:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6609:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"6620:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6605:3:25"},"nodeType":"YulFunctionCall","src":"6605:22:25"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"6599:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"6675:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6684:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6687:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6677:6:25"},"nodeType":"YulFunctionCall","src":"6677:12:25"},"nodeType":"YulExpressionStatement","src":"6677:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6654:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"6658:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6650:3:25"},"nodeType":"YulFunctionCall","src":"6650:13:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6665:7:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6646:3:25"},"nodeType":"YulFunctionCall","src":"6646:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6639:6:25"},"nodeType":"YulFunctionCall","src":"6639:35:25"},"nodeType":"YulIf","src":"6636:55:25"},{"nodeType":"YulVariableDeclaration","src":"6700:26:25","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6723:2:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6710:12:25"},"nodeType":"YulFunctionCall","src":"6710:16:25"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"6704:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6735:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"6745:4:25","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"6739:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6758:53:25","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"6808:2:25"}],"functionName":{"name":"array_allocation_size_array_uint256_dyn","nodeType":"YulIdentifier","src":"6768:39:25"},"nodeType":"YulFunctionCall","src":"6768:43:25"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"6762:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6820:23:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6840:2:25","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6834:5:25"},"nodeType":"YulFunctionCall","src":"6834:9:25"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"6824:6:25","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6872:6:25"},{"name":"_5","nodeType":"YulIdentifier","src":"6880:2:25"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"6852:19:25"},"nodeType":"YulFunctionCall","src":"6852:31:25"},"nodeType":"YulExpressionStatement","src":"6852:31:25"},{"nodeType":"YulVariableDeclaration","src":"6892:17:25","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"6903:6:25"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"6896:3:25","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6925:6:25"},{"name":"_3","nodeType":"YulIdentifier","src":"6933:2:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6918:6:25"},"nodeType":"YulFunctionCall","src":"6918:18:25"},"nodeType":"YulExpressionStatement","src":"6918:18:25"},{"nodeType":"YulAssignment","src":"6945:22:25","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6956:6:25"},{"name":"_4","nodeType":"YulIdentifier","src":"6964:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6952:3:25"},"nodeType":"YulFunctionCall","src":"6952:15:25"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"6945:3:25"}]},{"nodeType":"YulVariableDeclaration","src":"6976:42:25","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6998:2:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7006:1:25","type":"","value":"5"},{"name":"_3","nodeType":"YulIdentifier","src":"7009:2:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7002:3:25"},"nodeType":"YulFunctionCall","src":"7002:10:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6994:3:25"},"nodeType":"YulFunctionCall","src":"6994:19:25"},{"name":"_4","nodeType":"YulIdentifier","src":"7015:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6990:3:25"},"nodeType":"YulFunctionCall","src":"6990:28:25"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"6980:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"7050:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7059:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7062:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7052:6:25"},"nodeType":"YulFunctionCall","src":"7052:12:25"},"nodeType":"YulExpressionStatement","src":"7052:12:25"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"7033:6:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7041:7:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7030:2:25"},"nodeType":"YulFunctionCall","src":"7030:19:25"},"nodeType":"YulIf","src":"7027:39:25"},{"nodeType":"YulVariableDeclaration","src":"7075:22:25","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7090:2:25"},{"name":"_4","nodeType":"YulIdentifier","src":"7094:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7086:3:25"},"nodeType":"YulFunctionCall","src":"7086:11:25"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"7079:3:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"7162:161:25","statements":[{"nodeType":"YulVariableDeclaration","src":"7176:30:25","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7202:3:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7189:12:25"},"nodeType":"YulFunctionCall","src":"7189:17:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7180:5:25","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7244:5:25"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"7219:24:25"},"nodeType":"YulFunctionCall","src":"7219:31:25"},"nodeType":"YulExpressionStatement","src":"7219:31:25"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7270:3:25"},{"name":"value","nodeType":"YulIdentifier","src":"7275:5:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7263:6:25"},"nodeType":"YulFunctionCall","src":"7263:18:25"},"nodeType":"YulExpressionStatement","src":"7263:18:25"},{"nodeType":"YulAssignment","src":"7294:19:25","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7305:3:25"},{"name":"_4","nodeType":"YulIdentifier","src":"7310:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7301:3:25"},"nodeType":"YulFunctionCall","src":"7301:12:25"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"7294:3:25"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7117:3:25"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"7122:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7114:2:25"},"nodeType":"YulFunctionCall","src":"7114:15:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7130:23:25","statements":[{"nodeType":"YulAssignment","src":"7132:19:25","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7143:3:25"},{"name":"_4","nodeType":"YulIdentifier","src":"7148:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7139:3:25"},"nodeType":"YulFunctionCall","src":"7139:12:25"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"7132:3:25"}]}]},"pre":{"nodeType":"YulBlock","src":"7110:3:25","statements":[]},"src":"7106:217:25"},{"nodeType":"YulAssignment","src":"7332:16:25","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"7342:6:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7332:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"7357:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7390:9:25"},{"name":"_4","nodeType":"YulIdentifier","src":"7401:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7386:3:25"},"nodeType":"YulFunctionCall","src":"7386:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7373:12:25"},"nodeType":"YulFunctionCall","src":"7373:32:25"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"7361:8:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"7434:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7443:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7446:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7436:6:25"},"nodeType":"YulFunctionCall","src":"7436:12:25"},"nodeType":"YulExpressionStatement","src":"7436:12:25"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"7420:8:25"},{"name":"_1","nodeType":"YulIdentifier","src":"7430:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7417:2:25"},"nodeType":"YulFunctionCall","src":"7417:16:25"},"nodeType":"YulIf","src":"7414:36:25"},{"nodeType":"YulAssignment","src":"7459:73:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7502:9:25"},{"name":"offset_1","nodeType":"YulIdentifier","src":"7513:8:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7498:3:25"},"nodeType":"YulFunctionCall","src":"7498:24:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7524:7:25"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nodeType":"YulIdentifier","src":"7469:28:25"},"nodeType":"YulFunctionCall","src":"7469:63:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7459:6:25"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6356:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6367:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6379:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6387:6:25","type":""}],"src":"6261:1277:25"},{"body":{"nodeType":"YulBlock","src":"7604:374:25","statements":[{"nodeType":"YulVariableDeclaration","src":"7614:26:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7634:5:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7628:5:25"},"nodeType":"YulFunctionCall","src":"7628:12:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7618:6:25","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7656:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"7661:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7649:6:25"},"nodeType":"YulFunctionCall","src":"7649:19:25"},"nodeType":"YulExpressionStatement","src":"7649:19:25"},{"nodeType":"YulVariableDeclaration","src":"7677:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"7687:4:25","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7681:2:25","type":""}]},{"nodeType":"YulAssignment","src":"7700:19:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7711:3:25"},{"name":"_1","nodeType":"YulIdentifier","src":"7716:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7707:3:25"},"nodeType":"YulFunctionCall","src":"7707:12:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7700:3:25"}]},{"nodeType":"YulVariableDeclaration","src":"7728:28:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7746:5:25"},{"name":"_1","nodeType":"YulIdentifier","src":"7753:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7742:3:25"},"nodeType":"YulFunctionCall","src":"7742:14:25"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"7732:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7765:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"7774:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7769:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"7833:120:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7854:3:25"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7865:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7859:5:25"},"nodeType":"YulFunctionCall","src":"7859:13:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7847:6:25"},"nodeType":"YulFunctionCall","src":"7847:26:25"},"nodeType":"YulExpressionStatement","src":"7847:26:25"},{"nodeType":"YulAssignment","src":"7886:19:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7897:3:25"},{"name":"_1","nodeType":"YulIdentifier","src":"7902:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7893:3:25"},"nodeType":"YulFunctionCall","src":"7893:12:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7886:3:25"}]},{"nodeType":"YulAssignment","src":"7918:25:25","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7932:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"7940:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7928:3:25"},"nodeType":"YulFunctionCall","src":"7928:15:25"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7918:6:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7795:1:25"},{"name":"length","nodeType":"YulIdentifier","src":"7798:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7792:2:25"},"nodeType":"YulFunctionCall","src":"7792:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7806:18:25","statements":[{"nodeType":"YulAssignment","src":"7808:14:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7817:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"7820:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7813:3:25"},"nodeType":"YulFunctionCall","src":"7813:9:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7808:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"7788:3:25","statements":[]},"src":"7784:169:25"},{"nodeType":"YulAssignment","src":"7962:10:25","value":{"name":"pos","nodeType":"YulIdentifier","src":"7969:3:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7962:3:25"}]}]},"name":"abi_encode_array_uint256_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7581:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7588:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7596:3:25","type":""}],"src":"7543:435:25"},{"body":{"nodeType":"YulBlock","src":"8134:110:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8151:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8162:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8144:6:25"},"nodeType":"YulFunctionCall","src":"8144:21:25"},"nodeType":"YulExpressionStatement","src":"8144:21:25"},{"nodeType":"YulAssignment","src":"8174:64:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8211:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8223:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8234:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8219:3:25"},"nodeType":"YulFunctionCall","src":"8219:18:25"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"8182:28:25"},"nodeType":"YulFunctionCall","src":"8182:56:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8174:4:25"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8103:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8114:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8125:4:25","type":""}],"src":"7983:261:25"},{"body":{"nodeType":"YulBlock","src":"8319:177:25","statements":[{"body":{"nodeType":"YulBlock","src":"8365:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8374:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8377:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8367:6:25"},"nodeType":"YulFunctionCall","src":"8367:12:25"},"nodeType":"YulExpressionStatement","src":"8367:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8340:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"8349:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8336:3:25"},"nodeType":"YulFunctionCall","src":"8336:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"8361:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8332:3:25"},"nodeType":"YulFunctionCall","src":"8332:32:25"},"nodeType":"YulIf","src":"8329:52:25"},{"nodeType":"YulVariableDeclaration","src":"8390:36:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8416:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8403:12:25"},"nodeType":"YulFunctionCall","src":"8403:23:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8394:5:25","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8460:5:25"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"8435:24:25"},"nodeType":"YulFunctionCall","src":"8435:31:25"},"nodeType":"YulExpressionStatement","src":"8435:31:25"},{"nodeType":"YulAssignment","src":"8475:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"8485:5:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8475:6:25"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8285:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8296:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8308:6:25","type":""}],"src":"8249:247:25"},{"body":{"nodeType":"YulBlock","src":"8606:510:25","statements":[{"body":{"nodeType":"YulBlock","src":"8652:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8661:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8664:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8654:6:25"},"nodeType":"YulFunctionCall","src":"8654:12:25"},"nodeType":"YulExpressionStatement","src":"8654:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8627:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"8636:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8623:3:25"},"nodeType":"YulFunctionCall","src":"8623:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"8648:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8619:3:25"},"nodeType":"YulFunctionCall","src":"8619:32:25"},"nodeType":"YulIf","src":"8616:52:25"},{"nodeType":"YulVariableDeclaration","src":"8677:37:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8704:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8691:12:25"},"nodeType":"YulFunctionCall","src":"8691:23:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8681:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8723:28:25","value":{"kind":"number","nodeType":"YulLiteral","src":"8733:18:25","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8727:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"8778:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8787:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8790:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8780:6:25"},"nodeType":"YulFunctionCall","src":"8780:12:25"},"nodeType":"YulExpressionStatement","src":"8780:12:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8766:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"8774:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8763:2:25"},"nodeType":"YulFunctionCall","src":"8763:14:25"},"nodeType":"YulIf","src":"8760:34:25"},{"nodeType":"YulVariableDeclaration","src":"8803:32:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8817:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"8828:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8813:3:25"},"nodeType":"YulFunctionCall","src":"8813:22:25"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"8807:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"8883:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8892:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8895:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8885:6:25"},"nodeType":"YulFunctionCall","src":"8885:12:25"},"nodeType":"YulExpressionStatement","src":"8885:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"8862:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"8866:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8858:3:25"},"nodeType":"YulFunctionCall","src":"8858:13:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8873:7:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8854:3:25"},"nodeType":"YulFunctionCall","src":"8854:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8847:6:25"},"nodeType":"YulFunctionCall","src":"8847:35:25"},"nodeType":"YulIf","src":"8844:55:25"},{"nodeType":"YulVariableDeclaration","src":"8908:30:25","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"8935:2:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8922:12:25"},"nodeType":"YulFunctionCall","src":"8922:16:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8912:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"8965:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8974:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8977:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8967:6:25"},"nodeType":"YulFunctionCall","src":"8967:12:25"},"nodeType":"YulExpressionStatement","src":"8967:12:25"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8953:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"8961:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8950:2:25"},"nodeType":"YulFunctionCall","src":"8950:14:25"},"nodeType":"YulIf","src":"8947:34:25"},{"body":{"nodeType":"YulBlock","src":"9039:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9048:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9051:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9041:6:25"},"nodeType":"YulFunctionCall","src":"9041:12:25"},"nodeType":"YulExpressionStatement","src":"9041:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"9004:2:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9012:1:25","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"9015:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9008:3:25"},"nodeType":"YulFunctionCall","src":"9008:14:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9000:3:25"},"nodeType":"YulFunctionCall","src":"9000:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"9025:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8996:3:25"},"nodeType":"YulFunctionCall","src":"8996:32:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9030:7:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8993:2:25"},"nodeType":"YulFunctionCall","src":"8993:45:25"},"nodeType":"YulIf","src":"8990:65:25"},{"nodeType":"YulAssignment","src":"9064:21:25","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"9078:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"9082:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9074:3:25"},"nodeType":"YulFunctionCall","src":"9074:11:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9064:6:25"}]},{"nodeType":"YulAssignment","src":"9094:16:25","value":{"name":"length","nodeType":"YulIdentifier","src":"9104:6:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9094:6:25"}]}]},"name":"abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8564:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8575:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8587:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8595:6:25","type":""}],"src":"8501:615:25"},{"body":{"nodeType":"YulBlock","src":"9222:102:25","statements":[{"nodeType":"YulAssignment","src":"9232:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9244:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9255:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9240:3:25"},"nodeType":"YulFunctionCall","src":"9240:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9232:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9274:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9289:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9305:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"9310:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9301:3:25"},"nodeType":"YulFunctionCall","src":"9301:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"9314:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9297:3:25"},"nodeType":"YulFunctionCall","src":"9297:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9285:3:25"},"nodeType":"YulFunctionCall","src":"9285:32:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9267:6:25"},"nodeType":"YulFunctionCall","src":"9267:51:25"},"nodeType":"YulExpressionStatement","src":"9267:51:25"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9191:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9202:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9213:4:25","type":""}],"src":"9121:203:25"},{"body":{"nodeType":"YulBlock","src":"9413:332:25","statements":[{"body":{"nodeType":"YulBlock","src":"9459:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9468:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9471:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9461:6:25"},"nodeType":"YulFunctionCall","src":"9461:12:25"},"nodeType":"YulExpressionStatement","src":"9461:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9434:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"9443:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9430:3:25"},"nodeType":"YulFunctionCall","src":"9430:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"9455:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9426:3:25"},"nodeType":"YulFunctionCall","src":"9426:32:25"},"nodeType":"YulIf","src":"9423:52:25"},{"nodeType":"YulVariableDeclaration","src":"9484:36:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9510:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9497:12:25"},"nodeType":"YulFunctionCall","src":"9497:23:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"9488:5:25","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9554:5:25"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"9529:24:25"},"nodeType":"YulFunctionCall","src":"9529:31:25"},"nodeType":"YulExpressionStatement","src":"9529:31:25"},{"nodeType":"YulAssignment","src":"9569:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"9579:5:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9569:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"9593:47:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9625:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9636:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9621:3:25"},"nodeType":"YulFunctionCall","src":"9621:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9608:12:25"},"nodeType":"YulFunctionCall","src":"9608:32:25"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"9597:7:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"9697:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9706:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9709:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9699:6:25"},"nodeType":"YulFunctionCall","src":"9699:12:25"},"nodeType":"YulExpressionStatement","src":"9699:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"9662:7:25"},{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"9685:7:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9678:6:25"},"nodeType":"YulFunctionCall","src":"9678:15:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9671:6:25"},"nodeType":"YulFunctionCall","src":"9671:23:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9659:2:25"},"nodeType":"YulFunctionCall","src":"9659:36:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9652:6:25"},"nodeType":"YulFunctionCall","src":"9652:44:25"},"nodeType":"YulIf","src":"9649:64:25"},{"nodeType":"YulAssignment","src":"9722:17:25","value":{"name":"value_1","nodeType":"YulIdentifier","src":"9732:7:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9722:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9371:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9382:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9394:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9402:6:25","type":""}],"src":"9329:416:25"},{"body":{"nodeType":"YulBlock","src":"9873:423:25","statements":[{"body":{"nodeType":"YulBlock","src":"9919:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9928:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9931:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9921:6:25"},"nodeType":"YulFunctionCall","src":"9921:12:25"},"nodeType":"YulExpressionStatement","src":"9921:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9894:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"9903:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9890:3:25"},"nodeType":"YulFunctionCall","src":"9890:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"9915:2:25","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9886:3:25"},"nodeType":"YulFunctionCall","src":"9886:32:25"},"nodeType":"YulIf","src":"9883:52:25"},{"nodeType":"YulAssignment","src":"9944:33:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9967:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9954:12:25"},"nodeType":"YulFunctionCall","src":"9954:23:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9944:6:25"}]},{"nodeType":"YulAssignment","src":"9986:42:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10013:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10024:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10009:3:25"},"nodeType":"YulFunctionCall","src":"10009:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9996:12:25"},"nodeType":"YulFunctionCall","src":"9996:32:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9986:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"10037:46:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10068:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10079:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10064:3:25"},"nodeType":"YulFunctionCall","src":"10064:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10051:12:25"},"nodeType":"YulFunctionCall","src":"10051:32:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10041:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"10126:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10135:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10138:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10128:6:25"},"nodeType":"YulFunctionCall","src":"10128:12:25"},"nodeType":"YulExpressionStatement","src":"10128:12:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10098:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"10106:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10095:2:25"},"nodeType":"YulFunctionCall","src":"10095:30:25"},"nodeType":"YulIf","src":"10092:50:25"},{"nodeType":"YulVariableDeclaration","src":"10151:85:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10208:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"10219:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10204:3:25"},"nodeType":"YulFunctionCall","src":"10204:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10228:7:25"}],"functionName":{"name":"abi_decode_string_calldata","nodeType":"YulIdentifier","src":"10177:26:25"},"nodeType":"YulFunctionCall","src":"10177:59:25"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"10155:8:25","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"10165:8:25","type":""}]},{"nodeType":"YulAssignment","src":"10245:18:25","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"10255:8:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"10245:6:25"}]},{"nodeType":"YulAssignment","src":"10272:18:25","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"10282:8:25"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"10272:6:25"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9815:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9826:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9838:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9846:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9854:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9862:6:25","type":""}],"src":"9750:546:25"},{"body":{"nodeType":"YulBlock","src":"10430:119:25","statements":[{"nodeType":"YulAssignment","src":"10440:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10452:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10463:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10448:3:25"},"nodeType":"YulFunctionCall","src":"10448:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10440:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10482:9:25"},{"name":"value0","nodeType":"YulIdentifier","src":"10493:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10475:6:25"},"nodeType":"YulFunctionCall","src":"10475:25:25"},"nodeType":"YulExpressionStatement","src":"10475:25:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10520:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10531:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10516:3:25"},"nodeType":"YulFunctionCall","src":"10516:18:25"},{"name":"value1","nodeType":"YulIdentifier","src":"10536:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10509:6:25"},"nodeType":"YulFunctionCall","src":"10509:34:25"},"nodeType":"YulExpressionStatement","src":"10509:34:25"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10391:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10402:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10410:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10421:4:25","type":""}],"src":"10301:248:25"},{"body":{"nodeType":"YulBlock","src":"10641:228:25","statements":[{"body":{"nodeType":"YulBlock","src":"10687:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10696:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10699:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10689:6:25"},"nodeType":"YulFunctionCall","src":"10689:12:25"},"nodeType":"YulExpressionStatement","src":"10689:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10662:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"10671:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10658:3:25"},"nodeType":"YulFunctionCall","src":"10658:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"10683:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10654:3:25"},"nodeType":"YulFunctionCall","src":"10654:32:25"},"nodeType":"YulIf","src":"10651:52:25"},{"nodeType":"YulAssignment","src":"10712:33:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10735:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10722:12:25"},"nodeType":"YulFunctionCall","src":"10722:23:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10712:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"10754:45:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10784:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"10795:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10780:3:25"},"nodeType":"YulFunctionCall","src":"10780:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10767:12:25"},"nodeType":"YulFunctionCall","src":"10767:32:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"10758:5:25","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10833:5:25"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"10808:24:25"},"nodeType":"YulFunctionCall","src":"10808:31:25"},"nodeType":"YulExpressionStatement","src":"10808:31:25"},{"nodeType":"YulAssignment","src":"10848:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"10858:5:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10848:6:25"}]}]},"name":"abi_decode_tuple_t_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10599:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10610:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10622:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10630:6:25","type":""}],"src":"10554:315:25"},{"body":{"nodeType":"YulBlock","src":"10961:301:25","statements":[{"body":{"nodeType":"YulBlock","src":"11007:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11016:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11019:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11009:6:25"},"nodeType":"YulFunctionCall","src":"11009:12:25"},"nodeType":"YulExpressionStatement","src":"11009:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10982:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"10991:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10978:3:25"},"nodeType":"YulFunctionCall","src":"10978:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"11003:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10974:3:25"},"nodeType":"YulFunctionCall","src":"10974:32:25"},"nodeType":"YulIf","src":"10971:52:25"},{"nodeType":"YulVariableDeclaration","src":"11032:36:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11058:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11045:12:25"},"nodeType":"YulFunctionCall","src":"11045:23:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"11036:5:25","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11102:5:25"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"11077:24:25"},"nodeType":"YulFunctionCall","src":"11077:31:25"},"nodeType":"YulExpressionStatement","src":"11077:31:25"},{"nodeType":"YulAssignment","src":"11117:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"11127:5:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11117:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"11141:47:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11173:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11184:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11169:3:25"},"nodeType":"YulFunctionCall","src":"11169:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11156:12:25"},"nodeType":"YulFunctionCall","src":"11156:32:25"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"11145:7:25","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"11222:7:25"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"11197:24:25"},"nodeType":"YulFunctionCall","src":"11197:33:25"},"nodeType":"YulExpressionStatement","src":"11197:33:25"},{"nodeType":"YulAssignment","src":"11239:17:25","value":{"name":"value_1","nodeType":"YulIdentifier","src":"11249:7:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11239:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10919:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10930:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10942:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10950:6:25","type":""}],"src":"10874:388:25"},{"body":{"nodeType":"YulBlock","src":"11414:587:25","statements":[{"body":{"nodeType":"YulBlock","src":"11461:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11470:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11473:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11463:6:25"},"nodeType":"YulFunctionCall","src":"11463:12:25"},"nodeType":"YulExpressionStatement","src":"11463:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11435:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"11444:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11431:3:25"},"nodeType":"YulFunctionCall","src":"11431:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"11456:3:25","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11427:3:25"},"nodeType":"YulFunctionCall","src":"11427:33:25"},"nodeType":"YulIf","src":"11424:53:25"},{"nodeType":"YulVariableDeclaration","src":"11486:36:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11512:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11499:12:25"},"nodeType":"YulFunctionCall","src":"11499:23:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"11490:5:25","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11556:5:25"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"11531:24:25"},"nodeType":"YulFunctionCall","src":"11531:31:25"},"nodeType":"YulExpressionStatement","src":"11531:31:25"},{"nodeType":"YulAssignment","src":"11571:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"11581:5:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11571:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"11595:47:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11627:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11638:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11623:3:25"},"nodeType":"YulFunctionCall","src":"11623:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11610:12:25"},"nodeType":"YulFunctionCall","src":"11610:32:25"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"11599:7:25","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"11676:7:25"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"11651:24:25"},"nodeType":"YulFunctionCall","src":"11651:33:25"},"nodeType":"YulExpressionStatement","src":"11651:33:25"},{"nodeType":"YulAssignment","src":"11693:17:25","value":{"name":"value_1","nodeType":"YulIdentifier","src":"11703:7:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11693:6:25"}]},{"nodeType":"YulAssignment","src":"11719:42:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11746:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11757:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11742:3:25"},"nodeType":"YulFunctionCall","src":"11742:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11729:12:25"},"nodeType":"YulFunctionCall","src":"11729:32:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11719:6:25"}]},{"nodeType":"YulAssignment","src":"11770:42:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11797:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11808:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11793:3:25"},"nodeType":"YulFunctionCall","src":"11793:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11780:12:25"},"nodeType":"YulFunctionCall","src":"11780:32:25"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"11770:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"11821:47:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11852:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11863:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11848:3:25"},"nodeType":"YulFunctionCall","src":"11848:19:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11835:12:25"},"nodeType":"YulFunctionCall","src":"11835:33:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11825:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"11911:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11920:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11923:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11913:6:25"},"nodeType":"YulFunctionCall","src":"11913:12:25"},"nodeType":"YulExpressionStatement","src":"11913:12:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11883:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"11891:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11880:2:25"},"nodeType":"YulFunctionCall","src":"11880:30:25"},"nodeType":"YulIf","src":"11877:50:25"},{"nodeType":"YulAssignment","src":"11936:59:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11967:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"11978:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11963:3:25"},"nodeType":"YulFunctionCall","src":"11963:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11987:7:25"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"11946:16:25"},"nodeType":"YulFunctionCall","src":"11946:49:25"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"11936:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11348:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11359:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11371:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11379:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11387:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11395:6:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"11403:6:25","type":""}],"src":"11267:734:25"},{"body":{"nodeType":"YulBlock","src":"12180:232:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12197:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"12208:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12190:6:25"},"nodeType":"YulFunctionCall","src":"12190:21:25"},"nodeType":"YulExpressionStatement","src":"12190:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12231:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"12242:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12227:3:25"},"nodeType":"YulFunctionCall","src":"12227:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"12247:2:25","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12220:6:25"},"nodeType":"YulFunctionCall","src":"12220:30:25"},"nodeType":"YulExpressionStatement","src":"12220:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12270:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"12281:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12266:3:25"},"nodeType":"YulFunctionCall","src":"12266:18:25"},{"hexValue":"455243313135353a2061646472657373207a65726f206973206e6f7420612076","kind":"string","nodeType":"YulLiteral","src":"12286:34:25","type":"","value":"ERC1155: address zero is not a v"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12259:6:25"},"nodeType":"YulFunctionCall","src":"12259:62:25"},"nodeType":"YulExpressionStatement","src":"12259:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12341:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"12352:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12337:3:25"},"nodeType":"YulFunctionCall","src":"12337:18:25"},{"hexValue":"616c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"12357:12:25","type":"","value":"alid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12330:6:25"},"nodeType":"YulFunctionCall","src":"12330:40:25"},"nodeType":"YulExpressionStatement","src":"12330:40:25"},{"nodeType":"YulAssignment","src":"12379:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12391:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"12402:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12387:3:25"},"nodeType":"YulFunctionCall","src":"12387:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12379:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12157:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12171:4:25","type":""}],"src":"12006:406:25"},{"body":{"nodeType":"YulBlock","src":"12472:325:25","statements":[{"nodeType":"YulAssignment","src":"12482:22:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12496:1:25","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"12499:4:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"12492:3:25"},"nodeType":"YulFunctionCall","src":"12492:12:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12482:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"12513:38:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"12543:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"12549:1:25","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12539:3:25"},"nodeType":"YulFunctionCall","src":"12539:12:25"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"12517:18:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"12590:31:25","statements":[{"nodeType":"YulAssignment","src":"12592:27:25","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12606:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"12614:4:25","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12602:3:25"},"nodeType":"YulFunctionCall","src":"12602:17:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12592:6:25"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"12570:18:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12563:6:25"},"nodeType":"YulFunctionCall","src":"12563:26:25"},"nodeType":"YulIf","src":"12560:61:25"},{"body":{"nodeType":"YulBlock","src":"12680:111:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12701:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12708:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"12713:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12704:3:25"},"nodeType":"YulFunctionCall","src":"12704:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12694:6:25"},"nodeType":"YulFunctionCall","src":"12694:31:25"},"nodeType":"YulExpressionStatement","src":"12694:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12745:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12748:4:25","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12738:6:25"},"nodeType":"YulFunctionCall","src":"12738:15:25"},"nodeType":"YulExpressionStatement","src":"12738:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12773:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12776:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12766:6:25"},"nodeType":"YulFunctionCall","src":"12766:15:25"},"nodeType":"YulExpressionStatement","src":"12766:15:25"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"12636:18:25"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12659:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"12667:2:25","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12656:2:25"},"nodeType":"YulFunctionCall","src":"12656:14:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12633:2:25"},"nodeType":"YulFunctionCall","src":"12633:38:25"},"nodeType":"YulIf","src":"12630:161:25"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"12452:4:25","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"12461:6:25","type":""}],"src":"12417:380:25"},{"body":{"nodeType":"YulBlock","src":"12976:161:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12993:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13004:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12986:6:25"},"nodeType":"YulFunctionCall","src":"12986:21:25"},"nodeType":"YulExpressionStatement","src":"12986:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13027:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13038:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13023:3:25"},"nodeType":"YulFunctionCall","src":"13023:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"13043:2:25","type":"","value":"11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13016:6:25"},"nodeType":"YulFunctionCall","src":"13016:30:25"},"nodeType":"YulExpressionStatement","src":"13016:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13066:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13077:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13062:3:25"},"nodeType":"YulFunctionCall","src":"13062:18:25"},{"hexValue":"4e6f742073746172746564","kind":"string","nodeType":"YulLiteral","src":"13082:13:25","type":"","value":"Not started"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13055:6:25"},"nodeType":"YulFunctionCall","src":"13055:41:25"},"nodeType":"YulExpressionStatement","src":"13055:41:25"},{"nodeType":"YulAssignment","src":"13105:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13117:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13128:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13113:3:25"},"nodeType":"YulFunctionCall","src":"13113:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13105:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12953:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12967:4:25","type":""}],"src":"12802:335:25"},{"body":{"nodeType":"YulBlock","src":"13174:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13191:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13198:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"13203:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13194:3:25"},"nodeType":"YulFunctionCall","src":"13194:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13184:6:25"},"nodeType":"YulFunctionCall","src":"13184:31:25"},"nodeType":"YulExpressionStatement","src":"13184:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13231:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13234:4:25","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13224:6:25"},"nodeType":"YulFunctionCall","src":"13224:15:25"},"nodeType":"YulExpressionStatement","src":"13224:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13255:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13258:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13248:6:25"},"nodeType":"YulFunctionCall","src":"13248:15:25"},"nodeType":"YulExpressionStatement","src":"13248:15:25"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"13142:127:25"},{"body":{"nodeType":"YulBlock","src":"13322:77:25","statements":[{"nodeType":"YulAssignment","src":"13332:16:25","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"13343:1:25"},{"name":"y","nodeType":"YulIdentifier","src":"13346:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13339:3:25"},"nodeType":"YulFunctionCall","src":"13339:9:25"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"13332:3:25"}]},{"body":{"nodeType":"YulBlock","src":"13371:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"13373:16:25"},"nodeType":"YulFunctionCall","src":"13373:18:25"},"nodeType":"YulExpressionStatement","src":"13373:18:25"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"13363:1:25"},{"name":"sum","nodeType":"YulIdentifier","src":"13366:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13360:2:25"},"nodeType":"YulFunctionCall","src":"13360:10:25"},"nodeType":"YulIf","src":"13357:36:25"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"13305:1:25","type":""},{"name":"y","nodeType":"YulTypedName","src":"13308:1:25","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"13314:3:25","type":""}],"src":"13274:125:25"},{"body":{"nodeType":"YulBlock","src":"13578:161:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13595:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13606:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13588:6:25"},"nodeType":"YulFunctionCall","src":"13588:21:25"},"nodeType":"YulExpressionStatement","src":"13588:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13629:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13640:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13625:3:25"},"nodeType":"YulFunctionCall","src":"13625:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"13645:2:25","type":"","value":"11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13618:6:25"},"nodeType":"YulFunctionCall","src":"13618:30:25"},"nodeType":"YulExpressionStatement","src":"13618:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13668:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13679:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13664:3:25"},"nodeType":"YulFunctionCall","src":"13664:18:25"},{"hexValue":"496e76616c696420646179","kind":"string","nodeType":"YulLiteral","src":"13684:13:25","type":"","value":"Invalid day"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13657:6:25"},"nodeType":"YulFunctionCall","src":"13657:41:25"},"nodeType":"YulExpressionStatement","src":"13657:41:25"},{"nodeType":"YulAssignment","src":"13707:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13719:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13730:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13715:3:25"},"nodeType":"YulFunctionCall","src":"13715:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13707:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_6e44432d9ae63e2829c6f8f2758edfa5a1bfee3e8b1cca3f560b2fd694999578__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13555:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13569:4:25","type":""}],"src":"13404:335:25"},{"body":{"nodeType":"YulBlock","src":"13796:116:25","statements":[{"nodeType":"YulAssignment","src":"13806:20:25","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"13821:1:25"},{"name":"y","nodeType":"YulIdentifier","src":"13824:1:25"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"13817:3:25"},"nodeType":"YulFunctionCall","src":"13817:9:25"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"13806:7:25"}]},{"body":{"nodeType":"YulBlock","src":"13884:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"13886:16:25"},"nodeType":"YulFunctionCall","src":"13886:18:25"},"nodeType":"YulExpressionStatement","src":"13886:18:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"13855:1:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13848:6:25"},"nodeType":"YulFunctionCall","src":"13848:9:25"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"13862:1:25"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"13869:7:25"},{"name":"x","nodeType":"YulIdentifier","src":"13878:1:25"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"13865:3:25"},"nodeType":"YulFunctionCall","src":"13865:15:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"13859:2:25"},"nodeType":"YulFunctionCall","src":"13859:22:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"13845:2:25"},"nodeType":"YulFunctionCall","src":"13845:37:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13838:6:25"},"nodeType":"YulFunctionCall","src":"13838:45:25"},"nodeType":"YulIf","src":"13835:71:25"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"13775:1:25","type":""},{"name":"y","nodeType":"YulTypedName","src":"13778:1:25","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"13784:7:25","type":""}],"src":"13744:168:25"},{"body":{"nodeType":"YulBlock","src":"14091:163:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14108:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14119:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14101:6:25"},"nodeType":"YulFunctionCall","src":"14101:21:25"},"nodeType":"YulExpressionStatement","src":"14101:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14142:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14153:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14138:3:25"},"nodeType":"YulFunctionCall","src":"14138:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"14158:2:25","type":"","value":"13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14131:6:25"},"nodeType":"YulFunctionCall","src":"14131:30:25"},"nodeType":"YulExpressionStatement","src":"14131:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14181:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14192:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14177:3:25"},"nodeType":"YulFunctionCall","src":"14177:18:25"},{"hexValue":"496e76616c6964207072696365","kind":"string","nodeType":"YulLiteral","src":"14197:15:25","type":"","value":"Invalid price"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14170:6:25"},"nodeType":"YulFunctionCall","src":"14170:43:25"},"nodeType":"YulExpressionStatement","src":"14170:43:25"},{"nodeType":"YulAssignment","src":"14222:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14234:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14245:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14230:3:25"},"nodeType":"YulFunctionCall","src":"14230:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14222:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_eaa01effe6abd0543e9529d3961b0f5d26980f0661c156a79b89c39a093463f7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14068:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14082:4:25","type":""}],"src":"13917:337:25"},{"body":{"nodeType":"YulBlock","src":"14433:162:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14450:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14461:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14443:6:25"},"nodeType":"YulFunctionCall","src":"14443:21:25"},"nodeType":"YulExpressionStatement","src":"14443:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14484:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14495:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14480:3:25"},"nodeType":"YulFunctionCall","src":"14480:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"14500:2:25","type":"","value":"12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14473:6:25"},"nodeType":"YulFunctionCall","src":"14473:30:25"},"nodeType":"YulExpressionStatement","src":"14473:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14523:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14534:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14519:3:25"},"nodeType":"YulFunctionCall","src":"14519:18:25"},{"hexValue":"456d7074792063616e766173","kind":"string","nodeType":"YulLiteral","src":"14539:14:25","type":"","value":"Empty canvas"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14512:6:25"},"nodeType":"YulFunctionCall","src":"14512:42:25"},"nodeType":"YulExpressionStatement","src":"14512:42:25"},{"nodeType":"YulAssignment","src":"14563:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14575:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14586:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14571:3:25"},"nodeType":"YulFunctionCall","src":"14571:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14563:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d4c94f69f8b7e0961e88f9636d9f77fffa457b39c4f4dfb1516d377b0308603__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14410:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14424:4:25","type":""}],"src":"14259:336:25"},{"body":{"nodeType":"YulBlock","src":"14632:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14649:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14656:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"14661:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14652:3:25"},"nodeType":"YulFunctionCall","src":"14652:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14642:6:25"},"nodeType":"YulFunctionCall","src":"14642:31:25"},"nodeType":"YulExpressionStatement","src":"14642:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14689:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"14692:4:25","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14682:6:25"},"nodeType":"YulFunctionCall","src":"14682:15:25"},"nodeType":"YulExpressionStatement","src":"14682:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14713:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14716:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14706:6:25"},"nodeType":"YulFunctionCall","src":"14706:15:25"},"nodeType":"YulExpressionStatement","src":"14706:15:25"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"14600:127:25"},{"body":{"nodeType":"YulBlock","src":"14778:74:25","statements":[{"body":{"nodeType":"YulBlock","src":"14801:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"14803:16:25"},"nodeType":"YulFunctionCall","src":"14803:18:25"},"nodeType":"YulExpressionStatement","src":"14803:18:25"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"14798:1:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14791:6:25"},"nodeType":"YulFunctionCall","src":"14791:9:25"},"nodeType":"YulIf","src":"14788:35:25"},{"nodeType":"YulAssignment","src":"14832:14:25","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14841:1:25"},{"name":"y","nodeType":"YulIdentifier","src":"14844:1:25"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"14837:3:25"},"nodeType":"YulFunctionCall","src":"14837:9:25"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"14832:1:25"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"14763:1:25","type":""},{"name":"y","nodeType":"YulTypedName","src":"14766:1:25","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"14772:1:25","type":""}],"src":"14732:120:25"},{"body":{"nodeType":"YulBlock","src":"14906:79:25","statements":[{"nodeType":"YulAssignment","src":"14916:17:25","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14928:1:25"},{"name":"y","nodeType":"YulIdentifier","src":"14931:1:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14924:3:25"},"nodeType":"YulFunctionCall","src":"14924:9:25"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"14916:4:25"}]},{"body":{"nodeType":"YulBlock","src":"14957:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"14959:16:25"},"nodeType":"YulFunctionCall","src":"14959:18:25"},"nodeType":"YulExpressionStatement","src":"14959:18:25"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"14948:4:25"},{"name":"x","nodeType":"YulIdentifier","src":"14954:1:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14945:2:25"},"nodeType":"YulFunctionCall","src":"14945:11:25"},"nodeType":"YulIf","src":"14942:37:25"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"14888:1:25","type":""},{"name":"y","nodeType":"YulTypedName","src":"14891:1:25","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"14897:4:25","type":""}],"src":"14857:128:25"},{"body":{"nodeType":"YulBlock","src":"15164:236:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15181:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15192:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15174:6:25"},"nodeType":"YulFunctionCall","src":"15174:21:25"},"nodeType":"YulExpressionStatement","src":"15174:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15215:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15226:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15211:3:25"},"nodeType":"YulFunctionCall","src":"15211:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"15231:2:25","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15204:6:25"},"nodeType":"YulFunctionCall","src":"15204:30:25"},"nodeType":"YulExpressionStatement","src":"15204:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15254:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15265:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15250:3:25"},"nodeType":"YulFunctionCall","src":"15250:18:25"},{"hexValue":"455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e","kind":"string","nodeType":"YulLiteral","src":"15270:34:25","type":"","value":"ERC1155: caller is not token own"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15243:6:25"},"nodeType":"YulFunctionCall","src":"15243:62:25"},"nodeType":"YulExpressionStatement","src":"15243:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15325:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15336:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15321:3:25"},"nodeType":"YulFunctionCall","src":"15321:18:25"},{"hexValue":"6572206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"15341:16:25","type":"","value":"er or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15314:6:25"},"nodeType":"YulFunctionCall","src":"15314:44:25"},"nodeType":"YulExpressionStatement","src":"15314:44:25"},{"nodeType":"YulAssignment","src":"15367:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15379:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15390:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15375:3:25"},"nodeType":"YulFunctionCall","src":"15375:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15367:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15141:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15155:4:25","type":""}],"src":"14990:410:25"},{"body":{"nodeType":"YulBlock","src":"15579:231:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15596:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15607:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15589:6:25"},"nodeType":"YulFunctionCall","src":"15589:21:25"},"nodeType":"YulExpressionStatement","src":"15589:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15630:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15641:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15626:3:25"},"nodeType":"YulFunctionCall","src":"15626:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"15646:2:25","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15619:6:25"},"nodeType":"YulFunctionCall","src":"15619:30:25"},"nodeType":"YulExpressionStatement","src":"15619:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15669:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15680:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15665:3:25"},"nodeType":"YulFunctionCall","src":"15665:18:25"},{"hexValue":"455243313135353a206163636f756e747320616e6420696473206c656e677468","kind":"string","nodeType":"YulLiteral","src":"15685:34:25","type":"","value":"ERC1155: accounts and ids length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15658:6:25"},"nodeType":"YulFunctionCall","src":"15658:62:25"},"nodeType":"YulExpressionStatement","src":"15658:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15740:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15751:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15736:3:25"},"nodeType":"YulFunctionCall","src":"15736:18:25"},{"hexValue":"206d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"15756:11:25","type":"","value":" mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15729:6:25"},"nodeType":"YulFunctionCall","src":"15729:39:25"},"nodeType":"YulExpressionStatement","src":"15729:39:25"},{"nodeType":"YulAssignment","src":"15777:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15789:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15800:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15785:3:25"},"nodeType":"YulFunctionCall","src":"15785:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15777:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15556:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15570:4:25","type":""}],"src":"15405:405:25"},{"body":{"nodeType":"YulBlock","src":"15847:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15864:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15871:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"15876:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15867:3:25"},"nodeType":"YulFunctionCall","src":"15867:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15857:6:25"},"nodeType":"YulFunctionCall","src":"15857:31:25"},"nodeType":"YulExpressionStatement","src":"15857:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15904:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15907:4:25","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15897:6:25"},"nodeType":"YulFunctionCall","src":"15897:15:25"},"nodeType":"YulExpressionStatement","src":"15897:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15928:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15931:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15921:6:25"},"nodeType":"YulFunctionCall","src":"15921:15:25"},"nodeType":"YulExpressionStatement","src":"15921:15:25"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"15815:127:25"},{"body":{"nodeType":"YulBlock","src":"15994:88:25","statements":[{"body":{"nodeType":"YulBlock","src":"16025:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"16027:16:25"},"nodeType":"YulFunctionCall","src":"16027:18:25"},"nodeType":"YulExpressionStatement","src":"16027:18:25"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16010:5:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16021:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"16017:3:25"},"nodeType":"YulFunctionCall","src":"16017:6:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"16007:2:25"},"nodeType":"YulFunctionCall","src":"16007:17:25"},"nodeType":"YulIf","src":"16004:43:25"},{"nodeType":"YulAssignment","src":"16056:20:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16067:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"16074:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16063:3:25"},"nodeType":"YulFunctionCall","src":"16063:13:25"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"16056:3:25"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15976:5:25","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"15986:3:25","type":""}],"src":"15947:135:25"},{"body":{"nodeType":"YulBlock","src":"16278:14:25","statements":[{"nodeType":"YulAssignment","src":"16280:10:25","value":{"name":"pos","nodeType":"YulIdentifier","src":"16287:3:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16280:3:25"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16262:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16270:3:25","type":""}],"src":"16087:205:25"},{"body":{"nodeType":"YulBlock","src":"16471:165:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16488:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16499:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16481:6:25"},"nodeType":"YulFunctionCall","src":"16481:21:25"},"nodeType":"YulExpressionStatement","src":"16481:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16522:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16533:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16518:3:25"},"nodeType":"YulFunctionCall","src":"16518:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"16538:2:25","type":"","value":"15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16511:6:25"},"nodeType":"YulFunctionCall","src":"16511:30:25"},"nodeType":"YulExpressionStatement","src":"16511:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16561:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16572:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16557:3:25"},"nodeType":"YulFunctionCall","src":"16557:18:25"},{"hexValue":"5472616e73666572206661696c6564","kind":"string","nodeType":"YulLiteral","src":"16577:17:25","type":"","value":"Transfer failed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16550:6:25"},"nodeType":"YulFunctionCall","src":"16550:45:25"},"nodeType":"YulExpressionStatement","src":"16550:45:25"},{"nodeType":"YulAssignment","src":"16604:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16616:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16627:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16612:3:25"},"nodeType":"YulFunctionCall","src":"16612:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16604:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16448:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16462:4:25","type":""}],"src":"16297:339:25"},{"body":{"nodeType":"YulBlock","src":"16770:145:25","statements":[{"nodeType":"YulAssignment","src":"16780:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16792:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16803:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16788:3:25"},"nodeType":"YulFunctionCall","src":"16788:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16780:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16822:9:25"},{"name":"value0","nodeType":"YulIdentifier","src":"16833:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16815:6:25"},"nodeType":"YulFunctionCall","src":"16815:25:25"},"nodeType":"YulExpressionStatement","src":"16815:25:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16860:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16871:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16856:3:25"},"nodeType":"YulFunctionCall","src":"16856:18:25"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16880:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16896:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"16901:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16892:3:25"},"nodeType":"YulFunctionCall","src":"16892:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"16905:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16888:3:25"},"nodeType":"YulFunctionCall","src":"16888:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16876:3:25"},"nodeType":"YulFunctionCall","src":"16876:32:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16849:6:25"},"nodeType":"YulFunctionCall","src":"16849:60:25"},"nodeType":"YulExpressionStatement","src":"16849:60:25"}]},"name":"abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16731:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16742:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16750:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16761:4:25","type":""}],"src":"16641:274:25"},{"body":{"nodeType":"YulBlock","src":"17094:170:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17111:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17122:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17104:6:25"},"nodeType":"YulFunctionCall","src":"17104:21:25"},"nodeType":"YulExpressionStatement","src":"17104:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17145:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17156:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17141:3:25"},"nodeType":"YulFunctionCall","src":"17141:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"17161:2:25","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17134:6:25"},"nodeType":"YulFunctionCall","src":"17134:30:25"},"nodeType":"YulExpressionStatement","src":"17134:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17184:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17195:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17180:3:25"},"nodeType":"YulFunctionCall","src":"17180:18:25"},{"hexValue":"4e6f2066756e647320746f207769746864726177","kind":"string","nodeType":"YulLiteral","src":"17200:22:25","type":"","value":"No funds to withdraw"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17173:6:25"},"nodeType":"YulFunctionCall","src":"17173:50:25"},"nodeType":"YulExpressionStatement","src":"17173:50:25"},{"nodeType":"YulAssignment","src":"17232:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17244:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17255:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17240:3:25"},"nodeType":"YulFunctionCall","src":"17240:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17232:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_4b4cc99522fdcee4d97d6d2d3cbabeb353d40433850bd46ba29c08dbfba843f9__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17071:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17085:4:25","type":""}],"src":"16920:344:25"},{"body":{"nodeType":"YulBlock","src":"17443:166:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17460:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17471:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17453:6:25"},"nodeType":"YulFunctionCall","src":"17453:21:25"},"nodeType":"YulExpressionStatement","src":"17453:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17494:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17505:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17490:3:25"},"nodeType":"YulFunctionCall","src":"17490:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"17510:2:25","type":"","value":"16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17483:6:25"},"nodeType":"YulFunctionCall","src":"17483:30:25"},"nodeType":"YulExpressionStatement","src":"17483:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17533:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17544:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17529:3:25"},"nodeType":"YulFunctionCall","src":"17529:18:25"},{"hexValue":"4e6f20636f6e747269627574696f6e73","kind":"string","nodeType":"YulLiteral","src":"17549:18:25","type":"","value":"No contributions"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17522:6:25"},"nodeType":"YulFunctionCall","src":"17522:46:25"},"nodeType":"YulExpressionStatement","src":"17522:46:25"},{"nodeType":"YulAssignment","src":"17577:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17589:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17600:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17585:3:25"},"nodeType":"YulFunctionCall","src":"17585:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17577:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_e898f8ccd4c210573d12d900c20fca6d8cf7a9ab1db17c5b39361b7b1a36c89c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17420:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17434:4:25","type":""}],"src":"17269:340:25"},{"body":{"nodeType":"YulBlock","src":"17743:145:25","statements":[{"nodeType":"YulAssignment","src":"17753:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17765:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17776:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17761:3:25"},"nodeType":"YulFunctionCall","src":"17761:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17753:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17795:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17810:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17826:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"17831:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17822:3:25"},"nodeType":"YulFunctionCall","src":"17822:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"17835:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17818:3:25"},"nodeType":"YulFunctionCall","src":"17818:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17806:3:25"},"nodeType":"YulFunctionCall","src":"17806:32:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17788:6:25"},"nodeType":"YulFunctionCall","src":"17788:51:25"},"nodeType":"YulExpressionStatement","src":"17788:51:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17859:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17870:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17855:3:25"},"nodeType":"YulFunctionCall","src":"17855:18:25"},{"name":"value1","nodeType":"YulIdentifier","src":"17875:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17848:6:25"},"nodeType":"YulFunctionCall","src":"17848:34:25"},"nodeType":"YulExpressionStatement","src":"17848:34:25"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17704:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17715:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17723:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17734:4:25","type":""}],"src":"17614:274:25"},{"body":{"nodeType":"YulBlock","src":"17974:170:25","statements":[{"body":{"nodeType":"YulBlock","src":"18020:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18029:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18032:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18022:6:25"},"nodeType":"YulFunctionCall","src":"18022:12:25"},"nodeType":"YulExpressionStatement","src":"18022:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"17995:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"18004:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17991:3:25"},"nodeType":"YulFunctionCall","src":"17991:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"18016:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"17987:3:25"},"nodeType":"YulFunctionCall","src":"17987:32:25"},"nodeType":"YulIf","src":"17984:52:25"},{"nodeType":"YulVariableDeclaration","src":"18045:29:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18064:9:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18058:5:25"},"nodeType":"YulFunctionCall","src":"18058:16:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"18049:5:25","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18108:5:25"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"18083:24:25"},"nodeType":"YulFunctionCall","src":"18083:31:25"},"nodeType":"YulExpressionStatement","src":"18083:31:25"},{"nodeType":"YulAssignment","src":"18123:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"18133:5:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"18123:6:25"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17940:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"17951:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"17963:6:25","type":""}],"src":"17893:251:25"},{"body":{"nodeType":"YulBlock","src":"18323:174:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18340:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18351:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18333:6:25"},"nodeType":"YulFunctionCall","src":"18333:21:25"},"nodeType":"YulExpressionStatement","src":"18333:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18374:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18385:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18370:3:25"},"nodeType":"YulFunctionCall","src":"18370:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"18390:2:25","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18363:6:25"},"nodeType":"YulFunctionCall","src":"18363:30:25"},"nodeType":"YulExpressionStatement","src":"18363:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18413:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18424:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18409:3:25"},"nodeType":"YulFunctionCall","src":"18409:18:25"},{"hexValue":"596f7520646f6e2774206f776e2074686973206272757368","kind":"string","nodeType":"YulLiteral","src":"18429:26:25","type":"","value":"You don't own this brush"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18402:6:25"},"nodeType":"YulFunctionCall","src":"18402:54:25"},"nodeType":"YulExpressionStatement","src":"18402:54:25"},{"nodeType":"YulAssignment","src":"18465:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18477:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18488:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18473:3:25"},"nodeType":"YulFunctionCall","src":"18473:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18465:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_a4ae2b81cf1f00a8f3dffd1b5f6fce615157e47012c48e094e545aeb46d225f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18300:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18314:4:25","type":""}],"src":"18149:348:25"},{"body":{"nodeType":"YulBlock","src":"18540:74:25","statements":[{"body":{"nodeType":"YulBlock","src":"18563:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"18565:16:25"},"nodeType":"YulFunctionCall","src":"18565:18:25"},"nodeType":"YulExpressionStatement","src":"18565:18:25"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"18560:1:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18553:6:25"},"nodeType":"YulFunctionCall","src":"18553:9:25"},"nodeType":"YulIf","src":"18550:35:25"},{"nodeType":"YulAssignment","src":"18594:14:25","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18603:1:25"},{"name":"y","nodeType":"YulIdentifier","src":"18606:1:25"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"18599:3:25"},"nodeType":"YulFunctionCall","src":"18599:9:25"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"18594:1:25"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"18525:1:25","type":""},{"name":"y","nodeType":"YulTypedName","src":"18528:1:25","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"18534:1:25","type":""}],"src":"18502:112:25"},{"body":{"nodeType":"YulBlock","src":"18793:168:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18810:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18821:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18803:6:25"},"nodeType":"YulFunctionCall","src":"18803:21:25"},"nodeType":"YulExpressionStatement","src":"18803:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18844:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18855:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18840:3:25"},"nodeType":"YulFunctionCall","src":"18840:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"18860:2:25","type":"","value":"18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18833:6:25"},"nodeType":"YulFunctionCall","src":"18833:30:25"},"nodeType":"YulExpressionStatement","src":"18833:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18883:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18894:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18879:3:25"},"nodeType":"YulFunctionCall","src":"18879:18:25"},{"hexValue":"496e76616c696420706978656c2064617461","kind":"string","nodeType":"YulLiteral","src":"18899:20:25","type":"","value":"Invalid pixel data"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18872:6:25"},"nodeType":"YulFunctionCall","src":"18872:48:25"},"nodeType":"YulExpressionStatement","src":"18872:48:25"},{"nodeType":"YulAssignment","src":"18929:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18941:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18952:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18937:3:25"},"nodeType":"YulFunctionCall","src":"18937:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18929:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_e004b49046650d027883dbb60be120e8744aabb2d60ba79ed02289cddcd73c53__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18770:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18784:4:25","type":""}],"src":"18619:342:25"},{"body":{"nodeType":"YulBlock","src":"19047:103:25","statements":[{"body":{"nodeType":"YulBlock","src":"19093:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19102:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19105:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19095:6:25"},"nodeType":"YulFunctionCall","src":"19095:12:25"},"nodeType":"YulExpressionStatement","src":"19095:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"19068:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"19077:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19064:3:25"},"nodeType":"YulFunctionCall","src":"19064:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"19089:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19060:3:25"},"nodeType":"YulFunctionCall","src":"19060:32:25"},"nodeType":"YulIf","src":"19057:52:25"},{"nodeType":"YulAssignment","src":"19118:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19134:9:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19128:5:25"},"nodeType":"YulFunctionCall","src":"19128:16:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"19118:6:25"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19013:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"19024:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"19036:6:25","type":""}],"src":"18966:184:25"},{"body":{"nodeType":"YulBlock","src":"19329:169:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19346:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"19357:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19339:6:25"},"nodeType":"YulFunctionCall","src":"19339:21:25"},"nodeType":"YulExpressionStatement","src":"19339:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19380:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"19391:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19376:3:25"},"nodeType":"YulFunctionCall","src":"19376:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"19396:2:25","type":"","value":"19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19369:6:25"},"nodeType":"YulFunctionCall","src":"19369:30:25"},"nodeType":"YulExpressionStatement","src":"19369:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19419:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"19430:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19415:3:25"},"nodeType":"YulFunctionCall","src":"19415:18:25"},{"hexValue":"4272757368207573656420746f6f206d756368","kind":"string","nodeType":"YulLiteral","src":"19435:21:25","type":"","value":"Brush used too much"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19408:6:25"},"nodeType":"YulFunctionCall","src":"19408:49:25"},"nodeType":"YulExpressionStatement","src":"19408:49:25"},{"nodeType":"YulAssignment","src":"19466:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19478:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"19489:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19474:3:25"},"nodeType":"YulFunctionCall","src":"19474:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19466:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_4acae158723a2a1ded16d661c6996469d8495895a0bc1556e7cbd5adfcb24208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19306:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19320:4:25","type":""}],"src":"19155:343:25"},{"body":{"nodeType":"YulBlock","src":"19688:374:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19705:9:25"},{"name":"value0","nodeType":"YulIdentifier","src":"19716:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19698:6:25"},"nodeType":"YulFunctionCall","src":"19698:25:25"},"nodeType":"YulExpressionStatement","src":"19698:25:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19743:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"19754:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19739:3:25"},"nodeType":"YulFunctionCall","src":"19739:18:25"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"19763:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19779:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"19784:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19775:3:25"},"nodeType":"YulFunctionCall","src":"19775:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"19788:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19771:3:25"},"nodeType":"YulFunctionCall","src":"19771:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19759:3:25"},"nodeType":"YulFunctionCall","src":"19759:32:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19732:6:25"},"nodeType":"YulFunctionCall","src":"19732:60:25"},"nodeType":"YulExpressionStatement","src":"19732:60:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19812:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"19823:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19808:3:25"},"nodeType":"YulFunctionCall","src":"19808:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"19828:2:25","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19801:6:25"},"nodeType":"YulFunctionCall","src":"19801:30:25"},"nodeType":"YulExpressionStatement","src":"19801:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19851:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"19862:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19847:3:25"},"nodeType":"YulFunctionCall","src":"19847:18:25"},{"name":"value3","nodeType":"YulIdentifier","src":"19867:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19840:6:25"},"nodeType":"YulFunctionCall","src":"19840:34:25"},"nodeType":"YulExpressionStatement","src":"19840:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19900:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"19911:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19896:3:25"},"nodeType":"YulFunctionCall","src":"19896:19:25"},{"name":"value2","nodeType":"YulIdentifier","src":"19917:6:25"},{"name":"value3","nodeType":"YulIdentifier","src":"19925:6:25"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"19883:12:25"},"nodeType":"YulFunctionCall","src":"19883:49:25"},"nodeType":"YulExpressionStatement","src":"19883:49:25"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19956:9:25"},{"name":"value3","nodeType":"YulIdentifier","src":"19967:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19952:3:25"},"nodeType":"YulFunctionCall","src":"19952:22:25"},{"kind":"number","nodeType":"YulLiteral","src":"19976:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19948:3:25"},"nodeType":"YulFunctionCall","src":"19948:32:25"},{"kind":"number","nodeType":"YulLiteral","src":"19982:1:25","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19941:6:25"},"nodeType":"YulFunctionCall","src":"19941:43:25"},"nodeType":"YulExpressionStatement","src":"19941:43:25"},{"nodeType":"YulAssignment","src":"19993:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20009:9:25"},{"arguments":[{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"20028:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"20036:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20024:3:25"},"nodeType":"YulFunctionCall","src":"20024:15:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20045:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"20041:3:25"},"nodeType":"YulFunctionCall","src":"20041:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20020:3:25"},"nodeType":"YulFunctionCall","src":"20020:29:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20005:3:25"},"nodeType":"YulFunctionCall","src":"20005:45:25"},{"kind":"number","nodeType":"YulLiteral","src":"20052:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20001:3:25"},"nodeType":"YulFunctionCall","src":"20001:55:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19993:4:25"}]}]},"name":"abi_encode_tuple_t_uint256_t_address_t_bytes_calldata_ptr__to_t_uint256_t_address_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19633:9:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"19644:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"19652:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19660:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19668:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19679:4:25","type":""}],"src":"19503:559:25"},{"body":{"nodeType":"YulBlock","src":"20241:165:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20258:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"20269:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20251:6:25"},"nodeType":"YulFunctionCall","src":"20251:21:25"},"nodeType":"YulExpressionStatement","src":"20251:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20292:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"20303:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20288:3:25"},"nodeType":"YulFunctionCall","src":"20288:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"20308:2:25","type":"","value":"15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20281:6:25"},"nodeType":"YulFunctionCall","src":"20281:30:25"},"nodeType":"YulExpressionStatement","src":"20281:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20331:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"20342:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20327:3:25"},"nodeType":"YulFunctionCall","src":"20327:18:25"},{"hexValue":"416c72656164792073746172746564","kind":"string","nodeType":"YulLiteral","src":"20347:17:25","type":"","value":"Already started"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20320:6:25"},"nodeType":"YulFunctionCall","src":"20320:45:25"},"nodeType":"YulExpressionStatement","src":"20320:45:25"},{"nodeType":"YulAssignment","src":"20374:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20386:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"20397:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20382:3:25"},"nodeType":"YulFunctionCall","src":"20382:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20374:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_55ab3174a5323a5cf1c9a30c7e43cc6ccd65bdd10d3571758b8ba8dbb82736a6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20218:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20232:4:25","type":""}],"src":"20067:339:25"},{"body":{"nodeType":"YulBlock","src":"20585:228:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20602:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"20613:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20595:6:25"},"nodeType":"YulFunctionCall","src":"20595:21:25"},"nodeType":"YulExpressionStatement","src":"20595:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20636:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"20647:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20632:3:25"},"nodeType":"YulFunctionCall","src":"20632:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"20652:2:25","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20625:6:25"},"nodeType":"YulFunctionCall","src":"20625:30:25"},"nodeType":"YulExpressionStatement","src":"20625:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20675:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"20686:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20671:3:25"},"nodeType":"YulFunctionCall","src":"20671:18:25"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"20691:34:25","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20664:6:25"},"nodeType":"YulFunctionCall","src":"20664:62:25"},"nodeType":"YulExpressionStatement","src":"20664:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20746:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"20757:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20742:3:25"},"nodeType":"YulFunctionCall","src":"20742:18:25"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"20762:8:25","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20735:6:25"},"nodeType":"YulFunctionCall","src":"20735:36:25"},"nodeType":"YulExpressionStatement","src":"20735:36:25"},{"nodeType":"YulAssignment","src":"20780:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20792:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"20803:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20788:3:25"},"nodeType":"YulFunctionCall","src":"20788:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20780:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20562:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20576:4:25","type":""}],"src":"20411:402:25"},{"body":{"nodeType":"YulBlock","src":"20992:161:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21009:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"21020:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21002:6:25"},"nodeType":"YulFunctionCall","src":"21002:21:25"},"nodeType":"YulExpressionStatement","src":"21002:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21043:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"21054:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21039:3:25"},"nodeType":"YulFunctionCall","src":"21039:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"21059:2:25","type":"","value":"11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21032:6:25"},"nodeType":"YulFunctionCall","src":"21032:30:25"},"nodeType":"YulExpressionStatement","src":"21032:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21082:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"21093:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21078:3:25"},"nodeType":"YulFunctionCall","src":"21078:18:25"},{"hexValue":"496e76616c696420666565","kind":"string","nodeType":"YulLiteral","src":"21098:13:25","type":"","value":"Invalid fee"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21071:6:25"},"nodeType":"YulFunctionCall","src":"21071:41:25"},"nodeType":"YulExpressionStatement","src":"21071:41:25"},{"nodeType":"YulAssignment","src":"21121:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21133:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"21144:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21129:3:25"},"nodeType":"YulFunctionCall","src":"21129:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21121:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_7ff6289abbb0687399ebc1aafeab18832fc5a110fcdbd805e18f72d422711e7a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20969:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20983:4:25","type":""}],"src":"20818:335:25"},{"body":{"nodeType":"YulBlock","src":"21332:182:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21349:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"21360:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21342:6:25"},"nodeType":"YulFunctionCall","src":"21342:21:25"},"nodeType":"YulExpressionStatement","src":"21342:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21383:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"21394:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21379:3:25"},"nodeType":"YulFunctionCall","src":"21379:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"21399:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21372:6:25"},"nodeType":"YulFunctionCall","src":"21372:30:25"},"nodeType":"YulExpressionStatement","src":"21372:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21422:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"21433:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21418:3:25"},"nodeType":"YulFunctionCall","src":"21418:18:25"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"21438:34:25","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21411:6:25"},"nodeType":"YulFunctionCall","src":"21411:62:25"},"nodeType":"YulExpressionStatement","src":"21411:62:25"},{"nodeType":"YulAssignment","src":"21482:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21494:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"21505:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21490:3:25"},"nodeType":"YulFunctionCall","src":"21490:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21482:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21309:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21323:4:25","type":""}],"src":"21158:356:25"},{"body":{"nodeType":"YulBlock","src":"21575:65:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21592:1:25","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"21595:3:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21585:6:25"},"nodeType":"YulFunctionCall","src":"21585:14:25"},"nodeType":"YulExpressionStatement","src":"21585:14:25"},{"nodeType":"YulAssignment","src":"21608:26:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21626:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21629:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"21616:9:25"},"nodeType":"YulFunctionCall","src":"21616:18:25"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"21608:4:25"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"21558:3:25","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"21566:4:25","type":""}],"src":"21519:121:25"},{"body":{"nodeType":"YulBlock","src":"21726:464:25","statements":[{"body":{"nodeType":"YulBlock","src":"21759:425:25","statements":[{"nodeType":"YulVariableDeclaration","src":"21773:11:25","value":{"kind":"number","nodeType":"YulLiteral","src":"21783:1:25","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"21777:2:25","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"21804:2:25"},{"name":"array","nodeType":"YulIdentifier","src":"21808:5:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21797:6:25"},"nodeType":"YulFunctionCall","src":"21797:17:25"},"nodeType":"YulExpressionStatement","src":"21797:17:25"},{"nodeType":"YulVariableDeclaration","src":"21827:31:25","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"21849:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"21853:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"21839:9:25"},"nodeType":"YulFunctionCall","src":"21839:19:25"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"21831:4:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"21871:57:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"21894:4:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21904:1:25","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"21911:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"21923:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21907:3:25"},"nodeType":"YulFunctionCall","src":"21907:19:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"21900:3:25"},"nodeType":"YulFunctionCall","src":"21900:27:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21890:3:25"},"nodeType":"YulFunctionCall","src":"21890:38:25"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"21875:11:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"21965:23:25","statements":[{"nodeType":"YulAssignment","src":"21967:19:25","value":{"name":"data","nodeType":"YulIdentifier","src":"21982:4:25"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"21967:11:25"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"21947:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"21959:4:25","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"21944:2:25"},"nodeType":"YulFunctionCall","src":"21944:20:25"},"nodeType":"YulIf","src":"21941:47:25"},{"nodeType":"YulVariableDeclaration","src":"22001:41:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"22015:4:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22025:1:25","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"22032:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"22037:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22028:3:25"},"nodeType":"YulFunctionCall","src":"22028:12:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"22021:3:25"},"nodeType":"YulFunctionCall","src":"22021:20:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22011:3:25"},"nodeType":"YulFunctionCall","src":"22011:31:25"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"22005:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22055:24:25","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"22068:11:25"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"22059:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"22153:21:25","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"22162:5:25"},{"name":"_1","nodeType":"YulIdentifier","src":"22169:2:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"22155:6:25"},"nodeType":"YulFunctionCall","src":"22155:17:25"},"nodeType":"YulExpressionStatement","src":"22155:17:25"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"22103:5:25"},{"name":"_2","nodeType":"YulIdentifier","src":"22110:2:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22100:2:25"},"nodeType":"YulFunctionCall","src":"22100:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"22114:26:25","statements":[{"nodeType":"YulAssignment","src":"22116:22:25","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"22129:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"22136:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22125:3:25"},"nodeType":"YulFunctionCall","src":"22125:13:25"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"22116:5:25"}]}]},"pre":{"nodeType":"YulBlock","src":"22096:3:25","statements":[]},"src":"22092:82:25"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"21742:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"21747:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21739:2:25"},"nodeType":"YulFunctionCall","src":"21739:11:25"},"nodeType":"YulIf","src":"21736:448:25"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"21698:5:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"21705:3:25","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"21710:10:25","type":""}],"src":"21645:545:25"},{"body":{"nodeType":"YulBlock","src":"22280:81:25","statements":[{"nodeType":"YulAssignment","src":"22290:65:25","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"22305:4:25"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22323:1:25","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"22326:3:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"22319:3:25"},"nodeType":"YulFunctionCall","src":"22319:11:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22336:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"22332:3:25"},"nodeType":"YulFunctionCall","src":"22332:6:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"22315:3:25"},"nodeType":"YulFunctionCall","src":"22315:24:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"22311:3:25"},"nodeType":"YulFunctionCall","src":"22311:29:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22301:3:25"},"nodeType":"YulFunctionCall","src":"22301:40:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22347:1:25","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"22350:3:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"22343:3:25"},"nodeType":"YulFunctionCall","src":"22343:11:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"22298:2:25"},"nodeType":"YulFunctionCall","src":"22298:57:25"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"22290:4:25"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"22257:4:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"22263:3:25","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"22271:4:25","type":""}],"src":"22195:166:25"},{"body":{"nodeType":"YulBlock","src":"22462:1256:25","statements":[{"nodeType":"YulVariableDeclaration","src":"22472:24:25","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"22492:3:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22486:5:25"},"nodeType":"YulFunctionCall","src":"22486:10:25"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"22476:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"22539:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"22541:16:25"},"nodeType":"YulFunctionCall","src":"22541:18:25"},"nodeType":"YulExpressionStatement","src":"22541:18:25"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"22511:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"22519:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22508:2:25"},"nodeType":"YulFunctionCall","src":"22508:30:25"},"nodeType":"YulIf","src":"22505:56:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"22614:4:25"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"22652:4:25"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"22646:5:25"},"nodeType":"YulFunctionCall","src":"22646:11:25"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"22620:25:25"},"nodeType":"YulFunctionCall","src":"22620:38:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"22660:6:25"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"22570:43:25"},"nodeType":"YulFunctionCall","src":"22570:97:25"},"nodeType":"YulExpressionStatement","src":"22570:97:25"},{"nodeType":"YulVariableDeclaration","src":"22676:18:25","value":{"kind":"number","nodeType":"YulLiteral","src":"22693:1:25","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"22680:9:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22703:23:25","value":{"kind":"number","nodeType":"YulLiteral","src":"22722:4:25","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"22707:11:25","type":""}]},{"nodeType":"YulAssignment","src":"22735:24:25","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"22748:11:25"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"22735:9:25"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"22805:656:25","statements":[{"nodeType":"YulVariableDeclaration","src":"22819:35:25","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"22838:6:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22850:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"22846:3:25"},"nodeType":"YulFunctionCall","src":"22846:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22834:3:25"},"nodeType":"YulFunctionCall","src":"22834:20:25"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"22823:7:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22867:49:25","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"22911:4:25"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"22881:29:25"},"nodeType":"YulFunctionCall","src":"22881:35:25"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"22871:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22929:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"22938:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"22933:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"23016:172:25","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"23041:6:25"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"23059:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"23064:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23055:3:25"},"nodeType":"YulFunctionCall","src":"23055:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23049:5:25"},"nodeType":"YulFunctionCall","src":"23049:26:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"23034:6:25"},"nodeType":"YulFunctionCall","src":"23034:42:25"},"nodeType":"YulExpressionStatement","src":"23034:42:25"},{"nodeType":"YulAssignment","src":"23093:24:25","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"23107:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"23115:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23103:3:25"},"nodeType":"YulFunctionCall","src":"23103:14:25"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"23093:6:25"}]},{"nodeType":"YulAssignment","src":"23134:40:25","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"23151:9:25"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"23162:11:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23147:3:25"},"nodeType":"YulFunctionCall","src":"23147:27:25"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"23134:9:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"22963:1:25"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"22966:7:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22960:2:25"},"nodeType":"YulFunctionCall","src":"22960:14:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"22975:28:25","statements":[{"nodeType":"YulAssignment","src":"22977:24:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"22986:1:25"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"22989:11:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22982:3:25"},"nodeType":"YulFunctionCall","src":"22982:19:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"22977:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"22956:3:25","statements":[]},"src":"22952:236:25"},{"body":{"nodeType":"YulBlock","src":"23236:166:25","statements":[{"nodeType":"YulVariableDeclaration","src":"23254:43:25","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"23281:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"23286:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23277:3:25"},"nodeType":"YulFunctionCall","src":"23277:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23271:5:25"},"nodeType":"YulFunctionCall","src":"23271:26:25"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"23258:9:25","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"23321:6:25"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"23333:9:25"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23360:1:25","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"23363:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"23356:3:25"},"nodeType":"YulFunctionCall","src":"23356:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"23372:3:25","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23352:3:25"},"nodeType":"YulFunctionCall","src":"23352:24:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23382:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"23378:3:25"},"nodeType":"YulFunctionCall","src":"23378:6:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"23348:3:25"},"nodeType":"YulFunctionCall","src":"23348:37:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"23344:3:25"},"nodeType":"YulFunctionCall","src":"23344:42:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23329:3:25"},"nodeType":"YulFunctionCall","src":"23329:58:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"23314:6:25"},"nodeType":"YulFunctionCall","src":"23314:74:25"},"nodeType":"YulExpressionStatement","src":"23314:74:25"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"23207:7:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"23216:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"23204:2:25"},"nodeType":"YulFunctionCall","src":"23204:19:25"},"nodeType":"YulIf","src":"23201:201:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"23422:4:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23436:1:25","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"23439:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"23432:3:25"},"nodeType":"YulFunctionCall","src":"23432:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"23448:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23428:3:25"},"nodeType":"YulFunctionCall","src":"23428:22:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"23415:6:25"},"nodeType":"YulFunctionCall","src":"23415:36:25"},"nodeType":"YulExpressionStatement","src":"23415:36:25"}]},"nodeType":"YulCase","src":"22798:663:25","value":{"kind":"number","nodeType":"YulLiteral","src":"22803:1:25","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"23478:234:25","statements":[{"nodeType":"YulVariableDeclaration","src":"23492:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"23505:1:25","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"23496:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"23541:67:25","statements":[{"nodeType":"YulAssignment","src":"23559:35:25","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"23578:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"23583:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23574:3:25"},"nodeType":"YulFunctionCall","src":"23574:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23568:5:25"},"nodeType":"YulFunctionCall","src":"23568:26:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"23559:5:25"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"23522:6:25"},"nodeType":"YulIf","src":"23519:89:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"23628:4:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23687:5:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"23694:6:25"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"23634:52:25"},"nodeType":"YulFunctionCall","src":"23634:67:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"23621:6:25"},"nodeType":"YulFunctionCall","src":"23621:81:25"},"nodeType":"YulExpressionStatement","src":"23621:81:25"}]},"nodeType":"YulCase","src":"23470:242:25","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"22778:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"22786:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22775:2:25"},"nodeType":"YulFunctionCall","src":"22775:14:25"},"nodeType":"YulSwitch","src":"22768:944:25"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"22447:4:25","type":""},{"name":"src","nodeType":"YulTypedName","src":"22453:3:25","type":""}],"src":"22366:1352:25"},{"body":{"nodeType":"YulBlock","src":"23897:223:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23914:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"23925:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23907:6:25"},"nodeType":"YulFunctionCall","src":"23907:21:25"},"nodeType":"YulExpressionStatement","src":"23907:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23948:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"23959:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23944:3:25"},"nodeType":"YulFunctionCall","src":"23944:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"23964:2:25","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23937:6:25"},"nodeType":"YulFunctionCall","src":"23937:30:25"},"nodeType":"YulExpressionStatement","src":"23937:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23987:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"23998:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23983:3:25"},"nodeType":"YulFunctionCall","src":"23983:18:25"},{"hexValue":"455243313135353a206d696e7420746f20746865207a65726f20616464726573","kind":"string","nodeType":"YulLiteral","src":"24003:34:25","type":"","value":"ERC1155: mint to the zero addres"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23976:6:25"},"nodeType":"YulFunctionCall","src":"23976:62:25"},"nodeType":"YulExpressionStatement","src":"23976:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24058:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"24069:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24054:3:25"},"nodeType":"YulFunctionCall","src":"24054:18:25"},{"hexValue":"73","kind":"string","nodeType":"YulLiteral","src":"24074:3:25","type":"","value":"s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24047:6:25"},"nodeType":"YulFunctionCall","src":"24047:31:25"},"nodeType":"YulExpressionStatement","src":"24047:31:25"},{"nodeType":"YulAssignment","src":"24087:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24099:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"24110:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24095:3:25"},"nodeType":"YulFunctionCall","src":"24095:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24087:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23874:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23888:4:25","type":""}],"src":"23723:397:25"},{"body":{"nodeType":"YulBlock","src":"24299:230:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24316:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"24327:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24309:6:25"},"nodeType":"YulFunctionCall","src":"24309:21:25"},"nodeType":"YulExpressionStatement","src":"24309:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24350:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"24361:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24346:3:25"},"nodeType":"YulFunctionCall","src":"24346:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"24366:2:25","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24339:6:25"},"nodeType":"YulFunctionCall","src":"24339:30:25"},"nodeType":"YulExpressionStatement","src":"24339:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24389:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"24400:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24385:3:25"},"nodeType":"YulFunctionCall","src":"24385:18:25"},{"hexValue":"455243313135353a2069647320616e6420616d6f756e7473206c656e67746820","kind":"string","nodeType":"YulLiteral","src":"24405:34:25","type":"","value":"ERC1155: ids and amounts length "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24378:6:25"},"nodeType":"YulFunctionCall","src":"24378:62:25"},"nodeType":"YulExpressionStatement","src":"24378:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24460:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"24471:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24456:3:25"},"nodeType":"YulFunctionCall","src":"24456:18:25"},{"hexValue":"6d69736d61746368","kind":"string","nodeType":"YulLiteral","src":"24476:10:25","type":"","value":"mismatch"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24449:6:25"},"nodeType":"YulFunctionCall","src":"24449:38:25"},"nodeType":"YulExpressionStatement","src":"24449:38:25"},{"nodeType":"YulAssignment","src":"24496:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24508:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"24519:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24504:3:25"},"nodeType":"YulFunctionCall","src":"24504:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24496:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24276:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24290:4:25","type":""}],"src":"24125:404:25"},{"body":{"nodeType":"YulBlock","src":"24708:227:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24725:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"24736:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24718:6:25"},"nodeType":"YulFunctionCall","src":"24718:21:25"},"nodeType":"YulExpressionStatement","src":"24718:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24759:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"24770:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24755:3:25"},"nodeType":"YulFunctionCall","src":"24755:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"24775:2:25","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24748:6:25"},"nodeType":"YulFunctionCall","src":"24748:30:25"},"nodeType":"YulExpressionStatement","src":"24748:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24798:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"24809:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24794:3:25"},"nodeType":"YulFunctionCall","src":"24794:18:25"},{"hexValue":"455243313135353a207472616e7366657220746f20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"24814:34:25","type":"","value":"ERC1155: transfer to the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24787:6:25"},"nodeType":"YulFunctionCall","src":"24787:62:25"},"nodeType":"YulExpressionStatement","src":"24787:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24869:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"24880:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24865:3:25"},"nodeType":"YulFunctionCall","src":"24865:18:25"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"24885:7:25","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24858:6:25"},"nodeType":"YulFunctionCall","src":"24858:35:25"},"nodeType":"YulExpressionStatement","src":"24858:35:25"},{"nodeType":"YulAssignment","src":"24902:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24914:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"24925:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24910:3:25"},"nodeType":"YulFunctionCall","src":"24910:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24902:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24685:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24699:4:25","type":""}],"src":"24534:401:25"},{"body":{"nodeType":"YulBlock","src":"25114:232:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25131:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"25142:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25124:6:25"},"nodeType":"YulFunctionCall","src":"25124:21:25"},"nodeType":"YulExpressionStatement","src":"25124:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25165:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"25176:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25161:3:25"},"nodeType":"YulFunctionCall","src":"25161:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"25181:2:25","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25154:6:25"},"nodeType":"YulFunctionCall","src":"25154:30:25"},"nodeType":"YulExpressionStatement","src":"25154:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25204:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"25215:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25200:3:25"},"nodeType":"YulFunctionCall","src":"25200:18:25"},{"hexValue":"455243313135353a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"25220:34:25","type":"","value":"ERC1155: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25193:6:25"},"nodeType":"YulFunctionCall","src":"25193:62:25"},"nodeType":"YulExpressionStatement","src":"25193:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25275:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"25286:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25271:3:25"},"nodeType":"YulFunctionCall","src":"25271:18:25"},{"hexValue":"72207472616e73666572","kind":"string","nodeType":"YulLiteral","src":"25291:12:25","type":"","value":"r transfer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25264:6:25"},"nodeType":"YulFunctionCall","src":"25264:40:25"},"nodeType":"YulExpressionStatement","src":"25264:40:25"},{"nodeType":"YulAssignment","src":"25313:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25325:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"25336:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25321:3:25"},"nodeType":"YulFunctionCall","src":"25321:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25313:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25091:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25105:4:25","type":""}],"src":"24940:406:25"},{"body":{"nodeType":"YulBlock","src":"25580:236:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25597:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"25608:2:25","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25590:6:25"},"nodeType":"YulFunctionCall","src":"25590:21:25"},"nodeType":"YulExpressionStatement","src":"25590:21:25"},{"nodeType":"YulVariableDeclaration","src":"25620:70:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"25663:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25675:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"25686:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25671:3:25"},"nodeType":"YulFunctionCall","src":"25671:18:25"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"25634:28:25"},"nodeType":"YulFunctionCall","src":"25634:56:25"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"25624:6:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25710:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"25721:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25706:3:25"},"nodeType":"YulFunctionCall","src":"25706:18:25"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"25730:6:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"25738:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25726:3:25"},"nodeType":"YulFunctionCall","src":"25726:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25699:6:25"},"nodeType":"YulFunctionCall","src":"25699:50:25"},"nodeType":"YulExpressionStatement","src":"25699:50:25"},{"nodeType":"YulAssignment","src":"25758:52:25","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"25795:6:25"},{"name":"tail_1","nodeType":"YulIdentifier","src":"25803:6:25"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"25766:28:25"},"nodeType":"YulFunctionCall","src":"25766:44:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25758:4:25"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25541:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"25552:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25560:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25571:4:25","type":""}],"src":"25351:465:25"},{"body":{"nodeType":"YulBlock","src":"25995:231:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26012:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"26023:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26005:6:25"},"nodeType":"YulFunctionCall","src":"26005:21:25"},"nodeType":"YulExpressionStatement","src":"26005:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26046:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"26057:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26042:3:25"},"nodeType":"YulFunctionCall","src":"26042:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"26062:2:25","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26035:6:25"},"nodeType":"YulFunctionCall","src":"26035:30:25"},"nodeType":"YulExpressionStatement","src":"26035:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26085:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"26096:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26081:3:25"},"nodeType":"YulFunctionCall","src":"26081:18:25"},{"hexValue":"455243313135353a2073657474696e6720617070726f76616c20737461747573","kind":"string","nodeType":"YulLiteral","src":"26101:34:25","type":"","value":"ERC1155: setting approval status"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26074:6:25"},"nodeType":"YulFunctionCall","src":"26074:62:25"},"nodeType":"YulExpressionStatement","src":"26074:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26156:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"26167:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26152:3:25"},"nodeType":"YulFunctionCall","src":"26152:18:25"},{"hexValue":"20666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"26172:11:25","type":"","value":" for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26145:6:25"},"nodeType":"YulFunctionCall","src":"26145:39:25"},"nodeType":"YulExpressionStatement","src":"26145:39:25"},{"nodeType":"YulAssignment","src":"26193:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26205:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"26216:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26201:3:25"},"nodeType":"YulFunctionCall","src":"26201:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26193:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25972:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25986:4:25","type":""}],"src":"25821:405:25"},{"body":{"nodeType":"YulBlock","src":"26462:330:25","statements":[{"nodeType":"YulVariableDeclaration","src":"26472:29:25","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26490:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"26495:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"26486:3:25"},"nodeType":"YulFunctionCall","src":"26486:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"26499:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26482:3:25"},"nodeType":"YulFunctionCall","src":"26482:19:25"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"26476:2:25","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26517:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26532:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"26540:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26528:3:25"},"nodeType":"YulFunctionCall","src":"26528:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26510:6:25"},"nodeType":"YulFunctionCall","src":"26510:34:25"},"nodeType":"YulExpressionStatement","src":"26510:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26564:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"26575:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26560:3:25"},"nodeType":"YulFunctionCall","src":"26560:18:25"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"26584:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"26592:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26580:3:25"},"nodeType":"YulFunctionCall","src":"26580:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26553:6:25"},"nodeType":"YulFunctionCall","src":"26553:43:25"},"nodeType":"YulExpressionStatement","src":"26553:43:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26616:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"26627:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26612:3:25"},"nodeType":"YulFunctionCall","src":"26612:18:25"},{"name":"value2","nodeType":"YulIdentifier","src":"26632:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26605:6:25"},"nodeType":"YulFunctionCall","src":"26605:34:25"},"nodeType":"YulExpressionStatement","src":"26605:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26659:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"26670:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26655:3:25"},"nodeType":"YulFunctionCall","src":"26655:18:25"},{"name":"value3","nodeType":"YulIdentifier","src":"26675:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26648:6:25"},"nodeType":"YulFunctionCall","src":"26648:34:25"},"nodeType":"YulExpressionStatement","src":"26648:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26702:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"26713:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26698:3:25"},"nodeType":"YulFunctionCall","src":"26698:19:25"},{"kind":"number","nodeType":"YulLiteral","src":"26719:3:25","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26691:6:25"},"nodeType":"YulFunctionCall","src":"26691:32:25"},"nodeType":"YulExpressionStatement","src":"26691:32:25"},{"nodeType":"YulAssignment","src":"26732:54:25","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"26758:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26770:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"26781:3:25","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26766:3:25"},"nodeType":"YulFunctionCall","src":"26766:19:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"26740:17:25"},"nodeType":"YulFunctionCall","src":"26740:46:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26732:4:25"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26399:9:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"26410:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"26418:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"26426:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"26434:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26442:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26453:4:25","type":""}],"src":"26231:561:25"},{"body":{"nodeType":"YulBlock","src":"26877:169:25","statements":[{"body":{"nodeType":"YulBlock","src":"26923:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26932:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"26935:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"26925:6:25"},"nodeType":"YulFunctionCall","src":"26925:12:25"},"nodeType":"YulExpressionStatement","src":"26925:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"26898:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"26907:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26894:3:25"},"nodeType":"YulFunctionCall","src":"26894:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"26919:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"26890:3:25"},"nodeType":"YulFunctionCall","src":"26890:32:25"},"nodeType":"YulIf","src":"26887:52:25"},{"nodeType":"YulVariableDeclaration","src":"26948:29:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26967:9:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"26961:5:25"},"nodeType":"YulFunctionCall","src":"26961:16:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"26952:5:25","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27010:5:25"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"26986:23:25"},"nodeType":"YulFunctionCall","src":"26986:30:25"},"nodeType":"YulExpressionStatement","src":"26986:30:25"},{"nodeType":"YulAssignment","src":"27025:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"27035:5:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"27025:6:25"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26843:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"26854:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"26866:6:25","type":""}],"src":"26797:249:25"},{"body":{"nodeType":"YulBlock","src":"27094:136:25","statements":[{"body":{"nodeType":"YulBlock","src":"27139:85:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27168:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27171:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27174:1:25","type":"","value":"4"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"27153:14:25"},"nodeType":"YulFunctionCall","src":"27153:23:25"},"nodeType":"YulExpressionStatement","src":"27153:23:25"},{"nodeType":"YulAssignment","src":"27189:25:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27200:3:25","type":"","value":"224"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27211:1:25","type":"","value":"0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27205:5:25"},"nodeType":"YulFunctionCall","src":"27205:8:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"27196:3:25"},"nodeType":"YulFunctionCall","src":"27196:18:25"},"variableNames":[{"name":"sig","nodeType":"YulIdentifier","src":"27189:3:25"}]}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"27110:14:25"},"nodeType":"YulFunctionCall","src":"27110:16:25"},{"kind":"number","nodeType":"YulLiteral","src":"27128:1:25","type":"","value":"3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"27107:2:25"},"nodeType":"YulFunctionCall","src":"27107:23:25"},"nodeType":"YulIf","src":"27104:120:25"}]},"name":"return_data_selector","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"sig","nodeType":"YulTypedName","src":"27086:3:25","type":""}],"src":"27051:179:25"},{"body":{"nodeType":"YulBlock","src":"27282:624:25","statements":[{"body":{"nodeType":"YulBlock","src":"27322:9:25","statements":[{"nodeType":"YulLeave","src":"27324:5:25"}]},"condition":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"27298:14:25"},"nodeType":"YulFunctionCall","src":"27298:16:25"},{"kind":"number","nodeType":"YulLiteral","src":"27316:4:25","type":"","value":"0x44"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"27295:2:25"},"nodeType":"YulFunctionCall","src":"27295:26:25"},"nodeType":"YulIf","src":"27292:39:25"},{"nodeType":"YulVariableDeclaration","src":"27340:21:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27358:2:25","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27352:5:25"},"nodeType":"YulFunctionCall","src":"27352:9:25"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"27344:4:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"27370:16:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27384:1:25","type":"","value":"3"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"27380:3:25"},"nodeType":"YulFunctionCall","src":"27380:6:25"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"27374:2:25","type":""}]},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"27410:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"27416:1:25","type":"","value":"4"},{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"27423:14:25"},"nodeType":"YulFunctionCall","src":"27423:16:25"},{"name":"_1","nodeType":"YulIdentifier","src":"27441:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27419:3:25"},"nodeType":"YulFunctionCall","src":"27419:25:25"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"27395:14:25"},"nodeType":"YulFunctionCall","src":"27395:50:25"},"nodeType":"YulExpressionStatement","src":"27395:50:25"},{"nodeType":"YulVariableDeclaration","src":"27454:25:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"27474:4:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27468:5:25"},"nodeType":"YulFunctionCall","src":"27468:11:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"27458:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"27488:26:25","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"27498:14:25"},"nodeType":"YulFunctionCall","src":"27498:16:25"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"27492:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"27523:28:25","value":{"kind":"number","nodeType":"YulLiteral","src":"27533:18:25","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"27527:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"27609:9:25","statements":[{"nodeType":"YulLeave","src":"27611:5:25"}]},"condition":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"27569:6:25"},{"name":"_3","nodeType":"YulIdentifier","src":"27577:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"27566:2:25"},"nodeType":"YulFunctionCall","src":"27566:14:25"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"27589:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"27597:4:25","type":"","value":"0x24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27585:3:25"},"nodeType":"YulFunctionCall","src":"27585:17:25"},{"name":"_2","nodeType":"YulIdentifier","src":"27604:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"27582:2:25"},"nodeType":"YulFunctionCall","src":"27582:25:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"27563:2:25"},"nodeType":"YulFunctionCall","src":"27563:45:25"},"nodeType":"YulIf","src":"27560:58:25"},{"nodeType":"YulVariableDeclaration","src":"27627:28:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"27642:4:25"},{"name":"offset","nodeType":"YulIdentifier","src":"27648:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27638:3:25"},"nodeType":"YulFunctionCall","src":"27638:17:25"},"variables":[{"name":"msg","nodeType":"YulTypedName","src":"27631:3:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"27664:24:25","value":{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"27684:3:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27678:5:25"},"nodeType":"YulFunctionCall","src":"27678:10:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"27668:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"27715:9:25","statements":[{"nodeType":"YulLeave","src":"27717:5:25"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"27703:6:25"},{"name":"_3","nodeType":"YulIdentifier","src":"27711:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"27700:2:25"},"nodeType":"YulFunctionCall","src":"27700:14:25"},"nodeType":"YulIf","src":"27697:27:25"},{"body":{"nodeType":"YulBlock","src":"27806:9:25","statements":[{"nodeType":"YulLeave","src":"27808:5:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"msg","nodeType":"YulIdentifier","src":"27747:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"27752:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27743:3:25"},"nodeType":"YulFunctionCall","src":"27743:16:25"},{"kind":"number","nodeType":"YulLiteral","src":"27761:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27739:3:25"},"nodeType":"YulFunctionCall","src":"27739:27:25"},{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"27776:4:25"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"27782:14:25"},"nodeType":"YulFunctionCall","src":"27782:16:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27772:3:25"},"nodeType":"YulFunctionCall","src":"27772:27:25"},{"name":"_1","nodeType":"YulIdentifier","src":"27801:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27768:3:25"},"nodeType":"YulFunctionCall","src":"27768:36:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"27736:2:25"},"nodeType":"YulFunctionCall","src":"27736:69:25"},"nodeType":"YulIf","src":"27733:82:25"},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"27844:4:25"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"27858:6:25"},{"name":"length","nodeType":"YulIdentifier","src":"27866:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27854:3:25"},"nodeType":"YulFunctionCall","src":"27854:19:25"},{"kind":"number","nodeType":"YulLiteral","src":"27875:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27850:3:25"},"nodeType":"YulFunctionCall","src":"27850:30:25"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"27824:19:25"},"nodeType":"YulFunctionCall","src":"27824:57:25"},"nodeType":"YulExpressionStatement","src":"27824:57:25"},{"nodeType":"YulAssignment","src":"27890:10:25","value":{"name":"msg","nodeType":"YulIdentifier","src":"27897:3:25"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"27890:3:25"}]}]},"name":"try_decode_error_message","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"27274:3:25","type":""}],"src":"27235:671:25"},{"body":{"nodeType":"YulBlock","src":"28085:242:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28102:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"28113:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28095:6:25"},"nodeType":"YulFunctionCall","src":"28095:21:25"},"nodeType":"YulExpressionStatement","src":"28095:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28136:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"28147:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28132:3:25"},"nodeType":"YulFunctionCall","src":"28132:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"28152:2:25","type":"","value":"52"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28125:6:25"},"nodeType":"YulFunctionCall","src":"28125:30:25"},"nodeType":"YulExpressionStatement","src":"28125:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28175:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"28186:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28171:3:25"},"nodeType":"YulFunctionCall","src":"28171:18:25"},{"hexValue":"455243313135353a207472616e7366657220746f206e6f6e2d45524331313535","kind":"string","nodeType":"YulLiteral","src":"28191:34:25","type":"","value":"ERC1155: transfer to non-ERC1155"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28164:6:25"},"nodeType":"YulFunctionCall","src":"28164:62:25"},"nodeType":"YulExpressionStatement","src":"28164:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28246:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"28257:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28242:3:25"},"nodeType":"YulFunctionCall","src":"28242:18:25"},{"hexValue":"526563656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"28262:22:25","type":"","value":"Receiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28235:6:25"},"nodeType":"YulFunctionCall","src":"28235:50:25"},"nodeType":"YulExpressionStatement","src":"28235:50:25"},{"nodeType":"YulAssignment","src":"28294:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28306:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"28317:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28302:3:25"},"nodeType":"YulFunctionCall","src":"28302:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28294:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28062:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28076:4:25","type":""}],"src":"27911:416:25"},{"body":{"nodeType":"YulBlock","src":"28506:230:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28523:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"28534:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28516:6:25"},"nodeType":"YulFunctionCall","src":"28516:21:25"},"nodeType":"YulExpressionStatement","src":"28516:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28557:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"28568:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28553:3:25"},"nodeType":"YulFunctionCall","src":"28553:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"28573:2:25","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28546:6:25"},"nodeType":"YulFunctionCall","src":"28546:30:25"},"nodeType":"YulExpressionStatement","src":"28546:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28596:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"28607:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28592:3:25"},"nodeType":"YulFunctionCall","src":"28592:18:25"},{"hexValue":"455243313135353a204552433131353552656365697665722072656a65637465","kind":"string","nodeType":"YulLiteral","src":"28612:34:25","type":"","value":"ERC1155: ERC1155Receiver rejecte"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28585:6:25"},"nodeType":"YulFunctionCall","src":"28585:62:25"},"nodeType":"YulExpressionStatement","src":"28585:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28667:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"28678:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28663:3:25"},"nodeType":"YulFunctionCall","src":"28663:18:25"},{"hexValue":"6420746f6b656e73","kind":"string","nodeType":"YulLiteral","src":"28683:10:25","type":"","value":"d tokens"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28656:6:25"},"nodeType":"YulFunctionCall","src":"28656:38:25"},"nodeType":"YulExpressionStatement","src":"28656:38:25"},{"nodeType":"YulAssignment","src":"28703:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28715:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"28726:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28711:3:25"},"nodeType":"YulFunctionCall","src":"28711:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28703:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28483:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28497:4:25","type":""}],"src":"28332:404:25"},{"body":{"nodeType":"YulBlock","src":"29072:496:25","statements":[{"nodeType":"YulVariableDeclaration","src":"29082:29:25","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29100:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"29105:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"29096:3:25"},"nodeType":"YulFunctionCall","src":"29096:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"29109:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29092:3:25"},"nodeType":"YulFunctionCall","src":"29092:19:25"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"29086:2:25","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29127:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"29142:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"29150:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"29138:3:25"},"nodeType":"YulFunctionCall","src":"29138:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29120:6:25"},"nodeType":"YulFunctionCall","src":"29120:34:25"},"nodeType":"YulExpressionStatement","src":"29120:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29174:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"29185:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29170:3:25"},"nodeType":"YulFunctionCall","src":"29170:18:25"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"29194:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"29202:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"29190:3:25"},"nodeType":"YulFunctionCall","src":"29190:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29163:6:25"},"nodeType":"YulFunctionCall","src":"29163:43:25"},"nodeType":"YulExpressionStatement","src":"29163:43:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29226:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"29237:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29222:3:25"},"nodeType":"YulFunctionCall","src":"29222:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"29242:3:25","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29215:6:25"},"nodeType":"YulFunctionCall","src":"29215:31:25"},"nodeType":"YulExpressionStatement","src":"29215:31:25"},{"nodeType":"YulVariableDeclaration","src":"29255:71:25","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"29298:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29310:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"29321:3:25","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29306:3:25"},"nodeType":"YulFunctionCall","src":"29306:19:25"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"29269:28:25"},"nodeType":"YulFunctionCall","src":"29269:57:25"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"29259:6:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29346:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"29357:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29342:3:25"},"nodeType":"YulFunctionCall","src":"29342:18:25"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"29366:6:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"29374:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29362:3:25"},"nodeType":"YulFunctionCall","src":"29362:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29335:6:25"},"nodeType":"YulFunctionCall","src":"29335:50:25"},"nodeType":"YulExpressionStatement","src":"29335:50:25"},{"nodeType":"YulVariableDeclaration","src":"29394:58:25","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"29437:6:25"},{"name":"tail_1","nodeType":"YulIdentifier","src":"29445:6:25"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nodeType":"YulIdentifier","src":"29408:28:25"},"nodeType":"YulFunctionCall","src":"29408:44:25"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"29398:6:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29472:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"29483:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29468:3:25"},"nodeType":"YulFunctionCall","src":"29468:19:25"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"29493:6:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"29501:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29489:3:25"},"nodeType":"YulFunctionCall","src":"29489:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29461:6:25"},"nodeType":"YulFunctionCall","src":"29461:51:25"},"nodeType":"YulExpressionStatement","src":"29461:51:25"},{"nodeType":"YulAssignment","src":"29521:41:25","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"29547:6:25"},{"name":"tail_2","nodeType":"YulIdentifier","src":"29555:6:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"29529:17:25"},"nodeType":"YulFunctionCall","src":"29529:33:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29521:4:25"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29009:9:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"29020:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"29028:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"29036:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"29044:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"29052:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29063:4:25","type":""}],"src":"28741:827:25"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_string_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_string_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function finalize_allocation(memPtr, size)\n    {\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_uint256_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let _3 := array_allocation_size_array_uint256_dyn(_1)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, _3)\n        let dst := memPtr\n        mstore(memPtr, _1)\n        dst := add(memPtr, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := memPtr\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value3 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n    }\n    function abi_encode_tuple_t_contract$_IBasePaintBrush_$5844__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        let _5 := array_allocation_size_array_uint256_dyn(_3)\n        let memPtr := mload(64)\n        finalize_allocation(memPtr, _5)\n        let dst := memPtr\n        mstore(memPtr, _3)\n        dst := add(memPtr, _4)\n        let srcEnd := add(add(_2, shl(5, _3)), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            let value := calldataload(src)\n            validator_revert_address(value)\n            mstore(dst, value)\n            dst := add(dst, _4)\n        }\n        value0 := memPtr\n        let offset_1 := calldataload(add(headStart, _4))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_array_uint256_dyn(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        if iszero(eq(value_1, iszero(iszero(value_1)))) { revert(0, 0) }\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_stringliteral_415a1b99e1fd4a18cf87c08995f5a9130182e8d76e9c17c497bfebaaef9265ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: address zero is not a v\")\n        mstore(add(headStart, 96), \"alid owner\")\n        tail := add(headStart, 128)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"Not started\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_6e44432d9ae63e2829c6f8f2758edfa5a1bfee3e8b1cca3f560b2fd694999578__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"Invalid day\")\n        tail := add(headStart, 96)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_eaa01effe6abd0543e9529d3961b0f5d26980f0661c156a79b89c39a093463f7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"Invalid price\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_0d4c94f69f8b7e0961e88f9636d9f77fffa457b39c4f4dfb1516d377b0308603__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 12)\n        mstore(add(headStart, 64), \"Empty canvas\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_47c72b42072ed6c647dec3a0a5c88bec44d3e901c64659bff94ecce0a0323156__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1155: caller is not token own\")\n        mstore(add(headStart, 96), \"er or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e155f5d69798c6205436a388a4f3a5fd42f54147b40f4d63a2c8071ff8a9fee5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: accounts and ids length\")\n        mstore(add(headStart, 96), \" mismatch\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Transfer failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_4b4cc99522fdcee4d97d6d2d3cbabeb353d40433850bd46ba29c08dbfba843f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"No funds to withdraw\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e898f8ccd4c210573d12d900c20fca6d8cf7a9ab1db17c5b39361b7b1a36c89c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"No contributions\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_a4ae2b81cf1f00a8f3dffd1b5f6fce615157e47012c48e094e545aeb46d225f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"You don't own this brush\")\n        tail := add(headStart, 96)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_e004b49046650d027883dbb60be120e8744aabb2d60ba79ed02289cddcd73c53__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Invalid pixel data\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_4acae158723a2a1ded16d661c6996469d8495895a0bc1556e7cbd5adfcb24208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Brush used too much\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256_t_address_t_bytes_calldata_ptr__to_t_uint256_t_address_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), 96)\n        mstore(add(headStart, 96), value3)\n        calldatacopy(add(headStart, 128), value2, value3)\n        mstore(add(add(headStart, value3), 128), 0)\n        tail := add(add(headStart, and(add(value3, 31), not(31))), 128)\n    }\n    function abi_encode_tuple_t_stringliteral_55ab3174a5323a5cf1c9a30c7e43cc6ccd65bdd10d3571758b8ba8dbb82736a6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Already started\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7ff6289abbb0687399ebc1aafeab18832fc5a110fcdbd805e18f72d422711e7a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"Invalid fee\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_ebf031a1b7ee1d0b3a7752b450a3268e8b6c334561b48c1c0ba0f5bac05749f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC1155: mint to the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e909e0c9a8f96b4f9af03b716811ece20beb070be416893ed1d50619b5930807__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ids and amounts length \")\n        mstore(add(headStart, 96), \"mismatch\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6faf1c67f278b07c6771dcf4c315a89c21c0eaed11d9ab3d51774da1cfef545d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC1155: transfer to the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8ac7e9556b567c1c94bb4daaa3c3a65be5ac686579615210cb910fb8cb8d65bf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC1155: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r transfer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_array_uint256_dyn(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn(value1, tail_1)\n    }\n    function abi_encode_tuple_t_stringliteral_df9806c6dc743de602e49918a67b580590d69ab768bdb59f977c0a884a91a7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1155: setting approval status\")\n        mstore(add(headStart, 96), \" for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        tail := abi_encode_string(value4, add(headStart, 160))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function return_data_selector() -> sig\n    {\n        if gt(returndatasize(), 3)\n        {\n            returndatacopy(0, 0, 4)\n            sig := shr(224, mload(0))\n        }\n    }\n    function try_decode_error_message() -> ret\n    {\n        if lt(returndatasize(), 0x44) { leave }\n        let data := mload(64)\n        let _1 := not(3)\n        returndatacopy(data, 4, add(returndatasize(), _1))\n        let offset := mload(data)\n        let _2 := returndatasize()\n        let _3 := 0xffffffffffffffff\n        if or(gt(offset, _3), gt(add(offset, 0x24), _2)) { leave }\n        let msg := add(data, offset)\n        let length := mload(msg)\n        if gt(length, _3) { leave }\n        if gt(add(add(msg, length), 0x20), add(add(data, returndatasize()), _1)) { leave }\n        finalize_allocation(data, add(add(offset, length), 0x20))\n        ret := msg\n    }\n    function abi_encode_tuple_t_stringliteral_f591f7b75ffc499e05f8b34c3364b2eceff651378d9549db1d5d67c0d8255c5d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 52)\n        mstore(add(headStart, 64), \"ERC1155: transfer to non-ERC1155\")\n        mstore(add(headStart, 96), \"Receiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0587cccad73a80a7f013db13c596f4febc1968dc77e1d3589d5e7a509a3d6503__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC1155: ERC1155Receiver rejecte\")\n        mstore(add(headStart, 96), \"d tokens\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), 160)\n        let tail_1 := abi_encode_array_uint256_dyn(value2, add(headStart, 160))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value3, tail_1)\n        mstore(add(headStart, 128), sub(tail_2, headStart))\n        tail := abi_encode_string(value4, tail_2)\n    }\n}","id":25,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"5246":[{"length":32,"start":884},{"length":32,"start":4625}]},"linkReferences":{},"object":"6080604052600436106101c15760003560e01c80638abe0991116100f7578063dfa3a43211610095578063f242432a11610064578063f242432a14610598578063f2fde38b146105b8578063f9af6c58146105d8578063fbf0ade1146105ee57600080fd5b8063dfa3a432146104d2578063e985e9c514610519578063f0e639e114610562578063f21f537d1461058257600080fd5b8063b079bbcc116100d1578063b079bbcc1461043f578063b74e452b1461045f578063be9a655514610474578063d9d197a61461048957600080fd5b80638abe0991146103e15780638da5cb5b14610401578063a22cb4651461041f57600080fd5b80632eb2c2d6116101645780634ff0876a1161013e5780634ff0876a1461036257806351cff8d91461039657806369865686146103b6578063715018a6146103cc57600080fd5b80632eb2c2d6146102dd57806349621c3f146102fd5780634e1273f41461033557600080fd5b80630e89341c116101a05780630e89341c1461024b57806314de57cb146102785780631b2ef1ca1461028e5780632ac70a2d146102a157600080fd5b8062fdd58e146101c657806301ffc9a7146101f957806302fe530514610229575b600080fd5b3480156101d257600080fd5b506101e66101e1366004611c84565b61060e565b6040519081526020015b60405180910390f35b34801561020557600080fd5b50610219610214366004611cc6565b6106a7565b60405190151581526020016101f0565b34801561023557600080fd5b50610249610244366004611d32565b6106f7565b005b34801561025757600080fd5b5061026b610266366004611d73565b610742565b6040516101f09190611dd2565b34801561028457600080fd5b506101e660085481565b61024961029c366004611de5565b6107d6565b3480156102ad57600080fd5b506101e66102bc366004611de5565b60009182526005602090815260408084209284526003909201905290205490565b3480156102e957600080fd5b506102496102f8366004611f50565b6109a3565b34801561030957600080fd5b5060045461031d906001600160a01b031681565b6040516001600160a01b0390911681526020016101f0565b34801561034157600080fd5b50610355610350366004611ffd565b6109ef565b6040516101f09190612104565b34801561036e57600080fd5b506101e67f000000000000000000000000000000000000000000000000000000000000000081565b3480156103a257600080fd5b506102496103b1366004612117565b610b18565b3480156103c257600080fd5b506101e660075481565b3480156103d857600080fd5b50610249610c03565b3480156103ed57600080fd5b506102496103fc366004612134565b610c17565b34801561040d57600080fd5b506003546001600160a01b031661031d565b34801561042b57600080fd5b5061024961043a3660046121a8565b610ec0565b34801561044b57600080fd5b5061024961045a3660046121e6565b610ecb565b34801561046b57600080fd5b506101e661120d565b34801561048057600080fd5b50610249611258565b34801561049557600080fd5b506104bd6104a4366004611d73565b6005602052600090815260409020805460019091015482565b604080519283526020830191909152016101f0565b3480156104de57600080fd5b506101e66104ed366004612238565b60008281526005602090815260408083206001600160a01b038516845260020190915290205492915050565b34801561052557600080fd5b5061021961053436600461225d565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561056e57600080fd5b5061024961057d366004611d73565b6112dc565b34801561058e57600080fd5b506101e660065481565b3480156105a457600080fd5b506102496105b336600461228b565b611320565b3480156105c457600080fd5b506102496105d3366004612117565b611365565b3480156105e457600080fd5b506101e660095481565b3480156105fa57600080fd5b50610249610609366004611d73565b6113de565b60006001600160a01b03831661067e5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806106d857506001600160e01b031982166303a24d0760e21b145b806106a157506301ffc9a760e01b6001600160e01b03198316146106a1565b6106ff61145b565b61073e82828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114b592505050565b5050565b606060028054610751906122f3565b80601f016020809104026020016040519081016040528092919081815260200182805461077d906122f3565b80156107ca5780601f1061079f576101008083540402835291602001916107ca565b820191906000526020600020905b8154815290600101906020018083116107ad57829003601f168201915b50505050509050919050565b6000600654116108165760405162461bcd60e51b815260206004820152600b60248201526a139bdd081cdd185c9d195960aa1b6044820152606401610675565b61081e61120d565b610829836001612343565b146108465760405162461bcd60e51b815260040161067590612356565b80600754610854919061237b565b3410156108935760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420707269636560981b6044820152606401610675565b6000828152600560205260409020546108dd5760405162461bcd60e51b815260206004820152600c60248201526b456d7074792063616e76617360a01b6044820152606401610675565b6108f8338383604051806020016040528060008152506114c1565b6000620f42406008543461090c919061237b565b61091691906123a8565b9050806009600082825461092a9190612343565b9091555061093a905081346123bc565b6000848152600560205260408120600101805490919061095b908490612343565b909155508390507f1033721d007e6103a21cb6edd862fc6eb6a601285ee27d595c4d9f9e597a183761098d83346123bc565b60405190815260200160405180910390a2505050565b6001600160a01b0385163314806109bf57506109bf8533610534565b6109db5760405162461bcd60e51b8152600401610675906123cf565b6109e885858585856115d5565b5050505050565b60608151835114610a545760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610675565b600083516001600160401b03811115610a6f57610a6f611e07565b604051908082528060200260200182016040528015610a98578160200160208202803683370190505b50905060005b8451811015610b1057610ae3858281518110610abc57610abc61241d565b6020026020010151858381518110610ad657610ad661241d565b602002602001015161060e565b828281518110610af557610af561241d565b6020908102919091010152610b0981612433565b9050610a9e565b509392505050565b610b2061145b565b600980546000918290556040519091906001600160a01b0384169083908381818185875af1925050503d8060008114610b75576040519150601f19603f3d011682016040523d82523d6000602084013e610b7a565b606091505b5050905080610bbd5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610675565b604080518381526001600160a01b03851660208201527f5bbdd53ba1d6d75026c4b60ff971e848d7bd18fd647eaeaa174c913f3f0f1bdf910160405180910390a1505050565b610c0b61145b565b610c1560006117b2565b565b60006001610c2361120d565b610c2d91906123bc565b905060005b82811015610eba576000848483818110610c4e57610c4e61241d565b905060200201359050828110610c765760405162461bcd60e51b815260040161067590612356565b60008181526005602052604090206001810154610ccc5760405162461bcd60e51b81526020600482015260146024820152734e6f2066756e647320746f20776974686472617760601b6044820152606401610675565b8054610d095760405162461bcd60e51b815260206004820152600c60248201526b456d7074792063616e76617360a01b6044820152606401610675565b336000908152600282016020526040902054610d5a5760405162461bcd60e51b815260206004820152601060248201526f4e6f20636f6e747269627574696f6e7360801b6044820152606401610675565b80543360009081526002830160205260408120546001840154919291610d80919061237b565b610d8a91906123a8565b905080826001016000828254610da091906123bc565b9091555050336000908152600283016020526040812054835490918491610dc89084906123bc565b90915550503360008181526002840160205260408082208290555190919083908381818185875af1925050503d8060008114610e20576040519150601f19603f3d011682016040523d82523d6000602084013e610e25565b606091505b5050905080610e685760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610675565b604080513381526020810184905285917fcc1db7b1578c9fa756ff3c2d490732a4790a5a1181ab6eb5829daa870e246d95910160405180910390a2505050508080610eb290612433565b915050610c32565b50505050565b61073e338383611804565b600060065411610f0b5760405162461bcd60e51b815260206004820152600b60248201526a139bdd081cdd185c9d195960aa1b6044820152606401610675565b610f1361120d565b8414610f315760405162461bcd60e51b815260040161067590612356565b600480546040516331a9108f60e11b815291820185905233916001600160a01b0390911690636352211e90602401602060405180830381865afa158015610f7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa0919061244c565b6001600160a01b031614610ff65760405162461bcd60e51b815260206004820152601860248201527f596f7520646f6e2774206f776e207468697320627275736800000000000000006044820152606401610675565b611001600382612469565b156110435760405162461bcd60e51b8152602060048201526012602482015271496e76616c696420706978656c206461746160701b6044820152606401610675565b806110855760405162461bcd60e51b8152602060048201526012602482015271496e76616c696420706978656c206461746160701b6044820152606401610675565b60006110926003836123a8565b6000868152600560209081526040808320338452600281019092528220805493945090928492906110c4908490612343565b90915550506000858152600382016020526040812080548492906110e9908490612343565b9091555050805482908290600090611102908490612343565b9091555050600480546040516377bbe0c360e11b81529182018790526001600160a01b03169063ef77c18690602401602060405180830381865afa15801561114e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611172919061247d565b600086815260038301602052604090205411156111c75760405162461bcd60e51b8152602060048201526013602482015272084e4eae6d040eae6cac840e8dede40daeac6d606b1b6044820152606401610675565b857f4ecc3f51341c13c2f7214d794dfea90b5bab5d7ff3951ca088f6329255a5dda2863387876040516111fd9493929190612496565b60405180910390a2505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006006544261123e91906123bc565b61124891906123a8565b611253906001612343565b905090565b61126061145b565b600654156112a25760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481cdd185c9d1959608a1b6044820152606401610675565b4260068190556040519081527e6e0c97de781a7389d44ba8fd35d1467cabb17ed04d038d166d34ab819213f39060200160405180910390a1565b6112e461145b565b60078190556040518181527f8824e69bdb6ace1cae2d46266847d0b140caf4a17ea02b2317c95e62f5cf341a906020015b60405180910390a150565b6001600160a01b03851633148061133c575061133c8533610534565b6113585760405162461bcd60e51b8152600401610675906123cf565b6109e885858585856118e4565b61136d61145b565b6001600160a01b0381166113d25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610675565b6113db816117b2565b50565b6113e661145b565b620f424081106114265760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642066656560a81b6044820152606401610675565b60088190556040518181527f5d366c044b06faba913c60796eaeecb48b0ecfe9f5834c86a239955a90054abb90602001611315565b6003546001600160a01b03163314610c155760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610675565b600261073e8282612528565b6001600160a01b0384166115215760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610675565b33600061152d85611a0e565b9050600061153a85611a0e565b90506000868152602081815260408083206001600160a01b038b1684529091528120805487929061156c908490612343565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46115cc83600089898989611a59565b50505050505050565b81518351146116375760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610675565b6001600160a01b03841661165d5760405162461bcd60e51b8152600401610675906125e7565b3360005b845181101561174457600085828151811061167e5761167e61241d565b60200260200101519050600085838151811061169c5761169c61241d565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156116ec5760405162461bcd60e51b81526004016106759061262c565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611729908490612343565b925050819055505050508061173d90612433565b9050611661565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611794929190612676565b60405180910390a46117aa818787878787611bb4565b505050505050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036118775760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610675565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b03841661190a5760405162461bcd60e51b8152600401610675906125e7565b33600061191685611a0e565b9050600061192385611a0e565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156119665760405162461bcd60e51b81526004016106759061262c565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906119a3908490612343565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611a03848a8a8a8a8a611a59565b505050505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611a4857611a4861241d565b602090810291909101015292915050565b6001600160a01b0384163b156117aa5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611a9d90899089908890889088906004016126a4565b6020604051808303816000875af1925050508015611ad8575060408051601f3d908101601f19168201909252611ad5918101906126e9565b60015b611b8457611ae4612706565b806308c379a003611b1d5750611af8612722565b80611b035750611b1f565b8060405162461bcd60e51b81526004016106759190611dd2565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610675565b6001600160e01b0319811663f23a6e6160e01b146115cc5760405162461bcd60e51b8152600401610675906127ab565b6001600160a01b0384163b156117aa5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611bf890899089908890889088906004016127f3565b6020604051808303816000875af1925050508015611c33575060408051601f3d908101601f19168201909252611c30918101906126e9565b60015b611c3f57611ae4612706565b6001600160e01b0319811663bc197c8160e01b146115cc5760405162461bcd60e51b8152600401610675906127ab565b6001600160a01b03811681146113db57600080fd5b60008060408385031215611c9757600080fd5b8235611ca281611c6f565b946020939093013593505050565b6001600160e01b0319811681146113db57600080fd5b600060208284031215611cd857600080fd5b8135611ce381611cb0565b9392505050565b60008083601f840112611cfc57600080fd5b5081356001600160401b03811115611d1357600080fd5b602083019150836020828501011115611d2b57600080fd5b9250929050565b60008060208385031215611d4557600080fd5b82356001600160401b03811115611d5b57600080fd5b611d6785828601611cea565b90969095509350505050565b600060208284031215611d8557600080fd5b5035919050565b6000815180845260005b81811015611db257602081850181015186830182015201611d96565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611ce36020830184611d8c565b60008060408385031215611df857600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715611e4257611e42611e07565b6040525050565b60006001600160401b03821115611e6257611e62611e07565b5060051b60200190565b600082601f830112611e7d57600080fd5b81356020611e8a82611e49565b604051611e978282611e1d565b83815260059390931b8501820192828101915086841115611eb757600080fd5b8286015b84811015611ed25780358352918301918301611ebb565b509695505050505050565b600082601f830112611eee57600080fd5b81356001600160401b03811115611f0757611f07611e07565b604051611f1e601f8301601f191660200182611e1d565b818152846020838601011115611f3357600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611f6857600080fd5b8535611f7381611c6f565b94506020860135611f8381611c6f565b935060408601356001600160401b0380821115611f9f57600080fd5b611fab89838a01611e6c565b94506060880135915080821115611fc157600080fd5b611fcd89838a01611e6c565b93506080880135915080821115611fe357600080fd5b50611ff088828901611edd565b9150509295509295909350565b6000806040838503121561201057600080fd5b82356001600160401b038082111561202757600080fd5b818501915085601f83011261203b57600080fd5b8135602061204882611e49565b6040516120558282611e1d565b83815260059390931b850182019282810191508984111561207557600080fd5b948201945b8386101561209c57853561208d81611c6f565b8252948201949082019061207a565b965050860135925050808211156120b257600080fd5b506120bf85828601611e6c565b9150509250929050565b600081518084526020808501945080840160005b838110156120f9578151875295820195908201906001016120dd565b509495945050505050565b602081526000611ce360208301846120c9565b60006020828403121561212957600080fd5b8135611ce381611c6f565b6000806020838503121561214757600080fd5b82356001600160401b038082111561215e57600080fd5b818501915085601f83011261217257600080fd5b81358181111561218157600080fd5b8660208260051b850101111561219657600080fd5b60209290920196919550909350505050565b600080604083850312156121bb57600080fd5b82356121c681611c6f565b9150602083013580151581146121db57600080fd5b809150509250929050565b600080600080606085870312156121fc57600080fd5b843593506020850135925060408501356001600160401b0381111561222057600080fd5b61222c87828801611cea565b95989497509550505050565b6000806040838503121561224b57600080fd5b8235915060208301356121db81611c6f565b6000806040838503121561227057600080fd5b823561227b81611c6f565b915060208301356121db81611c6f565b600080600080600060a086880312156122a357600080fd5b85356122ae81611c6f565b945060208601356122be81611c6f565b9350604086013592506060860135915060808601356001600160401b038111156122e757600080fd5b611ff088828901611edd565b600181811c9082168061230757607f821691505b60208210810361232757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156106a1576106a161232d565b6020808252600b908201526a496e76616c69642064617960a81b604082015260600190565b80820281158282048414176106a1576106a161232d565b634e487b7160e01b600052601260045260246000fd5b6000826123b7576123b7612392565b500490565b818103818111156106a1576106a161232d565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600182016124455761244561232d565b5060010190565b60006020828403121561245e57600080fd5b8151611ce381611c6f565b60008261247857612478612392565b500690565b60006020828403121561248f57600080fd5b5051919050565b8481526001600160a01b03841660208201526060604082018190528101829052818360808301376000818301608090810191909152601f909201601f191601019392505050565b601f82111561252357600081815260208120601f850160051c810160208610156125045750805b601f850160051c820191505b818110156117aa57828155600101612510565b505050565b81516001600160401b0381111561254157612541611e07565b6125558161254f84546122f3565b846124dd565b602080601f83116001811461258a57600084156125725750858301515b600019600386901b1c1916600185901b1785556117aa565b600085815260208120601f198616915b828110156125b95788860151825594840194600190910190840161259a565b50858210156125d75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60408152600061268960408301856120c9565b828103602084015261269b81856120c9565b95945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906126de90830184611d8c565b979650505050505050565b6000602082840312156126fb57600080fd5b8151611ce381611cb0565b600060033d111561271f5760046000803e5060005160e01c5b90565b600060443d10156127305790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561275f57505050505090565b82850191508151818111156127775750505050505090565b843d87010160208285010111156127915750505050505090565b6127a060208286010187611e1d565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a06040820181905260009061281f908301866120c9565b828103606084015261283181866120c9565b905082810360808401526128458185611d8c565b9897505050505050505056fea2646970667358221220c99cda4c4efcfa48e6e2e5eb030c5801e40e7a7d023522ed1ac0166663ae6a0864736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C1 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8ABE0991 GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xDFA3A432 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xF242432A GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x598 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5B8 JUMPI DUP1 PUSH4 0xF9AF6C58 EQ PUSH2 0x5D8 JUMPI DUP1 PUSH4 0xFBF0ADE1 EQ PUSH2 0x5EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xDFA3A432 EQ PUSH2 0x4D2 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x519 JUMPI DUP1 PUSH4 0xF0E639E1 EQ PUSH2 0x562 JUMPI DUP1 PUSH4 0xF21F537D EQ PUSH2 0x582 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB079BBCC GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xB079BBCC EQ PUSH2 0x43F JUMPI DUP1 PUSH4 0xB74E452B EQ PUSH2 0x45F JUMPI DUP1 PUSH4 0xBE9A6555 EQ PUSH2 0x474 JUMPI DUP1 PUSH4 0xD9D197A6 EQ PUSH2 0x489 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8ABE0991 EQ PUSH2 0x3E1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x401 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x41F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2EB2C2D6 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x4FF0876A GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x4FF0876A EQ PUSH2 0x362 JUMPI DUP1 PUSH4 0x51CFF8D9 EQ PUSH2 0x396 JUMPI DUP1 PUSH4 0x69865686 EQ PUSH2 0x3B6 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x2DD JUMPI DUP1 PUSH4 0x49621C3F EQ PUSH2 0x2FD JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x335 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xE89341C GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x24B JUMPI DUP1 PUSH4 0x14DE57CB EQ PUSH2 0x278 JUMPI DUP1 PUSH4 0x1B2EF1CA EQ PUSH2 0x28E JUMPI DUP1 PUSH4 0x2AC70A2D EQ PUSH2 0x2A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1F9 JUMPI DUP1 PUSH4 0x2FE5305 EQ PUSH2 0x229 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E6 PUSH2 0x1E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C84 JUMP JUMPDEST PUSH2 0x60E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x205 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x219 PUSH2 0x214 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CC6 JUMP JUMPDEST PUSH2 0x6A7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x235 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x244 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D32 JUMP JUMPDEST PUSH2 0x6F7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D73 JUMP JUMPDEST PUSH2 0x742 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F0 SWAP2 SWAP1 PUSH2 0x1DD2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x284 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E6 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x249 PUSH2 0x29C CALLDATASIZE PUSH1 0x4 PUSH2 0x1DE5 JUMP JUMPDEST PUSH2 0x7D6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E6 PUSH2 0x2BC CALLDATASIZE PUSH1 0x4 PUSH2 0x1DE5 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP3 DUP5 MSTORE PUSH1 0x3 SWAP1 SWAP3 ADD SWAP1 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x2F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F50 JUMP JUMPDEST PUSH2 0x9A3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x309 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 SLOAD PUSH2 0x31D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x341 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x355 PUSH2 0x350 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FFD JUMP JUMPDEST PUSH2 0x9EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F0 SWAP2 SWAP1 PUSH2 0x2104 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E6 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x3B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2117 JUMP JUMPDEST PUSH2 0xB18 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E6 PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0xC03 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x3FC CALLDATASIZE PUSH1 0x4 PUSH2 0x2134 JUMP JUMPDEST PUSH2 0xC17 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x31D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x43A CALLDATASIZE PUSH1 0x4 PUSH2 0x21A8 JUMP JUMPDEST PUSH2 0xEC0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x45A CALLDATASIZE PUSH1 0x4 PUSH2 0x21E6 JUMP JUMPDEST PUSH2 0xECB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E6 PUSH2 0x120D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x1258 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4BD PUSH2 0x4A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D73 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x1F0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E6 PUSH2 0x4ED CALLDATASIZE PUSH1 0x4 PUSH2 0x2238 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE PUSH1 0x2 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x525 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x219 PUSH2 0x534 CALLDATASIZE PUSH1 0x4 PUSH2 0x225D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x57D CALLDATASIZE PUSH1 0x4 PUSH2 0x1D73 JUMP JUMPDEST PUSH2 0x12DC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E6 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x5B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x228B JUMP JUMPDEST PUSH2 0x1320 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x5D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2117 JUMP JUMPDEST PUSH2 0x1365 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E6 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x249 PUSH2 0x609 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D73 JUMP JUMPDEST PUSH2 0x13DE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x67E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x30B634B21037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x6D8 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ JUMPDEST DUP1 PUSH2 0x6A1 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x6A1 JUMP JUMPDEST PUSH2 0x6FF PUSH2 0x145B JUMP JUMPDEST PUSH2 0x73E DUP3 DUP3 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x14B5 SWAP3 POP POP POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x751 SWAP1 PUSH2 0x22F3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x77D SWAP1 PUSH2 0x22F3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7CA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x79F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7CA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7AD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 SLOAD GT PUSH2 0x816 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x139BDD081CDD185C9D1959 PUSH1 0xAA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST PUSH2 0x81E PUSH2 0x120D JUMP JUMPDEST PUSH2 0x829 DUP4 PUSH1 0x1 PUSH2 0x2343 JUMP JUMPDEST EQ PUSH2 0x846 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP1 PUSH2 0x2356 JUMP JUMPDEST DUP1 PUSH1 0x7 SLOAD PUSH2 0x854 SWAP2 SWAP1 PUSH2 0x237B JUMP JUMPDEST CALLVALUE LT ISZERO PUSH2 0x893 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x496E76616C6964207072696365 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x8DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x456D7074792063616E766173 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST PUSH2 0x8F8 CALLER DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x14C1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0xF4240 PUSH1 0x8 SLOAD CALLVALUE PUSH2 0x90C SWAP2 SWAP1 PUSH2 0x237B JUMP JUMPDEST PUSH2 0x916 SWAP2 SWAP1 PUSH2 0x23A8 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x9 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x92A SWAP2 SWAP1 PUSH2 0x2343 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x93A SWAP1 POP DUP2 CALLVALUE PUSH2 0x23BC JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x95B SWAP1 DUP5 SWAP1 PUSH2 0x2343 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP DUP4 SWAP1 POP PUSH32 0x1033721D007E6103A21CB6EDD862FC6EB6A601285EE27D595C4D9F9E597A1837 PUSH2 0x98D DUP4 CALLVALUE PUSH2 0x23BC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x9BF JUMPI POP PUSH2 0x9BF DUP6 CALLER PUSH2 0x534 JUMP JUMPDEST PUSH2 0x9DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP1 PUSH2 0x23CF JUMP JUMPDEST PUSH2 0x9E8 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x15D5 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0xA54 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206163636F756E747320616E6420696473206C656E677468 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x40DAD2E6DAC2E8C6D PUSH1 0xBB SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x675 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA6F JUMPI PUSH2 0xA6F PUSH2 0x1E07 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA98 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xB10 JUMPI PUSH2 0xAE3 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xABC JUMPI PUSH2 0xABC PUSH2 0x241D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xAD6 JUMPI PUSH2 0xAD6 PUSH2 0x241D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x60E JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xAF5 JUMPI PUSH2 0xAF5 PUSH2 0x241D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0xB09 DUP2 PUSH2 0x2433 JUMP JUMPDEST SWAP1 POP PUSH2 0xA9E JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xB20 PUSH2 0x145B JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH1 0x0 SWAP2 DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xB75 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB7A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xBBD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5BBDD53BA1D6D75026C4B60FF971E848D7BD18FD647EAEAA174C913F3F0F1BDF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0xC0B PUSH2 0x145B JUMP JUMPDEST PUSH2 0xC15 PUSH1 0x0 PUSH2 0x17B2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0xC23 PUSH2 0x120D JUMP JUMPDEST PUSH2 0xC2D SWAP2 SWAP1 PUSH2 0x23BC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xEBA JUMPI PUSH1 0x0 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0xC4E JUMPI PUSH2 0xC4E PUSH2 0x241D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP3 DUP2 LT PUSH2 0xC76 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP1 PUSH2 0x2356 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0xCCC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x4E6F2066756E647320746F207769746864726177 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST DUP1 SLOAD PUSH2 0xD09 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x456D7074792063616E766173 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xD5A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x4E6F20636F6E747269627574696F6E73 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST DUP1 SLOAD CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 DUP5 ADD SLOAD SWAP2 SWAP3 SWAP2 PUSH2 0xD80 SWAP2 SWAP1 PUSH2 0x237B JUMP JUMPDEST PUSH2 0xD8A SWAP2 SWAP1 PUSH2 0x23A8 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xDA0 SWAP2 SWAP1 PUSH2 0x23BC JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP4 SLOAD SWAP1 SWAP2 DUP5 SWAP2 PUSH2 0xDC8 SWAP1 DUP5 SWAP1 PUSH2 0x23BC JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP3 SWAP1 SSTORE MLOAD SWAP1 SWAP2 SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xE20 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE25 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xE68 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE DUP6 SWAP2 PUSH32 0xCC1DB7B1578C9FA756FF3C2D490732A4790A5A1181AB6EB5829DAA870E246D95 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP DUP1 DUP1 PUSH2 0xEB2 SWAP1 PUSH2 0x2433 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC32 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x73E CALLER DUP4 DUP4 PUSH2 0x1804 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 SLOAD GT PUSH2 0xF0B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x139BDD081CDD185C9D1959 PUSH1 0xAA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST PUSH2 0xF13 PUSH2 0x120D JUMP JUMPDEST DUP5 EQ PUSH2 0xF31 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP1 PUSH2 0x2356 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 DUP3 ADD DUP6 SWAP1 MSTORE CALLER SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF7C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFA0 SWAP2 SWAP1 PUSH2 0x244C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xFF6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7520646F6E2774206F776E20746869732062727573680000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST PUSH2 0x1001 PUSH1 0x3 DUP3 PUSH2 0x2469 JUMP JUMPDEST ISZERO PUSH2 0x1043 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x496E76616C696420706978656C2064617461 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST DUP1 PUSH2 0x1085 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x496E76616C696420706978656C2064617461 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1092 PUSH1 0x3 DUP4 PUSH2 0x23A8 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE PUSH1 0x2 DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD SWAP4 SWAP5 POP SWAP1 SWAP3 DUP5 SWAP3 SWAP1 PUSH2 0x10C4 SWAP1 DUP5 SWAP1 PUSH2 0x2343 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x10E9 SWAP1 DUP5 SWAP1 PUSH2 0x2343 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP1 SLOAD DUP3 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x1102 SWAP1 DUP5 SWAP1 PUSH2 0x2343 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x77BBE0C3 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 DUP3 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xEF77C186 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x114E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1172 SWAP2 SWAP1 PUSH2 0x247D JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x3 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD GT ISZERO PUSH2 0x11C7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x84E4EAE6D040EAE6CAC840E8DEDE40DAEAC6D PUSH1 0x6B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST DUP6 PUSH32 0x4ECC3F51341C13C2F7214D794DFEA90B5BAB5D7FF3951CA088F6329255A5DDA2 DUP7 CALLER DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x11FD SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2496 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x6 SLOAD TIMESTAMP PUSH2 0x123E SWAP2 SWAP1 PUSH2 0x23BC JUMP JUMPDEST PUSH2 0x1248 SWAP2 SWAP1 PUSH2 0x23A8 JUMP JUMPDEST PUSH2 0x1253 SWAP1 PUSH1 0x1 PUSH2 0x2343 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1260 PUSH2 0x145B JUMP JUMPDEST PUSH1 0x6 SLOAD ISZERO PUSH2 0x12A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x105B1C9958591E481CDD185C9D1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST TIMESTAMP PUSH1 0x6 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH31 0x6E0C97DE781A7389D44BA8FD35D1467CABB17ED04D038D166D34AB819213F3 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x12E4 PUSH2 0x145B JUMP JUMPDEST PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0x8824E69BDB6ACE1CAE2D46266847D0B140CAF4A17EA02B2317C95E62F5CF341A SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND CALLER EQ DUP1 PUSH2 0x133C JUMPI POP PUSH2 0x133C DUP6 CALLER PUSH2 0x534 JUMP JUMPDEST PUSH2 0x1358 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP1 PUSH2 0x23CF JUMP JUMPDEST PUSH2 0x9E8 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x18E4 JUMP JUMPDEST PUSH2 0x136D PUSH2 0x145B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x13D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x675 JUMP JUMPDEST PUSH2 0x13DB DUP2 PUSH2 0x17B2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x13E6 PUSH2 0x145B JUMP JUMPDEST PUSH3 0xF4240 DUP2 LT PUSH2 0x1426 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x496E76616C696420666565 PUSH1 0xA8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST PUSH1 0x8 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0x5D366C044B06FABA913C60796EAEECB48B0ECFE9F5834C86A239955A90054ABB SWAP1 PUSH1 0x20 ADD PUSH2 0x1315 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x675 JUMP JUMPDEST PUSH1 0x2 PUSH2 0x73E DUP3 DUP3 PUSH2 0x2528 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1521 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A206D696E7420746F20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x675 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x152D DUP6 PUSH2 0x1A0E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x153A DUP6 PUSH2 0x1A0E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP8 SWAP3 SWAP1 PUSH2 0x156C SWAP1 DUP5 SWAP1 PUSH2 0x2343 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP3 PUSH1 0x0 SWAP3 SWAP2 DUP8 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x15CC DUP4 PUSH1 0x0 DUP10 DUP10 DUP10 DUP10 PUSH2 0x1A59 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x1637 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2069647320616E6420616D6F756E7473206C656E67746820 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0xDAD2E6DAC2E8C6D PUSH1 0xC3 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x675 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x165D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP1 PUSH2 0x25E7 JUMP JUMPDEST CALLER PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1744 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x167E JUMPI PUSH2 0x167E PUSH2 0x241D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x169C JUMPI PUSH2 0x169C PUSH2 0x241D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP5 DUP2 MSTORE DUP1 DUP4 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND DUP4 MSTORE SWAP1 SWAP4 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 DUP2 LT ISZERO PUSH2 0x16EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP1 PUSH2 0x262C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP1 DUP12 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x1729 SWAP1 DUP5 SWAP1 PUSH2 0x2343 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 PUSH2 0x173D SWAP1 PUSH2 0x2433 JUMP JUMPDEST SWAP1 POP PUSH2 0x1661 JUMP JUMPDEST POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1794 SWAP3 SWAP2 SWAP1 PUSH2 0x2676 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x17AA DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1BB4 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x1877 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A2073657474696E6720617070726F76616C20737461747573 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x103337B91039B2B633 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x675 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x190A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP1 PUSH2 0x25E7 JUMP JUMPDEST CALLER PUSH1 0x0 PUSH2 0x1916 DUP6 PUSH2 0x1A0E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1923 DUP6 PUSH2 0x1A0E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP6 DUP2 LT ISZERO PUSH2 0x1966 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP1 PUSH2 0x262C JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP10 DUP6 SUB SWAP1 SSTORE SWAP1 DUP11 AND DUP3 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP9 SWAP3 SWAP1 PUSH2 0x19A3 SWAP1 DUP5 SWAP1 PUSH2 0x2343 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP12 AND SWAP3 DUP13 DUP3 AND SWAP3 SWAP2 DUP9 AND SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1A03 DUP5 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x1A59 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1A48 JUMPI PUSH2 0x1A48 PUSH2 0x241D JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x17AA JUMPI PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xF23A6E61 SWAP1 PUSH2 0x1A9D SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x26A4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1AD8 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1AD5 SWAP2 DUP2 ADD SWAP1 PUSH2 0x26E9 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1B84 JUMPI PUSH2 0x1AE4 PUSH2 0x2706 JUMP JUMPDEST DUP1 PUSH4 0x8C379A0 SUB PUSH2 0x1B1D JUMPI POP PUSH2 0x1AF8 PUSH2 0x2722 JUMP JUMPDEST DUP1 PUSH2 0x1B03 JUMPI POP PUSH2 0x1B1F JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP2 SWAP1 PUSH2 0x1DD2 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F206E6F6E2D45524331313535 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x2932B1B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x675 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xF23A6E61 PUSH1 0xE0 SHL EQ PUSH2 0x15CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP1 PUSH2 0x27AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x17AA JUMPI PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xBC197C81 SWAP1 PUSH2 0x1BF8 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x27F3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1C33 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1C30 SWAP2 DUP2 ADD SWAP1 PUSH2 0x26E9 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1C3F JUMPI PUSH2 0x1AE4 PUSH2 0x2706 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xBC197C81 PUSH1 0xE0 SHL EQ PUSH2 0x15CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x675 SWAP1 PUSH2 0x27AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x13DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1CA2 DUP2 PUSH2 0x1C6F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x13DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1CE3 DUP2 PUSH2 0x1CB0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1CFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1D13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1D2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1D5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D67 DUP6 DUP3 DUP7 ADD PUSH2 0x1CEA JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1DB2 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x1D96 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1CE3 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1D8C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1DF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1E42 JUMPI PUSH2 0x1E42 PUSH2 0x1E07 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x1E62 JUMPI PUSH2 0x1E62 PUSH2 0x1E07 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1E8A DUP3 PUSH2 0x1E49 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E97 DUP3 DUP3 PUSH2 0x1E1D JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP7 DUP5 GT ISZERO PUSH2 0x1EB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1ED2 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x1EBB JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1EEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1F07 JUMPI PUSH2 0x1F07 PUSH2 0x1E07 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F1E PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 PUSH2 0x1E1D JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1F33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1F68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1F73 DUP2 PUSH2 0x1C6F JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1F83 DUP2 PUSH2 0x1C6F JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1F9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FAB DUP10 DUP4 DUP11 ADD PUSH2 0x1E6C JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1FC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FCD DUP10 DUP4 DUP11 ADD PUSH2 0x1E6C JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1FE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FF0 DUP9 DUP3 DUP10 ADD PUSH2 0x1EDD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2010 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2027 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x203B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x2048 DUP3 PUSH2 0x1E49 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2055 DUP3 DUP3 PUSH2 0x1E1D JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x5 SWAP4 SWAP1 SWAP4 SHL DUP6 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP2 POP DUP10 DUP5 GT ISZERO PUSH2 0x2075 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x209C JUMPI DUP6 CALLDATALOAD PUSH2 0x208D DUP2 PUSH2 0x1C6F JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 0x207A JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 0x20B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20BF DUP6 DUP3 DUP7 ADD PUSH2 0x1E6C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x20F9 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x20DD JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1CE3 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x20C9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2129 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1CE3 DUP2 PUSH2 0x1C6F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x215E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x2181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2196 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x21BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x21C6 DUP2 PUSH2 0x1C6F JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x21DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x21FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2220 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x222C DUP8 DUP3 DUP9 ADD PUSH2 0x1CEA JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x224B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x21DB DUP2 PUSH2 0x1C6F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x227B DUP2 PUSH2 0x1C6F JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x21DB DUP2 PUSH2 0x1C6F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x22A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x22AE DUP2 PUSH2 0x1C6F JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x22BE DUP2 PUSH2 0x1C6F JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x22E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FF0 DUP9 DUP3 DUP10 ADD PUSH2 0x1EDD JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2307 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2327 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x6A1 JUMPI PUSH2 0x6A1 PUSH2 0x232D JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xB SWAP1 DUP3 ADD MSTORE PUSH11 0x496E76616C696420646179 PUSH1 0xA8 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x6A1 JUMPI PUSH2 0x6A1 PUSH2 0x232D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x23B7 JUMPI PUSH2 0x23B7 PUSH2 0x2392 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x6A1 JUMPI PUSH2 0x6A1 PUSH2 0x232D JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x195C881BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2445 JUMPI PUSH2 0x2445 PUSH2 0x232D JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x245E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1CE3 DUP2 PUSH2 0x1C6F JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2478 JUMPI PUSH2 0x2478 PUSH2 0x2392 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x248F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE DUP2 ADD DUP3 SWAP1 MSTORE DUP2 DUP4 PUSH1 0x80 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x80 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x2523 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x2504 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17AA JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2510 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2541 JUMPI PUSH2 0x2541 PUSH2 0x1E07 JUMP JUMPDEST PUSH2 0x2555 DUP2 PUSH2 0x254F DUP5 SLOAD PUSH2 0x22F3 JUMP JUMPDEST DUP5 PUSH2 0x24DD JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x258A JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2572 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x25B9 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x259A JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x25D7 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x39103A3930B739B332B9 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2689 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x20C9 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x269B DUP2 DUP6 PUSH2 0x20C9 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x26DE SWAP1 DUP4 ADD DUP5 PUSH2 0x1D8C JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1CE3 DUP2 PUSH2 0x1CB0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 RETURNDATASIZE GT ISZERO PUSH2 0x271F JUMPI PUSH1 0x4 PUSH1 0x0 DUP1 RETURNDATACOPY POP PUSH1 0x0 MLOAD PUSH1 0xE0 SHR JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x44 RETURNDATASIZE LT ISZERO PUSH2 0x2730 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3 NOT RETURNDATASIZE DUP2 ADD PUSH1 0x4 DUP4 RETURNDATACOPY DUP2 MLOAD RETURNDATASIZE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 PUSH1 0x24 DUP5 ADD GT DUP2 DUP5 GT OR ISZERO PUSH2 0x275F JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 DUP6 ADD SWAP2 POP DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x2777 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 RETURNDATASIZE DUP8 ADD ADD PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2791 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x27A0 PUSH1 0x20 DUP3 DUP7 ADD ADD DUP8 PUSH2 0x1E1D JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243313135353A204552433131353552656365697665722072656A65637465 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6420746F6B656E73 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x281F SWAP1 DUP4 ADD DUP7 PUSH2 0x20C9 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x2831 DUP2 DUP7 PUSH2 0x20C9 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x2845 DUP2 DUP6 PUSH2 0x1D8C JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 SWAP13 0xDA 0x4C 0x4E 0xFC STATICCALL BASEFEE 0xE6 0xE2 0xE5 0xEB SUB 0xC PC ADD 0xE4 0xE PUSH27 0x7D023522ED1AC0166663AE6A0864736F6C63430008130033000000 ","sourceMap":"344:4803:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2185:227:3;;;;;;;;;;-1:-1:-1;2185:227:3;;;;;:::i;:::-;;:::i;:::-;;;616:25:25;;;604:2;589:18;2185:227:3;;;;;;;;1236:305;;;;;;;;;;-1:-1:-1;1236:305:3;;;;;:::i;:::-;;:::i;:::-;;;1203:14:25;;1196:22;1178:41;;1166:2;1151:18;1236:305:3;1038:187:25;4432:89:23;;;;;;;;;;-1:-1:-1;4432:89:23;;;;;:::i;:::-;;:::i;:::-;;1940:103:3;;;;;;;;;;-1:-1:-1;1940:103:3;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;791:48:23:-;;;;;;;;;;;;;;;;1490:555;;;;;;:::i;:::-;;:::i;2979:135::-;;;;;;;;;;-1:-1:-1;2979:135:23;;;;;:::i;:::-;3049:7;3075:13;;;:8;:13;;;;;;;;:32;;;:23;;;;:32;;;;;;2979:135;4042:426:3;;;;;;;;;;-1:-1:-1;4042:426:3;;;;;:::i;:::-;;:::i;389:30:23:-;;;;;;;;;;-1:-1:-1;389:30:23;;;;-1:-1:-1;;;;;389:30:23;;;;;;-1:-1:-1;;;;;6217:32:25;;;6199:51;;6187:2;6172:18;389:30:23;6029:227:25;2569:486:3;;;;;;;;;;-1:-1:-1;2569:486:3;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;425:38:23:-;;;;;;;;;;;;;;;4888:257;;;;;;;;;;-1:-1:-1;4888:257:23;;;;;:::i;:::-;;:::i;739:46::-;;;;;;;;;;;;;;;;1824:101:0;;;;;;;;;;;;;:::i;3277:979:23:-;;;;;;;;;;-1:-1:-1;3277:979:23;;;;;:::i;:::-;;:::i;1201:85:0:-;;;;;;;;;;-1:-1:-1;1273:6:0;;-1:-1:-1;;;;;1273:6:0;1201:85;;3123:153:3;;;;;;;;;;-1:-1:-1;3123:153:3;;;;;:::i;:::-;;:::i;2051:776:23:-;;;;;;;;;;-1:-1:-1;2051:776:23;;;;;:::i;:::-;;:::i;3120:151::-;;;;;;;;;;;;;:::i;4262:164::-;;;;;;;;;;;;;:::i;660:42::-;;;;;;;;;;-1:-1:-1;660:42:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;10475:25:25;;;10531:2;10516:18;;10509:34;;;;10448:18;660:42:23;10301:248:25;2833:140:23;;;;;;;;;;-1:-1:-1;2833:140:23;;;;;:::i;:::-;2905:7;2931:13;;;:8;:13;;;;;;;;-1:-1:-1;;;;;2931:35:23;;;;:27;;:35;;;;;;2833:140;;;;;3343:166:3;;;;;;;;;;-1:-1:-1;3343:166:3;;;;;:::i;:::-;-1:-1:-1;;;;;3465:27:3;;;3442:4;3465:27;;;:18;:27;;;;;;;;:37;;;;;;;;;;;;;;;3343:166;4726:156:23;;;;;;;;;;-1:-1:-1;4726:156:23;;;;;:::i;:::-;;:::i;708:24::-;;;;;;;;;;;;;;;;3576:394:3;;;;;;;;;;-1:-1:-1;3576:394:3;;;;;:::i;:::-;;:::i;2074:198:0:-;;;;;;;;;;-1:-1:-1;2074:198:0;;;;;:::i;:::-;;:::i;856:26:23:-;;;;;;;;;;;;;;;;4527:193;;;;;;;;;;-1:-1:-1;4527:193:23;;;;;:::i;:::-;;:::i;2185:227:3:-;2271:7;-1:-1:-1;;;;;2298:21:3;;2290:76;;;;-1:-1:-1;;;2290:76:3;;12208:2:25;2290:76:3;;;12190:21:25;12247:2;12227:18;;;12220:30;12286:34;12266:18;;;12259:62;-1:-1:-1;;;12337:18:25;;;12330:40;12387:19;;2290:76:3;;;;;;;;;-1:-1:-1;2383:9:3;:13;;;;;;;;;;;-1:-1:-1;;;;;2383:22:3;;;;;;;;;;2185:227;;;;;:::o;1236:305::-;1338:4;-1:-1:-1;;;;;;1373:41:3;;-1:-1:-1;;;1373:41:3;;:109;;-1:-1:-1;;;;;;;1430:52:3;;-1:-1:-1;;;1430:52:3;1373:109;:161;;;-1:-1:-1;;;;;;;;;;937:40:19;;;1498:36:3;829:155:19;4432:89:23;1094:13:0;:11;:13::i;:::-;4499:15:23::1;4507:6;;4499:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;;-1:-1:-1;4499:7:23::1;::::0;-1:-1:-1;;;4499:15:23:i:1;:::-;4432:89:::0;;:::o;1940:103:3:-;2000:13;2032:4;2025:11;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1940:103;;;:::o;1490:555:23:-;1577:1;1565:9;;:13;1557:37;;;;-1:-1:-1;;;1557:37:23;;13004:2:25;1557:37:23;;;12986:21:25;13043:2;13023:18;;;13016:30;-1:-1:-1;;;13062:18:25;;;13055:41;13113:18;;1557:37:23;12802:335:25;1557:37:23;1623:7;:5;:7::i;:::-;1612;:3;1618:1;1612:7;:::i;:::-;:18;1604:42;;;;-1:-1:-1;;;1604:42:23;;;;;;;:::i;:::-;1696:5;1677:16;;:24;;;;:::i;:::-;1664:9;:37;;1656:63;;;;-1:-1:-1;;;1656:63:23;;14119:2:25;1656:63:23;;;14101:21:25;14158:2;14138:18;;;14131:30;-1:-1:-1;;;14177:18:25;;;14170:43;14230:18;;1656:63:23;13917:337:25;1656:63:23;1772:1;1737:13;;;:8;:13;;;;;:32;1729:61;;;;-1:-1:-1;;;1729:61:23;;14461:2:25;1729:61:23;;;14443:21:25;14500:2;14480:18;;;14473:30;-1:-1:-1;;;14519:18:25;;;14512:42;14571:18;;1729:61:23;14259:336:25;1729:61:23;1801:33;1807:10;1819:3;1824:5;1801:33;;;;;;;;;;;;:5;:33::i;:::-;1845:11;1897:9;1871:23;;1859:9;:35;;;;:::i;:::-;:47;;;;:::i;:::-;1845:61;;1931:3;1916:11;;:18;;;;;;;:::i;:::-;;;;-1:-1:-1;1973:15:23;;-1:-1:-1;1985:3:23;1973:9;:15;:::i;:::-;1944:13;;;;:8;:13;;;;;:25;;:44;;:25;;:13;:44;;;;;:::i;:::-;;;;-1:-1:-1;2017:3:23;;-1:-1:-1;2003:35:23;2022:15;2034:3;2022:9;:15;:::i;:::-;2003:35;;616:25:25;;;604:2;589:18;2003:35:23;;;;;;;1547:498;1490:555;;:::o;4042:426:3:-;-1:-1:-1;;;;;4267:20:3;;734:10:12;4267:20:3;;:60;;-1:-1:-1;4291:36:3;4308:4;734:10:12;3343:166:3;:::i;4291:36::-;4246:153;;;;-1:-1:-1;;;4246:153:3;;;;;;;:::i;:::-;4409:52;4432:4;4438:2;4442:3;4447:7;4456:4;4409:22;:52::i;:::-;4042:426;;;;;:::o;2569:486::-;2702:16;2757:3;:10;2738:8;:15;:29;2730:83;;;;-1:-1:-1;;;2730:83:3;;15607:2:25;2730:83:3;;;15589:21:25;15646:2;15626:18;;;15619:30;15685:34;15665:18;;;15658:62;-1:-1:-1;;;15736:18:25;;;15729:39;15785:19;;2730:83:3;15405:405:25;2730:83:3;2824:30;2871:8;:15;-1:-1:-1;;;;;2857:30:3;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2857:30:3;;2824:63;;2903:9;2898:120;2922:8;:15;2918:1;:19;2898:120;;;2977:30;2987:8;2996:1;2987:11;;;;;;;;:::i;:::-;;;;;;;3000:3;3004:1;3000:6;;;;;;;;:::i;:::-;;;;;;;2977:9;:30::i;:::-;2958:13;2972:1;2958:16;;;;;;;;:::i;:::-;;;;;;;;;;:49;2939:3;;;:::i;:::-;;;2898:120;;;-1:-1:-1;3035:13:3;2569:486;-1:-1:-1;;;2569:486:3:o;4888:257:23:-;1094:13:0;:11;:13::i;:::-;4962:11:23::1;::::0;;4945:14:::1;4983:15:::0;;;;5027:26:::1;::::0;4962:11;;4945:14;-1:-1:-1;;;;;5027:7:23;::::1;::::0;4962:11;;4945:14;5027:26;4945:14;5027:26;4962:11;5027:7;:26:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5009:44;;;5071:7;5063:35;;;::::0;-1:-1:-1;;;5063:35:23;;16499:2:25;5063:35:23::1;::::0;::::1;16481:21:25::0;16538:2;16518:18;;;16511:30;-1:-1:-1;;;16557:18:25;;;16550:45;16612:18;;5063:35:23::1;16297:339:25::0;5063:35:23::1;5113:25;::::0;;16815::25;;;-1:-1:-1;;;;;16876:32:25;;16871:2;16856:18;;16849:60;5113:25:23::1;::::0;16788:18:25;5113:25:23::1;;;;;;;4935:210;;4888:257:::0;:::o;1824:101:0:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;3277:979:23:-;3346:14;3373:1;3363:7;:5;:7::i;:::-;:11;;;;:::i;:::-;3346:28;;3389:9;3384:866;3404:18;;;3384:866;;;3443:11;3457:7;;3465:1;3457:10;;;;;;;:::i;:::-;;;;;;;3443:24;;3495:6;3489:3;:12;3481:36;;;;-1:-1:-1;;;3481:36:23;;;;;;;:::i;:::-;3532:21;3556:13;;;:8;:13;;;;;3591:18;;;;3583:55;;;;-1:-1:-1;;;3583:55:23;;17122:2:25;3583:55:23;;;17104:21:25;17161:2;17141:18;;;17134:30;-1:-1:-1;;;17180:18:25;;;17173:50;17240:18;;3583:55:23;16920:344:25;3583:55:23;3660:25;;3652:54;;;;-1:-1:-1;;;3652:54:23;;14461:2:25;3652:54:23;;;14443:21:25;14500:2;14480:18;;;14473:30;-1:-1:-1;;;14519:18:25;;;14512:42;14571:18;;3652:54:23;14259:336:25;3652:54:23;3749:10;3763:1;3728:32;;;:20;;;:32;;;;;;3720:65;;;;-1:-1:-1;;;3720:65:23;;17471:2:25;3720:65:23;;;17453:21:25;17510:2;17490:18;;;17483:30;-1:-1:-1;;;17529:18:25;;;17522:46;17585:18;;3720:65:23;17269:340:25;3720:65:23;3873:25;;3859:10;3800:14;3838:32;;;:20;;;:32;;;;;;3817:18;;;;3800:14;;3873:25;3817:53;;3838:32;3817:53;:::i;:::-;:81;;;;:::i;:::-;3800:98;;3934:6;3912;:18;;;:28;;;;;;;:::i;:::-;;;;-1:-1:-1;;4004:10:23;3983:32;;;;:20;;;:32;;;;;;3954:61;;3983:32;;:6;;3954:61;;3983:32;;3954:61;:::i;:::-;;;;-1:-1:-1;;4050:10:23;4064:1;4029:32;;;:20;;;:32;;;;;;:36;;;4098:34;4064:1;;4050:10;4121:6;;4064:1;4098:34;4064:1;4098:34;4121:6;4050:10;4098:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4080:52;;;4154:7;4146:35;;;;-1:-1:-1;;;4146:35:23;;16499:2:25;4146:35:23;;;16481:21:25;16538:2;16518:18;;;16511:30;-1:-1:-1;;;16557:18:25;;;16550:45;16612:18;;4146:35:23;16297:339:25;4146:35:23;4200:39;;;4220:10;17788:51:25;;17870:2;17855:18;;17848:34;;;4215:3:23;;4200:39;;17761:18:25;4200:39:23;;;;;;;3429:821;;;;3424:3;;;;;:::i;:::-;;;;3384:866;;;;3336:920;3277:979;;:::o;3123:153:3:-;3217:52;734:10:12;3250:8:3;3260;3217:18;:52::i;2051:776:23:-;2156:1;2144:9;;:13;2136:37;;;;-1:-1:-1;;;2136:37:23;;13004:2:25;2136:37:23;;;12986:21:25;13043:2;13023:18;;;13016:30;-1:-1:-1;;;13062:18:25;;;13055:41;13113:18;;2136:37:23;12802:335:25;2136:37:23;2198:7;:5;:7::i;:::-;2191:3;:14;2183:38;;;;-1:-1:-1;;;2183:38:23;;;;;;;:::i;:::-;2239:7;;;:24;;-1:-1:-1;;;2239:24:23;;;;;616:25:25;;;2267:10:23;;-1:-1:-1;;;;;2239:7:23;;;;:15;;589:18:25;;2239:24:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2239:38:23;;2231:75;;;;-1:-1:-1;;;2231:75:23;;18351:2:25;2231:75:23;;;18333:21:25;18390:2;18370:18;;;18363:30;18429:26;18409:18;;;18402:54;18473:18;;2231:75:23;18149:348:25;2231:75:23;2324:17;2340:1;2324:6;:17;:::i;:::-;:22;2316:53;;;;-1:-1:-1;;;2316:53:23;;18821:2:25;2316:53:23;;;18803:21:25;18860:2;18840:18;;;18833:30;-1:-1:-1;;;18879:18:25;;;18872:48;18937:18;;2316:53:23;18619:342:25;2316:53:23;2387:17;2379:48;;;;-1:-1:-1;;;2379:48:23;;18821:2:25;2379:48:23;;;18803:21:25;18860:2;18840:18;;;18833:30;-1:-1:-1;;;18879:18:25;;;18872:48;18937:18;;2379:48:23;18619:342:25;2379:48:23;2438:15;2456:17;2472:1;2456:6;:17;:::i;:::-;2484:21;2508:13;;;:8;:13;;;;;;;;2552:10;2531:32;;:20;;;:32;;;;;:43;;2438:35;;-1:-1:-1;2508:13:23;;2438:35;;2484:21;2531:43;;2438:35;;2531:43;:::i;:::-;;;;-1:-1:-1;;2584:25:23;;;;:16;;;:25;;;;;:36;;2613:7;;2584:25;:36;;2613:7;;2584:36;:::i;:::-;;;;-1:-1:-1;;2630:36:23;;2659:7;;2630:6;;:25;;:36;;2659:7;;2630:36;:::i;:::-;;;;-1:-1:-1;;2714:7:23;;;:26;;-1:-1:-1;;;2714:26:23;;;;;616:25:25;;;-1:-1:-1;;;;;2714:7:23;;:17;;589:18:25;;2714:26:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2685:25;;;;:16;;;:25;;;;;;:55;;2677:87;;;;-1:-1:-1;;;2677:87:23;;19357:2:25;2677:87:23;;;19339:21:25;19396:2;19376:18;;;19369:30;-1:-1:-1;;;19415:18:25;;;19408:49;19474:18;;2677:87:23;19155:343:25;2677:87:23;2787:3;2779:41;2792:7;2801:10;2813:6;;2779:41;;;;;;;;;:::i;:::-;;;;;;;;2126:701;;2051:776;;;;:::o;3120:151::-;3158:7;3246:13;3233:9;;3215:15;:27;;;;:::i;:::-;3214:45;;;;:::i;:::-;3213:51;;3263:1;3213:51;:::i;:::-;3206:58;;3120:151;:::o;4262:164::-;1094:13:0;:11;:13::i;:::-;4314:9:23::1;::::0;:14;4306:42:::1;;;::::0;-1:-1:-1;;;4306:42:23;;20269:2:25;4306:42:23::1;::::0;::::1;20251:21:25::0;20308:2;20288:18;;;20281:30;-1:-1:-1;;;20327:18:25;;;20320:45;20382:18;;4306:42:23::1;20067:339:25::0;4306:42:23::1;4371:15;4359:9;:27:::0;;;4401:18:::1;::::0;616:25:25;;;4401:18:23::1;::::0;604:2:25;589:18;4401::23::1;;;;;;;4262:164::o:0;4726:156::-;1094:13:0;:11;:13::i;:::-;4800:16:23::1;:27:::0;;;4842:33:::1;::::0;616:25:25;;;4842:33:23::1;::::0;604:2:25;589:18;4842:33:23::1;;;;;;;;4726:156:::0;:::o;3576:394:3:-;-1:-1:-1;;;;;3776:20:3;;734:10:12;3776:20:3;;:60;;-1:-1:-1;3800:36:3;3817:4;734:10:12;3343:166:3;:::i;3800:36::-;3755:153;;;;-1:-1:-1;;;3755:153:3;;;;;;;:::i;:::-;3918:45;3936:4;3942:2;3946;3950:6;3958:4;3918:17;:45::i;2074:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2162:22:0;::::1;2154:73;;;::::0;-1:-1:-1;;;2154:73:0;;20613:2:25;2154:73:0::1;::::0;::::1;20595:21:25::0;20652:2;20632:18;;;20625:30;20691:34;20671:18;;;20664:62;-1:-1:-1;;;20742:18:25;;;20735:36;20788:19;;2154:73:0::1;20411:402:25::0;2154:73:0::1;2237:28;2256:8;2237:18;:28::i;:::-;2074:198:::0;:::o;4527:193:23:-;1094:13:0;:11;:13::i;:::-;4608:9:23::1;4599:6;:18;4591:42;;;::::0;-1:-1:-1;;;4591:42:23;;21020:2:25;4591:42:23::1;::::0;::::1;21002:21:25::0;21059:2;21039:18;;;21032:30;-1:-1:-1;;;21078:18:25;;;21071:41;21129:18;;4591:42:23::1;20818:335:25::0;4591:42:23::1;4643:23;:32:::0;;;4690:23:::1;::::0;616:25:25;;;4690:23:23::1;::::0;604:2:25;589:18;4690:23:23::1;470:177:25::0;1359:130:0;1273:6;;-1:-1:-1;;;;;1273:6:0;734:10:12;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;21360:2:25;1414:68:0;;;21342:21:25;;;21379:18;;;21372:30;21438:34;21418:18;;;21411:62;21490:18;;1414:68:0;21158:356:25;8149:86:3;8215:4;:13;8222:6;8215:4;:13;:::i;8608:671::-;-1:-1:-1;;;;;8717:16:3;;8709:62;;;;-1:-1:-1;;;8709:62:3;;23925:2:25;8709:62:3;;;23907:21:25;23964:2;23944:18;;;23937:30;24003:34;23983:18;;;23976:62;-1:-1:-1;;;24054:18:25;;;24047:31;24095:19;;8709:62:3;23723:397:25;8709:62:3;734:10:12;8782:16:3;8846:21;8864:2;8846:17;:21::i;:::-;8823:44;;8877:24;8904:25;8922:6;8904:17;:25::i;:::-;8877:52;;9017:9;:13;;;;;;;;;;;-1:-1:-1;;;;;9017:17:3;;;;;;;;;:27;;9038:6;;9017:9;:27;;9038:6;;9017:27;:::i;:::-;;;;-1:-1:-1;;9059:52:3;;;10475:25:25;;;10531:2;10516:18;;10509:34;;;-1:-1:-1;;;;;9059:52:3;;;;9092:1;;9059:52;;;;;;10448:18:25;9059:52:3;;;;;;;9198:74;9229:8;9247:1;9251:2;9255;9259:6;9267:4;9198:30;:74::i;:::-;8699:580;;;8608:671;;;;:::o;6211:1115::-;6431:7;:14;6417:3;:10;:28;6409:81;;;;-1:-1:-1;;;6409:81:3;;24327:2:25;6409:81:3;;;24309:21:25;24366:2;24346:18;;;24339:30;24405:34;24385:18;;;24378:62;-1:-1:-1;;;24456:18:25;;;24449:38;24504:19;;6409:81:3;24125:404:25;6409:81:3;-1:-1:-1;;;;;6508:16:3;;6500:66;;;;-1:-1:-1;;;6500:66:3;;;;;;;:::i;:::-;734:10:12;6577:16:3;6690:411;6714:3;:10;6710:1;:14;6690:411;;;6745:10;6758:3;6762:1;6758:6;;;;;;;;:::i;:::-;;;;;;;6745:19;;6778:14;6795:7;6803:1;6795:10;;;;;;;;:::i;:::-;;;;;;;;;;;;6820:19;6842:13;;;;;;;;;;-1:-1:-1;;;;;6842:19:3;;;;;;;;;;;;6795:10;;-1:-1:-1;6883:21:3;;;;6875:76;;;;-1:-1:-1;;;6875:76:3;;;;;;;:::i;:::-;6993:9;:13;;;;;;;;;;;-1:-1:-1;;;;;6993:19:3;;;;;;;;;;7015:20;;;6993:42;;7063:17;;;;;;;:27;;7015:20;;6993:9;7063:27;;7015:20;;7063:27;:::i;:::-;;;;;;;;6731:370;;;6726:3;;;;:::i;:::-;;;6690:411;;;;7146:2;-1:-1:-1;;;;;7116:47:3;7140:4;-1:-1:-1;;;;;7116:47:3;7130:8;-1:-1:-1;;;;;7116:47:3;;7150:3;7155:7;7116:47;;;;;;;:::i;:::-;;;;;;;;7244:75;7280:8;7290:4;7296:2;7300:3;7305:7;7314:4;7244:35;:75::i;:::-;6399:927;6211:1115;;;;;:::o;2426:187:0:-;2518:6;;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;;2566:40;;2518:6;;;2534:17;2518:6;;2566:40;;2499:16;;2566:40;2489:124;2426:187;:::o;12790:293:3:-;12910:8;-1:-1:-1;;;;;12901:17:3;:5;-1:-1:-1;;;;;12901:17:3;;12893:71;;;;-1:-1:-1;;;12893:71:3;;26023:2:25;12893:71:3;;;26005:21:25;26062:2;26042:18;;;26035:30;26101:34;26081:18;;;26074:62;-1:-1:-1;;;26152:18:25;;;26145:39;26201:19;;12893:71:3;25821:405:25;12893:71:3;-1:-1:-1;;;;;12974:25:3;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;12974:46:3;;;;;;;;;;13035:41;;1178::25;;;13035::3;;1151:18:25;13035:41:3;;;;;;;12790:293;;;:::o;4918:947::-;-1:-1:-1;;;;;5099:16:3;;5091:66;;;;-1:-1:-1;;;5091:66:3;;;;;;;:::i;:::-;734:10:12;5168:16:3;5232:21;5250:2;5232:17;:21::i;:::-;5209:44;;5263:24;5290:25;5308:6;5290:17;:25::i;:::-;5263:52;;5397:19;5419:13;;;;;;;;;;;-1:-1:-1;;;;;5419:19:3;;;;;;;;;;5456:21;;;;5448:76;;;;-1:-1:-1;;;5448:76:3;;;;;;;:::i;:::-;5558:9;:13;;;;;;;;;;;-1:-1:-1;;;;;5558:19:3;;;;;;;;;;5580:20;;;5558:42;;5620:17;;;;;;;:27;;5580:20;;5558:9;5620:27;;5580:20;;5620:27;:::i;:::-;;;;-1:-1:-1;;5663:46:3;;;10475:25:25;;;10531:2;10516:18;;10509:34;;;-1:-1:-1;;;;;5663:46:3;;;;;;;;;;;;;;10448:18:25;5663:46:3;;;;;;;5790:68;5821:8;5831:4;5837:2;5841;5845:6;5853:4;5790:30;:68::i;:::-;5081:784;;;;4918:947;;;;;:::o;16914:193::-;17033:16;;;17047:1;17033:16;;;;;;;;;16980;;17008:22;;17033:16;;;;;;;;;;;;-1:-1:-1;17033:16:3;17008:41;;17070:7;17059:5;17065:1;17059:8;;;;;;;;:::i;:::-;;;;;;;;;;:18;17095:5;16914:193;-1:-1:-1;;16914:193:3:o;15385:725::-;-1:-1:-1;;;;;15592:13:3;;1702:19:11;:23;15588:516:3;;15627:72;;-1:-1:-1;;;15627:72:3;;-1:-1:-1;;;;;15627:38:3;;;;;:72;;15666:8;;15676:4;;15682:2;;15686:6;;15694:4;;15627:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15627:72:3;;;;;;;;-1:-1:-1;;15627:72:3;;;;;;;;;;;;:::i;:::-;;;15623:471;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;15970:6;15963:14;;-1:-1:-1;;;15963:14:3;;;;;;;;:::i;15623:471::-;;;16017:62;;-1:-1:-1;;;16017:62:3;;28113:2:25;16017:62:3;;;28095:21:25;28152:2;28132:18;;;28125:30;28191:34;28171:18;;;28164:62;-1:-1:-1;;;28242:18:25;;;28235:50;28302:19;;16017:62:3;27911:416:25;15623:471:3;-1:-1:-1;;;;;;15748:55:3;;-1:-1:-1;;;15748:55:3;15744:152;;15827:50;;-1:-1:-1;;;15827:50:3;;;;;;;:::i;16116:792::-;-1:-1:-1;;;;;16348:13:3;;1702:19:11;:23;16344:558:3;;16383:79;;-1:-1:-1;;;16383:79:3;;-1:-1:-1;;;;;16383:43:3;;;;;:79;;16427:8;;16437:4;;16443:3;;16448:7;;16457:4;;16383:79;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16383:79:3;;;;;;;;-1:-1:-1;;16383:79:3;;;;;;;;;;;;:::i;:::-;;;16379:513;;;;:::i;:::-;-1:-1:-1;;;;;;16541:60:3;;-1:-1:-1;;;16541:60:3;16537:157;;16625:50;;-1:-1:-1;;;16625:50:3;;;;;;;:::i;14:131:25:-;-1:-1:-1;;;;;89:31:25;;79:42;;69:70;;135:1;132;125:12;150:315;218:6;226;279:2;267:9;258:7;254:23;250:32;247:52;;;295:1;292;285:12;247:52;334:9;321:23;353:31;378:5;353:31;:::i;:::-;403:5;455:2;440:18;;;;427:32;;-1:-1:-1;;;150:315:25:o;652:131::-;-1:-1:-1;;;;;;726:32:25;;716:43;;706:71;;773:1;770;763:12;788:245;846:6;899:2;887:9;878:7;874:23;870:32;867:52;;;915:1;912;905:12;867:52;954:9;941:23;973:30;997:5;973:30;:::i;:::-;1022:5;788:245;-1:-1:-1;;;788:245:25:o;1230:348::-;1282:8;1292:6;1346:3;1339:4;1331:6;1327:17;1323:27;1313:55;;1364:1;1361;1354:12;1313:55;-1:-1:-1;1387:20:25;;-1:-1:-1;;;;;1419:30:25;;1416:50;;;1462:1;1459;1452:12;1416:50;1499:4;1491:6;1487:17;1475:29;;1551:3;1544:4;1535:6;1527;1523:19;1519:30;1516:39;1513:59;;;1568:1;1565;1558:12;1513:59;1230:348;;;;;:::o;1583:411::-;1654:6;1662;1715:2;1703:9;1694:7;1690:23;1686:32;1683:52;;;1731:1;1728;1721:12;1683:52;1771:9;1758:23;-1:-1:-1;;;;;1796:6:25;1793:30;1790:50;;;1836:1;1833;1826:12;1790:50;1875:59;1926:7;1917:6;1906:9;1902:22;1875:59;:::i;:::-;1953:8;;1849:85;;-1:-1:-1;1583:411:25;-1:-1:-1;;;;1583:411:25:o;1999:180::-;2058:6;2111:2;2099:9;2090:7;2086:23;2082:32;2079:52;;;2127:1;2124;2117:12;2079:52;-1:-1:-1;2150:23:25;;1999:180;-1:-1:-1;1999:180:25:o;2184:423::-;2226:3;2264:5;2258:12;2291:6;2286:3;2279:19;2316:1;2326:162;2340:6;2337:1;2334:13;2326:162;;;2402:4;2458:13;;;2454:22;;2448:29;2430:11;;;2426:20;;2419:59;2355:12;2326:162;;;2330:3;2533:1;2526:4;2517:6;2512:3;2508:16;2504:27;2497:38;2596:4;2589:2;2585:7;2580:2;2572:6;2568:15;2564:29;2559:3;2555:39;2551:50;2544:57;;;2184:423;;;;:::o;2612:220::-;2761:2;2750:9;2743:21;2724:4;2781:45;2822:2;2811:9;2807:18;2799:6;2781:45;:::i;2837:248::-;2905:6;2913;2966:2;2954:9;2945:7;2941:23;2937:32;2934:52;;;2982:1;2979;2972:12;2934:52;-1:-1:-1;;3005:23:25;;;3075:2;3060:18;;;3047:32;;-1:-1:-1;2837:248:25:o;3090:127::-;3151:10;3146:3;3142:20;3139:1;3132:31;3182:4;3179:1;3172:15;3206:4;3203:1;3196:15;3222:249;3332:2;3313:13;;-1:-1:-1;;3309:27:25;3297:40;;-1:-1:-1;;;;;3352:34:25;;3388:22;;;3349:62;3346:88;;;3414:18;;:::i;:::-;3450:2;3443:22;-1:-1:-1;;3222:249:25:o;3476:183::-;3536:4;-1:-1:-1;;;;;3561:6:25;3558:30;3555:56;;;3591:18;;:::i;:::-;-1:-1:-1;3636:1:25;3632:14;3648:4;3628:25;;3476:183::o;3664:724::-;3718:5;3771:3;3764:4;3756:6;3752:17;3748:27;3738:55;;3789:1;3786;3779:12;3738:55;3825:6;3812:20;3851:4;3874:43;3914:2;3874:43;:::i;:::-;3946:2;3940:9;3958:31;3986:2;3978:6;3958:31;:::i;:::-;4024:18;;;4116:1;4112:10;;;;4100:23;;4096:32;;;4058:15;;;;-1:-1:-1;4140:15:25;;;4137:35;;;4168:1;4165;4158:12;4137:35;4204:2;4196:6;4192:15;4216:142;4232:6;4227:3;4224:15;4216:142;;;4298:17;;4286:30;;4336:12;;;;4249;;4216:142;;;-1:-1:-1;4376:6:25;3664:724;-1:-1:-1;;;;;;3664:724:25:o;4393:555::-;4435:5;4488:3;4481:4;4473:6;4469:17;4465:27;4455:55;;4506:1;4503;4496:12;4455:55;4542:6;4529:20;-1:-1:-1;;;;;4564:2:25;4561:26;4558:52;;;4590:18;;:::i;:::-;4639:2;4633:9;4651:67;4706:2;4687:13;;-1:-1:-1;;4683:27:25;4712:4;4679:38;4633:9;4651:67;:::i;:::-;4742:2;4734:6;4727:18;4788:3;4781:4;4776:2;4768:6;4764:15;4760:26;4757:35;4754:55;;;4805:1;4802;4795:12;4754:55;4869:2;4862:4;4854:6;4850:17;4843:4;4835:6;4831:17;4818:54;4916:1;4892:15;;;4909:4;4888:26;4881:37;;;;4896:6;4393:555;-1:-1:-1;;;4393:555:25:o;4953:1071::-;5107:6;5115;5123;5131;5139;5192:3;5180:9;5171:7;5167:23;5163:33;5160:53;;;5209:1;5206;5199:12;5160:53;5248:9;5235:23;5267:31;5292:5;5267:31;:::i;:::-;5317:5;-1:-1:-1;5374:2:25;5359:18;;5346:32;5387:33;5346:32;5387:33;:::i;:::-;5439:7;-1:-1:-1;5497:2:25;5482:18;;5469:32;-1:-1:-1;;;;;5550:14:25;;;5547:34;;;5577:1;5574;5567:12;5547:34;5600:61;5653:7;5644:6;5633:9;5629:22;5600:61;:::i;:::-;5590:71;;5714:2;5703:9;5699:18;5686:32;5670:48;;5743:2;5733:8;5730:16;5727:36;;;5759:1;5756;5749:12;5727:36;5782:63;5837:7;5826:8;5815:9;5811:24;5782:63;:::i;:::-;5772:73;;5898:3;5887:9;5883:19;5870:33;5854:49;;5928:2;5918:8;5915:16;5912:36;;;5944:1;5941;5934:12;5912:36;;5967:51;6010:7;5999:8;5988:9;5984:24;5967:51;:::i;:::-;5957:61;;;4953:1071;;;;;;;;:::o;6261:1277::-;6379:6;6387;6440:2;6428:9;6419:7;6415:23;6411:32;6408:52;;;6456:1;6453;6446:12;6408:52;6496:9;6483:23;-1:-1:-1;;;;;6566:2:25;6558:6;6555:14;6552:34;;;6582:1;6579;6572:12;6552:34;6620:6;6609:9;6605:22;6595:32;;6665:7;6658:4;6654:2;6650:13;6646:27;6636:55;;6687:1;6684;6677:12;6636:55;6723:2;6710:16;6745:4;6768:43;6808:2;6768:43;:::i;:::-;6840:2;6834:9;6852:31;6880:2;6872:6;6852:31;:::i;:::-;6918:18;;;7006:1;7002:10;;;;6994:19;;6990:28;;;6952:15;;;;-1:-1:-1;7030:19:25;;;7027:39;;;7062:1;7059;7052:12;7027:39;7086:11;;;;7106:217;7122:6;7117:3;7114:15;7106:217;;;7202:3;7189:17;7219:31;7244:5;7219:31;:::i;:::-;7263:18;;7139:12;;;;7301;;;;7106:217;;;7342:6;-1:-1:-1;;7386:18:25;;7373:32;;-1:-1:-1;;7417:16:25;;;7414:36;;;7446:1;7443;7436:12;7414:36;;7469:63;7524:7;7513:8;7502:9;7498:24;7469:63;:::i;:::-;7459:73;;;6261:1277;;;;;:::o;7543:435::-;7596:3;7634:5;7628:12;7661:6;7656:3;7649:19;7687:4;7716:2;7711:3;7707:12;7700:19;;7753:2;7746:5;7742:14;7774:1;7784:169;7798:6;7795:1;7792:13;7784:169;;;7859:13;;7847:26;;7893:12;;;;7928:15;;;;7820:1;7813:9;7784:169;;;-1:-1:-1;7969:3:25;;7543:435;-1:-1:-1;;;;;7543:435:25:o;7983:261::-;8162:2;8151:9;8144:21;8125:4;8182:56;8234:2;8223:9;8219:18;8211:6;8182:56;:::i;8249:247::-;8308:6;8361:2;8349:9;8340:7;8336:23;8332:32;8329:52;;;8377:1;8374;8367:12;8329:52;8416:9;8403:23;8435:31;8460:5;8435:31;:::i;8501:615::-;8587:6;8595;8648:2;8636:9;8627:7;8623:23;8619:32;8616:52;;;8664:1;8661;8654:12;8616:52;8704:9;8691:23;-1:-1:-1;;;;;8774:2:25;8766:6;8763:14;8760:34;;;8790:1;8787;8780:12;8760:34;8828:6;8817:9;8813:22;8803:32;;8873:7;8866:4;8862:2;8858:13;8854:27;8844:55;;8895:1;8892;8885:12;8844:55;8935:2;8922:16;8961:2;8953:6;8950:14;8947:34;;;8977:1;8974;8967:12;8947:34;9030:7;9025:2;9015:6;9012:1;9008:14;9004:2;9000:23;8996:32;8993:45;8990:65;;;9051:1;9048;9041:12;8990:65;9082:2;9074:11;;;;;9104:6;;-1:-1:-1;8501:615:25;;-1:-1:-1;;;;8501:615:25:o;9329:416::-;9394:6;9402;9455:2;9443:9;9434:7;9430:23;9426:32;9423:52;;;9471:1;9468;9461:12;9423:52;9510:9;9497:23;9529:31;9554:5;9529:31;:::i;:::-;9579:5;-1:-1:-1;9636:2:25;9621:18;;9608:32;9678:15;;9671:23;9659:36;;9649:64;;9709:1;9706;9699:12;9649:64;9732:7;9722:17;;;9329:416;;;;;:::o;9750:546::-;9838:6;9846;9854;9862;9915:2;9903:9;9894:7;9890:23;9886:32;9883:52;;;9931:1;9928;9921:12;9883:52;9967:9;9954:23;9944:33;;10024:2;10013:9;10009:18;9996:32;9986:42;;10079:2;10068:9;10064:18;10051:32;-1:-1:-1;;;;;10098:6:25;10095:30;10092:50;;;10138:1;10135;10128:12;10092:50;10177:59;10228:7;10219:6;10208:9;10204:22;10177:59;:::i;:::-;9750:546;;;;-1:-1:-1;10255:8:25;-1:-1:-1;;;;9750:546:25:o;10554:315::-;10622:6;10630;10683:2;10671:9;10662:7;10658:23;10654:32;10651:52;;;10699:1;10696;10689:12;10651:52;10735:9;10722:23;10712:33;;10795:2;10784:9;10780:18;10767:32;10808:31;10833:5;10808:31;:::i;10874:388::-;10942:6;10950;11003:2;10991:9;10982:7;10978:23;10974:32;10971:52;;;11019:1;11016;11009:12;10971:52;11058:9;11045:23;11077:31;11102:5;11077:31;:::i;:::-;11127:5;-1:-1:-1;11184:2:25;11169:18;;11156:32;11197:33;11156:32;11197:33;:::i;11267:734::-;11371:6;11379;11387;11395;11403;11456:3;11444:9;11435:7;11431:23;11427:33;11424:53;;;11473:1;11470;11463:12;11424:53;11512:9;11499:23;11531:31;11556:5;11531:31;:::i;:::-;11581:5;-1:-1:-1;11638:2:25;11623:18;;11610:32;11651:33;11610:32;11651:33;:::i;:::-;11703:7;-1:-1:-1;11757:2:25;11742:18;;11729:32;;-1:-1:-1;11808:2:25;11793:18;;11780:32;;-1:-1:-1;11863:3:25;11848:19;;11835:33;-1:-1:-1;;;;;11880:30:25;;11877:50;;;11923:1;11920;11913:12;11877:50;11946:49;11987:7;11978:6;11967:9;11963:22;11946:49;:::i;12417:380::-;12496:1;12492:12;;;;12539;;;12560:61;;12614:4;12606:6;12602:17;12592:27;;12560:61;12667:2;12659:6;12656:14;12636:18;12633:38;12630:161;;12713:10;12708:3;12704:20;12701:1;12694:31;12748:4;12745:1;12738:15;12776:4;12773:1;12766:15;12630:161;;12417:380;;;:::o;13142:127::-;13203:10;13198:3;13194:20;13191:1;13184:31;13234:4;13231:1;13224:15;13258:4;13255:1;13248:15;13274:125;13339:9;;;13360:10;;;13357:36;;;13373:18;;:::i;13404:335::-;13606:2;13588:21;;;13645:2;13625:18;;;13618:30;-1:-1:-1;;;13679:2:25;13664:18;;13657:41;13730:2;13715:18;;13404:335::o;13744:168::-;13817:9;;;13848;;13865:15;;;13859:22;;13845:37;13835:71;;13886:18;;:::i;14600:127::-;14661:10;14656:3;14652:20;14649:1;14642:31;14692:4;14689:1;14682:15;14716:4;14713:1;14706:15;14732:120;14772:1;14798;14788:35;;14803:18;;:::i;:::-;-1:-1:-1;14837:9:25;;14732:120::o;14857:128::-;14924:9;;;14945:11;;;14942:37;;;14959:18;;:::i;14990:410::-;15192:2;15174:21;;;15231:2;15211:18;;;15204:30;15270:34;15265:2;15250:18;;15243:62;-1:-1:-1;;;15336:2:25;15321:18;;15314:44;15390:3;15375:19;;14990:410::o;15815:127::-;15876:10;15871:3;15867:20;15864:1;15857:31;15907:4;15904:1;15897:15;15931:4;15928:1;15921:15;15947:135;15986:3;16007:17;;;16004:43;;16027:18;;:::i;:::-;-1:-1:-1;16074:1:25;16063:13;;15947:135::o;17893:251::-;17963:6;18016:2;18004:9;17995:7;17991:23;17987:32;17984:52;;;18032:1;18029;18022:12;17984:52;18064:9;18058:16;18083:31;18108:5;18083:31;:::i;18502:112::-;18534:1;18560;18550:35;;18565:18;;:::i;:::-;-1:-1:-1;18599:9:25;;18502:112::o;18966:184::-;19036:6;19089:2;19077:9;19068:7;19064:23;19060:32;19057:52;;;19105:1;19102;19095:12;19057:52;-1:-1:-1;19128:16:25;;18966:184;-1:-1:-1;18966:184:25:o;19503:559::-;19698:25;;;-1:-1:-1;;;;;19759:32:25;;19754:2;19739:18;;19732:60;19828:2;19823;19808:18;;19801:30;;;19847:18;;19840:34;;;19867:6;19917;19911:3;19896:19;;19883:49;19982:1;19952:22;;;19976:3;19948:32;;;19941:43;;;;20045:2;20024:15;;;-1:-1:-1;;20020:29:25;20005:45;20001:55;;19503:559;-1:-1:-1;;;19503:559:25:o;21645:545::-;21747:2;21742:3;21739:11;21736:448;;;21783:1;21808:5;21804:2;21797:17;21853:4;21849:2;21839:19;21923:2;21911:10;21907:19;21904:1;21900:27;21894:4;21890:38;21959:4;21947:10;21944:20;21941:47;;;-1:-1:-1;21982:4:25;21941:47;22037:2;22032:3;22028:12;22025:1;22021:20;22015:4;22011:31;22001:41;;22092:82;22110:2;22103:5;22100:13;22092:82;;;22155:17;;;22136:1;22125:13;22092:82;;21736:448;21645:545;;;:::o;22366:1352::-;22492:3;22486:10;-1:-1:-1;;;;;22511:6:25;22508:30;22505:56;;;22541:18;;:::i;:::-;22570:97;22660:6;22620:38;22652:4;22646:11;22620:38;:::i;:::-;22614:4;22570:97;:::i;:::-;22722:4;;22786:2;22775:14;;22803:1;22798:663;;;;23505:1;23522:6;23519:89;;;-1:-1:-1;23574:19:25;;;23568:26;23519:89;-1:-1:-1;;22323:1:25;22319:11;;;22315:24;22311:29;22301:40;22347:1;22343:11;;;22298:57;23621:81;;22768:944;;22798:663;21592:1;21585:14;;;21629:4;21616:18;;-1:-1:-1;;22834:20:25;;;22952:236;22966:7;22963:1;22960:14;22952:236;;;23055:19;;;23049:26;23034:42;;23147:27;;;;23115:1;23103:14;;;;22982:19;;22952:236;;;22956:3;23216:6;23207:7;23204:19;23201:201;;;23277:19;;;23271:26;-1:-1:-1;;23360:1:25;23356:14;;;23372:3;23352:24;23348:37;23344:42;23329:58;23314:74;;23201:201;-1:-1:-1;;;;;23448:1:25;23432:14;;;23428:22;23415:36;;-1:-1:-1;22366:1352:25:o;24534:401::-;24736:2;24718:21;;;24775:2;24755:18;;;24748:30;24814:34;24809:2;24794:18;;24787:62;-1:-1:-1;;;24880:2:25;24865:18;;24858:35;24925:3;24910:19;;24534:401::o;24940:406::-;25142:2;25124:21;;;25181:2;25161:18;;;25154:30;25220:34;25215:2;25200:18;;25193:62;-1:-1:-1;;;25286:2:25;25271:18;;25264:40;25336:3;25321:19;;24940:406::o;25351:465::-;25608:2;25597:9;25590:21;25571:4;25634:56;25686:2;25675:9;25671:18;25663:6;25634:56;:::i;:::-;25738:9;25730:6;25726:22;25721:2;25710:9;25706:18;25699:50;25766:44;25803:6;25795;25766:44;:::i;:::-;25758:52;25351:465;-1:-1:-1;;;;;25351:465:25:o;26231:561::-;-1:-1:-1;;;;;26528:15:25;;;26510:34;;26580:15;;26575:2;26560:18;;26553:43;26627:2;26612:18;;26605:34;;;26670:2;26655:18;;26648:34;;;26490:3;26713;26698:19;;26691:32;;;26453:4;;26740:46;;26766:19;;26758:6;26740:46;:::i;:::-;26732:54;26231:561;-1:-1:-1;;;;;;;26231:561:25:o;26797:249::-;26866:6;26919:2;26907:9;26898:7;26894:23;26890:32;26887:52;;;26935:1;26932;26925:12;26887:52;26967:9;26961:16;26986:30;27010:5;26986:30;:::i;27051:179::-;27086:3;27128:1;27110:16;27107:23;27104:120;;;27174:1;27171;27168;27153:23;-1:-1:-1;27211:1:25;27205:8;27200:3;27196:18;27104:120;27051:179;:::o;27235:671::-;27274:3;27316:4;27298:16;27295:26;27292:39;;;27235:671;:::o;27292:39::-;27358:2;27352:9;-1:-1:-1;;27423:16:25;27419:25;;27416:1;27352:9;27395:50;27474:4;27468:11;27498:16;-1:-1:-1;;;;;27604:2:25;27597:4;27589:6;27585:17;27582:25;27577:2;27569:6;27566:14;27563:45;27560:58;;;27611:5;;;;;27235:671;:::o;27560:58::-;27648:6;27642:4;27638:17;27627:28;;27684:3;27678:10;27711:2;27703:6;27700:14;27697:27;;;27717:5;;;;;;27235:671;:::o;27697:27::-;27801:2;27782:16;27776:4;27772:27;27768:36;27761:4;27752:6;27747:3;27743:16;27739:27;27736:69;27733:82;;;27808:5;;;;;;27235:671;:::o;27733:82::-;27824:57;27875:4;27866:6;27858;27854:19;27850:30;27844:4;27824:57;:::i;:::-;-1:-1:-1;27897:3:25;;27235:671;-1:-1:-1;;;;;27235:671:25:o;28332:404::-;28534:2;28516:21;;;28573:2;28553:18;;;28546:30;28612:34;28607:2;28592:18;;28585:62;-1:-1:-1;;;28678:2:25;28663:18;;28656:38;28726:3;28711:19;;28332:404::o;28741:827::-;-1:-1:-1;;;;;29138:15:25;;;29120:34;;29190:15;;29185:2;29170:18;;29163:43;29100:3;29237:2;29222:18;;29215:31;;;29063:4;;29269:57;;29306:19;;29298:6;29269:57;:::i;:::-;29374:9;29366:6;29362:22;29357:2;29346:9;29342:18;29335:50;29408:44;29445:6;29437;29408:44;:::i;:::-;29394:58;;29501:9;29493:6;29489:22;29483:3;29472:9;29468:19;29461:51;29529:33;29555:6;29547;29529:33;:::i;:::-;29521:41;28741:827;-1:-1:-1;;;;;;;;28741:827:25:o"},"gasEstimates":{"creation":{"codeDepositCost":"2075000","executionCost":"infinite","totalCost":"infinite"},"external":{"authorWithdraw(uint256[])":"infinite","balanceOf(address,uint256)":"2717","balanceOfBatch(address[],uint256[])":"infinite","brushUsed(uint256,uint256)":"2643","brushes()":"2405","canvases(uint256)":"4688","contribution(uint256,address)":"2681","epochDuration()":"infinite","isApprovedForAll(address,address)":"infinite","mint(uint256,uint256)":"infinite","openEditionPrice()":"2373","owner()":"2399","ownerEarned()":"2372","ownerFeePartsPerMillion()":"2352","paint(uint256,uint256,bytes)":"infinite","renounceOwnership()":"infinite","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"infinite","safeTransferFrom(address,address,uint256,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26767","setOpenEditionPrice(uint256)":"25643","setOwnerFee(uint256)":"25698","setURI(string)":"infinite","start()":"27685","startedAt()":"2395","supportsInterface(bytes4)":"601","today()":"infinite","transferOwnership(address)":"infinite","uri(uint256)":"infinite","withdraw(address)":"infinite"}},"methodIdentifiers":{"authorWithdraw(uint256[])":"8abe0991","balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","brushUsed(uint256,uint256)":"2ac70a2d","brushes()":"49621c3f","canvases(uint256)":"d9d197a6","contribution(uint256,address)":"dfa3a432","epochDuration()":"4ff0876a","isApprovedForAll(address,address)":"e985e9c5","mint(uint256,uint256)":"1b2ef1ca","openEditionPrice()":"69865686","owner()":"8da5cb5b","ownerEarned()":"f9af6c58","ownerFeePartsPerMillion()":"14de57cb","paint(uint256,uint256,bytes)":"b079bbcc","renounceOwnership()":"715018a6","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","setOpenEditionPrice(uint256)":"f0e639e1","setOwnerFee(uint256)":"fbf0ade1","setURI(string)":"02fe5305","start()":"be9a6555","startedAt()":"f21f537d","supportsInterface(bytes4)":"01ffc9a7","today()":"b74e452b","transferOwnership(address)":"f2fde38b","uri(uint256)":"0e89341c","withdraw(address)":"51cff8d9"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBasePaintBrush\",\"name\":\"_brushes\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ArtistWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ArtistsEarned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"OpenEditionPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"OwnerFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnerWithdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pixels\",\"type\":\"bytes\"}],\"name\":\"Painted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"name\":\"authorWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"brushUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brushes\",\"outputs\":[{\"internalType\":\"contract IBasePaintBrush\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"canvases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalContributions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRaised\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"}],\"name\":\"contribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openEditionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerFeePartsPerMillion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pixels\",\"type\":\"bytes\"}],\"name\":\"paint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setOpenEditionPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setOwnerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"today\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BasePaint.sol\":\"BasePaint\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x81149353c99ccf8ff18af7701bc3f38665c7a97e344cdc0d27f927f03d22af0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8432884527a7ad91e6eed1cfc5a0811ae2073e5bca107bd0ca442e9236b03dbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x3af3ca86df39aac39a0514c84459d691434a108d2151c8ce9d69f32e315cab80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/BasePaint.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Author: @w1nt3r_eth \\n// To be clear, I (0xNader) didn't write this contract, keeping it here for reference.\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IBasePaintBrush} from \\\"./BasePaintBrush.sol\\\";\\n\\ncontract BasePaint is ERC1155, Ownable {\\n    IBasePaintBrush public brushes;\\n    uint256 public immutable epochDuration;\\n\\n    struct Canvas {\\n        uint256 totalContributions;\\n        uint256 totalRaised;\\n        mapping(address => uint256) contributions;\\n        mapping(uint256 => uint256) brushUsed;\\n    }\\n\\n    mapping(uint256 => Canvas) public canvases;\\n    uint256 public startedAt;\\n\\n    uint256 public openEditionPrice = 0.0026 ether;\\n    uint256 public ownerFeePartsPerMillion = 100_000; // 10% fee\\n    uint256 public ownerEarned;\\n\\n    event Started(uint256 timestamp);\\n    event Painted(uint256 indexed day, uint256 tokenId, address author, bytes pixels);\\n\\n    event ArtistsEarned(uint256 indexed day, uint256 amount);\\n    event ArtistWithdraw(uint256 indexed day, address author, uint256 amount);\\n\\n    event OpenEditionPriceUpdated(uint256 price);\\n    event OwnerFeeUpdated(uint256 fee);\\n    event OwnerWithdrew(uint256 amount, address to);\\n\\n    constructor(IBasePaintBrush _brushes, uint256 _epochDuration) ERC1155(\\\"https://basepaint.xyz/api/art/{id}\\\") {\\n        brushes = _brushes;\\n        epochDuration = _epochDuration;\\n    }\\n\\n    function mint(uint256 day, uint256 count) public payable {\\n        require(startedAt > 0, \\\"Not started\\\");\\n        require(day + 1 == today(), \\\"Invalid day\\\");\\n        require(msg.value >= openEditionPrice * count, \\\"Invalid price\\\");\\n        require(canvases[day].totalContributions > 0, \\\"Empty canvas\\\");\\n\\n        _mint(msg.sender, day, count, \\\"\\\");\\n\\n        uint256 fee = msg.value * ownerFeePartsPerMillion / 1_000_000;\\n        ownerEarned += fee;\\n        canvases[day].totalRaised += msg.value - fee;\\n        emit ArtistsEarned(day, msg.value - fee);\\n    }\\n\\n    function paint(uint256 day, uint256 tokenId, bytes calldata pixels) public {\\n        require(startedAt > 0, \\\"Not started\\\");\\n        require(day == today(), \\\"Invalid day\\\");\\n        require(brushes.ownerOf(tokenId) == msg.sender, \\\"You don't own this brush\\\");\\n        require(pixels.length % 3 == 0, \\\"Invalid pixel data\\\");\\n        require(pixels.length > 0, \\\"Invalid pixel data\\\");\\n\\n        uint256 painted = pixels.length / 3;\\n\\n        Canvas storage canvas = canvases[day];\\n        canvas.contributions[msg.sender] += painted;\\n        canvas.brushUsed[tokenId] += painted;\\n        canvas.totalContributions += painted;\\n\\n        require(canvas.brushUsed[tokenId] <= brushes.strengths(tokenId), \\\"Brush used too much\\\");\\n        emit Painted(day, tokenId, msg.sender, pixels);\\n    }\\n\\n    function contribution(uint256 day, address author) public view returns (uint256) {\\n        return canvases[day].contributions[author];\\n    }\\n\\n    function brushUsed(uint256 day, uint256 tokenId) public view returns (uint256) {\\n        return canvases[day].brushUsed[tokenId];\\n    }\\n\\n    function today() public view returns (uint256) {\\n        // Starts from day 1\\n        return ((block.timestamp - startedAt) / epochDuration) + 1;\\n    }\\n\\n    function authorWithdraw(uint256[] calldata indexes) public {\\n        uint256 maxDay = today() - 1;\\n        for (uint256 i = 0; i < indexes.length; i++) {\\n            uint256 day = indexes[i];\\n            require(day < maxDay, \\\"Invalid day\\\");\\n\\n            Canvas storage canvas = canvases[day];\\n            require(canvas.totalRaised > 0, \\\"No funds to withdraw\\\");\\n            require(canvas.totalContributions > 0, \\\"Empty canvas\\\");\\n            require(canvas.contributions[msg.sender] > 0, \\\"No contributions\\\");\\n\\n            uint256 amount = canvas.totalRaised * canvas.contributions[msg.sender] / canvas.totalContributions;\\n            canvas.totalRaised -= amount;\\n            canvas.totalContributions -= canvas.contributions[msg.sender];\\n            canvas.contributions[msg.sender] = 0;\\n\\n            (bool success,) = msg.sender.call{value: amount}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n            emit ArtistWithdraw(day, msg.sender, amount);\\n        }\\n    }\\n\\n    function start() public onlyOwner {\\n        require(startedAt == 0, \\\"Already started\\\");\\n\\n        startedAt = block.timestamp;\\n        emit Started(startedAt);\\n    }\\n\\n    function setURI(string calldata newuri) public onlyOwner {\\n        _setURI(newuri);\\n    }\\n\\n    function setOwnerFee(uint256 newFee) public onlyOwner {\\n        require(newFee < 1_000_000, \\\"Invalid fee\\\");\\n        ownerFeePartsPerMillion = newFee;\\n        emit OwnerFeeUpdated(newFee);\\n    }\\n\\n    function setOpenEditionPrice(uint256 newPrice) public onlyOwner {\\n        openEditionPrice = newPrice;\\n        emit OpenEditionPriceUpdated(newPrice);\\n    }\\n\\n    function withdraw(address to) public onlyOwner {\\n        uint256 amount = ownerEarned;\\n        ownerEarned = 0;\\n\\n        (bool success,) = to.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n        emit OwnerWithdrew(amount, to);\\n    }\\n}\\n\",\"keccak256\":\"0x8381a02adb61e6a8d829ee08144466dffe557accd9930a6d7ea8023b164c6852\",\"license\":\"UNLICENSED\"},\"contracts/BasePaintBrush.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Author: @w1nt3r_eth\\n// To be clear, I (0xNader) didn't write this contract, keeping it here for reference.\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\n\\ninterface IBasePaintBrush is IERC721 {\\n    function strengths(uint256 tokenId) external view returns (uint256);\\n}\\n\\ncontract BasePaintBrush is\\n    ERC721(\\\"BasePaint Brush\\\", \\\"BPB\\\"),\\n    EIP712(\\\"BasePaint Brush\\\", \\\"1\\\"),\\n    IBasePaintBrush,\\n    Ownable\\n{\\n    uint256 public totalSupply;\\n    mapping(uint256 => uint256) public strengths;\\n\\n    address private signer;\\n    mapping(uint256 => bool) private nonces;\\n    string private baseURI = \\\"https://basepaint.xyz/api/brush/\\\";\\n\\n    function mint(uint256 strength) public payable onlyOwner {\\n        totalSupply++;\\n        _safeMint(msg.sender, totalSupply);\\n        strengths[totalSupply] = strength;\\n    }\\n\\n    function upgrade(uint256 tokenId, uint256 strength) public payable onlyOwner {\\n        require(tokenId > 0 && tokenId <= totalSupply, \\\"Invalid tokenId\\\");\\n\\n        strengths[tokenId] = strength;\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function setSigner(address newSigner) public onlyOwner {\\n        signer = newSigner;\\n    }\\n\\n    function setBaseURI(string calldata newBaseURI) public onlyOwner {\\n        baseURI = newBaseURI;\\n    }\\n\\n    function setStrength(uint256 tokenId, uint256 strength) public onlyOwner {\\n        strengths[tokenId] = strength;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        (bool success,) = owner().call{value: address(this).balance}(new bytes(0));\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x658c6b5cebbfe37aee38f9691d4ca69ce8656c87e68c68c0e4111d1f80a4db3a\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":177,"contract":"contracts/BasePaint.sol:BasePaint","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":183,"contract":"contracts/BasePaint.sol:BasePaint","label":"_operatorApprovals","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":185,"contract":"contracts/BasePaint.sol:BasePaint","label":"_uri","offset":0,"slot":"2","type":"t_string_storage"},{"astId":7,"contract":"contracts/BasePaint.sol:BasePaint","label":"_owner","offset":0,"slot":"3","type":"t_address"},{"astId":5244,"contract":"contracts/BasePaint.sol:BasePaint","label":"brushes","offset":0,"slot":"4","type":"t_contract(IBasePaintBrush)5844"},{"astId":5264,"contract":"contracts/BasePaint.sol:BasePaint","label":"canvases","offset":0,"slot":"5","type":"t_mapping(t_uint256,t_struct(Canvas)5259_storage)"},{"astId":5266,"contract":"contracts/BasePaint.sol:BasePaint","label":"startedAt","offset":0,"slot":"6","type":"t_uint256"},{"astId":5269,"contract":"contracts/BasePaint.sol:BasePaint","label":"openEditionPrice","offset":0,"slot":"7","type":"t_uint256"},{"astId":5272,"contract":"contracts/BasePaint.sol:BasePaint","label":"ownerFeePartsPerMillion","offset":0,"slot":"8","type":"t_uint256"},{"astId":5274,"contract":"contracts/BasePaint.sol:BasePaint","label":"ownerEarned","offset":0,"slot":"9","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IBasePaintBrush)5844":{"encoding":"inplace","label":"contract IBasePaintBrush","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint256,t_struct(Canvas)5259_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct BasePaint.Canvas)","numberOfBytes":"32","value":"t_struct(Canvas)5259_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Canvas)5259_storage":{"encoding":"inplace","label":"struct BasePaint.Canvas","members":[{"astId":5248,"contract":"contracts/BasePaint.sol:BasePaint","label":"totalContributions","offset":0,"slot":"0","type":"t_uint256"},{"astId":5250,"contract":"contracts/BasePaint.sol:BasePaint","label":"totalRaised","offset":0,"slot":"1","type":"t_uint256"},{"astId":5254,"contract":"contracts/BasePaint.sol:BasePaint","label":"contributions","offset":0,"slot":"2","type":"t_mapping(t_address,t_uint256)"},{"astId":5258,"contract":"contracts/BasePaint.sol:BasePaint","label":"brushUsed","offset":0,"slot":"3","type":"t_mapping(t_uint256,t_uint256)"}],"numberOfBytes":"128"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/BasePaintBrush.sol":{"BasePaintBrush":{"abi":[{"inputs":[],"name":"InvalidShortString","type":"error"},{"inputs":[{"internalType":"string","name":"str","type":"string"}],"name":"StringTooLong","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"strength","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"newBaseURI","type":"string"}],"name":"setBaseURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newSigner","type":"address"}],"name":"setSigner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"strength","type":"uint256"}],"name":"setStrength","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"strengths","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"strength","type":"uint256"}],"name":"upgrade","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"EIP712DomainChanged()":{"details":"MAY be emitted to signal that the domain could have changed."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"eip712Domain()":{"details":"See {EIP-5267}. _Available since v4.9._"},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"owner()":{"details":"Returns the address of the current owner."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1615":{"entryPoint":null,"id":1615,"parameterSlots":2,"returnSlots":0},"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_4014":{"entryPoint":null,"id":4014,"parameterSlots":2,"returnSlots":0},"@_buildDomainSeparator_4061":{"entryPoint":null,"id":4061,"parameterSlots":0,"returnSlots":1},"@_msgSender_2982":{"entryPoint":null,"id":2982,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":472,"id":111,"parameterSlots":1,"returnSlots":0},"@getStringSlot_3303":{"entryPoint":null,"id":3303,"parameterSlots":1,"returnSlots":1},"@toShortStringWithFallback_3157":{"entryPoint":415,"id":3157,"parameterSlots":2,"returnSlots":1},"@toShortString_3059":{"entryPoint":554,"id":3059,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":999,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":712,"id":null,"parameterSlots":3,"returnSlots":0},"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32":{"entryPoint":1079,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":795,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":652,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":630,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4081:25","statements":[{"nodeType":"YulBlock","src":"6:3:25","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:25"},"nodeType":"YulFunctionCall","src":"66:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:25"},"nodeType":"YulFunctionCall","src":"56:31:25"},"nodeType":"YulExpressionStatement","src":"56:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:25","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:25"},"nodeType":"YulFunctionCall","src":"96:15:25"},"nodeType":"YulExpressionStatement","src":"96:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:25"},"nodeType":"YulFunctionCall","src":"120:15:25"},"nodeType":"YulExpressionStatement","src":"120:15:25"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:25"},{"body":{"nodeType":"YulBlock","src":"201:325:25","statements":[{"nodeType":"YulAssignment","src":"211:22:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"225:1:25","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"228:4:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"221:3:25"},"nodeType":"YulFunctionCall","src":"221:12:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"211:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"242:38:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"272:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"278:1:25","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"268:3:25"},"nodeType":"YulFunctionCall","src":"268:12:25"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"246:18:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"319:31:25","statements":[{"nodeType":"YulAssignment","src":"321:27:25","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"335:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"343:4:25","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"331:3:25"},"nodeType":"YulFunctionCall","src":"331:17:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"321:6:25"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"299:18:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"292:6:25"},"nodeType":"YulFunctionCall","src":"292:26:25"},"nodeType":"YulIf","src":"289:61:25"},{"body":{"nodeType":"YulBlock","src":"409:111:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"430:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"437:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"442:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"433:3:25"},"nodeType":"YulFunctionCall","src":"433:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"423:6:25"},"nodeType":"YulFunctionCall","src":"423:31:25"},"nodeType":"YulExpressionStatement","src":"423:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"474:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"477:4:25","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"467:6:25"},"nodeType":"YulFunctionCall","src":"467:15:25"},"nodeType":"YulExpressionStatement","src":"467:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"502:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"505:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"495:6:25"},"nodeType":"YulFunctionCall","src":"495:15:25"},"nodeType":"YulExpressionStatement","src":"495:15:25"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"365:18:25"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"388:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"396:2:25","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"385:2:25"},"nodeType":"YulFunctionCall","src":"385:14:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"362:2:25"},"nodeType":"YulFunctionCall","src":"362:38:25"},"nodeType":"YulIf","src":"359:161:25"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"181:4:25","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"190:6:25","type":""}],"src":"146:380:25"},{"body":{"nodeType":"YulBlock","src":"587:65:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"604:1:25","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"607:3:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"597:6:25"},"nodeType":"YulFunctionCall","src":"597:14:25"},"nodeType":"YulExpressionStatement","src":"597:14:25"},{"nodeType":"YulAssignment","src":"620:26:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"638:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"641:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"628:9:25"},"nodeType":"YulFunctionCall","src":"628:18:25"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"620:4:25"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"570:3:25","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"578:4:25","type":""}],"src":"531:121:25"},{"body":{"nodeType":"YulBlock","src":"738:464:25","statements":[{"body":{"nodeType":"YulBlock","src":"771:425:25","statements":[{"nodeType":"YulVariableDeclaration","src":"785:11:25","value":{"kind":"number","nodeType":"YulLiteral","src":"795:1:25","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"789:2:25","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"816:2:25"},{"name":"array","nodeType":"YulIdentifier","src":"820:5:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"809:6:25"},"nodeType":"YulFunctionCall","src":"809:17:25"},"nodeType":"YulExpressionStatement","src":"809:17:25"},{"nodeType":"YulVariableDeclaration","src":"839:31:25","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"861:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"865:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"851:9:25"},"nodeType":"YulFunctionCall","src":"851:19:25"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"843:4:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"883:57:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"906:4:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"916:1:25","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"923:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"935:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"919:3:25"},"nodeType":"YulFunctionCall","src":"919:19:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"912:3:25"},"nodeType":"YulFunctionCall","src":"912:27:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"902:3:25"},"nodeType":"YulFunctionCall","src":"902:38:25"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"887:11:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"977:23:25","statements":[{"nodeType":"YulAssignment","src":"979:19:25","value":{"name":"data","nodeType":"YulIdentifier","src":"994:4:25"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"979:11:25"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"959:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"971:4:25","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"956:2:25"},"nodeType":"YulFunctionCall","src":"956:20:25"},"nodeType":"YulIf","src":"953:47:25"},{"nodeType":"YulVariableDeclaration","src":"1013:41:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1027:4:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1037:1:25","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"1044:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"1049:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1040:3:25"},"nodeType":"YulFunctionCall","src":"1040:12:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1033:3:25"},"nodeType":"YulFunctionCall","src":"1033:20:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1023:3:25"},"nodeType":"YulFunctionCall","src":"1023:31:25"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1017:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1067:24:25","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"1080:11:25"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"1071:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"1165:21:25","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1174:5:25"},{"name":"_1","nodeType":"YulIdentifier","src":"1181:2:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"1167:6:25"},"nodeType":"YulFunctionCall","src":"1167:17:25"},"nodeType":"YulExpressionStatement","src":"1167:17:25"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1115:5:25"},{"name":"_2","nodeType":"YulIdentifier","src":"1122:2:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1112:2:25"},"nodeType":"YulFunctionCall","src":"1112:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1126:26:25","statements":[{"nodeType":"YulAssignment","src":"1128:22:25","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1141:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"1148:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1137:3:25"},"nodeType":"YulFunctionCall","src":"1137:13:25"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"1128:5:25"}]}]},"pre":{"nodeType":"YulBlock","src":"1108:3:25","statements":[]},"src":"1104:82:25"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"754:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"759:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"751:2:25"},"nodeType":"YulFunctionCall","src":"751:11:25"},"nodeType":"YulIf","src":"748:448:25"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"710:5:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"717:3:25","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"722:10:25","type":""}],"src":"657:545:25"},{"body":{"nodeType":"YulBlock","src":"1292:81:25","statements":[{"nodeType":"YulAssignment","src":"1302:65:25","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1317:4:25"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1335:1:25","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"1338:3:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1331:3:25"},"nodeType":"YulFunctionCall","src":"1331:11:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1348:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1344:3:25"},"nodeType":"YulFunctionCall","src":"1344:6:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1327:3:25"},"nodeType":"YulFunctionCall","src":"1327:24:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1323:3:25"},"nodeType":"YulFunctionCall","src":"1323:29:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1313:3:25"},"nodeType":"YulFunctionCall","src":"1313:40:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1359:1:25","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"1362:3:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1355:3:25"},"nodeType":"YulFunctionCall","src":"1355:11:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1310:2:25"},"nodeType":"YulFunctionCall","src":"1310:57:25"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"1302:4:25"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1269:4:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"1275:3:25","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"1283:4:25","type":""}],"src":"1207:166:25"},{"body":{"nodeType":"YulBlock","src":"1474:1256:25","statements":[{"nodeType":"YulVariableDeclaration","src":"1484:24:25","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1504:3:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1498:5:25"},"nodeType":"YulFunctionCall","src":"1498:10:25"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"1488:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"1551:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1553:16:25"},"nodeType":"YulFunctionCall","src":"1553:18:25"},"nodeType":"YulExpressionStatement","src":"1553:18:25"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1523:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1539:2:25","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1543:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1535:3:25"},"nodeType":"YulFunctionCall","src":"1535:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"1547:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1531:3:25"},"nodeType":"YulFunctionCall","src":"1531:18:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1520:2:25"},"nodeType":"YulFunctionCall","src":"1520:30:25"},"nodeType":"YulIf","src":"1517:56:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1626:4:25"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1664:4:25"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"1658:5:25"},"nodeType":"YulFunctionCall","src":"1658:11:25"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"1632:25:25"},"nodeType":"YulFunctionCall","src":"1632:38:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"1672:6:25"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"1582:43:25"},"nodeType":"YulFunctionCall","src":"1582:97:25"},"nodeType":"YulExpressionStatement","src":"1582:97:25"},{"nodeType":"YulVariableDeclaration","src":"1688:18:25","value":{"kind":"number","nodeType":"YulLiteral","src":"1705:1:25","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"1692:9:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1715:23:25","value":{"kind":"number","nodeType":"YulLiteral","src":"1734:4:25","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"1719:11:25","type":""}]},{"nodeType":"YulAssignment","src":"1747:24:25","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"1760:11:25"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"1747:9:25"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"1817:656:25","statements":[{"nodeType":"YulVariableDeclaration","src":"1831:35:25","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1850:6:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1862:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1858:3:25"},"nodeType":"YulFunctionCall","src":"1858:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1846:3:25"},"nodeType":"YulFunctionCall","src":"1846:20:25"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"1835:7:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1879:49:25","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1923:4:25"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"1893:29:25"},"nodeType":"YulFunctionCall","src":"1893:35:25"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"1883:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1941:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"1950:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1945:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"2028:172:25","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2053:6:25"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2071:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2076:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2067:3:25"},"nodeType":"YulFunctionCall","src":"2067:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2061:5:25"},"nodeType":"YulFunctionCall","src":"2061:26:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2046:6:25"},"nodeType":"YulFunctionCall","src":"2046:42:25"},"nodeType":"YulExpressionStatement","src":"2046:42:25"},{"nodeType":"YulAssignment","src":"2105:24:25","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2119:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"2127:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2115:3:25"},"nodeType":"YulFunctionCall","src":"2115:14:25"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2105:6:25"}]},{"nodeType":"YulAssignment","src":"2146:40:25","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2163:9:25"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2174:11:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2159:3:25"},"nodeType":"YulFunctionCall","src":"2159:27:25"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2146:9:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1975:1:25"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"1978:7:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1972:2:25"},"nodeType":"YulFunctionCall","src":"1972:14:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1987:28:25","statements":[{"nodeType":"YulAssignment","src":"1989:24:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1998:1:25"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2001:11:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1994:3:25"},"nodeType":"YulFunctionCall","src":"1994:19:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1989:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"1968:3:25","statements":[]},"src":"1964:236:25"},{"body":{"nodeType":"YulBlock","src":"2248:166:25","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:43:25","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2293:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2298:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2289:3:25"},"nodeType":"YulFunctionCall","src":"2289:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2283:5:25"},"nodeType":"YulFunctionCall","src":"2283:26:25"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"2270:9:25","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2333:6:25"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"2345:9:25"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2372:1:25","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"2375:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2368:3:25"},"nodeType":"YulFunctionCall","src":"2368:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"2384:3:25","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2364:3:25"},"nodeType":"YulFunctionCall","src":"2364:24:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2394:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2390:3:25"},"nodeType":"YulFunctionCall","src":"2390:6:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2360:3:25"},"nodeType":"YulFunctionCall","src":"2360:37:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2356:3:25"},"nodeType":"YulFunctionCall","src":"2356:42:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2341:3:25"},"nodeType":"YulFunctionCall","src":"2341:58:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2326:6:25"},"nodeType":"YulFunctionCall","src":"2326:74:25"},"nodeType":"YulExpressionStatement","src":"2326:74:25"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"2219:7:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"2228:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2216:2:25"},"nodeType":"YulFunctionCall","src":"2216:19:25"},"nodeType":"YulIf","src":"2213:201:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2434:4:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2448:1:25","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"2451:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2444:3:25"},"nodeType":"YulFunctionCall","src":"2444:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"2460:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2440:3:25"},"nodeType":"YulFunctionCall","src":"2440:22:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2427:6:25"},"nodeType":"YulFunctionCall","src":"2427:36:25"},"nodeType":"YulExpressionStatement","src":"2427:36:25"}]},"nodeType":"YulCase","src":"1810:663:25","value":{"kind":"number","nodeType":"YulLiteral","src":"1815:1:25","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"2490:234:25","statements":[{"nodeType":"YulVariableDeclaration","src":"2504:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"2517:1:25","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2508:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"2553:67:25","statements":[{"nodeType":"YulAssignment","src":"2571:35:25","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2590:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2595:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2586:3:25"},"nodeType":"YulFunctionCall","src":"2586:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2580:5:25"},"nodeType":"YulFunctionCall","src":"2580:26:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2571:5:25"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"2534:6:25"},"nodeType":"YulIf","src":"2531:89:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2640:4:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2699:5:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"2706:6:25"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"2646:52:25"},"nodeType":"YulFunctionCall","src":"2646:67:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2633:6:25"},"nodeType":"YulFunctionCall","src":"2633:81:25"},"nodeType":"YulExpressionStatement","src":"2633:81:25"}]},"nodeType":"YulCase","src":"2482:242:25","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1790:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"1798:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1787:2:25"},"nodeType":"YulFunctionCall","src":"1787:14:25"},"nodeType":"YulSwitch","src":"1780:944:25"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"1459:4:25","type":""},{"name":"src","nodeType":"YulTypedName","src":"1465:3:25","type":""}],"src":"1378:1352:25"},{"body":{"nodeType":"YulBlock","src":"2948:276:25","statements":[{"nodeType":"YulAssignment","src":"2958:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2970:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"2981:3:25","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2966:3:25"},"nodeType":"YulFunctionCall","src":"2966:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2958:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3001:9:25"},{"name":"value0","nodeType":"YulIdentifier","src":"3012:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2994:6:25"},"nodeType":"YulFunctionCall","src":"2994:25:25"},"nodeType":"YulExpressionStatement","src":"2994:25:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3039:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3050:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3035:3:25"},"nodeType":"YulFunctionCall","src":"3035:18:25"},{"name":"value1","nodeType":"YulIdentifier","src":"3055:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3028:6:25"},"nodeType":"YulFunctionCall","src":"3028:34:25"},"nodeType":"YulExpressionStatement","src":"3028:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3082:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3093:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3078:3:25"},"nodeType":"YulFunctionCall","src":"3078:18:25"},{"name":"value2","nodeType":"YulIdentifier","src":"3098:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3071:6:25"},"nodeType":"YulFunctionCall","src":"3071:34:25"},"nodeType":"YulExpressionStatement","src":"3071:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3125:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3136:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3121:3:25"},"nodeType":"YulFunctionCall","src":"3121:18:25"},{"name":"value3","nodeType":"YulIdentifier","src":"3141:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3114:6:25"},"nodeType":"YulFunctionCall","src":"3114:34:25"},"nodeType":"YulExpressionStatement","src":"3114:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3168:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3179:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3164:3:25"},"nodeType":"YulFunctionCall","src":"3164:19:25"},{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"3189:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3205:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"3210:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3201:3:25"},"nodeType":"YulFunctionCall","src":"3201:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"3214:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3197:3:25"},"nodeType":"YulFunctionCall","src":"3197:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3185:3:25"},"nodeType":"YulFunctionCall","src":"3185:32:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3157:6:25"},"nodeType":"YulFunctionCall","src":"3157:61:25"},"nodeType":"YulExpressionStatement","src":"3157:61:25"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2885:9:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2896:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2904:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2912:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2920:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2928:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2939:4:25","type":""}],"src":"2735:489:25"},{"body":{"nodeType":"YulBlock","src":"3350:427:25","statements":[{"nodeType":"YulVariableDeclaration","src":"3360:12:25","value":{"kind":"number","nodeType":"YulLiteral","src":"3370:2:25","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3364:2:25","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3388:9:25"},{"name":"_1","nodeType":"YulIdentifier","src":"3399:2:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3381:6:25"},"nodeType":"YulFunctionCall","src":"3381:21:25"},"nodeType":"YulExpressionStatement","src":"3381:21:25"},{"nodeType":"YulVariableDeclaration","src":"3411:27:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3431:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3425:5:25"},"nodeType":"YulFunctionCall","src":"3425:13:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3415:6:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3458:9:25"},{"name":"_1","nodeType":"YulIdentifier","src":"3469:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3454:3:25"},"nodeType":"YulFunctionCall","src":"3454:18:25"},{"name":"length","nodeType":"YulIdentifier","src":"3474:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3447:6:25"},"nodeType":"YulFunctionCall","src":"3447:34:25"},"nodeType":"YulExpressionStatement","src":"3447:34:25"},{"nodeType":"YulVariableDeclaration","src":"3490:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"3499:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3494:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"3559:90:25","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3588:9:25"},{"name":"i","nodeType":"YulIdentifier","src":"3599:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3584:3:25"},"nodeType":"YulFunctionCall","src":"3584:17:25"},{"kind":"number","nodeType":"YulLiteral","src":"3603:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3580:3:25"},"nodeType":"YulFunctionCall","src":"3580:26:25"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3622:6:25"},{"name":"i","nodeType":"YulIdentifier","src":"3630:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3618:3:25"},"nodeType":"YulFunctionCall","src":"3618:14:25"},{"name":"_1","nodeType":"YulIdentifier","src":"3634:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3614:3:25"},"nodeType":"YulFunctionCall","src":"3614:23:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3608:5:25"},"nodeType":"YulFunctionCall","src":"3608:30:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3573:6:25"},"nodeType":"YulFunctionCall","src":"3573:66:25"},"nodeType":"YulExpressionStatement","src":"3573:66:25"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3520:1:25"},{"name":"length","nodeType":"YulIdentifier","src":"3523:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3517:2:25"},"nodeType":"YulFunctionCall","src":"3517:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3531:19:25","statements":[{"nodeType":"YulAssignment","src":"3533:15:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3542:1:25"},{"name":"_1","nodeType":"YulIdentifier","src":"3545:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3538:3:25"},"nodeType":"YulFunctionCall","src":"3538:10:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3533:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"3513:3:25","statements":[]},"src":"3509:140:25"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3673:9:25"},{"name":"length","nodeType":"YulIdentifier","src":"3684:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3669:3:25"},"nodeType":"YulFunctionCall","src":"3669:22:25"},{"kind":"number","nodeType":"YulLiteral","src":"3693:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3665:3:25"},"nodeType":"YulFunctionCall","src":"3665:31:25"},{"kind":"number","nodeType":"YulLiteral","src":"3698:1:25","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3658:6:25"},"nodeType":"YulFunctionCall","src":"3658:42:25"},"nodeType":"YulExpressionStatement","src":"3658:42:25"},{"nodeType":"YulAssignment","src":"3709:62:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3725:9:25"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3744:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"3752:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3740:3:25"},"nodeType":"YulFunctionCall","src":"3740:15:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3761:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3757:3:25"},"nodeType":"YulFunctionCall","src":"3757:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3736:3:25"},"nodeType":"YulFunctionCall","src":"3736:29:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3721:3:25"},"nodeType":"YulFunctionCall","src":"3721:45:25"},{"kind":"number","nodeType":"YulLiteral","src":"3768:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3717:3:25"},"nodeType":"YulFunctionCall","src":"3717:54:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3709:4:25"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3319:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3330:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3341:4:25","type":""}],"src":"3229:548:25"},{"body":{"nodeType":"YulBlock","src":"3876:203:25","statements":[{"nodeType":"YulVariableDeclaration","src":"3886:26:25","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3906:5:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3900:5:25"},"nodeType":"YulFunctionCall","src":"3900:12:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3890:6:25","type":""}]},{"nodeType":"YulAssignment","src":"3921:32:25","value":{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3940:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"3947:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3936:3:25"},"nodeType":"YulFunctionCall","src":"3936:16:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3930:5:25"},"nodeType":"YulFunctionCall","src":"3930:23:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3921:5:25"}]},{"body":{"nodeType":"YulBlock","src":"3990:83:25","statements":[{"nodeType":"YulAssignment","src":"4004:59:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4017:5:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4032:1:25","type":"","value":"3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4039:4:25","type":"","value":"0x20"},{"name":"length","nodeType":"YulIdentifier","src":"4045:6:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4035:3:25"},"nodeType":"YulFunctionCall","src":"4035:17:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4028:3:25"},"nodeType":"YulFunctionCall","src":"4028:25:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4059:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4055:3:25"},"nodeType":"YulFunctionCall","src":"4055:6:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4024:3:25"},"nodeType":"YulFunctionCall","src":"4024:38:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4013:3:25"},"nodeType":"YulFunctionCall","src":"4013:50:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4004:5:25"}]}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3968:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"3976:4:25","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3965:2:25"},"nodeType":"YulFunctionCall","src":"3965:16:25"},"nodeType":"YulIf","src":"3962:111:25"}]},"name":"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"3856:5:25","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3866:5:25","type":""}],"src":"3782:297:25"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value\n    {\n        let length := mload(array)\n        value := mload(add(array, 0x20))\n        if lt(length, 0x20)\n        {\n            value := and(value, shl(shl(3, sub(0x20, length)), not(0)))\n        }\n    }\n}","id":25,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101a060405260206101609081527f68747470733a2f2f626173657061696e742e78797a2f6170692f62727573682f61018052600d906200004190826200031b565b503480156200004f57600080fd5b50604080518082018252600f8082526e084c2e6caa0c2d2dce84084e4eae6d608b1b60208084018290528451808601865260018152603160f81b8183015285518087018752938452838201929092528451808601909552600385526221282160e91b9085015291926000620000c583826200031b565b506001620000d482826200031b565b50620000e6915083905060066200019f565b61012052620000f78160076200019f565b61014052815160208084019190912060e052815190820120610100524660a0526200018560e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c0526200019933620001d8565b6200045c565b6000602083511015620001bf57620001b7836200022a565b9050620001d2565b81620001cc84826200031b565b5060ff90505b92915050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080829050601f8151111562000261578260405163305a27a960e01b8152600401620002589190620003e7565b60405180910390fd5b80516200026e8262000437565b179392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620002a157607f821691505b602082108103620002c257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200031657600081815260208120601f850160051c81016020861015620002f15750805b601f850160051c820191505b818110156200031257828155600101620002fd565b5050505b505050565b81516001600160401b0381111562000337576200033762000276565b6200034f816200034884546200028c565b84620002c8565b602080601f8311600181146200038757600084156200036e5750858301515b600019600386901b1c1916600185901b17855562000312565b600085815260208120601f198616915b82811015620003b85788860151825594840194600190910190840162000397565b5085821015620003d75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083528351808285015260005b818110156200041657858101830151858201604001528201620003f8565b506000604082860101526040601f19601f8301168501019250505092915050565b80516020808301519190811015620002c25760001960209190910360031b1b16919050565b60805160a05160c05160e051610100516101205161014051611c50620004a860003960006109ba0152600061098f01526000505060005050600050506000505060005050611c506000f3fe6080604052600436106101665760003560e01c806370a08231116100d1578063a0712d681161008a578063c87b56dd11610064578063c87b56dd1461040b578063e985e9c51461042b578063ef77c1861461044b578063f2fde38b1461047857600080fd5b8063a0712d68146103b8578063a22cb465146103cb578063b88d4fde146103eb57600080fd5b806370a0823114610308578063715018a6146103285780637e9657b71461033d57806384b0196e1461035d5780638da5cb5b1461038557806395d89b41146103a357600080fd5b80633ccfd60b116101235780633ccfd60b1461026057806342842e0e14610275578063451450ec1461029557806355f804b3146102a85780636352211e146102c85780636c19e783146102e857600080fd5b806301ffc9a71461016b57806306fdde03146101a0578063081812fc146101c2578063095ea7b3146101fa57806318160ddd1461021c57806323b872dd14610240575b600080fd5b34801561017757600080fd5b5061018b610186366004611560565b610498565b60405190151581526020015b60405180910390f35b3480156101ac57600080fd5b506101b56104ea565b60405161019791906115cd565b3480156101ce57600080fd5b506101e26101dd3660046115e0565b61057c565b6040516001600160a01b039091168152602001610197565b34801561020657600080fd5b5061021a610215366004611615565b6105a3565b005b34801561022857600080fd5b5061023260095481565b604051908152602001610197565b34801561024c57600080fd5b5061021a61025b36600461163f565b6106bd565b34801561026c57600080fd5b5061021a6106ee565b34801561028157600080fd5b5061021a61029036600461163f565b6107bb565b61021a6102a336600461167b565b6107d6565b3480156102b457600080fd5b5061021a6102c336600461169d565b610840565b3480156102d457600080fd5b506101e26102e33660046115e0565b610855565b3480156102f457600080fd5b5061021a61030336600461170f565b6108b5565b34801561031457600080fd5b5061023261032336600461170f565b6108df565b34801561033457600080fd5b5061021a610965565b34801561034957600080fd5b5061021a61035836600461167b565b610979565b34801561036957600080fd5b50610372610981565b604051610197979695949392919061172a565b34801561039157600080fd5b506008546001600160a01b03166101e2565b3480156103af57600080fd5b506101b5610a0a565b61021a6103c63660046115e0565b610a19565b3480156103d757600080fd5b5061021a6103e63660046117c0565b610a56565b3480156103f757600080fd5b5061021a610406366004611812565b610a65565b34801561041757600080fd5b506101b56104263660046115e0565b610a9d565b34801561043757600080fd5b5061018b6104463660046118ee565b610b04565b34801561045757600080fd5b506102326104663660046115e0565b600a6020526000908152604090205481565b34801561048457600080fd5b5061021a61049336600461170f565b610b32565b60006001600160e01b031982166380ac58cd60e01b14806104c957506001600160e01b03198216635b5e139f60e01b145b806104e457506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546104f990611921565b80601f016020809104026020016040519081016040528092919081815260200182805461052590611921565b80156105725780601f1061054757610100808354040283529160200191610572565b820191906000526020600020905b81548152906001019060200180831161055557829003601f168201915b5050505050905090565b600061058782610ba8565b506000908152600460205260409020546001600160a01b031690565b60006105ae82610855565b9050806001600160a01b0316836001600160a01b0316036106205760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061063c575061063c8133610b04565b6106ae5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610617565b6106b88383610c07565b505050565b6106c73382610c75565b6106e35760405162461bcd60e51b81526004016106179061195b565b6106b8838383610cd4565b6106f6610e38565b600061070a6008546001600160a01b031690565b604080516000815260208101918290526001600160a01b039290921691479161073391906119a8565b60006040518083038185875af1925050503d8060008114610770576040519150601f19603f3d011682016040523d82523d6000602084013e610775565b606091505b50509050806107b85760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610617565b50565b6106b883838360405180602001604052806000815250610a65565b6107de610e38565b6000821180156107f057506009548211155b61082e5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b6044820152606401610617565b6000918252600a602052604090912055565b610848610e38565b600d6106b8828483611a12565b6000818152600260205260408120546001600160a01b0316806104e45760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610617565b6108bd610e38565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b0382166109495760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610617565b506001600160a01b031660009081526003602052604090205490565b61096d610e38565b6109776000610e92565b565b61082e610e38565b6000606080828080836109b57f00000000000000000000000000000000000000000000000000000000000000006006610ee4565b6109e07f00000000000000000000000000000000000000000000000000000000000000006007610ee4565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6060600180546104f990611921565b610a21610e38565b60098054906000610a3183611ad3565b9190505550610a4233600954610f8f565b6009546000908152600a6020526040902055565b610a61338383610fa9565b5050565b610a6f3383610c75565b610a8b5760405162461bcd60e51b81526004016106179061195b565b610a9784848484611077565b50505050565b6060610aa882610ba8565b6000610ab26110aa565b90506000815111610ad25760405180602001604052806000815250610afd565b80610adc846110b9565b604051602001610aed929190611afa565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610b3a610e38565b6001600160a01b038116610b9f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610617565b6107b881610e92565b6000818152600260205260409020546001600160a01b03166107b85760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610617565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610c3c82610855565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610c8183610855565b9050806001600160a01b0316846001600160a01b03161480610ca85750610ca88185610b04565b80610ccc5750836001600160a01b0316610cc18461057c565b6001600160a01b0316145b949350505050565b826001600160a01b0316610ce782610855565b6001600160a01b031614610d0d5760405162461bcd60e51b815260040161061790611b29565b6001600160a01b038216610d6f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610617565b826001600160a01b0316610d8282610855565b6001600160a01b031614610da85760405162461bcd60e51b815260040161061790611b29565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6008546001600160a01b031633146109775760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610617565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606060ff8314610efe57610ef78361114c565b90506104e4565b818054610f0a90611921565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3690611921565b8015610f835780601f10610f5857610100808354040283529160200191610f83565b820191906000526020600020905b815481529060010190602001808311610f6657829003601f168201915b505050505090506104e4565b610a6182826040518060200160405280600081525061118b565b816001600160a01b0316836001600160a01b03160361100a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610617565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611082848484610cd4565b61108e848484846111be565b610a975760405162461bcd60e51b815260040161061790611b6e565b6060600d80546104f990611921565b606060006110c6836112bf565b600101905060008167ffffffffffffffff8111156110e6576110e66117fc565b6040519080825280601f01601f191660200182016040528015611110576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461111a57509392505050565b6060600061115983611397565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b61119583836113bf565b6111a260008484846111be565b6106b85760405162461bcd60e51b815260040161061790611b6e565b60006001600160a01b0384163b156112b457604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611202903390899088908890600401611bc0565b6020604051808303816000875af192505050801561123d575060408051601f3d908101601f1916820190925261123a91810190611bfd565b60015b61129a573d80801561126b576040519150601f19603f3d011682016040523d82523d6000602084013e611270565b606091505b5080516000036112925760405162461bcd60e51b815260040161061790611b6e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610ccc565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106112fe5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061132a576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061134857662386f26fc10000830492506010015b6305f5e1008310611360576305f5e100830492506008015b612710831061137457612710830492506004015b60648310611386576064830492506002015b600a83106104e45760010192915050565b600060ff8216601f8111156104e457604051632cd44ac360e21b815260040160405180910390fd5b6001600160a01b0382166114155760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610617565b6000818152600260205260409020546001600160a01b03161561147a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610617565b6000818152600260205260409020546001600160a01b0316156114df5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610617565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b0319811681146107b857600080fd5b60006020828403121561157257600080fd5b8135610afd8161154a565b60005b83811015611598578181015183820152602001611580565b50506000910152565b600081518084526115b981602086016020860161157d565b601f01601f19169290920160200192915050565b602081526000610afd60208301846115a1565b6000602082840312156115f257600080fd5b5035919050565b80356001600160a01b038116811461161057600080fd5b919050565b6000806040838503121561162857600080fd5b611631836115f9565b946020939093013593505050565b60008060006060848603121561165457600080fd5b61165d846115f9565b925061166b602085016115f9565b9150604084013590509250925092565b6000806040838503121561168e57600080fd5b50508035926020909101359150565b600080602083850312156116b057600080fd5b823567ffffffffffffffff808211156116c857600080fd5b818501915085601f8301126116dc57600080fd5b8135818111156116eb57600080fd5b8660208285010111156116fd57600080fd5b60209290920196919550909350505050565b60006020828403121561172157600080fd5b610afd826115f9565b60ff60f81b881681526000602060e08184015261174a60e084018a6115a1565b838103604085015261175c818a6115a1565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b818110156117ae57835183529284019291840191600101611792565b50909c9b505050505050505050505050565b600080604083850312156117d357600080fd5b6117dc836115f9565b9150602083013580151581146117f157600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561182857600080fd5b611831856115f9565b935061183f602086016115f9565b925060408501359150606085013567ffffffffffffffff8082111561186357600080fd5b818701915087601f83011261187757600080fd5b813581811115611889576118896117fc565b604051601f8201601f19908116603f011681019083821181831017156118b1576118b16117fc565b816040528281528a60208487010111156118ca57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561190157600080fd5b61190a836115f9565b9150611918602084016115f9565b90509250929050565b600181811c9082168061193557607f821691505b60208210810361195557634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b600082516119ba81846020870161157d565b9190910192915050565b601f8211156106b857600081815260208120601f850160051c810160208610156119eb5750805b601f850160051c820191505b81811015611a0a578281556001016119f7565b505050505050565b67ffffffffffffffff831115611a2a57611a2a6117fc565b611a3e83611a388354611921565b836119c4565b6000601f841160018114611a725760008515611a5a5750838201355b600019600387901b1c1916600186901b178355611acc565b600083815260209020601f19861690835b82811015611aa35786850135825560209485019460019092019101611a83565b5086821015611ac05760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b600060018201611af357634e487b7160e01b600052601160045260246000fd5b5060010190565b60008351611b0c81846020880161157d565b835190830190611b2081836020880161157d565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611bf3908301846115a1565b9695505050505050565b600060208284031215611c0f57600080fd5b8151610afd8161154a56fea2646970667358221220f1cafbaf035bc71ae45f4b14bd7e80cc238732cfd3d42a334f6d655521b4afba64736f6c63430008130033","opcodes":"PUSH2 0x1A0 PUSH1 0x40 MSTORE PUSH1 0x20 PUSH2 0x160 SWAP1 DUP2 MSTORE PUSH32 0x68747470733A2F2F626173657061696E742E78797A2F6170692F62727573682F PUSH2 0x180 MSTORE PUSH1 0xD SWAP1 PUSH3 0x41 SWAP1 DUP3 PUSH3 0x31B JUMP JUMPDEST POP CALLVALUE DUP1 ISZERO PUSH3 0x4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0xF DUP1 DUP3 MSTORE PUSH15 0x84C2E6CAA0C2D2DCE84084E4EAE6D PUSH1 0x8B SHL PUSH1 0x20 DUP1 DUP5 ADD DUP3 SWAP1 MSTORE DUP5 MLOAD DUP1 DUP7 ADD DUP7 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x31 PUSH1 0xF8 SHL DUP2 DUP4 ADD MSTORE DUP6 MLOAD DUP1 DUP8 ADD DUP8 MSTORE SWAP4 DUP5 MSTORE DUP4 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP5 MLOAD DUP1 DUP7 ADD SWAP1 SWAP6 MSTORE PUSH1 0x3 DUP6 MSTORE PUSH3 0x212821 PUSH1 0xE9 SHL SWAP1 DUP6 ADD MSTORE SWAP2 SWAP3 PUSH1 0x0 PUSH3 0xC5 DUP4 DUP3 PUSH3 0x31B JUMP JUMPDEST POP PUSH1 0x1 PUSH3 0xD4 DUP3 DUP3 PUSH3 0x31B JUMP JUMPDEST POP PUSH3 0xE6 SWAP2 POP DUP4 SWAP1 POP PUSH1 0x6 PUSH3 0x19F JUMP JUMPDEST PUSH2 0x120 MSTORE PUSH3 0xF7 DUP2 PUSH1 0x7 PUSH3 0x19F JUMP JUMPDEST PUSH2 0x140 MSTORE DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0xE0 MSTORE DUP2 MLOAD SWAP1 DUP3 ADD KECCAK256 PUSH2 0x100 MSTORE CHAINID PUSH1 0xA0 MSTORE PUSH3 0x185 PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x80 MSTORE POP POP ADDRESS PUSH1 0xC0 MSTORE PUSH3 0x199 CALLER PUSH3 0x1D8 JUMP JUMPDEST PUSH3 0x45C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH3 0x1BF JUMPI PUSH3 0x1B7 DUP4 PUSH3 0x22A JUMP JUMPDEST SWAP1 POP PUSH3 0x1D2 JUMP JUMPDEST DUP2 PUSH3 0x1CC DUP5 DUP3 PUSH3 0x31B JUMP JUMPDEST POP PUSH1 0xFF SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH3 0x261 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x258 SWAP2 SWAP1 PUSH3 0x3E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH3 0x26E DUP3 PUSH3 0x437 JUMP JUMPDEST OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x2A1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x2C2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x316 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x2F1 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x312 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x2FD JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x337 JUMPI PUSH3 0x337 PUSH3 0x276 JUMP JUMPDEST PUSH3 0x34F DUP2 PUSH3 0x348 DUP5 SLOAD PUSH3 0x28C JUMP JUMPDEST DUP5 PUSH3 0x2C8 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x387 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x36E JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x312 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x3B8 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x397 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x3D7 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x416 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH3 0x3F8 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH3 0x2C2 JUMPI PUSH1 0x0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x1C50 PUSH3 0x4A8 PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x9BA ADD MSTORE PUSH1 0x0 PUSH2 0x98F ADD MSTORE PUSH1 0x0 POP POP PUSH1 0x0 POP POP PUSH1 0x0 POP POP PUSH1 0x0 POP POP PUSH1 0x0 POP POP PUSH2 0x1C50 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x166 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xA0712D68 GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x40B JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x42B JUMPI DUP1 PUSH4 0xEF77C186 EQ PUSH2 0x44B JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA0712D68 EQ PUSH2 0x3B8 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3CB JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x308 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x328 JUMPI DUP1 PUSH4 0x7E9657B7 EQ PUSH2 0x33D JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x35D JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x385 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3CCFD60B GT PUSH2 0x123 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x260 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x275 JUMPI DUP1 PUSH4 0x451450EC EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x55F804B3 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0x6C19E783 EQ PUSH2 0x2E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x16B JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x1C2 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x21C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x240 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18B PUSH2 0x186 CALLDATASIZE PUSH1 0x4 PUSH2 0x1560 JUMP JUMPDEST PUSH2 0x498 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B5 PUSH2 0x4EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x197 SWAP2 SWAP1 PUSH2 0x15CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E2 PUSH2 0x1DD CALLDATASIZE PUSH1 0x4 PUSH2 0x15E0 JUMP JUMPDEST PUSH2 0x57C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x197 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x206 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x215 CALLDATASIZE PUSH1 0x4 PUSH2 0x1615 JUMP JUMPDEST PUSH2 0x5A3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x228 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x197 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x25B CALLDATASIZE PUSH1 0x4 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x6BD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x6EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x290 CALLDATASIZE PUSH1 0x4 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x7BB JUMP JUMPDEST PUSH2 0x21A PUSH2 0x2A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x167B JUMP JUMPDEST PUSH2 0x7D6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x2C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x169D JUMP JUMPDEST PUSH2 0x840 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E2 PUSH2 0x2E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x15E0 JUMP JUMPDEST PUSH2 0x855 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x303 CALLDATASIZE PUSH1 0x4 PUSH2 0x170F JUMP JUMPDEST PUSH2 0x8B5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x314 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0x323 CALLDATASIZE PUSH1 0x4 PUSH2 0x170F JUMP JUMPDEST PUSH2 0x8DF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x965 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x349 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x358 CALLDATASIZE PUSH1 0x4 PUSH2 0x167B JUMP JUMPDEST PUSH2 0x979 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x369 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x372 PUSH2 0x981 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x197 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x172A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x391 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1E2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B5 PUSH2 0xA0A JUMP JUMPDEST PUSH2 0x21A PUSH2 0x3C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x15E0 JUMP JUMPDEST PUSH2 0xA19 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x3E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x17C0 JUMP JUMPDEST PUSH2 0xA56 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x406 CALLDATASIZE PUSH1 0x4 PUSH2 0x1812 JUMP JUMPDEST PUSH2 0xA65 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B5 PUSH2 0x426 CALLDATASIZE PUSH1 0x4 PUSH2 0x15E0 JUMP JUMPDEST PUSH2 0xA9D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x437 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18B PUSH2 0x446 CALLDATASIZE PUSH1 0x4 PUSH2 0x18EE JUMP JUMPDEST PUSH2 0xB04 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x457 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0x466 CALLDATASIZE PUSH1 0x4 PUSH2 0x15E0 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x484 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x493 CALLDATASIZE PUSH1 0x4 PUSH2 0x170F JUMP JUMPDEST PUSH2 0xB32 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x4C9 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x4E4 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x4F9 SWAP1 PUSH2 0x1921 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x525 SWAP1 PUSH2 0x1921 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x572 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x547 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x572 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x555 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x587 DUP3 PUSH2 0xBA8 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5AE DUP3 PUSH2 0x855 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x620 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x63C JUMPI POP PUSH2 0x63C DUP2 CALLER PUSH2 0xB04 JUMP JUMPDEST PUSH2 0x6AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x617 JUMP JUMPDEST PUSH2 0x6B8 DUP4 DUP4 PUSH2 0xC07 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x6C7 CALLER DUP3 PUSH2 0xC75 JUMP JUMPDEST PUSH2 0x6E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x617 SWAP1 PUSH2 0x195B JUMP JUMPDEST PUSH2 0x6B8 DUP4 DUP4 DUP4 PUSH2 0xCD4 JUMP JUMPDEST PUSH2 0x6F6 PUSH2 0xE38 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x70A PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SELFBALANCE SWAP2 PUSH2 0x733 SWAP2 SWAP1 PUSH2 0x19A8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x770 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x775 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x7B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x617 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x6B8 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xA65 JUMP JUMPDEST PUSH2 0x7DE PUSH2 0xE38 JUMP JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x7F0 JUMPI POP PUSH1 0x9 SLOAD DUP3 GT ISZERO JUMPDEST PUSH2 0x82E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x125B9D985B1A59081D1BDAD95B9259 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x617 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH2 0x848 PUSH2 0xE38 JUMP JUMPDEST PUSH1 0xD PUSH2 0x6B8 DUP3 DUP5 DUP4 PUSH2 0x1A12 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x4E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x617 JUMP JUMPDEST PUSH2 0x8BD PUSH2 0xE38 JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x949 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x617 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x96D PUSH2 0xE38 JUMP JUMPDEST PUSH2 0x977 PUSH1 0x0 PUSH2 0xE92 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x82E PUSH2 0xE38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP3 DUP1 DUP1 DUP4 PUSH2 0x9B5 PUSH32 0x0 PUSH1 0x6 PUSH2 0xEE4 JUMP JUMPDEST PUSH2 0x9E0 PUSH32 0x0 PUSH1 0x7 PUSH2 0xEE4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x4F9 SWAP1 PUSH2 0x1921 JUMP JUMPDEST PUSH2 0xA21 PUSH2 0xE38 JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0xA31 DUP4 PUSH2 0x1AD3 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0xA42 CALLER PUSH1 0x9 SLOAD PUSH2 0xF8F JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMP JUMPDEST PUSH2 0xA61 CALLER DUP4 DUP4 PUSH2 0xFA9 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xA6F CALLER DUP4 PUSH2 0xC75 JUMP JUMPDEST PUSH2 0xA8B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x617 SWAP1 PUSH2 0x195B JUMP JUMPDEST PUSH2 0xA97 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1077 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xAA8 DUP3 PUSH2 0xBA8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAB2 PUSH2 0x10AA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0xAD2 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xAFD JUMP JUMPDEST DUP1 PUSH2 0xADC DUP5 PUSH2 0x10B9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xAED SWAP3 SWAP2 SWAP1 PUSH2 0x1AFA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0xB3A PUSH2 0xE38 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xB9F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x617 JUMP JUMPDEST PUSH2 0x7B8 DUP2 PUSH2 0xE92 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x617 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0xC3C DUP3 PUSH2 0x855 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC81 DUP4 PUSH2 0x855 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xCA8 JUMPI POP PUSH2 0xCA8 DUP2 DUP6 PUSH2 0xB04 JUMP JUMPDEST DUP1 PUSH2 0xCCC JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xCC1 DUP5 PUSH2 0x57C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xCE7 DUP3 PUSH2 0x855 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xD0D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x617 SWAP1 PUSH2 0x1B29 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD6F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x617 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD82 DUP3 PUSH2 0x855 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xDA8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x617 SWAP1 PUSH2 0x1B29 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x977 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x617 JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0xEFE JUMPI PUSH2 0xEF7 DUP4 PUSH2 0x114C JUMP JUMPDEST SWAP1 POP PUSH2 0x4E4 JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0xF0A SWAP1 PUSH2 0x1921 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF36 SWAP1 PUSH2 0x1921 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF83 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF58 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF83 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF66 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x4E4 JUMP JUMPDEST PUSH2 0xA61 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x118B JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x100A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x617 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1082 DUP5 DUP5 DUP5 PUSH2 0xCD4 JUMP JUMPDEST PUSH2 0x108E DUP5 DUP5 DUP5 DUP5 PUSH2 0x11BE JUMP JUMPDEST PUSH2 0xA97 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x617 SWAP1 PUSH2 0x1B6E JUMP JUMPDEST PUSH1 0x60 PUSH1 0xD DUP1 SLOAD PUSH2 0x4F9 SWAP1 PUSH2 0x1921 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x10C6 DUP4 PUSH2 0x12BF JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10E6 JUMPI PUSH2 0x10E6 PUSH2 0x17FC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1110 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x111A JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1159 DUP4 PUSH2 0x1397 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x1195 DUP4 DUP4 PUSH2 0x13BF JUMP JUMPDEST PUSH2 0x11A2 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x11BE JUMP JUMPDEST PUSH2 0x6B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x617 SWAP1 PUSH2 0x1B6E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x12B4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x1202 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1BC0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x123D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x123A SWAP2 DUP2 ADD SWAP1 PUSH2 0x1BFD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x129A JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x126B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1270 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1292 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x617 SWAP1 PUSH2 0x1B6E JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0xCCC JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x12FE JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x132A JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1348 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1360 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1374 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1386 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x4E4 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x4E4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1415 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x617 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x147A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x617 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x14DF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x617 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE MLOAD DUP4 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x7B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAFD DUP2 PUSH2 0x154A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1598 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1580 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x15B9 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x157D JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xAFD PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x15A1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1610 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1628 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1631 DUP4 PUSH2 0x15F9 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1654 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x165D DUP5 PUSH2 0x15F9 JUMP JUMPDEST SWAP3 POP PUSH2 0x166B PUSH1 0x20 DUP6 ADD PUSH2 0x15F9 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x168E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x16B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x16C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x16DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x16EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x16FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1721 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAFD DUP3 PUSH2 0x15F9 JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0xE0 DUP2 DUP5 ADD MSTORE PUSH2 0x174A PUSH1 0xE0 DUP5 ADD DUP11 PUSH2 0x15A1 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x175C DUP2 DUP11 PUSH2 0x15A1 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD DUP8 SWAP1 MSTORE DUP5 DUP2 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE DUP4 DUP8 ADD SWAP3 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17AE JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1792 JUMP JUMPDEST POP SWAP1 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17DC DUP4 PUSH2 0x15F9 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x17F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1828 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1831 DUP6 PUSH2 0x15F9 JUMP JUMPDEST SWAP4 POP PUSH2 0x183F PUSH1 0x20 DUP7 ADD PUSH2 0x15F9 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1863 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1877 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1889 JUMPI PUSH2 0x1889 PUSH2 0x17FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x18B1 JUMPI PUSH2 0x18B1 PUSH2 0x17FC JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x18CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1901 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x190A DUP4 PUSH2 0x15F9 JUMP JUMPDEST SWAP2 POP PUSH2 0x1918 PUSH1 0x20 DUP5 ADD PUSH2 0x15F9 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1935 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1955 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x19BA DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x157D JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x6B8 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x19EB JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1A0A JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x19F7 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x1A2A JUMPI PUSH2 0x1A2A PUSH2 0x17FC JUMP JUMPDEST PUSH2 0x1A3E DUP4 PUSH2 0x1A38 DUP4 SLOAD PUSH2 0x1921 JUMP JUMPDEST DUP4 PUSH2 0x19C4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP5 GT PUSH1 0x1 DUP2 EQ PUSH2 0x1A72 JUMPI PUSH1 0x0 DUP6 ISZERO PUSH2 0x1A5A JUMPI POP DUP4 DUP3 ADD CALLDATALOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP8 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP7 SWAP1 SHL OR DUP4 SSTORE PUSH2 0x1ACC JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP1 DUP4 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1AA3 JUMPI DUP7 DUP6 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x1A83 JUMP JUMPDEST POP DUP7 DUP3 LT ISZERO PUSH2 0x1AC0 JUMPI PUSH1 0x0 NOT PUSH1 0xF8 DUP9 PUSH1 0x3 SHL AND SHR NOT DUP5 DUP8 ADD CALLDATALOAD AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP6 PUSH1 0x1 SHL ADD DUP4 SSTORE JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1AF3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1B0C DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x157D JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x1B20 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x157D JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1BF3 SWAP1 DUP4 ADD DUP5 PUSH2 0x15A1 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xAFD DUP2 PUSH2 0x154A JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL 0xCA 0xFB 0xAF SUB JUMPDEST 0xC7 BYTE 0xE4 0x5F 0x4B EQ 0xBD PUSH31 0x80CC238732CFD3D42A334F6D655521B4AFBA64736F6C634300081300330000 ","sourceMap":"895:59:24:-:0;599:1355;895:59;;599:1355;895:59;;;;;;;;;;;;:::i;:::-;;599:1355;;;;;;;;;-1:-1:-1;3178:431:17;;;;;;;;;;;;-1:-1:-1;;;3178:431:17;;;;;;;;;;;;;;;;;-1:-1:-1;;;3178:431:17;;;;1390:113:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1390:113:7;;;;3178:431:17;;-1:-1:-1;1456:13:7;1390:113;-1:-1:-1;1456:13:7;:::i;:::-;-1:-1:-1;1479:7:7;:17;1489:7;1479;:17;:::i;:::-;-1:-1:-1;3251:45:17;;-1:-1:-1;3251:4:17;;-1:-1:-1;3282:13:17;3251:30;:45::i;:::-;3243:53;;3317:51;:7;3351:16;3317:33;:51::i;:::-;3306:62;;3392:22;;;;;;;;;;3378:36;;3441:25;;;;;;3424:42;;3494:13;3477:30;;3542:23;4077:11;;4090:14;;4054:81;;;1929:95;4054:81;;;2994:25:25;3035:18;;;3028:34;;;;3078:18;;;3071:34;4106:13:17;3121:18:25;;;3114:34;4129:4:17;3164:19:25;;;3157:61;4018:7:17;;2966:19:25;;4054:81:17;;;;;;;;;;;;4044:92;;;;;;4037:99;;3963:180;;3542:23;3517:48;;-1:-1:-1;;3597:4:17;3575:27;;936:32:0;734:10:12;936:18:0;:32::i;:::-;599:1355:24;;2895:341:13;2991:11;3040:2;3024:5;3018:19;:24;3014:216;;;3065:20;3079:5;3065:13;:20::i;:::-;3058:27;;;;3014:216;3142:5;3116:46;3157:5;3142;3116:46;:::i;:::-;-1:-1:-1;1371:66:13;;-1:-1:-1;3014:216:13;2895:341;;;;:::o;2426:187:0:-;2518:6;;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;;2566:40;;2518:6;;;2534:17;2518:6;;2566:40;;2499:16;;2566:40;2489:124;2426:187;:::o;1689:286:13:-;1754:11;1777:17;1803:3;1777:30;;1835:2;1821:4;:11;:16;1817:72;;;1874:3;1860:18;;-1:-1:-1;;;1860:18:13;;;;;;;;:::i;:::-;;;;;;;;1817:72;1955:11;;1938:13;1955:4;1938:13;:::i;:::-;1930:36;;1689:286;-1:-1:-1;;;1689:286:13:o;14:127:25:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:545::-;759:2;754:3;751:11;748:448;;;795:1;820:5;816:2;809:17;865:4;861:2;851:19;935:2;923:10;919:19;916:1;912:27;906:4;902:38;971:4;959:10;956:20;953:47;;;-1:-1:-1;994:4:25;953:47;1049:2;1044:3;1040:12;1037:1;1033:20;1027:4;1023:31;1013:41;;1104:82;1122:2;1115:5;1112:13;1104:82;;;1167:17;;;1148:1;1137:13;1104:82;;;1108:3;;;748:448;657:545;;;:::o;1378:1352::-;1498:10;;-1:-1:-1;;;;;1520:30:25;;1517:56;;;1553:18;;:::i;:::-;1582:97;1672:6;1632:38;1664:4;1658:11;1632:38;:::i;:::-;1626:4;1582:97;:::i;:::-;1734:4;;1798:2;1787:14;;1815:1;1810:663;;;;2517:1;2534:6;2531:89;;;-1:-1:-1;2586:19:25;;;2580:26;2531:89;-1:-1:-1;;1335:1:25;1331:11;;;1327:24;1323:29;1313:40;1359:1;1355:11;;;1310:57;2633:81;;1780:944;;1810:663;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1846:20:25;;;1964:236;1978:7;1975:1;1972:14;1964:236;;;2067:19;;;2061:26;2046:42;;2159:27;;;;2127:1;2115:14;;;;1994:19;;1964:236;;;1968:3;2228:6;2219:7;2216:19;2213:201;;;2289:19;;;2283:26;-1:-1:-1;;2372:1:25;2368:14;;;2384:3;2364:24;2360:37;2356:42;2341:58;2326:74;;2213:201;-1:-1:-1;;;;;2460:1:25;2444:14;;;2440:22;2427:36;;-1:-1:-1;1378:1352:25:o;3229:548::-;3341:4;3370:2;3399;3388:9;3381:21;3431:6;3425:13;3474:6;3469:2;3458:9;3454:18;3447:34;3499:1;3509:140;3523:6;3520:1;3517:13;3509:140;;;3618:14;;;3614:23;;3608:30;3584:17;;;3603:2;3580:26;3573:66;3538:10;;3509:140;;;3513:3;3698:1;3693:2;3684:6;3673:9;3669:22;3665:31;3658:42;3768:2;3761;3757:7;3752:2;3744:6;3740:15;3736:29;3725:9;3721:45;3717:54;3709:62;;;;3229:548;;;;:::o;3782:297::-;3900:12;;3947:4;3936:16;;;3930:23;;3900:12;3965:16;;3962:111;;;-1:-1:-1;;4039:4:25;4035:17;;;;4032:1;4028:25;4024:38;4013:50;;3782:297;-1:-1:-1;3782:297:25:o;:::-;599:1355:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_2463":{"entryPoint":null,"id":2463,"parameterSlots":4,"returnSlots":0},"@_approve_2329":{"entryPoint":3079,"id":2329,"parameterSlots":2,"returnSlots":0},"@_baseURI_5930":{"entryPoint":4266,"id":5930,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_2450":{"entryPoint":null,"id":2450,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_2437":{"entryPoint":4542,"id":2437,"parameterSlots":4,"returnSlots":1},"@_checkOwner_54":{"entryPoint":3640,"id":54,"parameterSlots":0,"returnSlots":0},"@_exists_1998":{"entryPoint":null,"id":1998,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_2032":{"entryPoint":3189,"id":2032,"parameterSlots":2,"returnSlots":1},"@_mint_2153":{"entryPoint":5055,"id":2153,"parameterSlots":2,"returnSlots":0},"@_msgSender_2982":{"entryPoint":null,"id":2982,"parameterSlots":0,"returnSlots":1},"@_ownerOf_1980":{"entryPoint":null,"id":1980,"parameterSlots":1,"returnSlots":1},"@_requireMinted_2375":{"entryPoint":2984,"id":2375,"parameterSlots":1,"returnSlots":0},"@_safeMint_2047":{"entryPoint":3983,"id":2047,"parameterSlots":2,"returnSlots":0},"@_safeMint_2076":{"entryPoint":4491,"id":2076,"parameterSlots":3,"returnSlots":0},"@_safeTransfer_1967":{"entryPoint":4215,"id":1967,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_2361":{"entryPoint":4009,"id":2361,"parameterSlots":3,"returnSlots":0},"@_transferOwnership_111":{"entryPoint":3730,"id":111,"parameterSlots":1,"returnSlots":0},"@_transfer_2305":{"entryPoint":3284,"id":2305,"parameterSlots":3,"returnSlots":0},"@approve_1809":{"entryPoint":1443,"id":1809,"parameterSlots":2,"returnSlots":0},"@balanceOf_1670":{"entryPoint":2271,"id":1670,"parameterSlots":1,"returnSlots":1},"@byteLength_3117":{"entryPoint":5015,"id":3117,"parameterSlots":1,"returnSlots":1},"@eip712Domain_4124":{"entryPoint":2433,"id":4124,"parameterSlots":0,"returnSlots":7},"@getApproved_1827":{"entryPoint":1404,"id":1827,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_1862":{"entryPoint":2820,"id":1862,"parameterSlots":2,"returnSlots":1},"@isContract_2658":{"entryPoint":null,"id":2658,"parameterSlots":1,"returnSlots":1},"@log10_4963":{"entryPoint":4799,"id":4963,"parameterSlots":1,"returnSlots":1},"@mint_5894":{"entryPoint":2585,"id":5894,"parameterSlots":1,"returnSlots":0},"@name_1708":{"entryPoint":1258,"id":1708,"parameterSlots":0,"returnSlots":1},"@ownerOf_1698":{"entryPoint":2133,"id":1698,"parameterSlots":1,"returnSlots":1},"@owner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_68":{"entryPoint":2405,"id":68,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_1908":{"entryPoint":1979,"id":1908,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_1938":{"entryPoint":2661,"id":1938,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_1844":{"entryPoint":2646,"id":1844,"parameterSlots":2,"returnSlots":0},"@setBaseURI_5954":{"entryPoint":2112,"id":5954,"parameterSlots":2,"returnSlots":0},"@setSigner_5942":{"entryPoint":2229,"id":5942,"parameterSlots":1,"returnSlots":0},"@setStrength_5970":{"entryPoint":2425,"id":5970,"parameterSlots":2,"returnSlots":0},"@strengths_5862":{"entryPoint":null,"id":5862,"parameterSlots":0,"returnSlots":0},"@supportsInterface_1646":{"entryPoint":1176,"id":1646,"parameterSlots":1,"returnSlots":1},"@supportsInterface_4247":{"entryPoint":null,"id":4247,"parameterSlots":1,"returnSlots":1},"@symbol_1718":{"entryPoint":2570,"id":1718,"parameterSlots":0,"returnSlots":1},"@toStringWithFallback_3184":{"entryPoint":3812,"id":3184,"parameterSlots":2,"returnSlots":1},"@toString_3085":{"entryPoint":4428,"id":3085,"parameterSlots":1,"returnSlots":1},"@toString_3385":{"entryPoint":4281,"id":3385,"parameterSlots":1,"returnSlots":1},"@tokenURI_1757":{"entryPoint":2717,"id":1757,"parameterSlots":1,"returnSlots":1},"@totalSupply_5858":{"entryPoint":null,"id":5858,"parameterSlots":0,"returnSlots":0},"@transferFrom_1889":{"entryPoint":1725,"id":1889,"parameterSlots":3,"returnSlots":0},"@transferOwnership_91":{"entryPoint":2866,"id":91,"parameterSlots":1,"returnSlots":0},"@upgrade_5921":{"entryPoint":2006,"id":5921,"parameterSlots":2,"returnSlots":0},"@withdraw_5998":{"entryPoint":1774,"id":5998,"parameterSlots":0,"returnSlots":0},"abi_decode_address":{"entryPoint":5625,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":5903,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":6382,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":5695,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":6162,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":6080,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":5653,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":5472,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":7165,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_calldata_ptr":{"entryPoint":5789,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256":{"entryPoint":5600,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":5755,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_string":{"entryPoint":5537,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":6568,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":6906,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":7104,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":5930,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5581,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6491,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7022,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6953,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_47dcc88603f32730c5f1349ee02d9fe469c193c742f38ce12c7b0ba84c66c8a4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":6596,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_calldata_ptr_to_t_string_storage":{"entryPoint":6674,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":5501,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":6433,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":6867,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6140,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":5450,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:17007:25","statements":[{"nodeType":"YulBlock","src":"6:3:25","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:87:25","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:25"},"nodeType":"YulFunctionCall","src":"125:12:25"},"nodeType":"YulExpressionStatement","src":"125:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"108:10:25","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"99:3:25"},"nodeType":"YulFunctionCall","src":"99:20:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:25"},"nodeType":"YulFunctionCall","src":"88:32:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:25"},"nodeType":"YulFunctionCall","src":"78:43:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:25"},"nodeType":"YulFunctionCall","src":"71:51:25"},"nodeType":"YulIf","src":"68:71:25"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:25","type":""}],"src":"14:131:25"},{"body":{"nodeType":"YulBlock","src":"219:176:25","statements":[{"body":{"nodeType":"YulBlock","src":"265:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"274:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"277:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"267:6:25"},"nodeType":"YulFunctionCall","src":"267:12:25"},"nodeType":"YulExpressionStatement","src":"267:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"240:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"249:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"236:3:25"},"nodeType":"YulFunctionCall","src":"236:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"261:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"232:3:25"},"nodeType":"YulFunctionCall","src":"232:32:25"},"nodeType":"YulIf","src":"229:52:25"},{"nodeType":"YulVariableDeclaration","src":"290:36:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"316:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"303:12:25"},"nodeType":"YulFunctionCall","src":"303:23:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"294:5:25","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"359:5:25"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"335:23:25"},"nodeType":"YulFunctionCall","src":"335:30:25"},"nodeType":"YulExpressionStatement","src":"335:30:25"},{"nodeType":"YulAssignment","src":"374:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"384:5:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"374:6:25"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"185:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"196:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"208:6:25","type":""}],"src":"150:245:25"},{"body":{"nodeType":"YulBlock","src":"495:92:25","statements":[{"nodeType":"YulAssignment","src":"505:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"517:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"528:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"513:3:25"},"nodeType":"YulFunctionCall","src":"513:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"505:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"547:9:25"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"572:6:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"565:6:25"},"nodeType":"YulFunctionCall","src":"565:14:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"558:6:25"},"nodeType":"YulFunctionCall","src":"558:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"540:6:25"},"nodeType":"YulFunctionCall","src":"540:41:25"},"nodeType":"YulExpressionStatement","src":"540:41:25"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"464:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"475:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"486:4:25","type":""}],"src":"400:187:25"},{"body":{"nodeType":"YulBlock","src":"658:184:25","statements":[{"nodeType":"YulVariableDeclaration","src":"668:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"677:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"672:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"737:63:25","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"762:3:25"},{"name":"i","nodeType":"YulIdentifier","src":"767:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"758:3:25"},"nodeType":"YulFunctionCall","src":"758:11:25"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"781:3:25"},{"name":"i","nodeType":"YulIdentifier","src":"786:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:25"},"nodeType":"YulFunctionCall","src":"777:11:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"771:5:25"},"nodeType":"YulFunctionCall","src":"771:18:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"751:6:25"},"nodeType":"YulFunctionCall","src":"751:39:25"},"nodeType":"YulExpressionStatement","src":"751:39:25"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"698:1:25"},{"name":"length","nodeType":"YulIdentifier","src":"701:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"695:2:25"},"nodeType":"YulFunctionCall","src":"695:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"709:19:25","statements":[{"nodeType":"YulAssignment","src":"711:15:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"720:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"723:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"716:3:25"},"nodeType":"YulFunctionCall","src":"716:10:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"711:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"691:3:25","statements":[]},"src":"687:113:25"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"820:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"825:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"816:3:25"},"nodeType":"YulFunctionCall","src":"816:16:25"},{"kind":"number","nodeType":"YulLiteral","src":"834:1:25","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"809:6:25"},"nodeType":"YulFunctionCall","src":"809:27:25"},"nodeType":"YulExpressionStatement","src":"809:27:25"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"636:3:25","type":""},{"name":"dst","nodeType":"YulTypedName","src":"641:3:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"646:6:25","type":""}],"src":"592:250:25"},{"body":{"nodeType":"YulBlock","src":"897:221:25","statements":[{"nodeType":"YulVariableDeclaration","src":"907:26:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"927:5:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"921:5:25"},"nodeType":"YulFunctionCall","src":"921:12:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"911:6:25","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"949:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"954:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"942:6:25"},"nodeType":"YulFunctionCall","src":"942:19:25"},"nodeType":"YulExpressionStatement","src":"942:19:25"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1009:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"1016:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1005:3:25"},"nodeType":"YulFunctionCall","src":"1005:16:25"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1027:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"1032:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1023:3:25"},"nodeType":"YulFunctionCall","src":"1023:14:25"},{"name":"length","nodeType":"YulIdentifier","src":"1039:6:25"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"970:34:25"},"nodeType":"YulFunctionCall","src":"970:76:25"},"nodeType":"YulExpressionStatement","src":"970:76:25"},{"nodeType":"YulAssignment","src":"1055:57:25","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1070:3:25"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1083:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"1091:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1079:3:25"},"nodeType":"YulFunctionCall","src":"1079:15:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1100:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1096:3:25"},"nodeType":"YulFunctionCall","src":"1096:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1075:3:25"},"nodeType":"YulFunctionCall","src":"1075:29:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1066:3:25"},"nodeType":"YulFunctionCall","src":"1066:39:25"},{"kind":"number","nodeType":"YulLiteral","src":"1107:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1062:3:25"},"nodeType":"YulFunctionCall","src":"1062:50:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1055:3:25"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"874:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"881:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"889:3:25","type":""}],"src":"847:271:25"},{"body":{"nodeType":"YulBlock","src":"1244:99:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1261:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1272:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1254:6:25"},"nodeType":"YulFunctionCall","src":"1254:21:25"},"nodeType":"YulExpressionStatement","src":"1254:21:25"},{"nodeType":"YulAssignment","src":"1284:53:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1310:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1322:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1333:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1318:3:25"},"nodeType":"YulFunctionCall","src":"1318:18:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1292:17:25"},"nodeType":"YulFunctionCall","src":"1292:45:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1284:4:25"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1213:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1224:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1235:4:25","type":""}],"src":"1123:220:25"},{"body":{"nodeType":"YulBlock","src":"1418:110:25","statements":[{"body":{"nodeType":"YulBlock","src":"1464:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1473:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1476:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1466:6:25"},"nodeType":"YulFunctionCall","src":"1466:12:25"},"nodeType":"YulExpressionStatement","src":"1466:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1439:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"1448:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1435:3:25"},"nodeType":"YulFunctionCall","src":"1435:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"1460:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1431:3:25"},"nodeType":"YulFunctionCall","src":"1431:32:25"},"nodeType":"YulIf","src":"1428:52:25"},{"nodeType":"YulAssignment","src":"1489:33:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1512:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1499:12:25"},"nodeType":"YulFunctionCall","src":"1499:23:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1489:6:25"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1384:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1395:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1407:6:25","type":""}],"src":"1348:180:25"},{"body":{"nodeType":"YulBlock","src":"1634:102:25","statements":[{"nodeType":"YulAssignment","src":"1644:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1656:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1667:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1652:3:25"},"nodeType":"YulFunctionCall","src":"1652:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1644:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1686:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1701:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1717:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1722:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1713:3:25"},"nodeType":"YulFunctionCall","src":"1713:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"1726:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1709:3:25"},"nodeType":"YulFunctionCall","src":"1709:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1697:3:25"},"nodeType":"YulFunctionCall","src":"1697:32:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1679:6:25"},"nodeType":"YulFunctionCall","src":"1679:51:25"},"nodeType":"YulExpressionStatement","src":"1679:51:25"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1603:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1614:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1625:4:25","type":""}],"src":"1533:203:25"},{"body":{"nodeType":"YulBlock","src":"1790:124:25","statements":[{"nodeType":"YulAssignment","src":"1800:29:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1822:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1809:12:25"},"nodeType":"YulFunctionCall","src":"1809:20:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1800:5:25"}]},{"body":{"nodeType":"YulBlock","src":"1892:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1901:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1904:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1894:6:25"},"nodeType":"YulFunctionCall","src":"1894:12:25"},"nodeType":"YulExpressionStatement","src":"1894:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1851:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1862:5:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1877:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1882:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1873:3:25"},"nodeType":"YulFunctionCall","src":"1873:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"1886:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1869:3:25"},"nodeType":"YulFunctionCall","src":"1869:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1858:3:25"},"nodeType":"YulFunctionCall","src":"1858:31:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1848:2:25"},"nodeType":"YulFunctionCall","src":"1848:42:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1841:6:25"},"nodeType":"YulFunctionCall","src":"1841:50:25"},"nodeType":"YulIf","src":"1838:70:25"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1769:6:25","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1780:5:25","type":""}],"src":"1741:173:25"},{"body":{"nodeType":"YulBlock","src":"2006:167:25","statements":[{"body":{"nodeType":"YulBlock","src":"2052:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2061:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2064:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2054:6:25"},"nodeType":"YulFunctionCall","src":"2054:12:25"},"nodeType":"YulExpressionStatement","src":"2054:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2027:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"2036:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2023:3:25"},"nodeType":"YulFunctionCall","src":"2023:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"2048:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2019:3:25"},"nodeType":"YulFunctionCall","src":"2019:32:25"},"nodeType":"YulIf","src":"2016:52:25"},{"nodeType":"YulAssignment","src":"2077:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2106:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2087:18:25"},"nodeType":"YulFunctionCall","src":"2087:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2077:6:25"}]},{"nodeType":"YulAssignment","src":"2125:42:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2152:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"2163:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2148:3:25"},"nodeType":"YulFunctionCall","src":"2148:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2135:12:25"},"nodeType":"YulFunctionCall","src":"2135:32:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2125:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1964:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1975:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1987:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1995:6:25","type":""}],"src":"1919:254:25"},{"body":{"nodeType":"YulBlock","src":"2279:76:25","statements":[{"nodeType":"YulAssignment","src":"2289:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2301:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"2312:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2297:3:25"},"nodeType":"YulFunctionCall","src":"2297:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2289:4:25"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2331:9:25"},{"name":"value0","nodeType":"YulIdentifier","src":"2342:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2324:6:25"},"nodeType":"YulFunctionCall","src":"2324:25:25"},"nodeType":"YulExpressionStatement","src":"2324:25:25"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2248:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2259:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2270:4:25","type":""}],"src":"2178:177:25"},{"body":{"nodeType":"YulBlock","src":"2464:224:25","statements":[{"body":{"nodeType":"YulBlock","src":"2510:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2519:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2522:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2512:6:25"},"nodeType":"YulFunctionCall","src":"2512:12:25"},"nodeType":"YulExpressionStatement","src":"2512:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2485:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"2494:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2481:3:25"},"nodeType":"YulFunctionCall","src":"2481:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"2506:2:25","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2477:3:25"},"nodeType":"YulFunctionCall","src":"2477:32:25"},"nodeType":"YulIf","src":"2474:52:25"},{"nodeType":"YulAssignment","src":"2535:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2564:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2545:18:25"},"nodeType":"YulFunctionCall","src":"2545:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2535:6:25"}]},{"nodeType":"YulAssignment","src":"2583:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2616:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"2627:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2612:3:25"},"nodeType":"YulFunctionCall","src":"2612:18:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2593:18:25"},"nodeType":"YulFunctionCall","src":"2593:38:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2583:6:25"}]},{"nodeType":"YulAssignment","src":"2640:42:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2667:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"2678:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2663:3:25"},"nodeType":"YulFunctionCall","src":"2663:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2650:12:25"},"nodeType":"YulFunctionCall","src":"2650:32:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2640:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2414:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2425:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2437:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2445:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2453:6:25","type":""}],"src":"2360:328:25"},{"body":{"nodeType":"YulBlock","src":"2780:161:25","statements":[{"body":{"nodeType":"YulBlock","src":"2826:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2835:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2838:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2828:6:25"},"nodeType":"YulFunctionCall","src":"2828:12:25"},"nodeType":"YulExpressionStatement","src":"2828:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2801:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"2810:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2797:3:25"},"nodeType":"YulFunctionCall","src":"2797:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"2822:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2793:3:25"},"nodeType":"YulFunctionCall","src":"2793:32:25"},"nodeType":"YulIf","src":"2790:52:25"},{"nodeType":"YulAssignment","src":"2851:33:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2874:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2861:12:25"},"nodeType":"YulFunctionCall","src":"2861:23:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2851:6:25"}]},{"nodeType":"YulAssignment","src":"2893:42:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2920:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"2931:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2916:3:25"},"nodeType":"YulFunctionCall","src":"2916:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2903:12:25"},"nodeType":"YulFunctionCall","src":"2903:32:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2893:6:25"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2738:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2749:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2761:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2769:6:25","type":""}],"src":"2693:248:25"},{"body":{"nodeType":"YulBlock","src":"3036:502:25","statements":[{"body":{"nodeType":"YulBlock","src":"3082:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3091:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3094:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3084:6:25"},"nodeType":"YulFunctionCall","src":"3084:12:25"},"nodeType":"YulExpressionStatement","src":"3084:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3057:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"3066:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3053:3:25"},"nodeType":"YulFunctionCall","src":"3053:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"3078:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3049:3:25"},"nodeType":"YulFunctionCall","src":"3049:32:25"},"nodeType":"YulIf","src":"3046:52:25"},{"nodeType":"YulVariableDeclaration","src":"3107:37:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3134:9:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3121:12:25"},"nodeType":"YulFunctionCall","src":"3121:23:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3111:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3153:28:25","value":{"kind":"number","nodeType":"YulLiteral","src":"3163:18:25","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3157:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"3208:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3217:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3220:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3210:6:25"},"nodeType":"YulFunctionCall","src":"3210:12:25"},"nodeType":"YulExpressionStatement","src":"3210:12:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3196:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"3204:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3193:2:25"},"nodeType":"YulFunctionCall","src":"3193:14:25"},"nodeType":"YulIf","src":"3190:34:25"},{"nodeType":"YulVariableDeclaration","src":"3233:32:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3247:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"3258:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3243:3:25"},"nodeType":"YulFunctionCall","src":"3243:22:25"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3237:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"3313:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3322:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3325:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3315:6:25"},"nodeType":"YulFunctionCall","src":"3315:12:25"},"nodeType":"YulExpressionStatement","src":"3315:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3292:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"3296:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3288:3:25"},"nodeType":"YulFunctionCall","src":"3288:13:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3303:7:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3284:3:25"},"nodeType":"YulFunctionCall","src":"3284:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3277:6:25"},"nodeType":"YulFunctionCall","src":"3277:35:25"},"nodeType":"YulIf","src":"3274:55:25"},{"nodeType":"YulVariableDeclaration","src":"3338:30:25","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3365:2:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3352:12:25"},"nodeType":"YulFunctionCall","src":"3352:16:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3342:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"3395:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3404:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3407:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3397:6:25"},"nodeType":"YulFunctionCall","src":"3397:12:25"},"nodeType":"YulExpressionStatement","src":"3397:12:25"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3383:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"3391:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3380:2:25"},"nodeType":"YulFunctionCall","src":"3380:14:25"},"nodeType":"YulIf","src":"3377:34:25"},{"body":{"nodeType":"YulBlock","src":"3461:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3470:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3473:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3463:6:25"},"nodeType":"YulFunctionCall","src":"3463:12:25"},"nodeType":"YulExpressionStatement","src":"3463:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3434:2:25"},{"name":"length","nodeType":"YulIdentifier","src":"3438:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3430:3:25"},"nodeType":"YulFunctionCall","src":"3430:15:25"},{"kind":"number","nodeType":"YulLiteral","src":"3447:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3426:3:25"},"nodeType":"YulFunctionCall","src":"3426:24:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3452:7:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3423:2:25"},"nodeType":"YulFunctionCall","src":"3423:37:25"},"nodeType":"YulIf","src":"3420:57:25"},{"nodeType":"YulAssignment","src":"3486:21:25","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3500:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"3504:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3496:3:25"},"nodeType":"YulFunctionCall","src":"3496:11:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3486:6:25"}]},{"nodeType":"YulAssignment","src":"3516:16:25","value":{"name":"length","nodeType":"YulIdentifier","src":"3526:6:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3516:6:25"}]}]},"name":"abi_decode_tuple_t_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2994:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3005:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3017:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3025:6:25","type":""}],"src":"2946:592:25"},{"body":{"nodeType":"YulBlock","src":"3613:116:25","statements":[{"body":{"nodeType":"YulBlock","src":"3659:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3668:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3671:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3661:6:25"},"nodeType":"YulFunctionCall","src":"3661:12:25"},"nodeType":"YulExpressionStatement","src":"3661:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3634:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"3643:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3630:3:25"},"nodeType":"YulFunctionCall","src":"3630:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"3655:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3626:3:25"},"nodeType":"YulFunctionCall","src":"3626:32:25"},"nodeType":"YulIf","src":"3623:52:25"},{"nodeType":"YulAssignment","src":"3684:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3713:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3694:18:25"},"nodeType":"YulFunctionCall","src":"3694:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3684:6:25"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3579:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3590:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3602:6:25","type":""}],"src":"3543:186:25"},{"body":{"nodeType":"YulBlock","src":"4091:902:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4108:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4123:6:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4135:3:25","type":"","value":"248"},{"kind":"number","nodeType":"YulLiteral","src":"4140:3:25","type":"","value":"255"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4131:3:25"},"nodeType":"YulFunctionCall","src":"4131:13:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4119:3:25"},"nodeType":"YulFunctionCall","src":"4119:26:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4101:6:25"},"nodeType":"YulFunctionCall","src":"4101:45:25"},"nodeType":"YulExpressionStatement","src":"4101:45:25"},{"nodeType":"YulVariableDeclaration","src":"4155:12:25","value":{"kind":"number","nodeType":"YulLiteral","src":"4165:2:25","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4159:2:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4187:9:25"},{"name":"_1","nodeType":"YulIdentifier","src":"4198:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4183:3:25"},"nodeType":"YulFunctionCall","src":"4183:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"4203:3:25","type":"","value":"224"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4176:6:25"},"nodeType":"YulFunctionCall","src":"4176:31:25"},"nodeType":"YulExpressionStatement","src":"4176:31:25"},{"nodeType":"YulVariableDeclaration","src":"4216:60:25","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4248:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4260:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"4271:3:25","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4256:3:25"},"nodeType":"YulFunctionCall","src":"4256:19:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"4230:17:25"},"nodeType":"YulFunctionCall","src":"4230:46:25"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"4220:6:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4296:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"4307:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4292:3:25"},"nodeType":"YulFunctionCall","src":"4292:18:25"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"4316:6:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"4324:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4312:3:25"},"nodeType":"YulFunctionCall","src":"4312:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4285:6:25"},"nodeType":"YulFunctionCall","src":"4285:50:25"},"nodeType":"YulExpressionStatement","src":"4285:50:25"},{"nodeType":"YulVariableDeclaration","src":"4344:47:25","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"4376:6:25"},{"name":"tail_1","nodeType":"YulIdentifier","src":"4384:6:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"4358:17:25"},"nodeType":"YulFunctionCall","src":"4358:33:25"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"4348:6:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4411:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"4422:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4407:3:25"},"nodeType":"YulFunctionCall","src":"4407:18:25"},{"name":"value3","nodeType":"YulIdentifier","src":"4427:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4400:6:25"},"nodeType":"YulFunctionCall","src":"4400:34:25"},"nodeType":"YulExpressionStatement","src":"4400:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4454:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"4465:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4450:3:25"},"nodeType":"YulFunctionCall","src":"4450:19:25"},{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"4475:6:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4491:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4496:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4487:3:25"},"nodeType":"YulFunctionCall","src":"4487:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"4500:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4483:3:25"},"nodeType":"YulFunctionCall","src":"4483:19:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4471:3:25"},"nodeType":"YulFunctionCall","src":"4471:32:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4443:6:25"},"nodeType":"YulFunctionCall","src":"4443:61:25"},"nodeType":"YulExpressionStatement","src":"4443:61:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4524:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"4535:3:25","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4520:3:25"},"nodeType":"YulFunctionCall","src":"4520:19:25"},{"name":"value5","nodeType":"YulIdentifier","src":"4541:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4513:6:25"},"nodeType":"YulFunctionCall","src":"4513:35:25"},"nodeType":"YulExpressionStatement","src":"4513:35:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4568:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"4579:3:25","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4564:3:25"},"nodeType":"YulFunctionCall","src":"4564:19:25"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"4589:6:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"4597:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4585:3:25"},"nodeType":"YulFunctionCall","src":"4585:22:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4557:6:25"},"nodeType":"YulFunctionCall","src":"4557:51:25"},"nodeType":"YulExpressionStatement","src":"4557:51:25"},{"nodeType":"YulVariableDeclaration","src":"4617:17:25","value":{"name":"tail_2","nodeType":"YulIdentifier","src":"4628:6:25"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"4621:3:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4643:27:25","value":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"4663:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4657:5:25"},"nodeType":"YulFunctionCall","src":"4657:13:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4647:6:25","type":""}]},{"expression":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"4686:6:25"},{"name":"length","nodeType":"YulIdentifier","src":"4694:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4679:6:25"},"nodeType":"YulFunctionCall","src":"4679:22:25"},"nodeType":"YulExpressionStatement","src":"4679:22:25"},{"nodeType":"YulAssignment","src":"4710:22:25","value":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"4721:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"4729:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4717:3:25"},"nodeType":"YulFunctionCall","src":"4717:15:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4710:3:25"}]},{"nodeType":"YulVariableDeclaration","src":"4741:29:25","value":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"4759:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"4767:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4755:3:25"},"nodeType":"YulFunctionCall","src":"4755:15:25"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"4745:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4779:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"4788:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4783:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"4847:120:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4868:3:25"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"4879:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4873:5:25"},"nodeType":"YulFunctionCall","src":"4873:13:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4861:6:25"},"nodeType":"YulFunctionCall","src":"4861:26:25"},"nodeType":"YulExpressionStatement","src":"4861:26:25"},{"nodeType":"YulAssignment","src":"4900:19:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4911:3:25"},{"name":"_1","nodeType":"YulIdentifier","src":"4916:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4907:3:25"},"nodeType":"YulFunctionCall","src":"4907:12:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4900:3:25"}]},{"nodeType":"YulAssignment","src":"4932:25:25","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"4946:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"4954:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4942:3:25"},"nodeType":"YulFunctionCall","src":"4942:15:25"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"4932:6:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4809:1:25"},{"name":"length","nodeType":"YulIdentifier","src":"4812:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4806:2:25"},"nodeType":"YulFunctionCall","src":"4806:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4820:18:25","statements":[{"nodeType":"YulAssignment","src":"4822:14:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4831:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"4834:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4827:3:25"},"nodeType":"YulFunctionCall","src":"4827:9:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4822:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"4802:3:25","statements":[]},"src":"4798:169:25"},{"nodeType":"YulAssignment","src":"4976:11:25","value":{"name":"pos","nodeType":"YulIdentifier","src":"4984:3:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4976:4:25"}]}]},"name":"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4012:9:25","type":""},{"name":"value6","nodeType":"YulTypedName","src":"4023:6:25","type":""},{"name":"value5","nodeType":"YulTypedName","src":"4031:6:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4039:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4047:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4055:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4063:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4071:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4082:4:25","type":""}],"src":"3734:1259:25"},{"body":{"nodeType":"YulBlock","src":"5082:263:25","statements":[{"body":{"nodeType":"YulBlock","src":"5128:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5137:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5140:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5130:6:25"},"nodeType":"YulFunctionCall","src":"5130:12:25"},"nodeType":"YulExpressionStatement","src":"5130:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5103:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"5112:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5099:3:25"},"nodeType":"YulFunctionCall","src":"5099:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"5124:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5095:3:25"},"nodeType":"YulFunctionCall","src":"5095:32:25"},"nodeType":"YulIf","src":"5092:52:25"},{"nodeType":"YulAssignment","src":"5153:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5182:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5163:18:25"},"nodeType":"YulFunctionCall","src":"5163:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5153:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"5201:45:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5231:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5242:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5227:3:25"},"nodeType":"YulFunctionCall","src":"5227:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5214:12:25"},"nodeType":"YulFunctionCall","src":"5214:32:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5205:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"5299:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5308:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5311:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5301:6:25"},"nodeType":"YulFunctionCall","src":"5301:12:25"},"nodeType":"YulExpressionStatement","src":"5301:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5268:5:25"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5289:5:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5282:6:25"},"nodeType":"YulFunctionCall","src":"5282:13:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5275:6:25"},"nodeType":"YulFunctionCall","src":"5275:21:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5265:2:25"},"nodeType":"YulFunctionCall","src":"5265:32:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5258:6:25"},"nodeType":"YulFunctionCall","src":"5258:40:25"},"nodeType":"YulIf","src":"5255:60:25"},{"nodeType":"YulAssignment","src":"5324:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"5334:5:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5324:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5040:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5051:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5063:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5071:6:25","type":""}],"src":"4998:347:25"},{"body":{"nodeType":"YulBlock","src":"5382:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5399:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5406:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5411:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5402:3:25"},"nodeType":"YulFunctionCall","src":"5402:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5392:6:25"},"nodeType":"YulFunctionCall","src":"5392:31:25"},"nodeType":"YulExpressionStatement","src":"5392:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5439:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5442:4:25","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5432:6:25"},"nodeType":"YulFunctionCall","src":"5432:15:25"},"nodeType":"YulExpressionStatement","src":"5432:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5463:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5466:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5456:6:25"},"nodeType":"YulFunctionCall","src":"5456:15:25"},"nodeType":"YulExpressionStatement","src":"5456:15:25"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"5350:127:25"},{"body":{"nodeType":"YulBlock","src":"5612:1008:25","statements":[{"body":{"nodeType":"YulBlock","src":"5659:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5668:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5671:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5661:6:25"},"nodeType":"YulFunctionCall","src":"5661:12:25"},"nodeType":"YulExpressionStatement","src":"5661:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5633:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"5642:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5629:3:25"},"nodeType":"YulFunctionCall","src":"5629:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"5654:3:25","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5625:3:25"},"nodeType":"YulFunctionCall","src":"5625:33:25"},"nodeType":"YulIf","src":"5622:53:25"},{"nodeType":"YulAssignment","src":"5684:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5713:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5694:18:25"},"nodeType":"YulFunctionCall","src":"5694:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5684:6:25"}]},{"nodeType":"YulAssignment","src":"5732:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5765:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5776:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5761:3:25"},"nodeType":"YulFunctionCall","src":"5761:18:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5742:18:25"},"nodeType":"YulFunctionCall","src":"5742:38:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5732:6:25"}]},{"nodeType":"YulAssignment","src":"5789:42:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5816:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5827:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5812:3:25"},"nodeType":"YulFunctionCall","src":"5812:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5799:12:25"},"nodeType":"YulFunctionCall","src":"5799:32:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5789:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"5840:46:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5871:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5882:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5867:3:25"},"nodeType":"YulFunctionCall","src":"5867:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5854:12:25"},"nodeType":"YulFunctionCall","src":"5854:32:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5844:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5895:28:25","value":{"kind":"number","nodeType":"YulLiteral","src":"5905:18:25","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5899:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"5950:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5959:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5962:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5952:6:25"},"nodeType":"YulFunctionCall","src":"5952:12:25"},"nodeType":"YulExpressionStatement","src":"5952:12:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5938:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"5946:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5935:2:25"},"nodeType":"YulFunctionCall","src":"5935:14:25"},"nodeType":"YulIf","src":"5932:34:25"},{"nodeType":"YulVariableDeclaration","src":"5975:32:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5989:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"6000:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5985:3:25"},"nodeType":"YulFunctionCall","src":"5985:22:25"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"5979:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"6055:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6064:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6067:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6057:6:25"},"nodeType":"YulFunctionCall","src":"6057:12:25"},"nodeType":"YulExpressionStatement","src":"6057:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6034:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"6038:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6030:3:25"},"nodeType":"YulFunctionCall","src":"6030:13:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6045:7:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6026:3:25"},"nodeType":"YulFunctionCall","src":"6026:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6019:6:25"},"nodeType":"YulFunctionCall","src":"6019:35:25"},"nodeType":"YulIf","src":"6016:55:25"},{"nodeType":"YulVariableDeclaration","src":"6080:26:25","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6103:2:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6090:12:25"},"nodeType":"YulFunctionCall","src":"6090:16:25"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"6084:2:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"6129:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"6131:16:25"},"nodeType":"YulFunctionCall","src":"6131:18:25"},"nodeType":"YulExpressionStatement","src":"6131:18:25"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"6121:2:25"},{"name":"_1","nodeType":"YulIdentifier","src":"6125:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6118:2:25"},"nodeType":"YulFunctionCall","src":"6118:10:25"},"nodeType":"YulIf","src":"6115:36:25"},{"nodeType":"YulVariableDeclaration","src":"6160:17:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6174:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6170:3:25"},"nodeType":"YulFunctionCall","src":"6170:7:25"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"6164:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6186:23:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6206:2:25","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6200:5:25"},"nodeType":"YulFunctionCall","src":"6200:9:25"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"6190:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6218:71:25","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6240:6:25"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"6264:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"6268:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6260:3:25"},"nodeType":"YulFunctionCall","src":"6260:13:25"},{"name":"_4","nodeType":"YulIdentifier","src":"6275:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6256:3:25"},"nodeType":"YulFunctionCall","src":"6256:22:25"},{"kind":"number","nodeType":"YulLiteral","src":"6280:2:25","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6252:3:25"},"nodeType":"YulFunctionCall","src":"6252:31:25"},{"name":"_4","nodeType":"YulIdentifier","src":"6285:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6248:3:25"},"nodeType":"YulFunctionCall","src":"6248:40:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6236:3:25"},"nodeType":"YulFunctionCall","src":"6236:53:25"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"6222:10:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"6348:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"6350:16:25"},"nodeType":"YulFunctionCall","src":"6350:18:25"},"nodeType":"YulExpressionStatement","src":"6350:18:25"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6307:10:25"},{"name":"_1","nodeType":"YulIdentifier","src":"6319:2:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6304:2:25"},"nodeType":"YulFunctionCall","src":"6304:18:25"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6327:10:25"},{"name":"memPtr","nodeType":"YulIdentifier","src":"6339:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6324:2:25"},"nodeType":"YulFunctionCall","src":"6324:22:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6301:2:25"},"nodeType":"YulFunctionCall","src":"6301:46:25"},"nodeType":"YulIf","src":"6298:72:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6386:2:25","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6390:10:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6379:6:25"},"nodeType":"YulFunctionCall","src":"6379:22:25"},"nodeType":"YulExpressionStatement","src":"6379:22:25"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6417:6:25"},{"name":"_3","nodeType":"YulIdentifier","src":"6425:2:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6410:6:25"},"nodeType":"YulFunctionCall","src":"6410:18:25"},"nodeType":"YulExpressionStatement","src":"6410:18:25"},{"body":{"nodeType":"YulBlock","src":"6474:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6483:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6486:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6476:6:25"},"nodeType":"YulFunctionCall","src":"6476:12:25"},"nodeType":"YulExpressionStatement","src":"6476:12:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6451:2:25"},{"name":"_3","nodeType":"YulIdentifier","src":"6455:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6447:3:25"},"nodeType":"YulFunctionCall","src":"6447:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"6460:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6443:3:25"},"nodeType":"YulFunctionCall","src":"6443:20:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6465:7:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6440:2:25"},"nodeType":"YulFunctionCall","src":"6440:33:25"},"nodeType":"YulIf","src":"6437:53:25"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6516:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"6524:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6512:3:25"},"nodeType":"YulFunctionCall","src":"6512:15:25"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6533:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"6537:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6529:3:25"},"nodeType":"YulFunctionCall","src":"6529:11:25"},{"name":"_3","nodeType":"YulIdentifier","src":"6542:2:25"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"6499:12:25"},"nodeType":"YulFunctionCall","src":"6499:46:25"},"nodeType":"YulExpressionStatement","src":"6499:46:25"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6569:6:25"},{"name":"_3","nodeType":"YulIdentifier","src":"6577:2:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6565:3:25"},"nodeType":"YulFunctionCall","src":"6565:15:25"},{"kind":"number","nodeType":"YulLiteral","src":"6582:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6561:3:25"},"nodeType":"YulFunctionCall","src":"6561:24:25"},{"kind":"number","nodeType":"YulLiteral","src":"6587:1:25","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6554:6:25"},"nodeType":"YulFunctionCall","src":"6554:35:25"},"nodeType":"YulExpressionStatement","src":"6554:35:25"},{"nodeType":"YulAssignment","src":"6598:16:25","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"6608:6:25"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"6598:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5554:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5565:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5577:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5585:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5593:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5601:6:25","type":""}],"src":"5482:1138:25"},{"body":{"nodeType":"YulBlock","src":"6712:173:25","statements":[{"body":{"nodeType":"YulBlock","src":"6758:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6767:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6770:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6760:6:25"},"nodeType":"YulFunctionCall","src":"6760:12:25"},"nodeType":"YulExpressionStatement","src":"6760:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6733:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"6742:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6729:3:25"},"nodeType":"YulFunctionCall","src":"6729:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"6754:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6725:3:25"},"nodeType":"YulFunctionCall","src":"6725:32:25"},"nodeType":"YulIf","src":"6722:52:25"},{"nodeType":"YulAssignment","src":"6783:39:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6812:9:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6793:18:25"},"nodeType":"YulFunctionCall","src":"6793:29:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6783:6:25"}]},{"nodeType":"YulAssignment","src":"6831:48:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6864:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"6875:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6860:3:25"},"nodeType":"YulFunctionCall","src":"6860:18:25"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6841:18:25"},"nodeType":"YulFunctionCall","src":"6841:38:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6831:6:25"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6670:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6681:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6693:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6701:6:25","type":""}],"src":"6625:260:25"},{"body":{"nodeType":"YulBlock","src":"6945:325:25","statements":[{"nodeType":"YulAssignment","src":"6955:22:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6969:1:25","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"6972:4:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6965:3:25"},"nodeType":"YulFunctionCall","src":"6965:12:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6955:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"6986:38:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7016:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"7022:1:25","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7012:3:25"},"nodeType":"YulFunctionCall","src":"7012:12:25"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"6990:18:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"7063:31:25","statements":[{"nodeType":"YulAssignment","src":"7065:27:25","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7079:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"7087:4:25","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7075:3:25"},"nodeType":"YulFunctionCall","src":"7075:17:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"7065:6:25"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"7043:18:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7036:6:25"},"nodeType":"YulFunctionCall","src":"7036:26:25"},"nodeType":"YulIf","src":"7033:61:25"},{"body":{"nodeType":"YulBlock","src":"7153:111:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7174:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7181:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"7186:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7177:3:25"},"nodeType":"YulFunctionCall","src":"7177:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7167:6:25"},"nodeType":"YulFunctionCall","src":"7167:31:25"},"nodeType":"YulExpressionStatement","src":"7167:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7218:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7221:4:25","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7211:6:25"},"nodeType":"YulFunctionCall","src":"7211:15:25"},"nodeType":"YulExpressionStatement","src":"7211:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7246:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7249:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7239:6:25"},"nodeType":"YulFunctionCall","src":"7239:15:25"},"nodeType":"YulExpressionStatement","src":"7239:15:25"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"7109:18:25"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7132:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"7140:2:25","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7129:2:25"},"nodeType":"YulFunctionCall","src":"7129:14:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7106:2:25"},"nodeType":"YulFunctionCall","src":"7106:38:25"},"nodeType":"YulIf","src":"7103:161:25"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6925:4:25","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"6934:6:25","type":""}],"src":"6890:380:25"},{"body":{"nodeType":"YulBlock","src":"7449:223:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7466:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7477:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7459:6:25"},"nodeType":"YulFunctionCall","src":"7459:21:25"},"nodeType":"YulExpressionStatement","src":"7459:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7500:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7511:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7496:3:25"},"nodeType":"YulFunctionCall","src":"7496:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"7516:2:25","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7489:6:25"},"nodeType":"YulFunctionCall","src":"7489:30:25"},"nodeType":"YulExpressionStatement","src":"7489:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7539:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7550:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7535:3:25"},"nodeType":"YulFunctionCall","src":"7535:18:25"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"7555:34:25","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7528:6:25"},"nodeType":"YulFunctionCall","src":"7528:62:25"},"nodeType":"YulExpressionStatement","src":"7528:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7610:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7621:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7606:3:25"},"nodeType":"YulFunctionCall","src":"7606:18:25"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"7626:3:25","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7599:6:25"},"nodeType":"YulFunctionCall","src":"7599:31:25"},"nodeType":"YulExpressionStatement","src":"7599:31:25"},{"nodeType":"YulAssignment","src":"7639:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7651:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7662:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7647:3:25"},"nodeType":"YulFunctionCall","src":"7647:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7639:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7426:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7440:4:25","type":""}],"src":"7275:397:25"},{"body":{"nodeType":"YulBlock","src":"7851:251:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7868:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7879:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7861:6:25"},"nodeType":"YulFunctionCall","src":"7861:21:25"},"nodeType":"YulExpressionStatement","src":"7861:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7902:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7913:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7898:3:25"},"nodeType":"YulFunctionCall","src":"7898:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"7918:2:25","type":"","value":"61"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7891:6:25"},"nodeType":"YulFunctionCall","src":"7891:30:25"},"nodeType":"YulExpressionStatement","src":"7891:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7941:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"7952:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7937:3:25"},"nodeType":"YulFunctionCall","src":"7937:18:25"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"7957:34:25","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7930:6:25"},"nodeType":"YulFunctionCall","src":"7930:62:25"},"nodeType":"YulExpressionStatement","src":"7930:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8012:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8023:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8008:3:25"},"nodeType":"YulFunctionCall","src":"8008:18:25"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"8028:31:25","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8001:6:25"},"nodeType":"YulFunctionCall","src":"8001:59:25"},"nodeType":"YulExpressionStatement","src":"8001:59:25"},{"nodeType":"YulAssignment","src":"8069:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8081:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8092:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8077:3:25"},"nodeType":"YulFunctionCall","src":"8077:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8069:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7828:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7842:4:25","type":""}],"src":"7677:425:25"},{"body":{"nodeType":"YulBlock","src":"8281:235:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8298:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8309:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8291:6:25"},"nodeType":"YulFunctionCall","src":"8291:21:25"},"nodeType":"YulExpressionStatement","src":"8291:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8332:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8343:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8328:3:25"},"nodeType":"YulFunctionCall","src":"8328:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"8348:2:25","type":"","value":"45"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8321:6:25"},"nodeType":"YulFunctionCall","src":"8321:30:25"},"nodeType":"YulExpressionStatement","src":"8321:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8371:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8382:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8367:3:25"},"nodeType":"YulFunctionCall","src":"8367:18:25"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"8387:34:25","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8360:6:25"},"nodeType":"YulFunctionCall","src":"8360:62:25"},"nodeType":"YulExpressionStatement","src":"8360:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8442:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8453:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8438:3:25"},"nodeType":"YulFunctionCall","src":"8438:18:25"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"8458:15:25","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8431:6:25"},"nodeType":"YulFunctionCall","src":"8431:43:25"},"nodeType":"YulExpressionStatement","src":"8431:43:25"},{"nodeType":"YulAssignment","src":"8483:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8495:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"8506:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8491:3:25"},"nodeType":"YulFunctionCall","src":"8491:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8483:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8258:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8272:4:25","type":""}],"src":"8107:409:25"},{"body":{"nodeType":"YulBlock","src":"8658:150:25","statements":[{"nodeType":"YulVariableDeclaration","src":"8668:27:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8688:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8682:5:25"},"nodeType":"YulFunctionCall","src":"8682:13:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8672:6:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8743:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"8751:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8739:3:25"},"nodeType":"YulFunctionCall","src":"8739:17:25"},{"name":"pos","nodeType":"YulIdentifier","src":"8758:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"8763:6:25"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"8704:34:25"},"nodeType":"YulFunctionCall","src":"8704:66:25"},"nodeType":"YulExpressionStatement","src":"8704:66:25"},{"nodeType":"YulAssignment","src":"8779:23:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8790:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"8795:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8786:3:25"},"nodeType":"YulFunctionCall","src":"8786:16:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8779:3:25"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8634:3:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8639:6:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8650:3:25","type":""}],"src":"8521:287:25"},{"body":{"nodeType":"YulBlock","src":"8987:165:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9004:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9015:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8997:6:25"},"nodeType":"YulFunctionCall","src":"8997:21:25"},"nodeType":"YulExpressionStatement","src":"8997:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9038:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9049:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9034:3:25"},"nodeType":"YulFunctionCall","src":"9034:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"9054:2:25","type":"","value":"15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9027:6:25"},"nodeType":"YulFunctionCall","src":"9027:30:25"},"nodeType":"YulExpressionStatement","src":"9027:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9077:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9088:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9073:3:25"},"nodeType":"YulFunctionCall","src":"9073:18:25"},{"hexValue":"5472616e73666572206661696c6564","kind":"string","nodeType":"YulLiteral","src":"9093:17:25","type":"","value":"Transfer failed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9066:6:25"},"nodeType":"YulFunctionCall","src":"9066:45:25"},"nodeType":"YulExpressionStatement","src":"9066:45:25"},{"nodeType":"YulAssignment","src":"9120:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9132:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9143:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9128:3:25"},"nodeType":"YulFunctionCall","src":"9128:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9120:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8964:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8978:4:25","type":""}],"src":"8813:339:25"},{"body":{"nodeType":"YulBlock","src":"9331:165:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9348:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9359:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9341:6:25"},"nodeType":"YulFunctionCall","src":"9341:21:25"},"nodeType":"YulExpressionStatement","src":"9341:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9382:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9393:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9378:3:25"},"nodeType":"YulFunctionCall","src":"9378:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"9398:2:25","type":"","value":"15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9371:6:25"},"nodeType":"YulFunctionCall","src":"9371:30:25"},"nodeType":"YulExpressionStatement","src":"9371:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9421:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9432:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9417:3:25"},"nodeType":"YulFunctionCall","src":"9417:18:25"},{"hexValue":"496e76616c696420746f6b656e4964","kind":"string","nodeType":"YulLiteral","src":"9437:17:25","type":"","value":"Invalid tokenId"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9410:6:25"},"nodeType":"YulFunctionCall","src":"9410:45:25"},"nodeType":"YulExpressionStatement","src":"9410:45:25"},{"nodeType":"YulAssignment","src":"9464:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9476:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9487:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9472:3:25"},"nodeType":"YulFunctionCall","src":"9472:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9464:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_47dcc88603f32730c5f1349ee02d9fe469c193c742f38ce12c7b0ba84c66c8a4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9308:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9322:4:25","type":""}],"src":"9157:339:25"},{"body":{"nodeType":"YulBlock","src":"9557:65:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9574:1:25","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"9577:3:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9567:6:25"},"nodeType":"YulFunctionCall","src":"9567:14:25"},"nodeType":"YulExpressionStatement","src":"9567:14:25"},{"nodeType":"YulAssignment","src":"9590:26:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9608:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9611:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"9598:9:25"},"nodeType":"YulFunctionCall","src":"9598:18:25"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"9590:4:25"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"9540:3:25","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"9548:4:25","type":""}],"src":"9501:121:25"},{"body":{"nodeType":"YulBlock","src":"9708:464:25","statements":[{"body":{"nodeType":"YulBlock","src":"9741:425:25","statements":[{"nodeType":"YulVariableDeclaration","src":"9755:11:25","value":{"kind":"number","nodeType":"YulLiteral","src":"9765:1:25","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9759:2:25","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"9786:2:25"},{"name":"array","nodeType":"YulIdentifier","src":"9790:5:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9779:6:25"},"nodeType":"YulFunctionCall","src":"9779:17:25"},"nodeType":"YulExpressionStatement","src":"9779:17:25"},{"nodeType":"YulVariableDeclaration","src":"9809:31:25","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"9831:2:25"},{"kind":"number","nodeType":"YulLiteral","src":"9835:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"9821:9:25"},"nodeType":"YulFunctionCall","src":"9821:19:25"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"9813:4:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9853:57:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"9876:4:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9886:1:25","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"9893:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"9905:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9889:3:25"},"nodeType":"YulFunctionCall","src":"9889:19:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"9882:3:25"},"nodeType":"YulFunctionCall","src":"9882:27:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9872:3:25"},"nodeType":"YulFunctionCall","src":"9872:38:25"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"9857:11:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"9947:23:25","statements":[{"nodeType":"YulAssignment","src":"9949:19:25","value":{"name":"data","nodeType":"YulIdentifier","src":"9964:4:25"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"9949:11:25"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"9929:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"9941:4:25","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9926:2:25"},"nodeType":"YulFunctionCall","src":"9926:20:25"},"nodeType":"YulIf","src":"9923:47:25"},{"nodeType":"YulVariableDeclaration","src":"9983:41:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"9997:4:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10007:1:25","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"10014:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"10019:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10010:3:25"},"nodeType":"YulFunctionCall","src":"10010:12:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"10003:3:25"},"nodeType":"YulFunctionCall","src":"10003:20:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9993:3:25"},"nodeType":"YulFunctionCall","src":"9993:31:25"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"9987:2:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10037:24:25","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"10050:11:25"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"10041:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"10135:21:25","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"10144:5:25"},{"name":"_1","nodeType":"YulIdentifier","src":"10151:2:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"10137:6:25"},"nodeType":"YulFunctionCall","src":"10137:17:25"},"nodeType":"YulExpressionStatement","src":"10137:17:25"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"10085:5:25"},{"name":"_2","nodeType":"YulIdentifier","src":"10092:2:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10082:2:25"},"nodeType":"YulFunctionCall","src":"10082:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10096:26:25","statements":[{"nodeType":"YulAssignment","src":"10098:22:25","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"10111:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"10118:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10107:3:25"},"nodeType":"YulFunctionCall","src":"10107:13:25"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"10098:5:25"}]}]},"pre":{"nodeType":"YulBlock","src":"10078:3:25","statements":[]},"src":"10074:82:25"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"9724:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"9729:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9721:2:25"},"nodeType":"YulFunctionCall","src":"9721:11:25"},"nodeType":"YulIf","src":"9718:448:25"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"9680:5:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"9687:3:25","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"9692:10:25","type":""}],"src":"9627:545:25"},{"body":{"nodeType":"YulBlock","src":"10262:81:25","statements":[{"nodeType":"YulAssignment","src":"10272:65:25","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10287:4:25"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10305:1:25","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"10308:3:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10301:3:25"},"nodeType":"YulFunctionCall","src":"10301:11:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10318:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10314:3:25"},"nodeType":"YulFunctionCall","src":"10314:6:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"10297:3:25"},"nodeType":"YulFunctionCall","src":"10297:24:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10293:3:25"},"nodeType":"YulFunctionCall","src":"10293:29:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10283:3:25"},"nodeType":"YulFunctionCall","src":"10283:40:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10329:1:25","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"10332:3:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10325:3:25"},"nodeType":"YulFunctionCall","src":"10325:11:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"10280:2:25"},"nodeType":"YulFunctionCall","src":"10280:57:25"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"10272:4:25"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"10239:4:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"10245:3:25","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"10253:4:25","type":""}],"src":"10177:166:25"},{"body":{"nodeType":"YulBlock","src":"10451:1103:25","statements":[{"body":{"nodeType":"YulBlock","src":"10492:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"10494:16:25"},"nodeType":"YulFunctionCall","src":"10494:18:25"},"nodeType":"YulExpressionStatement","src":"10494:18:25"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"10467:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"10472:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10464:2:25"},"nodeType":"YulFunctionCall","src":"10464:27:25"},"nodeType":"YulIf","src":"10461:53:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"10567:4:25"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"10605:4:25"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"10599:5:25"},"nodeType":"YulFunctionCall","src":"10599:11:25"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"10573:25:25"},"nodeType":"YulFunctionCall","src":"10573:38:25"},{"name":"len","nodeType":"YulIdentifier","src":"10613:3:25"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"10523:43:25"},"nodeType":"YulFunctionCall","src":"10523:94:25"},"nodeType":"YulExpressionStatement","src":"10523:94:25"},{"nodeType":"YulVariableDeclaration","src":"10626:18:25","value":{"kind":"number","nodeType":"YulLiteral","src":"10643:1:25","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"10630:9:25","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"10687:609:25","statements":[{"nodeType":"YulVariableDeclaration","src":"10701:32:25","value":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"10720:3:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10729:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10725:3:25"},"nodeType":"YulFunctionCall","src":"10725:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10716:3:25"},"nodeType":"YulFunctionCall","src":"10716:17:25"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"10705:7:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10746:49:25","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"10790:4:25"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"10760:29:25"},"nodeType":"YulFunctionCall","src":"10760:35:25"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"10750:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10808:18:25","value":{"name":"srcOffset","nodeType":"YulIdentifier","src":"10817:9:25"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"10812:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"10896:172:25","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"10921:6:25"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10946:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"10951:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10942:3:25"},"nodeType":"YulFunctionCall","src":"10942:19:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10929:12:25"},"nodeType":"YulFunctionCall","src":"10929:33:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"10914:6:25"},"nodeType":"YulFunctionCall","src":"10914:49:25"},"nodeType":"YulExpressionStatement","src":"10914:49:25"},{"nodeType":"YulAssignment","src":"10980:24:25","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"10994:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"11002:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10990:3:25"},"nodeType":"YulFunctionCall","src":"10990:14:25"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"10980:6:25"}]},{"nodeType":"YulAssignment","src":"11021:33:25","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"11038:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11049:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11034:3:25"},"nodeType":"YulFunctionCall","src":"11034:20:25"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"11021:9:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10850:1:25"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"10853:7:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10847:2:25"},"nodeType":"YulFunctionCall","src":"10847:14:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10862:21:25","statements":[{"nodeType":"YulAssignment","src":"10864:17:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10873:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"10876:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10869:3:25"},"nodeType":"YulFunctionCall","src":"10869:12:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"10864:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"10843:3:25","statements":[]},"src":"10839:229:25"},{"body":{"nodeType":"YulBlock","src":"11113:127:25","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"11138:6:25"},{"arguments":[{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11167:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"11172:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11163:3:25"},"nodeType":"YulFunctionCall","src":"11163:19:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11150:12:25"},"nodeType":"YulFunctionCall","src":"11150:33:25"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11201:1:25","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"11204:3:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11197:3:25"},"nodeType":"YulFunctionCall","src":"11197:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"11210:3:25","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11193:3:25"},"nodeType":"YulFunctionCall","src":"11193:21:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11220:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11216:3:25"},"nodeType":"YulFunctionCall","src":"11216:6:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"11189:3:25"},"nodeType":"YulFunctionCall","src":"11189:34:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11185:3:25"},"nodeType":"YulFunctionCall","src":"11185:39:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11146:3:25"},"nodeType":"YulFunctionCall","src":"11146:79:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"11131:6:25"},"nodeType":"YulFunctionCall","src":"11131:95:25"},"nodeType":"YulExpressionStatement","src":"11131:95:25"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"11087:7:25"},{"name":"len","nodeType":"YulIdentifier","src":"11096:3:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11084:2:25"},"nodeType":"YulFunctionCall","src":"11084:16:25"},"nodeType":"YulIf","src":"11081:159:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"11260:4:25"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11274:1:25","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"11277:3:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11270:3:25"},"nodeType":"YulFunctionCall","src":"11270:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"11283:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11266:3:25"},"nodeType":"YulFunctionCall","src":"11266:19:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"11253:6:25"},"nodeType":"YulFunctionCall","src":"11253:33:25"},"nodeType":"YulExpressionStatement","src":"11253:33:25"}]},"nodeType":"YulCase","src":"10680:616:25","value":{"kind":"number","nodeType":"YulLiteral","src":"10685:1:25","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"11313:235:25","statements":[{"nodeType":"YulVariableDeclaration","src":"11327:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"11340:1:25","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"11331:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"11373:74:25","statements":[{"nodeType":"YulAssignment","src":"11391:42:25","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11417:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"11422:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11413:3:25"},"nodeType":"YulFunctionCall","src":"11413:19:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11400:12:25"},"nodeType":"YulFunctionCall","src":"11400:33:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"11391:5:25"}]}]},"condition":{"name":"len","nodeType":"YulIdentifier","src":"11357:3:25"},"nodeType":"YulIf","src":"11354:93:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"11467:4:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11526:5:25"},{"name":"len","nodeType":"YulIdentifier","src":"11533:3:25"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"11473:52:25"},"nodeType":"YulFunctionCall","src":"11473:64:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"11460:6:25"},"nodeType":"YulFunctionCall","src":"11460:78:25"},"nodeType":"YulExpressionStatement","src":"11460:78:25"}]},"nodeType":"YulCase","src":"11305:243:25","value":"default"}],"expression":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"10663:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"10668:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10660:2:25"},"nodeType":"YulFunctionCall","src":"10660:11:25"},"nodeType":"YulSwitch","src":"10653:895:25"}]},"name":"copy_byte_array_to_storage_from_t_string_calldata_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"10431:4:25","type":""},{"name":"src","nodeType":"YulTypedName","src":"10437:3:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"10442:3:25","type":""}],"src":"10348:1206:25"},{"body":{"nodeType":"YulBlock","src":"11733:174:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11750:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11761:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11743:6:25"},"nodeType":"YulFunctionCall","src":"11743:21:25"},"nodeType":"YulExpressionStatement","src":"11743:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11784:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11795:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11780:3:25"},"nodeType":"YulFunctionCall","src":"11780:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"11800:2:25","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11773:6:25"},"nodeType":"YulFunctionCall","src":"11773:30:25"},"nodeType":"YulExpressionStatement","src":"11773:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11823:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11834:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11819:3:25"},"nodeType":"YulFunctionCall","src":"11819:18:25"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"11839:26:25","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11812:6:25"},"nodeType":"YulFunctionCall","src":"11812:54:25"},"nodeType":"YulExpressionStatement","src":"11812:54:25"},{"nodeType":"YulAssignment","src":"11875:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11887:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11898:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11883:3:25"},"nodeType":"YulFunctionCall","src":"11883:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11875:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11710:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11724:4:25","type":""}],"src":"11559:348:25"},{"body":{"nodeType":"YulBlock","src":"12086:231:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12103:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"12114:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12096:6:25"},"nodeType":"YulFunctionCall","src":"12096:21:25"},"nodeType":"YulExpressionStatement","src":"12096:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12137:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"12148:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12133:3:25"},"nodeType":"YulFunctionCall","src":"12133:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"12153:2:25","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12126:6:25"},"nodeType":"YulFunctionCall","src":"12126:30:25"},"nodeType":"YulExpressionStatement","src":"12126:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12176:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"12187:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12172:3:25"},"nodeType":"YulFunctionCall","src":"12172:18:25"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"12192:34:25","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12165:6:25"},"nodeType":"YulFunctionCall","src":"12165:62:25"},"nodeType":"YulExpressionStatement","src":"12165:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12247:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"12258:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12243:3:25"},"nodeType":"YulFunctionCall","src":"12243:18:25"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"12263:11:25","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12236:6:25"},"nodeType":"YulFunctionCall","src":"12236:39:25"},"nodeType":"YulExpressionStatement","src":"12236:39:25"},{"nodeType":"YulAssignment","src":"12284:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12296:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"12307:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12292:3:25"},"nodeType":"YulFunctionCall","src":"12292:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12284:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12063:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12077:4:25","type":""}],"src":"11912:405:25"},{"body":{"nodeType":"YulBlock","src":"12369:185:25","statements":[{"body":{"nodeType":"YulBlock","src":"12408:111:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12429:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12436:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"12441:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12432:3:25"},"nodeType":"YulFunctionCall","src":"12432:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12422:6:25"},"nodeType":"YulFunctionCall","src":"12422:31:25"},"nodeType":"YulExpressionStatement","src":"12422:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12473:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12476:4:25","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12466:6:25"},"nodeType":"YulFunctionCall","src":"12466:15:25"},"nodeType":"YulExpressionStatement","src":"12466:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12501:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12504:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12494:6:25"},"nodeType":"YulFunctionCall","src":"12494:15:25"},"nodeType":"YulExpressionStatement","src":"12494:15:25"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12385:5:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12396:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"12392:3:25"},"nodeType":"YulFunctionCall","src":"12392:6:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12382:2:25"},"nodeType":"YulFunctionCall","src":"12382:17:25"},"nodeType":"YulIf","src":"12379:140:25"},{"nodeType":"YulAssignment","src":"12528:20:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12539:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"12546:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12535:3:25"},"nodeType":"YulFunctionCall","src":"12535:13:25"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"12528:3:25"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12351:5:25","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"12361:3:25","type":""}],"src":"12322:232:25"},{"body":{"nodeType":"YulBlock","src":"12746:309:25","statements":[{"nodeType":"YulVariableDeclaration","src":"12756:27:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12776:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12770:5:25"},"nodeType":"YulFunctionCall","src":"12770:13:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"12760:6:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12831:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"12839:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12827:3:25"},"nodeType":"YulFunctionCall","src":"12827:17:25"},{"name":"pos","nodeType":"YulIdentifier","src":"12846:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"12851:6:25"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"12792:34:25"},"nodeType":"YulFunctionCall","src":"12792:66:25"},"nodeType":"YulExpressionStatement","src":"12792:66:25"},{"nodeType":"YulVariableDeclaration","src":"12867:29:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12884:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"12889:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12880:3:25"},"nodeType":"YulFunctionCall","src":"12880:16:25"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"12871:5:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12905:29:25","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12927:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12921:5:25"},"nodeType":"YulFunctionCall","src":"12921:13:25"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"12909:8:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12982:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"12990:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12978:3:25"},"nodeType":"YulFunctionCall","src":"12978:17:25"},{"name":"end_1","nodeType":"YulIdentifier","src":"12997:5:25"},{"name":"length_1","nodeType":"YulIdentifier","src":"13004:8:25"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"12943:34:25"},"nodeType":"YulFunctionCall","src":"12943:70:25"},"nodeType":"YulExpressionStatement","src":"12943:70:25"},{"nodeType":"YulAssignment","src":"13022:27:25","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"13033:5:25"},{"name":"length_1","nodeType":"YulIdentifier","src":"13040:8:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13029:3:25"},"nodeType":"YulFunctionCall","src":"13029:20:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13022:3:25"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12714:3:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12719:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12727:6:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12738:3:25","type":""}],"src":"12559:496:25"},{"body":{"nodeType":"YulBlock","src":"13234:228:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13251:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13262:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13244:6:25"},"nodeType":"YulFunctionCall","src":"13244:21:25"},"nodeType":"YulExpressionStatement","src":"13244:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13285:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13296:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13281:3:25"},"nodeType":"YulFunctionCall","src":"13281:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"13301:2:25","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13274:6:25"},"nodeType":"YulFunctionCall","src":"13274:30:25"},"nodeType":"YulExpressionStatement","src":"13274:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13324:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13335:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13320:3:25"},"nodeType":"YulFunctionCall","src":"13320:18:25"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"13340:34:25","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13313:6:25"},"nodeType":"YulFunctionCall","src":"13313:62:25"},"nodeType":"YulExpressionStatement","src":"13313:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13395:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13406:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13391:3:25"},"nodeType":"YulFunctionCall","src":"13391:18:25"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"13411:8:25","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13384:6:25"},"nodeType":"YulFunctionCall","src":"13384:36:25"},"nodeType":"YulExpressionStatement","src":"13384:36:25"},{"nodeType":"YulAssignment","src":"13429:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13441:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13452:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13437:3:25"},"nodeType":"YulFunctionCall","src":"13437:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13429:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13211:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13225:4:25","type":""}],"src":"13060:402:25"},{"body":{"nodeType":"YulBlock","src":"13641:227:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13658:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13669:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13651:6:25"},"nodeType":"YulFunctionCall","src":"13651:21:25"},"nodeType":"YulExpressionStatement","src":"13651:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13692:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13703:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13688:3:25"},"nodeType":"YulFunctionCall","src":"13688:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"13708:2:25","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13681:6:25"},"nodeType":"YulFunctionCall","src":"13681:30:25"},"nodeType":"YulExpressionStatement","src":"13681:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13731:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13742:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13727:3:25"},"nodeType":"YulFunctionCall","src":"13727:18:25"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"13747:34:25","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13720:6:25"},"nodeType":"YulFunctionCall","src":"13720:62:25"},"nodeType":"YulExpressionStatement","src":"13720:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13802:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13813:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13798:3:25"},"nodeType":"YulFunctionCall","src":"13798:18:25"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"13818:7:25","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13791:6:25"},"nodeType":"YulFunctionCall","src":"13791:35:25"},"nodeType":"YulExpressionStatement","src":"13791:35:25"},{"nodeType":"YulAssignment","src":"13835:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13847:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13858:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13843:3:25"},"nodeType":"YulFunctionCall","src":"13843:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13835:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13618:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13632:4:25","type":""}],"src":"13467:401:25"},{"body":{"nodeType":"YulBlock","src":"14047:226:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14064:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14075:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14057:6:25"},"nodeType":"YulFunctionCall","src":"14057:21:25"},"nodeType":"YulExpressionStatement","src":"14057:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14098:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14109:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14094:3:25"},"nodeType":"YulFunctionCall","src":"14094:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"14114:2:25","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14087:6:25"},"nodeType":"YulFunctionCall","src":"14087:30:25"},"nodeType":"YulExpressionStatement","src":"14087:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14137:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14148:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14133:3:25"},"nodeType":"YulFunctionCall","src":"14133:18:25"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"14153:34:25","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14126:6:25"},"nodeType":"YulFunctionCall","src":"14126:62:25"},"nodeType":"YulExpressionStatement","src":"14126:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14208:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14219:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14204:3:25"},"nodeType":"YulFunctionCall","src":"14204:18:25"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"14224:6:25","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14197:6:25"},"nodeType":"YulFunctionCall","src":"14197:34:25"},"nodeType":"YulExpressionStatement","src":"14197:34:25"},{"nodeType":"YulAssignment","src":"14240:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14252:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14263:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14248:3:25"},"nodeType":"YulFunctionCall","src":"14248:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14240:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14024:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14038:4:25","type":""}],"src":"13873:400:25"},{"body":{"nodeType":"YulBlock","src":"14452:182:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14469:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14480:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14462:6:25"},"nodeType":"YulFunctionCall","src":"14462:21:25"},"nodeType":"YulExpressionStatement","src":"14462:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14503:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14514:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14499:3:25"},"nodeType":"YulFunctionCall","src":"14499:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"14519:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14492:6:25"},"nodeType":"YulFunctionCall","src":"14492:30:25"},"nodeType":"YulExpressionStatement","src":"14492:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14542:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14553:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14538:3:25"},"nodeType":"YulFunctionCall","src":"14538:18:25"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"14558:34:25","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14531:6:25"},"nodeType":"YulFunctionCall","src":"14531:62:25"},"nodeType":"YulExpressionStatement","src":"14531:62:25"},{"nodeType":"YulAssignment","src":"14602:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14614:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14625:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14610:3:25"},"nodeType":"YulFunctionCall","src":"14610:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14602:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14429:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14443:4:25","type":""}],"src":"14278:356:25"},{"body":{"nodeType":"YulBlock","src":"14813:175:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14830:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14841:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14823:6:25"},"nodeType":"YulFunctionCall","src":"14823:21:25"},"nodeType":"YulExpressionStatement","src":"14823:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14864:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14875:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14860:3:25"},"nodeType":"YulFunctionCall","src":"14860:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"14880:2:25","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14853:6:25"},"nodeType":"YulFunctionCall","src":"14853:30:25"},"nodeType":"YulExpressionStatement","src":"14853:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14903:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14914:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14899:3:25"},"nodeType":"YulFunctionCall","src":"14899:18:25"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"14919:27:25","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14892:6:25"},"nodeType":"YulFunctionCall","src":"14892:55:25"},"nodeType":"YulExpressionStatement","src":"14892:55:25"},{"nodeType":"YulAssignment","src":"14956:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14968:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14979:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14964:3:25"},"nodeType":"YulFunctionCall","src":"14964:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14956:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14790:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14804:4:25","type":""}],"src":"14639:349:25"},{"body":{"nodeType":"YulBlock","src":"15167:240:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15184:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15195:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15177:6:25"},"nodeType":"YulFunctionCall","src":"15177:21:25"},"nodeType":"YulExpressionStatement","src":"15177:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15218:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15229:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15214:3:25"},"nodeType":"YulFunctionCall","src":"15214:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"15234:2:25","type":"","value":"50"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15207:6:25"},"nodeType":"YulFunctionCall","src":"15207:30:25"},"nodeType":"YulExpressionStatement","src":"15207:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15257:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15268:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15253:3:25"},"nodeType":"YulFunctionCall","src":"15253:18:25"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"15273:34:25","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15246:6:25"},"nodeType":"YulFunctionCall","src":"15246:62:25"},"nodeType":"YulExpressionStatement","src":"15246:62:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15328:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15339:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15324:3:25"},"nodeType":"YulFunctionCall","src":"15324:18:25"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"15344:20:25","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15317:6:25"},"nodeType":"YulFunctionCall","src":"15317:48:25"},"nodeType":"YulExpressionStatement","src":"15317:48:25"},{"nodeType":"YulAssignment","src":"15374:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15386:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15397:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15382:3:25"},"nodeType":"YulFunctionCall","src":"15382:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15374:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15144:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15158:4:25","type":""}],"src":"14993:414:25"},{"body":{"nodeType":"YulBlock","src":"15444:95:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15461:1:25","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15468:3:25","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"15473:10:25","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15464:3:25"},"nodeType":"YulFunctionCall","src":"15464:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15454:6:25"},"nodeType":"YulFunctionCall","src":"15454:31:25"},"nodeType":"YulExpressionStatement","src":"15454:31:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15501:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15504:4:25","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15494:6:25"},"nodeType":"YulFunctionCall","src":"15494:15:25"},"nodeType":"YulExpressionStatement","src":"15494:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15525:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15528:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15518:6:25"},"nodeType":"YulFunctionCall","src":"15518:15:25"},"nodeType":"YulExpressionStatement","src":"15518:15:25"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"15412:127:25"},{"body":{"nodeType":"YulBlock","src":"15747:286:25","statements":[{"nodeType":"YulVariableDeclaration","src":"15757:29:25","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15775:3:25","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"15780:1:25","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15771:3:25"},"nodeType":"YulFunctionCall","src":"15771:11:25"},{"kind":"number","nodeType":"YulLiteral","src":"15784:1:25","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15767:3:25"},"nodeType":"YulFunctionCall","src":"15767:19:25"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"15761:2:25","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15802:9:25"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15817:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"15825:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15813:3:25"},"nodeType":"YulFunctionCall","src":"15813:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15795:6:25"},"nodeType":"YulFunctionCall","src":"15795:34:25"},"nodeType":"YulExpressionStatement","src":"15795:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15849:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15860:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15845:3:25"},"nodeType":"YulFunctionCall","src":"15845:18:25"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15869:6:25"},{"name":"_1","nodeType":"YulIdentifier","src":"15877:2:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15865:3:25"},"nodeType":"YulFunctionCall","src":"15865:15:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15838:6:25"},"nodeType":"YulFunctionCall","src":"15838:43:25"},"nodeType":"YulExpressionStatement","src":"15838:43:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15901:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15912:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15897:3:25"},"nodeType":"YulFunctionCall","src":"15897:18:25"},{"name":"value2","nodeType":"YulIdentifier","src":"15917:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15890:6:25"},"nodeType":"YulFunctionCall","src":"15890:34:25"},"nodeType":"YulExpressionStatement","src":"15890:34:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15944:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"15955:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15940:3:25"},"nodeType":"YulFunctionCall","src":"15940:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"15960:3:25","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15933:6:25"},"nodeType":"YulFunctionCall","src":"15933:31:25"},"nodeType":"YulExpressionStatement","src":"15933:31:25"},{"nodeType":"YulAssignment","src":"15973:54:25","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"15999:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16011:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16022:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16007:3:25"},"nodeType":"YulFunctionCall","src":"16007:19:25"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"15981:17:25"},"nodeType":"YulFunctionCall","src":"15981:46:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15973:4:25"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15692:9:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"15703:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15711:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15719:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15727:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15738:4:25","type":""}],"src":"15544:489:25"},{"body":{"nodeType":"YulBlock","src":"16118:169:25","statements":[{"body":{"nodeType":"YulBlock","src":"16164:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16173:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16176:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16166:6:25"},"nodeType":"YulFunctionCall","src":"16166:12:25"},"nodeType":"YulExpressionStatement","src":"16166:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"16139:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"16148:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16135:3:25"},"nodeType":"YulFunctionCall","src":"16135:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"16160:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16131:3:25"},"nodeType":"YulFunctionCall","src":"16131:32:25"},"nodeType":"YulIf","src":"16128:52:25"},{"nodeType":"YulVariableDeclaration","src":"16189:29:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16208:9:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16202:5:25"},"nodeType":"YulFunctionCall","src":"16202:16:25"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"16193:5:25","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16251:5:25"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"16227:23:25"},"nodeType":"YulFunctionCall","src":"16227:30:25"},"nodeType":"YulExpressionStatement","src":"16227:30:25"},{"nodeType":"YulAssignment","src":"16266:15:25","value":{"name":"value","nodeType":"YulIdentifier","src":"16276:5:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"16266:6:25"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16084:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"16095:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"16107:6:25","type":""}],"src":"16038:249:25"},{"body":{"nodeType":"YulBlock","src":"16466:182:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16483:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16494:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16476:6:25"},"nodeType":"YulFunctionCall","src":"16476:21:25"},"nodeType":"YulExpressionStatement","src":"16476:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16517:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16528:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16513:3:25"},"nodeType":"YulFunctionCall","src":"16513:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"16533:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16506:6:25"},"nodeType":"YulFunctionCall","src":"16506:30:25"},"nodeType":"YulExpressionStatement","src":"16506:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16556:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16567:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16552:3:25"},"nodeType":"YulFunctionCall","src":"16552:18:25"},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"16572:34:25","type":"","value":"ERC721: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16545:6:25"},"nodeType":"YulFunctionCall","src":"16545:62:25"},"nodeType":"YulExpressionStatement","src":"16545:62:25"},{"nodeType":"YulAssignment","src":"16616:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16628:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16639:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16624:3:25"},"nodeType":"YulFunctionCall","src":"16624:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16616:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16443:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16457:4:25","type":""}],"src":"16292:356:25"},{"body":{"nodeType":"YulBlock","src":"16827:178:25","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16844:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16855:2:25","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16837:6:25"},"nodeType":"YulFunctionCall","src":"16837:21:25"},"nodeType":"YulExpressionStatement","src":"16837:21:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16878:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16889:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16874:3:25"},"nodeType":"YulFunctionCall","src":"16874:18:25"},{"kind":"number","nodeType":"YulLiteral","src":"16894:2:25","type":"","value":"28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16867:6:25"},"nodeType":"YulFunctionCall","src":"16867:30:25"},"nodeType":"YulExpressionStatement","src":"16867:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16917:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16928:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16913:3:25"},"nodeType":"YulFunctionCall","src":"16913:18:25"},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","kind":"string","nodeType":"YulLiteral","src":"16933:30:25","type":"","value":"ERC721: token already minted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16906:6:25"},"nodeType":"YulFunctionCall","src":"16906:58:25"},"nodeType":"YulExpressionStatement","src":"16906:58:25"},{"nodeType":"YulAssignment","src":"16973:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16985:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16996:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16981:3:25"},"nodeType":"YulFunctionCall","src":"16981:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16973:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16804:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16818:4:25","type":""}],"src":"16653:352:25"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_string_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, shl(248, 255)))\n        let _1 := 32\n        mstore(add(headStart, _1), 224)\n        let tail_1 := abi_encode_string(value1, add(headStart, 224))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), sub(tail_2, headStart))\n        let pos := tail_2\n        let length := mload(value6)\n        mstore(tail_2, length)\n        pos := add(tail_2, _1)\n        let srcPtr := add(value6, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 61)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not to\")\n        mstore(add(headStart, 96), \"ken owner or approved for all\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC721: caller is not token owne\")\n        mstore(add(headStart, 96), \"r or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Transfer failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_47dcc88603f32730c5f1349ee02d9fe469c193c742f38ce12c7b0ba84c66c8a4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Invalid tokenId\")\n        tail := add(headStart, 96)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_calldata_ptr_to_t_string_storage(slot, src, len)\n    {\n        if gt(len, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), len)\n        let srcOffset := 0\n        switch gt(len, 31)\n        case 1 {\n            let loopEnd := and(len, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := srcOffset\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, calldataload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, len)\n            {\n                sstore(dstPtr, and(calldataload(add(src, srcOffset)), not(shr(and(shl(3, len), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, len), 1))\n        }\n        default {\n            let value := 0\n            if len\n            {\n                value := calldataload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, len))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ERC721: invalid token ID\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: address zero is not a va\")\n        mstore(add(headStart, 96), \"lid owner\")\n        tail := add(headStart, 128)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC721: transfer from incorrect \")\n        mstore(add(headStart, 96), \"owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"ERC721: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"ERC721: token already minted\")\n        tail := add(headStart, 96)\n    }\n}","id":25,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"3949":[{"length":32,"start":2447}],"3952":[{"length":32,"start":2490}]},"linkReferences":{},"object":"6080604052600436106101665760003560e01c806370a08231116100d1578063a0712d681161008a578063c87b56dd11610064578063c87b56dd1461040b578063e985e9c51461042b578063ef77c1861461044b578063f2fde38b1461047857600080fd5b8063a0712d68146103b8578063a22cb465146103cb578063b88d4fde146103eb57600080fd5b806370a0823114610308578063715018a6146103285780637e9657b71461033d57806384b0196e1461035d5780638da5cb5b1461038557806395d89b41146103a357600080fd5b80633ccfd60b116101235780633ccfd60b1461026057806342842e0e14610275578063451450ec1461029557806355f804b3146102a85780636352211e146102c85780636c19e783146102e857600080fd5b806301ffc9a71461016b57806306fdde03146101a0578063081812fc146101c2578063095ea7b3146101fa57806318160ddd1461021c57806323b872dd14610240575b600080fd5b34801561017757600080fd5b5061018b610186366004611560565b610498565b60405190151581526020015b60405180910390f35b3480156101ac57600080fd5b506101b56104ea565b60405161019791906115cd565b3480156101ce57600080fd5b506101e26101dd3660046115e0565b61057c565b6040516001600160a01b039091168152602001610197565b34801561020657600080fd5b5061021a610215366004611615565b6105a3565b005b34801561022857600080fd5b5061023260095481565b604051908152602001610197565b34801561024c57600080fd5b5061021a61025b36600461163f565b6106bd565b34801561026c57600080fd5b5061021a6106ee565b34801561028157600080fd5b5061021a61029036600461163f565b6107bb565b61021a6102a336600461167b565b6107d6565b3480156102b457600080fd5b5061021a6102c336600461169d565b610840565b3480156102d457600080fd5b506101e26102e33660046115e0565b610855565b3480156102f457600080fd5b5061021a61030336600461170f565b6108b5565b34801561031457600080fd5b5061023261032336600461170f565b6108df565b34801561033457600080fd5b5061021a610965565b34801561034957600080fd5b5061021a61035836600461167b565b610979565b34801561036957600080fd5b50610372610981565b604051610197979695949392919061172a565b34801561039157600080fd5b506008546001600160a01b03166101e2565b3480156103af57600080fd5b506101b5610a0a565b61021a6103c63660046115e0565b610a19565b3480156103d757600080fd5b5061021a6103e63660046117c0565b610a56565b3480156103f757600080fd5b5061021a610406366004611812565b610a65565b34801561041757600080fd5b506101b56104263660046115e0565b610a9d565b34801561043757600080fd5b5061018b6104463660046118ee565b610b04565b34801561045757600080fd5b506102326104663660046115e0565b600a6020526000908152604090205481565b34801561048457600080fd5b5061021a61049336600461170f565b610b32565b60006001600160e01b031982166380ac58cd60e01b14806104c957506001600160e01b03198216635b5e139f60e01b145b806104e457506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546104f990611921565b80601f016020809104026020016040519081016040528092919081815260200182805461052590611921565b80156105725780601f1061054757610100808354040283529160200191610572565b820191906000526020600020905b81548152906001019060200180831161055557829003601f168201915b5050505050905090565b600061058782610ba8565b506000908152600460205260409020546001600160a01b031690565b60006105ae82610855565b9050806001600160a01b0316836001600160a01b0316036106205760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061063c575061063c8133610b04565b6106ae5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610617565b6106b88383610c07565b505050565b6106c73382610c75565b6106e35760405162461bcd60e51b81526004016106179061195b565b6106b8838383610cd4565b6106f6610e38565b600061070a6008546001600160a01b031690565b604080516000815260208101918290526001600160a01b039290921691479161073391906119a8565b60006040518083038185875af1925050503d8060008114610770576040519150601f19603f3d011682016040523d82523d6000602084013e610775565b606091505b50509050806107b85760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610617565b50565b6106b883838360405180602001604052806000815250610a65565b6107de610e38565b6000821180156107f057506009548211155b61082e5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b6044820152606401610617565b6000918252600a602052604090912055565b610848610e38565b600d6106b8828483611a12565b6000818152600260205260408120546001600160a01b0316806104e45760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610617565b6108bd610e38565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b0382166109495760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610617565b506001600160a01b031660009081526003602052604090205490565b61096d610e38565b6109776000610e92565b565b61082e610e38565b6000606080828080836109b57f00000000000000000000000000000000000000000000000000000000000000006006610ee4565b6109e07f00000000000000000000000000000000000000000000000000000000000000006007610ee4565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6060600180546104f990611921565b610a21610e38565b60098054906000610a3183611ad3565b9190505550610a4233600954610f8f565b6009546000908152600a6020526040902055565b610a61338383610fa9565b5050565b610a6f3383610c75565b610a8b5760405162461bcd60e51b81526004016106179061195b565b610a9784848484611077565b50505050565b6060610aa882610ba8565b6000610ab26110aa565b90506000815111610ad25760405180602001604052806000815250610afd565b80610adc846110b9565b604051602001610aed929190611afa565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610b3a610e38565b6001600160a01b038116610b9f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610617565b6107b881610e92565b6000818152600260205260409020546001600160a01b03166107b85760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610617565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610c3c82610855565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610c8183610855565b9050806001600160a01b0316846001600160a01b03161480610ca85750610ca88185610b04565b80610ccc5750836001600160a01b0316610cc18461057c565b6001600160a01b0316145b949350505050565b826001600160a01b0316610ce782610855565b6001600160a01b031614610d0d5760405162461bcd60e51b815260040161061790611b29565b6001600160a01b038216610d6f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610617565b826001600160a01b0316610d8282610855565b6001600160a01b031614610da85760405162461bcd60e51b815260040161061790611b29565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6008546001600160a01b031633146109775760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610617565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606060ff8314610efe57610ef78361114c565b90506104e4565b818054610f0a90611921565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3690611921565b8015610f835780601f10610f5857610100808354040283529160200191610f83565b820191906000526020600020905b815481529060010190602001808311610f6657829003601f168201915b505050505090506104e4565b610a6182826040518060200160405280600081525061118b565b816001600160a01b0316836001600160a01b03160361100a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610617565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611082848484610cd4565b61108e848484846111be565b610a975760405162461bcd60e51b815260040161061790611b6e565b6060600d80546104f990611921565b606060006110c6836112bf565b600101905060008167ffffffffffffffff8111156110e6576110e66117fc565b6040519080825280601f01601f191660200182016040528015611110576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461111a57509392505050565b6060600061115983611397565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b61119583836113bf565b6111a260008484846111be565b6106b85760405162461bcd60e51b815260040161061790611b6e565b60006001600160a01b0384163b156112b457604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611202903390899088908890600401611bc0565b6020604051808303816000875af192505050801561123d575060408051601f3d908101601f1916820190925261123a91810190611bfd565b60015b61129a573d80801561126b576040519150601f19603f3d011682016040523d82523d6000602084013e611270565b606091505b5080516000036112925760405162461bcd60e51b815260040161061790611b6e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610ccc565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106112fe5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061132a576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061134857662386f26fc10000830492506010015b6305f5e1008310611360576305f5e100830492506008015b612710831061137457612710830492506004015b60648310611386576064830492506002015b600a83106104e45760010192915050565b600060ff8216601f8111156104e457604051632cd44ac360e21b815260040160405180910390fd5b6001600160a01b0382166114155760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610617565b6000818152600260205260409020546001600160a01b03161561147a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610617565b6000818152600260205260409020546001600160a01b0316156114df5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610617565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b0319811681146107b857600080fd5b60006020828403121561157257600080fd5b8135610afd8161154a565b60005b83811015611598578181015183820152602001611580565b50506000910152565b600081518084526115b981602086016020860161157d565b601f01601f19169290920160200192915050565b602081526000610afd60208301846115a1565b6000602082840312156115f257600080fd5b5035919050565b80356001600160a01b038116811461161057600080fd5b919050565b6000806040838503121561162857600080fd5b611631836115f9565b946020939093013593505050565b60008060006060848603121561165457600080fd5b61165d846115f9565b925061166b602085016115f9565b9150604084013590509250925092565b6000806040838503121561168e57600080fd5b50508035926020909101359150565b600080602083850312156116b057600080fd5b823567ffffffffffffffff808211156116c857600080fd5b818501915085601f8301126116dc57600080fd5b8135818111156116eb57600080fd5b8660208285010111156116fd57600080fd5b60209290920196919550909350505050565b60006020828403121561172157600080fd5b610afd826115f9565b60ff60f81b881681526000602060e08184015261174a60e084018a6115a1565b838103604085015261175c818a6115a1565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b818110156117ae57835183529284019291840191600101611792565b50909c9b505050505050505050505050565b600080604083850312156117d357600080fd5b6117dc836115f9565b9150602083013580151581146117f157600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561182857600080fd5b611831856115f9565b935061183f602086016115f9565b925060408501359150606085013567ffffffffffffffff8082111561186357600080fd5b818701915087601f83011261187757600080fd5b813581811115611889576118896117fc565b604051601f8201601f19908116603f011681019083821181831017156118b1576118b16117fc565b816040528281528a60208487010111156118ca57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561190157600080fd5b61190a836115f9565b9150611918602084016115f9565b90509250929050565b600181811c9082168061193557607f821691505b60208210810361195557634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b600082516119ba81846020870161157d565b9190910192915050565b601f8211156106b857600081815260208120601f850160051c810160208610156119eb5750805b601f850160051c820191505b81811015611a0a578281556001016119f7565b505050505050565b67ffffffffffffffff831115611a2a57611a2a6117fc565b611a3e83611a388354611921565b836119c4565b6000601f841160018114611a725760008515611a5a5750838201355b600019600387901b1c1916600186901b178355611acc565b600083815260209020601f19861690835b82811015611aa35786850135825560209485019460019092019101611a83565b5086821015611ac05760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b600060018201611af357634e487b7160e01b600052601160045260246000fd5b5060010190565b60008351611b0c81846020880161157d565b835190830190611b2081836020880161157d565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611bf3908301846115a1565b9695505050505050565b600060208284031215611c0f57600080fd5b8151610afd8161154a56fea2646970667358221220f1cafbaf035bc71ae45f4b14bd7e80cc238732cfd3d42a334f6d655521b4afba64736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x166 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xA0712D68 GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x40B JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x42B JUMPI DUP1 PUSH4 0xEF77C186 EQ PUSH2 0x44B JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA0712D68 EQ PUSH2 0x3B8 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3CB JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x308 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x328 JUMPI DUP1 PUSH4 0x7E9657B7 EQ PUSH2 0x33D JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x35D JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x385 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3CCFD60B GT PUSH2 0x123 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x260 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x275 JUMPI DUP1 PUSH4 0x451450EC EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x55F804B3 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0x6C19E783 EQ PUSH2 0x2E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x16B JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x1C2 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x21C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x240 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18B PUSH2 0x186 CALLDATASIZE PUSH1 0x4 PUSH2 0x1560 JUMP JUMPDEST PUSH2 0x498 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B5 PUSH2 0x4EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x197 SWAP2 SWAP1 PUSH2 0x15CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E2 PUSH2 0x1DD CALLDATASIZE PUSH1 0x4 PUSH2 0x15E0 JUMP JUMPDEST PUSH2 0x57C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x197 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x206 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x215 CALLDATASIZE PUSH1 0x4 PUSH2 0x1615 JUMP JUMPDEST PUSH2 0x5A3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x228 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x197 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x25B CALLDATASIZE PUSH1 0x4 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x6BD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x6EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x290 CALLDATASIZE PUSH1 0x4 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x7BB JUMP JUMPDEST PUSH2 0x21A PUSH2 0x2A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x167B JUMP JUMPDEST PUSH2 0x7D6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x2C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x169D JUMP JUMPDEST PUSH2 0x840 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E2 PUSH2 0x2E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x15E0 JUMP JUMPDEST PUSH2 0x855 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x303 CALLDATASIZE PUSH1 0x4 PUSH2 0x170F JUMP JUMPDEST PUSH2 0x8B5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x314 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0x323 CALLDATASIZE PUSH1 0x4 PUSH2 0x170F JUMP JUMPDEST PUSH2 0x8DF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x965 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x349 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x358 CALLDATASIZE PUSH1 0x4 PUSH2 0x167B JUMP JUMPDEST PUSH2 0x979 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x369 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x372 PUSH2 0x981 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x197 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x172A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x391 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1E2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B5 PUSH2 0xA0A JUMP JUMPDEST PUSH2 0x21A PUSH2 0x3C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x15E0 JUMP JUMPDEST PUSH2 0xA19 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x3E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x17C0 JUMP JUMPDEST PUSH2 0xA56 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x406 CALLDATASIZE PUSH1 0x4 PUSH2 0x1812 JUMP JUMPDEST PUSH2 0xA65 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B5 PUSH2 0x426 CALLDATASIZE PUSH1 0x4 PUSH2 0x15E0 JUMP JUMPDEST PUSH2 0xA9D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x437 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18B PUSH2 0x446 CALLDATASIZE PUSH1 0x4 PUSH2 0x18EE JUMP JUMPDEST PUSH2 0xB04 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x457 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x232 PUSH2 0x466 CALLDATASIZE PUSH1 0x4 PUSH2 0x15E0 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x484 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21A PUSH2 0x493 CALLDATASIZE PUSH1 0x4 PUSH2 0x170F JUMP JUMPDEST PUSH2 0xB32 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x4C9 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x4E4 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x4F9 SWAP1 PUSH2 0x1921 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x525 SWAP1 PUSH2 0x1921 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x572 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x547 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x572 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x555 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x587 DUP3 PUSH2 0xBA8 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5AE DUP3 PUSH2 0x855 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x620 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x63C JUMPI POP PUSH2 0x63C DUP2 CALLER PUSH2 0xB04 JUMP JUMPDEST PUSH2 0x6AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x617 JUMP JUMPDEST PUSH2 0x6B8 DUP4 DUP4 PUSH2 0xC07 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x6C7 CALLER DUP3 PUSH2 0xC75 JUMP JUMPDEST PUSH2 0x6E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x617 SWAP1 PUSH2 0x195B JUMP JUMPDEST PUSH2 0x6B8 DUP4 DUP4 DUP4 PUSH2 0xCD4 JUMP JUMPDEST PUSH2 0x6F6 PUSH2 0xE38 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x70A PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SELFBALANCE SWAP2 PUSH2 0x733 SWAP2 SWAP1 PUSH2 0x19A8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x770 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x775 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x7B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x617 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x6B8 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xA65 JUMP JUMPDEST PUSH2 0x7DE PUSH2 0xE38 JUMP JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x7F0 JUMPI POP PUSH1 0x9 SLOAD DUP3 GT ISZERO JUMPDEST PUSH2 0x82E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x125B9D985B1A59081D1BDAD95B9259 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x617 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH2 0x848 PUSH2 0xE38 JUMP JUMPDEST PUSH1 0xD PUSH2 0x6B8 DUP3 DUP5 DUP4 PUSH2 0x1A12 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x4E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x617 JUMP JUMPDEST PUSH2 0x8BD PUSH2 0xE38 JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x949 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x617 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x96D PUSH2 0xE38 JUMP JUMPDEST PUSH2 0x977 PUSH1 0x0 PUSH2 0xE92 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x82E PUSH2 0xE38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP3 DUP1 DUP1 DUP4 PUSH2 0x9B5 PUSH32 0x0 PUSH1 0x6 PUSH2 0xEE4 JUMP JUMPDEST PUSH2 0x9E0 PUSH32 0x0 PUSH1 0x7 PUSH2 0xEE4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x4F9 SWAP1 PUSH2 0x1921 JUMP JUMPDEST PUSH2 0xA21 PUSH2 0xE38 JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0xA31 DUP4 PUSH2 0x1AD3 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH2 0xA42 CALLER PUSH1 0x9 SLOAD PUSH2 0xF8F JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMP JUMPDEST PUSH2 0xA61 CALLER DUP4 DUP4 PUSH2 0xFA9 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xA6F CALLER DUP4 PUSH2 0xC75 JUMP JUMPDEST PUSH2 0xA8B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x617 SWAP1 PUSH2 0x195B JUMP JUMPDEST PUSH2 0xA97 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1077 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xAA8 DUP3 PUSH2 0xBA8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAB2 PUSH2 0x10AA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0xAD2 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xAFD JUMP JUMPDEST DUP1 PUSH2 0xADC DUP5 PUSH2 0x10B9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xAED SWAP3 SWAP2 SWAP1 PUSH2 0x1AFA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0xB3A PUSH2 0xE38 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xB9F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x617 JUMP JUMPDEST PUSH2 0x7B8 DUP2 PUSH2 0xE92 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x617 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0xC3C DUP3 PUSH2 0x855 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC81 DUP4 PUSH2 0x855 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xCA8 JUMPI POP PUSH2 0xCA8 DUP2 DUP6 PUSH2 0xB04 JUMP JUMPDEST DUP1 PUSH2 0xCCC JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xCC1 DUP5 PUSH2 0x57C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xCE7 DUP3 PUSH2 0x855 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xD0D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x617 SWAP1 PUSH2 0x1B29 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD6F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x617 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD82 DUP3 PUSH2 0x855 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xDA8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x617 SWAP1 PUSH2 0x1B29 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x977 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x617 JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0xEFE JUMPI PUSH2 0xEF7 DUP4 PUSH2 0x114C JUMP JUMPDEST SWAP1 POP PUSH2 0x4E4 JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0xF0A SWAP1 PUSH2 0x1921 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF36 SWAP1 PUSH2 0x1921 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF83 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF58 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF83 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF66 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x4E4 JUMP JUMPDEST PUSH2 0xA61 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x118B JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x100A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x617 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1082 DUP5 DUP5 DUP5 PUSH2 0xCD4 JUMP JUMPDEST PUSH2 0x108E DUP5 DUP5 DUP5 DUP5 PUSH2 0x11BE JUMP JUMPDEST PUSH2 0xA97 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x617 SWAP1 PUSH2 0x1B6E JUMP JUMPDEST PUSH1 0x60 PUSH1 0xD DUP1 SLOAD PUSH2 0x4F9 SWAP1 PUSH2 0x1921 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x10C6 DUP4 PUSH2 0x12BF JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10E6 JUMPI PUSH2 0x10E6 PUSH2 0x17FC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1110 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x111A JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1159 DUP4 PUSH2 0x1397 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x1195 DUP4 DUP4 PUSH2 0x13BF JUMP JUMPDEST PUSH2 0x11A2 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x11BE JUMP JUMPDEST PUSH2 0x6B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x617 SWAP1 PUSH2 0x1B6E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x12B4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x1202 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1BC0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x123D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x123A SWAP2 DUP2 ADD SWAP1 PUSH2 0x1BFD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x129A JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x126B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1270 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1292 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x617 SWAP1 PUSH2 0x1B6E JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0xCCC JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x12FE JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x132A JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1348 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1360 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1374 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1386 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x4E4 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x4E4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1415 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x617 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x147A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x617 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x14DF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x617 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE MLOAD DUP4 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x7B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xAFD DUP2 PUSH2 0x154A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1598 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1580 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x15B9 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x157D JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xAFD PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x15A1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1610 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1628 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1631 DUP4 PUSH2 0x15F9 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1654 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x165D DUP5 PUSH2 0x15F9 JUMP JUMPDEST SWAP3 POP PUSH2 0x166B PUSH1 0x20 DUP6 ADD PUSH2 0x15F9 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x168E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x16B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x16C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x16DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x16EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x16FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1721 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAFD DUP3 PUSH2 0x15F9 JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0xE0 DUP2 DUP5 ADD MSTORE PUSH2 0x174A PUSH1 0xE0 DUP5 ADD DUP11 PUSH2 0x15A1 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x175C DUP2 DUP11 PUSH2 0x15A1 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD DUP8 SWAP1 MSTORE DUP5 DUP2 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE DUP4 DUP8 ADD SWAP3 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17AE JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1792 JUMP JUMPDEST POP SWAP1 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17DC DUP4 PUSH2 0x15F9 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x17F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1828 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1831 DUP6 PUSH2 0x15F9 JUMP JUMPDEST SWAP4 POP PUSH2 0x183F PUSH1 0x20 DUP7 ADD PUSH2 0x15F9 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1863 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1877 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1889 JUMPI PUSH2 0x1889 PUSH2 0x17FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x18B1 JUMPI PUSH2 0x18B1 PUSH2 0x17FC JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x18CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1901 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x190A DUP4 PUSH2 0x15F9 JUMP JUMPDEST SWAP2 POP PUSH2 0x1918 PUSH1 0x20 DUP5 ADD PUSH2 0x15F9 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1935 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1955 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x19BA DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x157D JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x6B8 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x19EB JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1A0A JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x19F7 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x1A2A JUMPI PUSH2 0x1A2A PUSH2 0x17FC JUMP JUMPDEST PUSH2 0x1A3E DUP4 PUSH2 0x1A38 DUP4 SLOAD PUSH2 0x1921 JUMP JUMPDEST DUP4 PUSH2 0x19C4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP5 GT PUSH1 0x1 DUP2 EQ PUSH2 0x1A72 JUMPI PUSH1 0x0 DUP6 ISZERO PUSH2 0x1A5A JUMPI POP DUP4 DUP3 ADD CALLDATALOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP8 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP7 SWAP1 SHL OR DUP4 SSTORE PUSH2 0x1ACC JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP1 DUP4 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1AA3 JUMPI DUP7 DUP6 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x1A83 JUMP JUMPDEST POP DUP7 DUP3 LT ISZERO PUSH2 0x1AC0 JUMPI PUSH1 0x0 NOT PUSH1 0xF8 DUP9 PUSH1 0x3 SHL AND SHR NOT DUP5 DUP8 ADD CALLDATALOAD AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP6 PUSH1 0x1 SHL ADD DUP4 SSTORE JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1AF3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1B0C DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x157D JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x1B20 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x157D JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1BF3 SWAP1 DUP4 ADD DUP5 PUSH2 0x15A1 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xAFD DUP2 PUSH2 0x154A JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL 0xCA 0xFB 0xAF SUB JUMPDEST 0xC7 BYTE 0xE4 0x5F 0x4B EQ 0xBD PUSH31 0x80CC238732CFD3D42A334F6D655521B4AFBA64736F6C634300081300330000 ","sourceMap":"599:1355:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300:7;;;;;;;;;;-1:-1:-1;1570:300:7;;;;;:::i;:::-;;:::i;:::-;;;565:14:25;;558:22;540:41;;528:2;513:18;1570:300:7;;;;;;;;2471:98;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3935:167::-;;;;;;;;;;-1:-1:-1;3935:167:7;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1697:32:25;;;1679:51;;1667:2;1652:18;3935:167:7;1533:203:25;3468:406:7;;;;;;;;;;-1:-1:-1;3468:406:7;;;;;:::i;:::-;;:::i;:::-;;739:26:24;;;;;;;;;;;;;;;;;;;2324:25:25;;;2312:2;2297:18;739:26:24;2178:177:25;4612:296:7;;;;;;;;;;-1:-1:-1;4612:296:7;;;;;:::i;:::-;;:::i;1779:173:24:-;;;;;;;;;;;;;:::i;4974:149:7:-;;;;;;;;;;-1:-1:-1;4974:149:7;;;;;:::i;:::-;;:::i;1141:199:24:-;;;;;;:::i;:::-;;:::i;1546:102::-;;;;;;;;;;-1:-1:-1;1546:102:24;;;;;:::i;:::-;;:::i;2190:219:7:-;;;;;;;;;;-1:-1:-1;2190:219:7;;;;;:::i;:::-;;:::i;1450:90:24:-;;;;;;;;;;-1:-1:-1;1450:90:24;;;;;:::i;:::-;;:::i;1929:204:7:-;;;;;;;;;;-1:-1:-1;1929:204:7;;;;;:::i;:::-;;:::i;1824:101:0:-;;;;;;;;;;;;;:::i;1654:119:24:-;;;;;;;;;;-1:-1:-1;1654:119:24;;;;;:::i;:::-;;:::i;5021:633:17:-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;1201:85:0:-;;;;;;;;;;-1:-1:-1;1273:6:0;;-1:-1:-1;;;;;1273:6:0;1201:85;;2633:102:7;;;;;;;;;;;;;:::i;961:174:24:-;;;;;;:::i;:::-;;:::i;4169:153:7:-;;;;;;;;;;-1:-1:-1;4169:153:7;;;;;:::i;:::-;;:::i;5189:276::-;;;;;;;;;;-1:-1:-1;5189:276:7;;;;;:::i;:::-;;:::i;2801:::-;;;;;;;;;;-1:-1:-1;2801:276:7;;;;;:::i;:::-;;:::i;4388:162::-;;;;;;;;;;-1:-1:-1;4388:162:7;;;;;:::i;:::-;;:::i;771:44:24:-;;;;;;;;;;-1:-1:-1;771:44:24;;;;;:::i;:::-;;;;;;;;;;;;;;2074:198:0;;;;;;;;;;-1:-1:-1;2074:198:0;;;;;:::i;:::-;;:::i;1570:300:7:-;1672:4;-1:-1:-1;;;;;;1707:40:7;;-1:-1:-1;;;1707:40:7;;:104;;-1:-1:-1;;;;;;;1763:48:7;;-1:-1:-1;;;1763:48:7;1707:104;:156;;;-1:-1:-1;;;;;;;;;;937:40:19;;;1827:36:7;1688:175;1570:300;-1:-1:-1;;1570:300:7:o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;-1:-1:-1;4071:24:7;;;;:15;:24;;;;;;-1:-1:-1;;;;;4071:24:7;;3935:167::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;-1:-1:-1;;;;;3605:11:7;:2;-1:-1:-1;;;;;3605:11:7;;3597:57;;;;-1:-1:-1;;;3597:57:7;;7477:2:25;3597:57:7;;;7459:21:25;7516:2;7496:18;;;7489:30;7555:34;7535:18;;;7528:62;-1:-1:-1;;;7606:18:25;;;7599:31;7647:19;;3597:57:7;;;;;;;;;734:10:12;-1:-1:-1;;;;;3686:21:7;;;;:62;;-1:-1:-1;3711:37:7;3728:5;734:10:12;4388:162:7;:::i;3711:37::-;3665:170;;;;-1:-1:-1;;;3665:170:7;;7879:2:25;3665:170:7;;;7861:21:25;7918:2;7898:18;;;7891:30;7957:34;7937:18;;;7930:62;8028:31;8008:18;;;8001:59;8077:19;;3665:170:7;7677:425:25;3665:170:7;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;4612:296::-;4771:41;734:10:12;4804:7:7;4771:18;:41::i;:::-;4763:99;;;;-1:-1:-1;;;4763:99:7;;;;;;;:::i;:::-;4873:28;4883:4;4889:2;4893:7;4873:9;:28::i;1779:173:24:-;1094:13:0;:11;:13::i;:::-;1827:12:24::1;1844:7;1273:6:0::0;;-1:-1:-1;;;;;1273:6:0;;1201:85;1844:7:24::1;1887:12;::::0;;1897:1:::1;1887:12:::0;;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;;;1844:12:24;;;::::1;::::0;1864:21:::1;::::0;1844:56:::1;::::0;1887:12;1844:56:::1;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1826:74;;;1918:7;1910:35;;;::::0;-1:-1:-1;;;1910:35:24;;9015:2:25;1910:35:24::1;::::0;::::1;8997:21:25::0;9054:2;9034:18;;;9027:30;-1:-1:-1;;;9073:18:25;;;9066:45;9128:18;;1910:35:24::1;8813:339:25::0;1910:35:24::1;1816:136;1779:173::o:0;4974:149:7:-;5077:39;5094:4;5100:2;5104:7;5077:39;;;;;;;;;;;;:16;:39::i;1141:199:24:-;1094:13:0;:11;:13::i;:::-;1246:1:24::1;1236:7;:11;:37;;;;;1262:11;;1251:7;:22;;1236:37;1228:65;;;::::0;-1:-1:-1;;;1228:65:24;;9359:2:25;1228:65:24::1;::::0;::::1;9341:21:25::0;9398:2;9378:18;;;9371:30;-1:-1:-1;;;9417:18:25;;;9410:45;9472:18;;1228:65:24::1;9157:339:25::0;1228:65:24::1;1304:18;::::0;;;:9:::1;:18;::::0;;;;;:29;1141:199::o;1546:102::-;1094:13:0;:11;:13::i;:::-;1621:7:24::1;:20;1631:10:::0;;1621:7;:20:::1;:::i;2190:219:7:-:0;2262:7;6794:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6794:16:7;;2324:56;;;;-1:-1:-1;;;2324:56:7;;11761:2:25;2324:56:7;;;11743:21:25;11800:2;11780:18;;;11773:30;-1:-1:-1;;;11819:18:25;;;11812:54;11883:18;;2324:56:7;11559:348:25;1450:90:24;1094:13:0;:11;:13::i;:::-;1515:6:24::1;:18:::0;;-1:-1:-1;;;;;;1515:18:24::1;-1:-1:-1::0;;;;;1515:18:24;;;::::1;::::0;;;::::1;::::0;;1450:90::o;1929:204:7:-;2001:7;-1:-1:-1;;;;;2028:19:7;;2020:73;;;;-1:-1:-1;;;2020:73:7;;12114:2:25;2020:73:7;;;12096:21:25;12153:2;12133:18;;;12126:30;12192:34;12172:18;;;12165:62;-1:-1:-1;;;12243:18:25;;;12236:39;12292:19;;2020:73:7;11912:405:25;2020:73:7;-1:-1:-1;;;;;;2110:16:7;;;;;:9;:16;;;;;;;1929:204::o;1824:101:0:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;1654:119:24:-;1094:13:0;:11;:13::i;5021:633:17:-;5136:13;5163:18;;5136:13;;;5163:18;5427:41;:5;5454:13;5427:26;:41::i;:::-;5482:47;:8;5512:16;5482:29;:47::i;:::-;5621:16;;;5605:1;5621:16;;;;;;;;;-1:-1:-1;;;5376:271:17;;;-1:-1:-1;5376:271:17;;-1:-1:-1;5543:13:17;;-1:-1:-1;5578:4:17;;-1:-1:-1;5605:1:17;-1:-1:-1;5621:16:17;-1:-1:-1;5376:271:17;-1:-1:-1;5021:633:17:o;2633:102:7:-;2689:13;2721:7;2714:14;;;;;:::i;961:174:24:-;1094:13:0;:11;:13::i;:::-;1028:11:24::1;:13:::0;;;:11:::1;:13;::::0;::::1;:::i;:::-;;;;;;1051:34;1061:10;1073:11;;1051:9;:34::i;:::-;1105:11;::::0;1095:22:::1;::::0;;;:9:::1;:22;::::0;;;;:33;961:174::o;4169:153:7:-;4263:52;734:10:12;4296:8:7;4306;4263:18;:52::i;:::-;4169:153;;:::o;5189:276::-;5319:41;734:10:12;5352:7:7;5319:18;:41::i;:::-;5311:99;;;;-1:-1:-1;;;5311:99:7;;;;;;;:::i;:::-;5420:38;5434:4;5440:2;5444:7;5453:4;5420:13;:38::i;:::-;5189:276;;;;:::o;2801:::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;2801:276;-1:-1:-1;;;2801:276:7:o;4388:162::-;-1:-1:-1;;;;;4508:25:7;;;4485:4;4508:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4388:162::o;2074:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2162:22:0;::::1;2154:73;;;::::0;-1:-1:-1;;;2154:73:0;;13262:2:25;2154:73:0::1;::::0;::::1;13244:21:25::0;13301:2;13281:18;;;13274:30;13340:34;13320:18;;;13313:62;-1:-1:-1;;;13391:18:25;;;13384:36;13437:19;;2154:73:0::1;13060:402:25::0;2154:73:0::1;2237:28;2256:8;2237:18;:28::i;13240:133:7:-:0;7185:4;6794:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6794:16:7;13313:53;;;;-1:-1:-1;;;13313:53:7;;11761:2:25;13313:53:7;;;11743:21:25;11800:2;11780:18;;;11773:30;-1:-1:-1;;;11819:18:25;;;11812:54;11883:18;;13313:53:7;11559:348:25;12572:171:7;12646:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;12646:29:7;-1:-1:-1;;;;;12646:29:7;;;;;;;;:24;;12699:23;12646:24;12699:14;:23::i;:::-;-1:-1:-1;;;;;12690:46:7;;;;;;;;;;;12572:171;;:::o;7404:261::-;7497:4;7513:13;7529:23;7544:7;7529:14;:23::i;:::-;7513:39;;7581:5;-1:-1:-1;;;;;7570:16:7;:7;-1:-1:-1;;;;;7570:16:7;;:52;;;;7590:32;7607:5;7614:7;7590:16;:32::i;:::-;7570:87;;;;7650:7;-1:-1:-1;;;;;7626:31:7;:20;7638:7;7626:11;:20::i;:::-;-1:-1:-1;;;;;7626:31:7;;7570:87;7562:96;7404:261;-1:-1:-1;;;;7404:261:7:o;11257:1203::-;11381:4;-1:-1:-1;;;;;11354:31:7;:23;11369:7;11354:14;:23::i;:::-;-1:-1:-1;;;;;11354:31:7;;11346:81;;;;-1:-1:-1;;;11346:81:7;;;;;;;:::i;:::-;-1:-1:-1;;;;;11445:16:7;;11437:65;;;;-1:-1:-1;;;11437:65:7;;14075:2:25;11437:65:7;;;14057:21:25;14114:2;14094:18;;;14087:30;14153:34;14133:18;;;14126:62;-1:-1:-1;;;14204:18:25;;;14197:34;14248:19;;11437:65:7;13873:400:25;11437:65:7;11682:4;-1:-1:-1;;;;;11655:31:7;:23;11670:7;11655:14;:23::i;:::-;-1:-1:-1;;;;;11655:31:7;;11647:81;;;;-1:-1:-1;;;11647:81:7;;;;;;;:::i;:::-;11797:24;;;;:15;:24;;;;;;;;11790:31;;-1:-1:-1;;;;;;11790:31:7;;;;;;-1:-1:-1;;;;;12265:15:7;;;;;;:9;:15;;;;;:20;;-1:-1:-1;;12265:20:7;;;12299:13;;;;;;;;;:18;;11790:31;12299:18;;;12337:16;;;:7;:16;;;;;;:21;;;;;;;;;;12374:27;;11813:7;;12374:27;;;3538:336;3468:406;;:::o;1359:130:0:-;1273:6;;-1:-1:-1;;;;;1273:6:0;734:10:12;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;14480:2:25;1414:68:0;;;14462:21:25;;;14499:18;;;14492:30;14558:34;14538:18;;;14531:62;14610:18;;1414:68:0;14278:356:25;2426:187:0;2518:6;;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;;2566:40;;2518:6;;;2534:17;2518:6;;2566:40;;2499:16;;2566:40;2489:124;2426:187;:::o;3367:268:13:-;3461:13;1371:66;3490:47;;3486:143;;3560:15;3569:5;3560:8;:15::i;:::-;3553:22;;;;3486:143;3613:5;3606:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7995:108:7;8070:26;8080:2;8084:7;8070:26;;;;;;;;;;;;:9;:26::i;12879:277::-;12999:8;-1:-1:-1;;;;;12990:17:7;:5;-1:-1:-1;;;;;12990:17:7;;12982:55;;;;-1:-1:-1;;;12982:55:7;;14841:2:25;12982:55:7;;;14823:21:25;14880:2;14860:18;;;14853:30;14919:27;14899:18;;;14892:55;14964:18;;12982:55:7;14639:349:25;12982:55:7;-1:-1:-1;;;;;13047:25:7;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;13047:46:7;;;;;;;;;;13108:41;;540::25;;;13108::7;;513:18:25;13108:41:7;;;;;;;12879:277;;;:::o;6326:267::-;6438:28;6448:4;6454:2;6458:7;6438:9;:28::i;:::-;6484:47;6507:4;6513:2;6517:7;6526:4;6484:22;:47::i;:::-;6476:110;;;;-1:-1:-1;;;6476:110:7;;;;;;;:::i;1346:98:24:-;1398:13;1430:7;1423:14;;;;;:::i;447:696:15:-;503:13;552:14;569:17;580:5;569:10;:17::i;:::-;589:1;569:21;552:38;;604:20;638:6;627:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;627:18:15;-1:-1:-1;604:41:15;-1:-1:-1;765:28:15;;;781:2;765:28;820:280;-1:-1:-1;;851:5:15;-1:-1:-1;;;985:2:15;974:14;;969:30;851:5;956:44;1044:2;1035:11;;;-1:-1:-1;1064:21:15;820:280;1064:21;-1:-1:-1;1120:6:15;447:696;-1:-1:-1;;;447:696:15:o;2059:405:13:-;2118:13;2143:11;2157:16;2168:4;2157:10;:16::i;:::-;2281:14;;;2292:2;2281:14;;;;;;;;;2143:30;;-1:-1:-1;2261:17:13;;2281:14;;;;;;;;;-1:-1:-1;;;2371:16:13;;;-1:-1:-1;2416:4:13;2407:14;;2400:28;;;;-1:-1:-1;2371:16:13;2059:405::o;8324:279:7:-;8418:18;8424:2;8428:7;8418:5;:18::i;:::-;8467:53;8498:1;8502:2;8506:7;8515:4;8467:22;:53::i;:::-;8446:150;;;;-1:-1:-1;;;8446:150:7;;;;;;;:::i;13925:831::-;14074:4;-1:-1:-1;;;;;14094:13:7;;1702:19:11;:23;14090:660:7;;14129:71;;-1:-1:-1;;;14129:71:7;;-1:-1:-1;;;;;14129:36:7;;;;;:71;;734:10:12;;14180:4:7;;14186:7;;14195:4;;14129:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14129:71:7;;;;;;;;-1:-1:-1;;14129:71:7;;;;;;;;;;;;:::i;:::-;;;14125:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14367:6;:13;14384:1;14367:18;14363:321;;14409:60;;-1:-1:-1;;;14409:60:7;;;;;;;:::i;14363:321::-;14636:6;14630:13;14621:6;14617:2;14613:15;14606:38;14125:573;-1:-1:-1;;;;;;14250:51:7;-1:-1:-1;;;14250:51:7;;-1:-1:-1;14243:58:7;;14090:660;-1:-1:-1;14735:4:7;13925:831;;;;;;:::o;10139:916:21:-;10192:7;;-1:-1:-1;;;10267:17:21;;10263:103;;-1:-1:-1;;;10304:17:21;;;-1:-1:-1;10349:2:21;10339:12;10263:103;10392:8;10383:5;:17;10379:103;;10429:8;10420:17;;;-1:-1:-1;10465:2:21;10455:12;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;-1:-1:-1;10581:2:21;10571:12;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;-1:-1:-1;10695:1:21;10685:11;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;-1:-1:-1;10808:1:21;10798:11;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;-1:-1:-1;10921:1:21;10911:11;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;11042:6;10139:916;-1:-1:-1;;10139:916:21:o;2536:245:13:-;2597:7;2669:4;2633:40;;2696:2;2687:11;;2683:69;;;2721:20;;-1:-1:-1;;;2721:20:13;;;;;;;;;;;8925:920:7;-1:-1:-1;;;;;9004:16:7;;8996:61;;;;-1:-1:-1;;;8996:61:7;;16494:2:25;8996:61:7;;;16476:21:25;;;16513:18;;;16506:30;16572:34;16552:18;;;16545:62;16624:18;;8996:61:7;16292:356:25;8996:61:7;7185:4;6794:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6794:16:7;7208:31;9067:58;;;;-1:-1:-1;;;9067:58:7;;16855:2:25;9067:58:7;;;16837:21:25;16894:2;16874:18;;;16867:30;16933;16913:18;;;16906:58;16981:18;;9067:58:7;16653:352:25;9067:58:7;7185:4;6794:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6794:16:7;7208:31;9271:58;;;;-1:-1:-1;;;9271:58:7;;16855:2:25;9271:58:7;;;16837:21:25;16894:2;16874:18;;;16867:30;16933;16913:18;;;16906:58;16981:18;;9271:58:7;16653:352:25;9271:58:7;-1:-1:-1;;;;;9671:13:7;;;;;;:9;:13;;;;;;;;:18;;9688:1;9671:18;;;9710:16;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;9710:21:7;;;;;9747:33;9718:7;;9671:13;;9747:33;;9671:13;;9747:33;4169:153;;:::o;14:131:25:-;-1:-1:-1;;;;;;88:32:25;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:250::-;677:1;687:113;701:6;698:1;695:13;687:113;;;777:11;;;771:18;758:11;;;751:39;723:2;716:10;687:113;;;-1:-1:-1;;834:1:25;816:16;;809:27;592:250::o;847:271::-;889:3;927:5;921:12;954:6;949:3;942:19;970:76;1039:6;1032:4;1027:3;1023:14;1016:4;1009:5;1005:16;970:76;:::i;:::-;1100:2;1079:15;-1:-1:-1;;1075:29:25;1066:39;;;;1107:4;1062:50;;847:271;-1:-1:-1;;847:271:25:o;1123:220::-;1272:2;1261:9;1254:21;1235:4;1292:45;1333:2;1322:9;1318:18;1310:6;1292:45;:::i;1348:180::-;1407:6;1460:2;1448:9;1439:7;1435:23;1431:32;1428:52;;;1476:1;1473;1466:12;1428:52;-1:-1:-1;1499:23:25;;1348:180;-1:-1:-1;1348:180:25:o;1741:173::-;1809:20;;-1:-1:-1;;;;;1858:31:25;;1848:42;;1838:70;;1904:1;1901;1894:12;1838:70;1741:173;;;:::o;1919:254::-;1987:6;1995;2048:2;2036:9;2027:7;2023:23;2019:32;2016:52;;;2064:1;2061;2054:12;2016:52;2087:29;2106:9;2087:29;:::i;:::-;2077:39;2163:2;2148:18;;;;2135:32;;-1:-1:-1;;;1919:254:25:o;2360:328::-;2437:6;2445;2453;2506:2;2494:9;2485:7;2481:23;2477:32;2474:52;;;2522:1;2519;2512:12;2474:52;2545:29;2564:9;2545:29;:::i;:::-;2535:39;;2593:38;2627:2;2616:9;2612:18;2593:38;:::i;:::-;2583:48;;2678:2;2667:9;2663:18;2650:32;2640:42;;2360:328;;;;;:::o;2693:248::-;2761:6;2769;2822:2;2810:9;2801:7;2797:23;2793:32;2790:52;;;2838:1;2835;2828:12;2790:52;-1:-1:-1;;2861:23:25;;;2931:2;2916:18;;;2903:32;;-1:-1:-1;2693:248:25:o;2946:592::-;3017:6;3025;3078:2;3066:9;3057:7;3053:23;3049:32;3046:52;;;3094:1;3091;3084:12;3046:52;3134:9;3121:23;3163:18;3204:2;3196:6;3193:14;3190:34;;;3220:1;3217;3210:12;3190:34;3258:6;3247:9;3243:22;3233:32;;3303:7;3296:4;3292:2;3288:13;3284:27;3274:55;;3325:1;3322;3315:12;3274:55;3365:2;3352:16;3391:2;3383:6;3380:14;3377:34;;;3407:1;3404;3397:12;3377:34;3452:7;3447:2;3438:6;3434:2;3430:15;3426:24;3423:37;3420:57;;;3473:1;3470;3463:12;3420:57;3504:2;3496:11;;;;;3526:6;;-1:-1:-1;2946:592:25;;-1:-1:-1;;;;2946:592:25:o;3543:186::-;3602:6;3655:2;3643:9;3634:7;3630:23;3626:32;3623:52;;;3671:1;3668;3661:12;3623:52;3694:29;3713:9;3694:29;:::i;3734:1259::-;4140:3;4135;4131:13;4123:6;4119:26;4108:9;4101:45;4082:4;4165:2;4203:3;4198:2;4187:9;4183:18;4176:31;4230:46;4271:3;4260:9;4256:19;4248:6;4230:46;:::i;:::-;4324:9;4316:6;4312:22;4307:2;4296:9;4292:18;4285:50;4358:33;4384:6;4376;4358:33;:::i;:::-;4422:2;4407:18;;4400:34;;;-1:-1:-1;;;;;4471:32:25;;4465:3;4450:19;;4443:61;4491:3;4520:19;;4513:35;;;4585:22;;;4579:3;4564:19;;4557:51;4657:13;;4679:22;;;4755:15;;;;-1:-1:-1;4717:15:25;;;;-1:-1:-1;4798:169:25;4812:6;4809:1;4806:13;4798:169;;;4873:13;;4861:26;;4942:15;;;;4907:12;;;;4834:1;4827:9;4798:169;;;-1:-1:-1;4984:3:25;;3734:1259;-1:-1:-1;;;;;;;;;;;;3734:1259:25:o;4998:347::-;5063:6;5071;5124:2;5112:9;5103:7;5099:23;5095:32;5092:52;;;5140:1;5137;5130:12;5092:52;5163:29;5182:9;5163:29;:::i;:::-;5153:39;;5242:2;5231:9;5227:18;5214:32;5289:5;5282:13;5275:21;5268:5;5265:32;5255:60;;5311:1;5308;5301:12;5255:60;5334:5;5324:15;;;4998:347;;;;;:::o;5350:127::-;5411:10;5406:3;5402:20;5399:1;5392:31;5442:4;5439:1;5432:15;5466:4;5463:1;5456:15;5482:1138;5577:6;5585;5593;5601;5654:3;5642:9;5633:7;5629:23;5625:33;5622:53;;;5671:1;5668;5661:12;5622:53;5694:29;5713:9;5694:29;:::i;:::-;5684:39;;5742:38;5776:2;5765:9;5761:18;5742:38;:::i;:::-;5732:48;;5827:2;5816:9;5812:18;5799:32;5789:42;;5882:2;5871:9;5867:18;5854:32;5905:18;5946:2;5938:6;5935:14;5932:34;;;5962:1;5959;5952:12;5932:34;6000:6;5989:9;5985:22;5975:32;;6045:7;6038:4;6034:2;6030:13;6026:27;6016:55;;6067:1;6064;6057:12;6016:55;6103:2;6090:16;6125:2;6121;6118:10;6115:36;;;6131:18;;:::i;:::-;6206:2;6200:9;6174:2;6260:13;;-1:-1:-1;;6256:22:25;;;6280:2;6252:31;6248:40;6236:53;;;6304:18;;;6324:22;;;6301:46;6298:72;;;6350:18;;:::i;:::-;6390:10;6386:2;6379:22;6425:2;6417:6;6410:18;6465:7;6460:2;6455;6451;6447:11;6443:20;6440:33;6437:53;;;6486:1;6483;6476:12;6437:53;6542:2;6537;6533;6529:11;6524:2;6516:6;6512:15;6499:46;6587:1;6582:2;6577;6569:6;6565:15;6561:24;6554:35;6608:6;6598:16;;;;;;;5482:1138;;;;;;;:::o;6625:260::-;6693:6;6701;6754:2;6742:9;6733:7;6729:23;6725:32;6722:52;;;6770:1;6767;6760:12;6722:52;6793:29;6812:9;6793:29;:::i;:::-;6783:39;;6841:38;6875:2;6864:9;6860:18;6841:38;:::i;:::-;6831:48;;6625:260;;;;;:::o;6890:380::-;6969:1;6965:12;;;;7012;;;7033:61;;7087:4;7079:6;7075:17;7065:27;;7033:61;7140:2;7132:6;7129:14;7109:18;7106:38;7103:161;;7186:10;7181:3;7177:20;7174:1;7167:31;7221:4;7218:1;7211:15;7249:4;7246:1;7239:15;7103:161;;6890:380;;;:::o;8107:409::-;8309:2;8291:21;;;8348:2;8328:18;;;8321:30;8387:34;8382:2;8367:18;;8360:62;-1:-1:-1;;;8453:2:25;8438:18;;8431:43;8506:3;8491:19;;8107:409::o;8521:287::-;8650:3;8688:6;8682:13;8704:66;8763:6;8758:3;8751:4;8743:6;8739:17;8704:66;:::i;:::-;8786:16;;;;;8521:287;-1:-1:-1;;8521:287:25:o;9627:545::-;9729:2;9724:3;9721:11;9718:448;;;9765:1;9790:5;9786:2;9779:17;9835:4;9831:2;9821:19;9905:2;9893:10;9889:19;9886:1;9882:27;9876:4;9872:38;9941:4;9929:10;9926:20;9923:47;;;-1:-1:-1;9964:4:25;9923:47;10019:2;10014:3;10010:12;10007:1;10003:20;9997:4;9993:31;9983:41;;10074:82;10092:2;10085:5;10082:13;10074:82;;;10137:17;;;10118:1;10107:13;10074:82;;;10078:3;;;9627:545;;;:::o;10348:1206::-;10472:18;10467:3;10464:27;10461:53;;;10494:18;;:::i;:::-;10523:94;10613:3;10573:38;10605:4;10599:11;10573:38;:::i;:::-;10567:4;10523:94;:::i;:::-;10643:1;10668:2;10663:3;10660:11;10685:1;10680:616;;;;11340:1;11357:3;11354:93;;;-1:-1:-1;11413:19:25;;;11400:33;11354:93;-1:-1:-1;;10305:1:25;10301:11;;;10297:24;10293:29;10283:40;10329:1;10325:11;;;10280:57;11460:78;;10653:895;;10680:616;9574:1;9567:14;;;9611:4;9598:18;;-1:-1:-1;;10716:17:25;;;10817:9;10839:229;10853:7;10850:1;10847:14;10839:229;;;10942:19;;;10929:33;10914:49;;11049:4;11034:20;;;;11002:1;10990:14;;;;10869:12;10839:229;;;10843:3;11096;11087:7;11084:16;11081:159;;;11220:1;11216:6;11210:3;11204;11201:1;11197:11;11193:21;11189:34;11185:39;11172:9;11167:3;11163:19;11150:33;11146:79;11138:6;11131:95;11081:159;;;11283:1;11277:3;11274:1;11270:11;11266:19;11260:4;11253:33;10653:895;;;10348:1206;;;:::o;12322:232::-;12361:3;12382:17;;;12379:140;;12441:10;12436:3;12432:20;12429:1;12422:31;12476:4;12473:1;12466:15;12504:4;12501:1;12494:15;12379:140;-1:-1:-1;12546:1:25;12535:13;;12322:232::o;12559:496::-;12738:3;12776:6;12770:13;12792:66;12851:6;12846:3;12839:4;12831:6;12827:17;12792:66;:::i;:::-;12921:13;;12880:16;;;;12943:70;12921:13;12880:16;12990:4;12978:17;;12943:70;:::i;:::-;13029:20;;12559:496;-1:-1:-1;;;;12559:496:25:o;13467:401::-;13669:2;13651:21;;;13708:2;13688:18;;;13681:30;13747:34;13742:2;13727:18;;13720:62;-1:-1:-1;;;13813:2:25;13798:18;;13791:35;13858:3;13843:19;;13467:401::o;14993:414::-;15195:2;15177:21;;;15234:2;15214:18;;;15207:30;15273:34;15268:2;15253:18;;15246:62;-1:-1:-1;;;15339:2:25;15324:18;;15317:48;15397:3;15382:19;;14993:414::o;15544:489::-;-1:-1:-1;;;;;15813:15:25;;;15795:34;;15865:15;;15860:2;15845:18;;15838:43;15912:2;15897:18;;15890:34;;;15960:3;15955:2;15940:18;;15933:31;;;15738:4;;15981:46;;16007:19;;15999:6;15981:46;:::i;:::-;15973:54;15544:489;-1:-1:-1;;;;;;15544:489:25:o;16038:249::-;16107:6;16160:2;16148:9;16139:7;16135:23;16131:32;16128:52;;;16176:1;16173;16166:12;16128:52;16208:9;16202:16;16227:30;16251:5;16227:30;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"1449600","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2612","eip712Domain()":"infinite","getApproved(uint256)":"4792","isApprovedForAll(address,address)":"infinite","mint(uint256)":"infinite","name()":"infinite","owner()":"2442","ownerOf(uint256)":"2649","renounceOwnership()":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26750","setBaseURI(string)":"infinite","setSigner(address)":"26868","setStrength(uint256,uint256)":"24647","strengths(uint256)":"2526","supportsInterface(bytes4)":"534","symbol()":"infinite","tokenURI(uint256)":"infinite","totalSupply()":"2407","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"28446","upgrade(uint256,uint256)":"26780","withdraw()":"infinite"},"internal":{"_baseURI()":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","eip712Domain()":"84b0196e","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","mint(uint256)":"a0712d68","name()":"06fdde03","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","renounceOwnership()":"715018a6","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","setBaseURI(string)":"55f804b3","setSigner(address)":"6c19e783","setStrength(uint256,uint256)":"7e9657b7","strengths(uint256)":"ef77c186","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b","upgrade(uint256,uint256)":"451450ec","withdraw()":"3ccfd60b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strength\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strength\",\"type\":\"uint256\"}],\"name\":\"setStrength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strengths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strength\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BasePaintBrush.sol\":\"BasePaintBrush\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8432884527a7ad91e6eed1cfc5a0811ae2073e5bca107bd0ca442e9236b03dbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x3af3ca86df39aac39a0514c84459d691434a108d2151c8ce9d69f32e315cab80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/BasePaintBrush.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Author: @w1nt3r_eth\\n// To be clear, I (0xNader) didn't write this contract, keeping it here for reference.\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\n\\ninterface IBasePaintBrush is IERC721 {\\n    function strengths(uint256 tokenId) external view returns (uint256);\\n}\\n\\ncontract BasePaintBrush is\\n    ERC721(\\\"BasePaint Brush\\\", \\\"BPB\\\"),\\n    EIP712(\\\"BasePaint Brush\\\", \\\"1\\\"),\\n    IBasePaintBrush,\\n    Ownable\\n{\\n    uint256 public totalSupply;\\n    mapping(uint256 => uint256) public strengths;\\n\\n    address private signer;\\n    mapping(uint256 => bool) private nonces;\\n    string private baseURI = \\\"https://basepaint.xyz/api/brush/\\\";\\n\\n    function mint(uint256 strength) public payable onlyOwner {\\n        totalSupply++;\\n        _safeMint(msg.sender, totalSupply);\\n        strengths[totalSupply] = strength;\\n    }\\n\\n    function upgrade(uint256 tokenId, uint256 strength) public payable onlyOwner {\\n        require(tokenId > 0 && tokenId <= totalSupply, \\\"Invalid tokenId\\\");\\n\\n        strengths[tokenId] = strength;\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function setSigner(address newSigner) public onlyOwner {\\n        signer = newSigner;\\n    }\\n\\n    function setBaseURI(string calldata newBaseURI) public onlyOwner {\\n        baseURI = newBaseURI;\\n    }\\n\\n    function setStrength(uint256 tokenId, uint256 strength) public onlyOwner {\\n        strengths[tokenId] = strength;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        (bool success,) = owner().call{value: address(this).balance}(new bytes(0));\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x658c6b5cebbfe37aee38f9691d4ca69ce8656c87e68c68c0e4111d1f80a4db3a\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1578,"contract":"contracts/BasePaintBrush.sol:BasePaintBrush","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":1580,"contract":"contracts/BasePaintBrush.sol:BasePaintBrush","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":1584,"contract":"contracts/BasePaintBrush.sol:BasePaintBrush","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":1588,"contract":"contracts/BasePaintBrush.sol:BasePaintBrush","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":1592,"contract":"contracts/BasePaintBrush.sol:BasePaintBrush","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":1598,"contract":"contracts/BasePaintBrush.sol:BasePaintBrush","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":3954,"contract":"contracts/BasePaintBrush.sol:BasePaintBrush","label":"_nameFallback","offset":0,"slot":"6","type":"t_string_storage"},{"astId":3956,"contract":"contracts/BasePaintBrush.sol:BasePaintBrush","label":"_versionFallback","offset":0,"slot":"7","type":"t_string_storage"},{"astId":7,"contract":"contracts/BasePaintBrush.sol:BasePaintBrush","label":"_owner","offset":0,"slot":"8","type":"t_address"},{"astId":5858,"contract":"contracts/BasePaintBrush.sol:BasePaintBrush","label":"totalSupply","offset":0,"slot":"9","type":"t_uint256"},{"astId":5862,"contract":"contracts/BasePaintBrush.sol:BasePaintBrush","label":"strengths","offset":0,"slot":"10","type":"t_mapping(t_uint256,t_uint256)"},{"astId":5864,"contract":"contracts/BasePaintBrush.sol:BasePaintBrush","label":"signer","offset":0,"slot":"11","type":"t_address"},{"astId":5868,"contract":"contracts/BasePaintBrush.sol:BasePaintBrush","label":"nonces","offset":0,"slot":"12","type":"t_mapping(t_uint256,t_bool)"},{"astId":5871,"contract":"contracts/BasePaintBrush.sol:BasePaintBrush","label":"baseURI","offset":0,"slot":"13","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_bool)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"IBasePaintBrush":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"strengths","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","strengths(uint256)":"ef77c186","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"strengths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BasePaintBrush.sol\":\"IBasePaintBrush\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8432884527a7ad91e6eed1cfc5a0811ae2073e5bca107bd0ca442e9236b03dbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x3af3ca86df39aac39a0514c84459d691434a108d2151c8ce9d69f32e315cab80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/BasePaintBrush.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Author: @w1nt3r_eth\\n// To be clear, I (0xNader) didn't write this contract, keeping it here for reference.\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\n\\ninterface IBasePaintBrush is IERC721 {\\n    function strengths(uint256 tokenId) external view returns (uint256);\\n}\\n\\ncontract BasePaintBrush is\\n    ERC721(\\\"BasePaint Brush\\\", \\\"BPB\\\"),\\n    EIP712(\\\"BasePaint Brush\\\", \\\"1\\\"),\\n    IBasePaintBrush,\\n    Ownable\\n{\\n    uint256 public totalSupply;\\n    mapping(uint256 => uint256) public strengths;\\n\\n    address private signer;\\n    mapping(uint256 => bool) private nonces;\\n    string private baseURI = \\\"https://basepaint.xyz/api/brush/\\\";\\n\\n    function mint(uint256 strength) public payable onlyOwner {\\n        totalSupply++;\\n        _safeMint(msg.sender, totalSupply);\\n        strengths[totalSupply] = strength;\\n    }\\n\\n    function upgrade(uint256 tokenId, uint256 strength) public payable onlyOwner {\\n        require(tokenId > 0 && tokenId <= totalSupply, \\\"Invalid tokenId\\\");\\n\\n        strengths[tokenId] = strength;\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function setSigner(address newSigner) public onlyOwner {\\n        signer = newSigner;\\n    }\\n\\n    function setBaseURI(string calldata newBaseURI) public onlyOwner {\\n        baseURI = newBaseURI;\\n    }\\n\\n    function setStrength(uint256 tokenId, uint256 strength) public onlyOwner {\\n        strengths[tokenId] = strength;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        (bool success,) = owner().call{value: address(this).balance}(new bytes(0));\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x658c6b5cebbfe37aee38f9691d4ca69ce8656c87e68c68c0e4111d1f80a4db3a\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}