{"id":"21602bcfd758f66239ab4faade80b187","_format":"hh-sol-build-info-1","solcVersion":"0.8.19","solcLongVersion":"0.8.19+commit.7dd6d404","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/utils/Base64.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n *\n * _Available since v4.5._\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/BasePaintRaffle.sol":{"content":"// SPDX-License-Identifier: MIT\n\n//    ___                  ___         _       __    ___         ___ ___ __    \n//   / _ ) ___ _ ___ ___  / _ \\ ___ _ (_)___  / /_  / _ \\ ___ _ / _// _// /___ \n//  / _  |/ _ `/(_-</ -_)/ ___// _ `// // _ \\/ __/ / , _// _ `// _// _// // -_)\n// /____/ \\_,_//___/\\__//_/    \\_,_//_//_//_/\\__/ /_/|_| \\_,_//_/ /_/ /_/ \\__/ \n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"erc721a/contracts/ERC721A.sol\";\n\ninterface BasePaint {\n    function today() external view returns (uint256);\n    function authorWithdraw(uint256[] calldata indexes) external;\n    function paint(uint256 day, uint256 tokenId, bytes calldata pixels) external;\n}\n\n/// @title BasePaint Raffle Contract\n/// @author 0xNader\n/// @notice Buy tickets and win a brush for the day\ncontract BasePaintRaffle is ERC721A, Ownable {\n    using Strings for uint256;\n\n// *********** Errors *********** //\n    error NotWinner();\n    error AlreadyDrawn();\n    error ZeroTicketAmount();\n    error IncorrectEthAmount();\n    error FailedToWithdraw();\n    error AlreadyClaimed();\n    error NonExistentToken();\n    error InvalidDay();\n\n// *********** Variables *********** //\n    BasePaint public immutable basePaint;\n    string public imageURI;\n    uint256 public ticketPrice;\n    uint256 public brushId;\n\n    ///@notice Stores the winning raffle ticket\n    mapping(uint256 => uint256) public winners;\n\n    /// @notice Stores if a winner has claimed their earnings\n    mapping(uint256 => bool) public claimedEarnings;\n\n// *********** Events *********** //\n    event TicketsPurchased(address recipent, uint256 amount, uint256 price);\n    event TicketPriceUpdated(uint256 prevPrice, uint256 updatedPrice);\n    event RaffleWinner(uint256 winningTokenId, uint256 day);\n\n// *********** Constructor *********** //\n    constructor(\n        address _basePaintAddress, \n        uint256 _brushId, \n        uint256 _ticketPrice, \n        string memory _imageURI\n    ) ERC721A(\"BasePaint Tickets\", \"BPT\") {\n        basePaint = BasePaint(_basePaintAddress);\n        brushId = _brushId;\n        ticketPrice = _ticketPrice;\n        imageURI = _imageURI;\n    }\n\n// *********** Functions *********** //\n    /// @notice Starts the raffle, can only be called once a day\n    function startRaffle() public {\n        uint256 today = basePaint.today();\n        if(winners[today] != 0) revert AlreadyDrawn();\n        \n        uint256 semiRandomNumber = uint256(keccak256(abi.encodePacked(block.prevrandao, today)));\n        uint256 winningTokenId = semiRandomNumber % this.totalSupply();\n        winners[today] = winningTokenId;\n\n        emit RaffleWinner(winningTokenId, today);\n    }\n\n    /// @notice Stores if a winner has claimed their earnings\n    /// @param _recipient Address that recieves the tickets\n    /// @param _amount Number of tickets to purchase\n    function buyTickets(address _recipient, uint256 _amount) external payable {\n        if(_amount == 0) revert ZeroTicketAmount();\n        if(msg.value != ticketPrice * _amount) revert IncorrectEthAmount();\n        \n\n        _mint(msg.sender, _amount);\n        emit TicketsPurchased(_recipient, _amount, ticketPrice);\n    }\n\n    /// @notice Raffle winner uses this function to paint\n    /// @param _pixels The target pixels paint\n    function paint(bytes calldata _pixels) external payable {\n        uint256 today = basePaint.today();\n        uint256 winningTokenId = winners[today];\n        if(msg.sender != this.ownerOf(winningTokenId)) revert NotWinner();\n        \n        basePaint.paint(today, brushId, _pixels);\n    }\n\n    /// @notice Called by winner to withdraw earnings after painting mint is completed\n    /// @param _day The basepaint day\n    function withdawEarnings(uint256 _day) external {\n        if(claimedEarnings[_day]) revert AlreadyClaimed();\n        if(_day >= basePaint.today()) revert InvalidDay();\n\n        uint256[] memory dayArr = new uint256[](1);\n        dayArr[0] = _day; \n\n        uint256 balanceBefore = address(this).balance;\n        basePaint.authorWithdraw(dayArr);\n        uint256 balanceAfter = address(this).balance;\n\n        uint256 earning = balanceAfter - balanceBefore;\n        uint256 winningTokenId = winners[_day];\n\n        address winner = this.ownerOf(winningTokenId);\n        (bool sent, ) = winner.call{value: earning}(\"\");\n\n        if(!sent) revert FailedToWithdraw();\n        claimedEarnings[_day] = true;\n    }\n\n    /// @notice Token Metadata getter\n    /// @param _tokenId the id of the token\n    /// @return metadata Encoded JSON metadata for a given token\n    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\n        if (!_exists(_tokenId)) revert NonExistentToken();\n\n        bytes memory dataURI = abi.encodePacked(\n            '{',\n                '\"name\": \"BasePaint Ticket ', _tokenId.toString(), '\",',\n                '\"description\": \"', \"Just a ticket...\", '\",',\n                '\"image\": \"', imageURI, '\"',\n            '}'\n        );\n        return string(abi.encodePacked(\n            \"data:application/json;base64,\",\n            Base64.encode(dataURI)\n        ));\n    }\n\n    /// @notice Override to start tokenIds at 1 instead of 0\n    function _startTokenId() internal pure override returns (uint256) {\n        return 1;\n    }\n\n// *********** Owner Functions *********** //\n    /// @notice Used by owner to update the ticket price\n    /// @param _newPrice The new price\n    function updateTicketPrice(uint256 _newPrice) external onlyOwner {\n        uint256 prevTicketPrice = ticketPrice;\n        ticketPrice = _newPrice;\n\n        emit TicketPriceUpdated(prevTicketPrice, _newPrice);\n    }\n\n    /// @notice Used by owner to withdraw ETH from ticket sales\n    /// @param _recipient The address to withdraw to\n    function withdrawTicketSales(address _recipient) external onlyOwner {\n        (bool sent, ) = _recipient.call{value: address(this).balance}(\"\");\n        if(!sent) revert FailedToWithdraw();\n    }\n}\n"},"erc721a/contracts/ERC721A.sol":{"content":"// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport './IERC721A.sol';\n\n/**\n * @dev Interface of ERC721 token receiver.\n */\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @title ERC721A\n *\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n * Non-Fungible Token Standard, including the Metadata extension.\n * Optimized for lower gas during batch mints.\n *\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n * starting from `_startTokenId()`.\n *\n * Assumptions:\n *\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\n    struct TokenApprovalRef {\n        address value;\n    }\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    // Mask of an entry in packed address data.\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\n\n    // The bit position of `numberBurned` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant _BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n    // The bit position of `startTimestamp` in packed ownership.\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\n\n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n    // The bit position of `extraData` in packed ownership.\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\n\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n    // The mask of the lower 160 bits for addresses.\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\n\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\n    // This limit is to prevent overflows on the address data entries.\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\n    // is required to cause an overflow, which is unrealistic.\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\n\n    // The `Transfer` event signature is given by:\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // The next token ID to be minted.\n    uint256 private _currentIndex;\n\n    // The number of tokens burned.\n    uint256 private _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See {_packedOwnershipOf} implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `startTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    // - [232..255] `extraData`\n    mapping(uint256 => uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberBurned`\n    // - [192..255] `aux`\n    mapping(address => uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    // =============================================================\n    //                   TOKEN COUNTING OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the starting token ID.\n     * To change the starting token ID, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Returns the next token ID to be minted.\n     */\n    function _nextTokenId() internal view virtual returns (uint256) {\n        return _currentIndex;\n    }\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view virtual returns (uint256) {\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\n        // and it is initialized to `_startTokenId()`.\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total number of tokens burned.\n     */\n    function _totalBurned() internal view virtual returns (uint256) {\n        return _burnCounter;\n    }\n\n    // =============================================================\n    //                    ADDRESS DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\n    }\n\n    /**\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal virtual {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        // Cast `aux` with assembly to avoid redundant masking.\n        assembly {\n            auxCasted := aux\n        }\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\n        _packedAddressData[owner] = packed;\n    }\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, it can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    // =============================================================\n    //                     OWNERSHIPS OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }\n\n    /**\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\n     */\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnerships[index]);\n    }\n\n    /**\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n     */\n    function _initializeOwnershipAt(uint256 index) internal virtual {\n        if (_packedOwnerships[index] == 0) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);\n        }\n    }\n\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr)\n                if (curr < _currentIndex) {\n                    uint256 packed = _packedOwnerships[curr];\n                    // If not burned.\n                    if (packed & _BITMASK_BURNED == 0) {\n                        // Invariant:\n                        // There will always be an initialized ownership slot\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\n                        // before an unintialized ownership slot\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\n                        // Hence, `curr` will not underflow.\n                        //\n                        // We can directly compare the packed value.\n                        // If the address is zero, packed will be zero.\n                        while (packed == 0) {\n                            packed = _packedOwnerships[--curr];\n                        }\n                        return packed;\n                    }\n                }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\n     */\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n        ownership.addr = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\n        ownership.burned = packed & _BITMASK_BURNED != 0;\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\n    }\n\n    /**\n     * @dev Packs ownership data into a single uint256.\n     */\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\n        }\n    }\n\n    /**\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n     */\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\n        // For branchless setting of the `nextInitialized` flag.\n        assembly {\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n        }\n    }\n\n    // =============================================================\n    //                      APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) public payable virtual override {\n        address owner = ownerOf(tokenId);\n\n        if (_msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                revert ApprovalCallerNotOwnerNorApproved();\n            }\n\n        _tokenApprovals[tokenId].value = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId].value;\n    }\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted. See {_mint}.\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return\n            _startTokenId() <= tokenId &&\n            tokenId < _currentIndex && // If within bounds,\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\n    }\n\n    /**\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\n     */\n    function _isSenderApprovedOrOwner(\n        address approvedAddress,\n        address owner,\n        address msgSender\n    ) private pure returns (bool result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\n            // `msgSender == owner || msgSender == approvedAddress`.\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\n        }\n    }\n\n    /**\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\n     */\n    function _getApprovedSlotAndAddress(uint256 tokenId)\n        private\n        view\n        returns (uint256 approvedAddressSlot, address approvedAddress)\n    {\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\n        assembly {\n            approvedAddressSlot := tokenApproval.slot\n            approvedAddress := sload(approvedAddressSlot)\n        }\n    }\n\n    // =============================================================\n    //                      TRANSFER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                to,\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public payable virtual override {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token IDs\n     * are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token IDs\n     * have been transferred. This includes minting.\n     * And also called after one token has been burned.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * `from` - Previous owner of the given token ID.\n     * `to` - Target address that will receive the token.\n     * `tokenId` - Token ID to be transferred.\n     * `_data` - Optional data to send along with the call.\n     *\n     * Returns whether the call correctly returned the expected magic value.\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\n            bytes4 retval\n        ) {\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    // =============================================================\n    //                        MINT OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _mint(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\n        // `tokenId` has a maximum limit of 2**256.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            uint256 toMasked;\n            uint256 end = startTokenId + quantity;\n\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\n            // The assembly, together with the surrounding Solidity code, have been\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\n            assembly {\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n                toMasked := and(to, _BITMASK_ADDRESS)\n                // Emit the `Transfer` event.\n                log4(\n                    0, // Start of data (0, since no data).\n                    0, // End of data (0, since no data).\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\n                    0, // `address(0)`.\n                    toMasked, // `to`.\n                    startTokenId // `tokenId`.\n                )\n\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\n                // that overflows uint256 will make the loop run out of gas.\n                // The compiler will optimize the `iszero` away for performance.\n                for {\n                    let tokenId := add(startTokenId, 1)\n                } iszero(eq(tokenId, end)) {\n                    tokenId := add(tokenId, 1)\n                } {\n                    // Emit the `Transfer` event. Similar to above.\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\n                }\n            }\n            if (toMasked == 0) revert MintToZeroAddress();\n\n            _currentIndex = end;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * This function is intended for efficient minting only during contract creation.\n     *\n     * It emits only one {ConsecutiveTransfer} as defined in\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n     * instead of a sequence of {Transfer} event(s).\n     *\n     * Calling this function outside of contract creation WILL make your contract\n     * non-compliant with the ERC721 standard.\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {ConsecutiveTransfer} event.\n     */\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\n\n            _currentIndex = startTokenId + quantity;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * See {_mint}.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, quantity);\n\n        unchecked {\n            if (to.code.length != 0) {\n                uint256 end = _currentIndex;\n                uint256 index = end - quantity;\n                do {\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (index < end);\n                // Reentrancy protection.\n                if (_currentIndex != end) revert();\n            }\n        }\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal virtual {\n        _safeMint(to, quantity, '');\n    }\n\n    // =============================================================\n    //                        BURN OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        address from = address(uint160(prevOwnershipPacked));\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        if (approvalCheck) {\n            // The nested ifs save around 20+ gas over a compound boolean condition.\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `balance -= 1`.\n            // - `numberBurned += 1`.\n            //\n            // We can directly decrement the balance, and increment the number burned.\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\n\n            // Updates:\n            // - `address` to the last owner.\n            // - `startTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                from,\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    // =============================================================\n    //                     EXTRA DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Directly sets the extra data for the ownership data `index`.\n     */\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\n        uint256 packed = _packedOwnerships[index];\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\n        uint256 extraDataCasted;\n        // Cast `extraData` with assembly to avoid redundant masking.\n        assembly {\n            extraDataCasted := extraData\n        }\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\n        _packedOwnerships[index] = packed;\n    }\n\n    /**\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\n     * Intended to be overridden by the cosumer contract.\n     *\n     * `previousExtraData` - the value of `extraData` before transfer.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _extraData(\n        address from,\n        address to,\n        uint24 previousExtraData\n    ) internal view virtual returns (uint24) {}\n\n    /**\n     * @dev Returns the next extra data for the packed ownership data.\n     * The returned result is shifted into position.\n     */\n    function _nextExtraData(\n        address from,\n        address to,\n        uint256 prevOwnershipPacked\n    ) private view returns (uint256) {\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\n    }\n\n    // =============================================================\n    //                       OTHER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Converts a uint256 to its ASCII string decimal representation.\n     */\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\n            let m := add(mload(0x40), 0xa0)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, m)\n            // Assign the `str` to the end.\n            str := sub(m, 0x20)\n            // Zeroize the slot after the string.\n            mstore(str, 0)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // prettier-ignore\n            for { let temp := value } 1 {} {\n                str := sub(str, 1)\n                // Write the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n                // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            let length := sub(end, str)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 0x20)\n            // Store the length.\n            mstore(str, length)\n        }\n    }\n}\n"},"erc721a/contracts/IERC721A.sol":{"content":"// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external payable;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external payable;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[189],"Ownable":[112]},"id":113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":113,"sourceUnit":190,"src":"127:30:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4,"name":"Context","nameLocations":["683:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":189,"src":"683:7:0"},"id":5,"nodeType":"InheritanceSpecifier","src":"683:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"159:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":112,"linearizedBaseContracts":[112,189],"name":"Ownable","nameLocation":"672:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":7,"mutability":"mutable","name":"_owner","nameLocation":"713:6:0","nodeType":"VariableDeclaration","scope":112,"src":"697:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":13,"name":"OwnershipTransferred","nameLocation":"732:20:0","nodeType":"EventDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:0","nodeType":"VariableDeclaration","scope":13,"src":"753:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:0","nodeType":"VariableDeclaration","scope":13,"src":"784:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:0"},"src":"726:84:0"},{"body":{"id":22,"nodeType":"Block","src":"926:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":18,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"955:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":19,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":17,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"936:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"936:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21,"nodeType":"ExpressionStatement","src":"936:32:0"}]},"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"816:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":23,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"923:2:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"926:0:0"},"scope":112,"src":"912:63:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":30,"nodeType":"Block","src":"1084:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":26,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1094:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":27,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1094:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":28,"nodeType":"ExpressionStatement","src":"1094:13:0"},{"id":29,"nodeType":"PlaceholderStatement","src":"1117:1:0"}]},"documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"981:77:0","text":" @dev Throws if called by any account other than the owner."},"id":31,"name":"onlyOwner","nameLocation":"1072:9:0","nodeType":"ModifierDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"1081:2:0"},"src":"1063:62:0","virtual":false,"visibility":"internal"},{"body":{"id":39,"nodeType":"Block","src":"1256:30:0","statements":[{"expression":{"id":37,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1273:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":36,"id":38,"nodeType":"Return","src":"1266:13:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1131:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":40,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:0","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1215:2:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":40,"src":"1247:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:0"},"scope":112,"src":"1201:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":53,"nodeType":"Block","src":"1404:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":45,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1422:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1422:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":47,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"1433:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1433:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":44,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1414:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1414:68:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"1292:62:0","text":" @dev Throws if the sender is not the owner."},"id":54,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:0","nodeType":"FunctionDefinition","parameters":{"id":42,"nodeType":"ParameterList","parameters":[],"src":"1379:2:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[],"src":"1404:0:0"},"scope":112,"src":"1359:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":67,"nodeType":"Block","src":"1878:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":63,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1915:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1907:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1907:7:0","typeDescriptions":{}}},"id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1907:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":60,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1888:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1888:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1888:30:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1495:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":68,"implemented":true,"kind":"function","modifiers":[{"id":58,"kind":"modifierInvocation","modifierName":{"id":57,"name":"onlyOwner","nameLocations":["1868:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1868:9:0"},"nodeType":"ModifierInvocation","src":"1868:9:0"}],"name":"renounceOwnership","nameLocation":"1833:17:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1850:2:0"},"returnParameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"1878:0:0"},"scope":112,"src":"1824:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":90,"nodeType":"Block","src":"2144:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":77,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2162:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":80,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2182:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":79,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2174:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"2174:7:0","typeDescriptions":{}}},"id":81,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2174:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2162:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2186:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":76,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2154:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2154:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":85,"nodeType":"ExpressionStatement","src":"2154:73:0"},{"expression":{"arguments":[{"id":87,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2256:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":86,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"2237:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2237:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":89,"nodeType":"ExpressionStatement","src":"2237:28:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1931:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":91,"implemented":true,"kind":"function","modifiers":[{"id":74,"kind":"modifierInvocation","modifierName":{"id":73,"name":"onlyOwner","nameLocations":["2134:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2134:9:0"},"nodeType":"ModifierInvocation","src":"2134:9:0"}],"name":"transferOwnership","nameLocation":"2083:17:0","nodeType":"FunctionDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"newOwner","nameLocation":"2109:8:0","nodeType":"VariableDeclaration","scope":91,"src":"2101:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"2101:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2100:18:0"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[],"src":"2144:0:0"},"scope":112,"src":"2074:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":110,"nodeType":"Block","src":"2489:124:0","statements":[{"assignments":[98],"declarations":[{"constant":false,"id":98,"mutability":"mutable","name":"oldOwner","nameLocation":"2507:8:0","nodeType":"VariableDeclaration","scope":110,"src":"2499:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"2499:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":100,"initialValue":{"id":99,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2518:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2499:25:0"},{"expression":{"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":101,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2534:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":102,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2543:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2534:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ExpressionStatement","src":"2534:17:0"},{"eventCall":{"arguments":[{"id":106,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"2587:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":107,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2597:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":105,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"2566:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2566:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":109,"nodeType":"EmitStatement","src":"2561:45:0"}]},"documentation":{"id":92,"nodeType":"StructuredDocumentation","src":"2278:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":111,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2435:18:0","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"newOwner","nameLocation":"2462:8:0","nodeType":"VariableDeclaration","scope":111,"src":"2454:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"2454:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2453:18:0"},"returnParameters":{"id":96,"nodeType":"ParameterList","parameters":[],"src":"2489:0:0"},"scope":112,"src":"2426:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":113,"src":"654:1961:0","usedErrors":[]}],"src":"102:2514:0"},"id":0},"@openzeppelin/contracts/utils/Base64.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Base64.sol","exportedSymbols":{"Base64":[159]},"id":160,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":114,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"Base64","contractDependencies":[],"contractKind":"library","documentation":{"id":115,"nodeType":"StructuredDocumentation","src":"125:105:1","text":" @dev Provides a set of functions to operate with Base64 strings.\n _Available since v4.5._"},"fullyImplemented":true,"id":159,"linearizedBaseContracts":[159],"name":"Base64","nameLocation":"239:6:1","nodeType":"ContractDefinition","nodes":[{"constant":true,"documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"252:54:1","text":" @dev Base64 Encoding/Decoding Table"},"id":119,"mutability":"constant","name":"_TABLE","nameLocation":"336:6:1","nodeType":"VariableDeclaration","scope":159,"src":"311:100:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":117,"name":"string","nodeType":"ElementaryTypeName","src":"311:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f","id":118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"345:66:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_84d8a590de33e00cbdc16e1f28c3506f5ec15c599fab9a6a4bcd575cc2f110ce","typeString":"literal_string \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\""},"value":"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"},"visibility":"internal"},{"body":{"id":157,"nodeType":"Block","src":"578:2953:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":127,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":122,"src":"795:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"800:6:1","memberName":"length","nodeType":"MemberAccess","src":"795:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"810:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"795:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"documentation":" Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol","id":133,"nodeType":"IfStatement","src":"791:31:1","trueBody":{"expression":{"hexValue":"","id":131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"820:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":126,"id":132,"nodeType":"Return","src":"813:9:1"}},{"assignments":[135],"declarations":[{"constant":false,"id":135,"mutability":"mutable","name":"table","nameLocation":"886:5:1","nodeType":"VariableDeclaration","scope":157,"src":"872:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":134,"name":"string","nodeType":"ElementaryTypeName","src":"872:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":137,"initialValue":{"id":136,"name":"_TABLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"894:6:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"872:28:1"},{"assignments":[139],"declarations":[{"constant":false,"id":139,"mutability":"mutable","name":"result","nameLocation":"1317:6:1","nodeType":"VariableDeclaration","scope":157,"src":"1303:20:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":138,"name":"string","nodeType":"ElementaryTypeName","src":"1303:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":153,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"34","id":142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1337:1:1","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":143,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":122,"src":"1343:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1348:6:1","memberName":"length","nodeType":"MemberAccess","src":"1343:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1357:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1343:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":147,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1342:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"33","id":148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:1","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"1342:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":150,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1341:23:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1337:27:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":141,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1326:10:1","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":140,"name":"string","nodeType":"ElementaryTypeName","src":"1330:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1326:39:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"1303:62:1"},{"AST":{"nodeType":"YulBlock","src":"1428:2073:1","statements":[{"nodeType":"YulVariableDeclaration","src":"1513:29:1","value":{"arguments":[{"name":"table","nodeType":"YulIdentifier","src":"1533:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"1540:1:1","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1529:3:1"},"nodeType":"YulFunctionCall","src":"1529:13:1"},"variables":[{"name":"tablePtr","nodeType":"YulTypedName","src":"1517:8:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1612:32:1","value":{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"1633:6:1"},{"kind":"number","nodeType":"YulLiteral","src":"1641:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1629:3:1"},"nodeType":"YulFunctionCall","src":"1629:15:1"},"variables":[{"name":"resultPtr","nodeType":"YulTypedName","src":"1616:9:1","type":""}]},{"body":{"nodeType":"YulBlock","src":"1857:1257:1","statements":[{"nodeType":"YulAssignment","src":"1910:26:1","value":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"1925:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"1934:1:1","type":"","value":"3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1921:3:1"},"nodeType":"YulFunctionCall","src":"1921:15:1"},"variableNames":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"1910:7:1"}]},{"nodeType":"YulVariableDeclaration","src":"1953:27:1","value":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"1972:7:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1966:5:1"},"nodeType":"YulFunctionCall","src":"1966:14:1"},"variables":[{"name":"input","nodeType":"YulTypedName","src":"1957:5:1","type":""}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2564:9:1"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"2585:8:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2603:2:1","type":"","value":"18"},{"name":"input","nodeType":"YulIdentifier","src":"2607:5:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2599:3:1"},"nodeType":"YulFunctionCall","src":"2599:14:1"},{"kind":"number","nodeType":"YulLiteral","src":"2615:4:1","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2595:3:1"},"nodeType":"YulFunctionCall","src":"2595:25:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2581:3:1"},"nodeType":"YulFunctionCall","src":"2581:40:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2575:5:1"},"nodeType":"YulFunctionCall","src":"2575:47:1"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"2556:7:1"},"nodeType":"YulFunctionCall","src":"2556:67:1"},"nodeType":"YulExpressionStatement","src":"2556:67:1"},{"nodeType":"YulAssignment","src":"2640:30:1","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2657:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2668:1:1","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2653:3:1"},"nodeType":"YulFunctionCall","src":"2653:17:1"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2640:9:1"}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2707:9:1"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"2728:8:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2746:2:1","type":"","value":"12"},{"name":"input","nodeType":"YulIdentifier","src":"2750:5:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2742:3:1"},"nodeType":"YulFunctionCall","src":"2742:14:1"},{"kind":"number","nodeType":"YulLiteral","src":"2758:4:1","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2738:3:1"},"nodeType":"YulFunctionCall","src":"2738:25:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2724:3:1"},"nodeType":"YulFunctionCall","src":"2724:40:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2718:5:1"},"nodeType":"YulFunctionCall","src":"2718:47:1"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"2699:7:1"},"nodeType":"YulFunctionCall","src":"2699:67:1"},"nodeType":"YulExpressionStatement","src":"2699:67:1"},{"nodeType":"YulAssignment","src":"2783:30:1","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2800:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2811:1:1","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2796:3:1"},"nodeType":"YulFunctionCall","src":"2796:17:1"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2783:9:1"}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2850:9:1"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"2871:8:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2889:1:1","type":"","value":"6"},{"name":"input","nodeType":"YulIdentifier","src":"2892:5:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2885:3:1"},"nodeType":"YulFunctionCall","src":"2885:13:1"},{"kind":"number","nodeType":"YulLiteral","src":"2900:4:1","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2881:3:1"},"nodeType":"YulFunctionCall","src":"2881:24:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2867:3:1"},"nodeType":"YulFunctionCall","src":"2867:39:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2861:5:1"},"nodeType":"YulFunctionCall","src":"2861:46:1"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"2842:7:1"},"nodeType":"YulFunctionCall","src":"2842:66:1"},"nodeType":"YulExpressionStatement","src":"2842:66:1"},{"nodeType":"YulAssignment","src":"2925:30:1","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2942:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2953:1:1","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2938:3:1"},"nodeType":"YulFunctionCall","src":"2938:17:1"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2925:9:1"}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2992:9:1"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"3013:8:1"},{"arguments":[{"name":"input","nodeType":"YulIdentifier","src":"3027:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"3034:4:1","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3023:3:1"},"nodeType":"YulFunctionCall","src":"3023:16:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3009:3:1"},"nodeType":"YulFunctionCall","src":"3009:31:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3003:5:1"},"nodeType":"YulFunctionCall","src":"3003:38:1"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"2984:7:1"},"nodeType":"YulFunctionCall","src":"2984:58:1"},"nodeType":"YulExpressionStatement","src":"2984:58:1"},{"nodeType":"YulAssignment","src":"3059:30:1","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3076:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3087:1:1","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3072:3:1"},"nodeType":"YulFunctionCall","src":"3072:17:1"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3059:9:1"}]}]},"condition":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"1823:7:1"},{"name":"endPtr","nodeType":"YulIdentifier","src":"1832:6:1"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1820:2:1"},"nodeType":"YulFunctionCall","src":"1820:19:1"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1840:16:1","statements":[]},"pre":{"nodeType":"YulBlock","src":"1715:104:1","statements":[{"nodeType":"YulVariableDeclaration","src":"1733:19:1","value":{"name":"data","nodeType":"YulIdentifier","src":"1748:4:1"},"variables":[{"name":"dataPtr","nodeType":"YulTypedName","src":"1737:7:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1769:36:1","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1787:4:1"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1799:4:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1793:5:1"},"nodeType":"YulFunctionCall","src":"1793:11:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1783:3:1"},"nodeType":"YulFunctionCall","src":"1783:22:1"},"variables":[{"name":"endPtr","nodeType":"YulTypedName","src":"1773:6:1","type":""}]}]},"src":"1711:1403:1"},{"cases":[{"body":{"nodeType":"YulBlock","src":"3294:113:1","statements":[{"expression":{"arguments":[{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3324:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3335:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3320:3:1"},"nodeType":"YulFunctionCall","src":"3320:17:1"},{"kind":"number","nodeType":"YulLiteral","src":"3339:4:1","type":"","value":"0x3d"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"3312:7:1"},"nodeType":"YulFunctionCall","src":"3312:32:1"},"nodeType":"YulExpressionStatement","src":"3312:32:1"},{"expression":{"arguments":[{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3373:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3384:1:1","type":"","value":"2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3369:3:1"},"nodeType":"YulFunctionCall","src":"3369:17:1"},{"kind":"number","nodeType":"YulLiteral","src":"3388:4:1","type":"","value":"0x3d"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"3361:7:1"},"nodeType":"YulFunctionCall","src":"3361:32:1"},"nodeType":"YulExpressionStatement","src":"3361:32:1"}]},"nodeType":"YulCase","src":"3287:120:1","value":{"kind":"number","nodeType":"YulLiteral","src":"3292:1:1","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"3427:64:1","statements":[{"expression":{"arguments":[{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3457:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"3468:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3453:3:1"},"nodeType":"YulFunctionCall","src":"3453:17:1"},{"kind":"number","nodeType":"YulLiteral","src":"3472:4:1","type":"","value":"0x3d"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"3445:7:1"},"nodeType":"YulFunctionCall","src":"3445:32:1"},"nodeType":"YulExpressionStatement","src":"3445:32:1"}]},"nodeType":"YulCase","src":"3420:71:1","value":{"kind":"number","nodeType":"YulLiteral","src":"3425:1:1","type":"","value":"2"}}],"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3265:4:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3259:5:1"},"nodeType":"YulFunctionCall","src":"3259:11:1"},{"kind":"number","nodeType":"YulLiteral","src":"3272:1:1","type":"","value":"3"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"3255:3:1"},"nodeType":"YulFunctionCall","src":"3255:19:1"},"nodeType":"YulSwitch","src":"3248:243:1"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":122,"isOffset":false,"isSlot":false,"src":"1748:4:1","valueSize":1},{"declaration":122,"isOffset":false,"isSlot":false,"src":"1787:4:1","valueSize":1},{"declaration":122,"isOffset":false,"isSlot":false,"src":"1799:4:1","valueSize":1},{"declaration":122,"isOffset":false,"isSlot":false,"src":"3265:4:1","valueSize":1},{"declaration":139,"isOffset":false,"isSlot":false,"src":"1633:6:1","valueSize":1},{"declaration":135,"isOffset":false,"isSlot":false,"src":"1533:5:1","valueSize":1}],"id":154,"nodeType":"InlineAssembly","src":"1419:2082:1"},{"expression":{"id":155,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"3518:6:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":126,"id":156,"nodeType":"Return","src":"3511:13:1"}]},"documentation":{"id":120,"nodeType":"StructuredDocumentation","src":"418:82:1","text":" @dev Converts a `bytes` to its Bytes64 `string` representation."},"id":158,"implemented":true,"kind":"function","modifiers":[],"name":"encode","nameLocation":"514:6:1","nodeType":"FunctionDefinition","parameters":{"id":123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":122,"mutability":"mutable","name":"data","nameLocation":"534:4:1","nodeType":"VariableDeclaration","scope":158,"src":"521:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":121,"name":"bytes","nodeType":"ElementaryTypeName","src":"521:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"520:19:1"},"returnParameters":{"id":126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":125,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":158,"src":"563:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":124,"name":"string","nodeType":"ElementaryTypeName","src":"563:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"562:15:1"},"scope":159,"src":"505:3026:1","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":160,"src":"231:3302:1","usedErrors":[]}],"src":"100:3434:1"},"id":1},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[189]},"id":190,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":161,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:2"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":162,"nodeType":"StructuredDocumentation","src":"126:496:2","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":189,"linearizedBaseContracts":[189],"name":"Context","nameLocation":"641:7:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":170,"nodeType":"Block","src":"717:34:2","statements":[{"expression":{"expression":{"id":167,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"734:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"738:6:2","memberName":"sender","nodeType":"MemberAccess","src":"734:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":166,"id":169,"nodeType":"Return","src":"727:17:2"}]},"id":171,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"664:10:2","nodeType":"FunctionDefinition","parameters":{"id":163,"nodeType":"ParameterList","parameters":[],"src":"674:2:2"},"returnParameters":{"id":166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":165,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":171,"src":"708:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":164,"name":"address","nodeType":"ElementaryTypeName","src":"708:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"707:9:2"},"scope":189,"src":"655:96:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":179,"nodeType":"Block","src":"824:32:2","statements":[{"expression":{"expression":{"id":176,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"841:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"845:4:2","memberName":"data","nodeType":"MemberAccess","src":"841:8:2","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":175,"id":178,"nodeType":"Return","src":"834:15:2"}]},"id":180,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"766:8:2","nodeType":"FunctionDefinition","parameters":{"id":172,"nodeType":"ParameterList","parameters":[],"src":"774:2:2"},"returnParameters":{"id":175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":174,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":180,"src":"808:14:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":173,"name":"bytes","nodeType":"ElementaryTypeName","src":"808:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"807:16:2"},"scope":189,"src":"757:99:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":187,"nodeType":"Block","src":"934:25:2","statements":[{"expression":{"hexValue":"30","id":185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"951:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":184,"id":186,"nodeType":"Return","src":"944:8:2"}]},"id":188,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"871:20:2","nodeType":"FunctionDefinition","parameters":{"id":181,"nodeType":"ParameterList","parameters":[],"src":"891:2:2"},"returnParameters":{"id":184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":183,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":188,"src":"925:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":182,"name":"uint256","nodeType":"ElementaryTypeName","src":"925:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"924:9:2"},"scope":189,"src":"862:97:2","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":190,"src":"623:338:2","usedErrors":[]}],"src":"101:861:2"},"id":2},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[1284],"SignedMath":[1389],"Strings":[418]},"id":419,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":191,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:3"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":192,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":419,"sourceUnit":1285,"src":"126:25:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":193,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":419,"sourceUnit":1390,"src":"152:31:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":194,"nodeType":"StructuredDocumentation","src":"185:34:3","text":" @dev String operations."},"fullyImplemented":true,"id":418,"linearizedBaseContracts":[418],"name":"Strings","nameLocation":"228:7:3","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":197,"mutability":"constant","name":"_SYMBOLS","nameLocation":"267:8:3","nodeType":"VariableDeclaration","scope":418,"src":"242:54:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":195,"name":"bytes16","nodeType":"ElementaryTypeName","src":"242:7:3","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"278:18:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":200,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"325:15:3","nodeType":"VariableDeclaration","scope":418,"src":"302:43:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":198,"name":"uint8","nodeType":"ElementaryTypeName","src":"302:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"343:2:3","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":247,"nodeType":"Block","src":"518:625:3","statements":[{"id":246,"nodeType":"UncheckedBlock","src":"528:609:3","statements":[{"assignments":[209],"declarations":[{"constant":false,"id":209,"mutability":"mutable","name":"length","nameLocation":"560:6:3","nodeType":"VariableDeclaration","scope":246,"src":"552:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":208,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":216,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":212,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":203,"src":"580:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":210,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"569:4:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$1284_$","typeString":"type(library Math)"}},"id":211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"574:5:3","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":1121,"src":"569:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"569:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"589:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"569:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"552:38:3"},{"assignments":[218],"declarations":[{"constant":false,"id":218,"mutability":"mutable","name":"buffer","nameLocation":"618:6:3","nodeType":"VariableDeclaration","scope":246,"src":"604:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":217,"name":"string","nodeType":"ElementaryTypeName","src":"604:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":223,"initialValue":{"arguments":[{"id":221,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"638:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":220,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"627:10:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":219,"name":"string","nodeType":"ElementaryTypeName","src":"631:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"627:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"604:41:3"},{"assignments":[225],"declarations":[{"constant":false,"id":225,"mutability":"mutable","name":"ptr","nameLocation":"667:3:3","nodeType":"VariableDeclaration","scope":246,"src":"659:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":224,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":226,"nodeType":"VariableDeclarationStatement","src":"659:11:3"},{"AST":{"nodeType":"YulBlock","src":"740:67:3","statements":[{"nodeType":"YulAssignment","src":"758:35:3","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"769:6:3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"781:2:3","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:3"},"nodeType":"YulFunctionCall","src":"777:15:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"765:3:3"},"nodeType":"YulFunctionCall","src":"765:28:3"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"758:3:3"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":218,"isOffset":false,"isSlot":false,"src":"769:6:3","valueSize":1},{"declaration":209,"isOffset":false,"isSlot":false,"src":"785:6:3","valueSize":1},{"declaration":225,"isOffset":false,"isSlot":false,"src":"758:3:3","valueSize":1}],"id":227,"nodeType":"InlineAssembly","src":"731:76:3"},{"body":{"id":242,"nodeType":"Block","src":"833:267:3","statements":[{"expression":{"id":230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"851:5:3","subExpression":{"id":229,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"851:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":231,"nodeType":"ExpressionStatement","src":"851:5:3"},{"AST":{"nodeType":"YulBlock","src":"934:84:3","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"964:3:3"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:3"},{"kind":"number","nodeType":"YulLiteral","src":"985:2:3","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"974:3:3"},"nodeType":"YulFunctionCall","src":"974:14:3"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"990:8:3"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"969:4:3"},"nodeType":"YulFunctionCall","src":"969:30:3"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"956:7:3"},"nodeType":"YulFunctionCall","src":"956:44:3"},"nodeType":"YulExpressionStatement","src":"956:44:3"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":197,"isOffset":false,"isSlot":false,"src":"990:8:3","valueSize":1},{"declaration":225,"isOffset":false,"isSlot":false,"src":"964:3:3","valueSize":1},{"declaration":203,"isOffset":false,"isSlot":false,"src":"978:5:3","valueSize":1}],"id":232,"nodeType":"InlineAssembly","src":"925:93:3"},{"expression":{"id":235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":233,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":203,"src":"1035:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1035:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":236,"nodeType":"ExpressionStatement","src":"1035:11:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":237,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":203,"src":"1068:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1068:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":241,"nodeType":"IfStatement","src":"1064:21:3","trueBody":{"id":240,"nodeType":"Break","src":"1080:5:3"}}]},"condition":{"hexValue":"74727565","id":228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":243,"nodeType":"WhileStatement","src":"820:280:3"},{"expression":{"id":244,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"1120:6:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":207,"id":245,"nodeType":"Return","src":"1113:13:3"}]}]},"documentation":{"id":201,"nodeType":"StructuredDocumentation","src":"352:90:3","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":248,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"456:8:3","nodeType":"FunctionDefinition","parameters":{"id":204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":203,"mutability":"mutable","name":"value","nameLocation":"473:5:3","nodeType":"VariableDeclaration","scope":248,"src":"465:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":202,"name":"uint256","nodeType":"ElementaryTypeName","src":"465:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"464:15:3"},"returnParameters":{"id":207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":206,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":248,"src":"503:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":205,"name":"string","nodeType":"ElementaryTypeName","src":"503:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"502:15:3"},"scope":418,"src":"447:696:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":275,"nodeType":"Block","src":"1313:103:3","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":260,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":251,"src":"1354:5:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1354:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1372:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1354:20:3","trueExpression":{"hexValue":"2d","id":263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1366:3:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":269,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":251,"src":"1400:5:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":267,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"1385:10:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$1389_$","typeString":"type(library SignedMath)"}},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1396:3:3","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":1388,"src":"1385:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1385:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":266,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[248,276],"referencedDeclaration":248,"src":"1376:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1376:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":258,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1337:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":259,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1341:12:3","memberName":"encodePacked","nodeType":"MemberAccess","src":"1337:16:3","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1337:71:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":257,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1330:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":256,"name":"string","nodeType":"ElementaryTypeName","src":"1330:6:3","typeDescriptions":{}}},"id":273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1330:79:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":255,"id":274,"nodeType":"Return","src":"1323:86:3"}]},"documentation":{"id":249,"nodeType":"StructuredDocumentation","src":"1149:89:3","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":276,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1252:8:3","nodeType":"FunctionDefinition","parameters":{"id":252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":251,"mutability":"mutable","name":"value","nameLocation":"1268:5:3","nodeType":"VariableDeclaration","scope":276,"src":"1261:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":250,"name":"int256","nodeType":"ElementaryTypeName","src":"1261:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1260:14:3"},"returnParameters":{"id":255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":254,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":276,"src":"1298:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":253,"name":"string","nodeType":"ElementaryTypeName","src":"1298:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1297:15:3"},"scope":418,"src":"1243:173:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":295,"nodeType":"Block","src":"1595:100:3","statements":[{"id":294,"nodeType":"UncheckedBlock","src":"1605:84:3","statements":[{"expression":{"arguments":[{"id":285,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"1648:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":288,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"1667:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":286,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"1655:4:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$1284_$","typeString":"type(library Math)"}},"id":287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1660:6:3","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":1244,"src":"1655:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1655:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1676:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1655:22:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":284,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[296,372,392],"referencedDeclaration":372,"src":"1636:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1636:42:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":283,"id":293,"nodeType":"Return","src":"1629:49:3"}]}]},"documentation":{"id":277,"nodeType":"StructuredDocumentation","src":"1422:94:3","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":296,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1530:11:3","nodeType":"FunctionDefinition","parameters":{"id":280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":279,"mutability":"mutable","name":"value","nameLocation":"1550:5:3","nodeType":"VariableDeclaration","scope":296,"src":"1542:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":278,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1541:15:3"},"returnParameters":{"id":283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":282,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":296,"src":"1580:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":281,"name":"string","nodeType":"ElementaryTypeName","src":"1580:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1579:15:3"},"scope":418,"src":"1521:174:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":371,"nodeType":"Block","src":"1908:347:3","statements":[{"assignments":[307],"declarations":[{"constant":false,"id":307,"mutability":"mutable","name":"buffer","nameLocation":"1931:6:3","nodeType":"VariableDeclaration","scope":371,"src":"1918:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":306,"name":"bytes","nodeType":"ElementaryTypeName","src":"1918:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":316,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":311,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"1954:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1950:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1963:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1950:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":309,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1940:9:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":308,"name":"bytes","nodeType":"ElementaryTypeName","src":"1944:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1940:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1918:47:3"},{"expression":{"id":321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":317,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"1975:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":319,"indexExpression":{"hexValue":"30","id":318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1982:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1975:9:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1987:3:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1975:15:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":322,"nodeType":"ExpressionStatement","src":"1975:15:3"},{"expression":{"id":327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":323,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"2000:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":325,"indexExpression":{"hexValue":"31","id":324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2000:9:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2012:3:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2000:15:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":328,"nodeType":"ExpressionStatement","src":"2000:15:3"},{"body":{"id":357,"nodeType":"Block","src":"2070:83:3","statements":[{"expression":{"id":351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":343,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"2084:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":345,"indexExpression":{"id":344,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"2091:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2084:9:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":346,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"2096:8:3","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":350,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":347,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"2105:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2113:3:3","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2105:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2096:21:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2084:33:3","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":352,"nodeType":"ExpressionStatement","src":"2084:33:3"},{"expression":{"id":355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":353,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"2131:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2141:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2131:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":356,"nodeType":"ExpressionStatement","src":"2131:11:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":337,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"2058:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2062:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2058:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":358,"initializationExpression":{"assignments":[330],"declarations":[{"constant":false,"id":330,"mutability":"mutable","name":"i","nameLocation":"2038:1:3","nodeType":"VariableDeclaration","scope":358,"src":"2030:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":329,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":336,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2042:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":332,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"2046:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2042:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2055:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2042:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2030:26:3"},"loopExpression":{"expression":{"id":341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2065:3:3","subExpression":{"id":340,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"2067:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":342,"nodeType":"ExpressionStatement","src":"2065:3:3"},"nodeType":"ForStatement","src":"2025:128:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":360,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"2170:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2170:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2182:34:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":359,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2162:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2162:55:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":365,"nodeType":"ExpressionStatement","src":"2162:55:3"},{"expression":{"arguments":[{"id":368,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"2241:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":367,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2234:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":366,"name":"string","nodeType":"ElementaryTypeName","src":"2234:6:3","typeDescriptions":{}}},"id":369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2234:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":305,"id":370,"nodeType":"Return","src":"2227:21:3"}]},"documentation":{"id":297,"nodeType":"StructuredDocumentation","src":"1701:112:3","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":372,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1827:11:3","nodeType":"FunctionDefinition","parameters":{"id":302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":299,"mutability":"mutable","name":"value","nameLocation":"1847:5:3","nodeType":"VariableDeclaration","scope":372,"src":"1839:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":298,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":301,"mutability":"mutable","name":"length","nameLocation":"1862:6:3","nodeType":"VariableDeclaration","scope":372,"src":"1854:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":300,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:31:3"},"returnParameters":{"id":305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":304,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":372,"src":"1893:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":303,"name":"string","nodeType":"ElementaryTypeName","src":"1893:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1892:15:3"},"scope":418,"src":"1818:437:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":391,"nodeType":"Block","src":"2480:76:3","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":385,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"2525:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":384,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":383,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:3","typeDescriptions":{}}},"id":386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":382,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":381,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:3","typeDescriptions":{}}},"id":387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":388,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"2533:15:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":380,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[296,372,392],"referencedDeclaration":372,"src":"2497:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2497:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":379,"id":390,"nodeType":"Return","src":"2490:59:3"}]},"documentation":{"id":373,"nodeType":"StructuredDocumentation","src":"2261:141:3","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":392,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2416:11:3","nodeType":"FunctionDefinition","parameters":{"id":376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"addr","nameLocation":"2436:4:3","nodeType":"VariableDeclaration","scope":392,"src":"2428:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":374,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2427:14:3"},"returnParameters":{"id":379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":378,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":392,"src":"2465:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":377,"name":"string","nodeType":"ElementaryTypeName","src":"2465:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2464:15:3"},"scope":418,"src":"2407:149:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":416,"nodeType":"Block","src":"2711:66:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":405,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"2744:1:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":404,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2738:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":403,"name":"bytes","nodeType":"ElementaryTypeName","src":"2738:5:3","typeDescriptions":{}}},"id":406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2738:8:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":402,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2728:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":411,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":397,"src":"2767:1:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":410,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2761:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":409,"name":"bytes","nodeType":"ElementaryTypeName","src":"2761:5:3","typeDescriptions":{}}},"id":412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2761:8:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":408,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2751:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2751:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2728:42:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":401,"id":415,"nodeType":"Return","src":"2721:49:3"}]},"documentation":{"id":393,"nodeType":"StructuredDocumentation","src":"2562:66:3","text":" @dev Returns true if the two strings are equal."},"id":417,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2642:5:3","nodeType":"FunctionDefinition","parameters":{"id":398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":395,"mutability":"mutable","name":"a","nameLocation":"2662:1:3","nodeType":"VariableDeclaration","scope":417,"src":"2648:15:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":394,"name":"string","nodeType":"ElementaryTypeName","src":"2648:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":397,"mutability":"mutable","name":"b","nameLocation":"2679:1:3","nodeType":"VariableDeclaration","scope":417,"src":"2665:15:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":396,"name":"string","nodeType":"ElementaryTypeName","src":"2665:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2647:34:3"},"returnParameters":{"id":401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":400,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":417,"src":"2705:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":399,"name":"bool","nodeType":"ElementaryTypeName","src":"2705:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2704:6:3"},"scope":418,"src":"2633:144:3","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":419,"src":"220:2559:3","usedErrors":[]}],"src":"101:2679:3"},"id":3},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[1284]},"id":1285,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":420,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":421,"nodeType":"StructuredDocumentation","src":"128:73:4","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":1284,"linearizedBaseContracts":[1284],"name":"Math","nameLocation":"210:4:4","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":425,"members":[{"id":422,"name":"Down","nameLocation":"245:4:4","nodeType":"EnumValue","src":"245:4:4"},{"id":423,"name":"Up","nameLocation":"287:2:4","nodeType":"EnumValue","src":"287:2:4"},{"id":424,"name":"Zero","nameLocation":"318:4:4","nodeType":"EnumValue","src":"318:4:4"}],"name":"Rounding","nameLocation":"226:8:4","nodeType":"EnumDefinition","src":"221:122:4"},{"body":{"id":442,"nodeType":"Block","src":"480:37:4","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":435,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"497:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":436,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"501:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":439,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"509:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:4","trueExpression":{"id":438,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"505:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":434,"id":441,"nodeType":"Return","src":"490:20:4"}]},"documentation":{"id":426,"nodeType":"StructuredDocumentation","src":"349:59:4","text":" @dev Returns the largest of two numbers."},"id":443,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:4","nodeType":"FunctionDefinition","parameters":{"id":431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":428,"mutability":"mutable","name":"a","nameLocation":"434:1:4","nodeType":"VariableDeclaration","scope":443,"src":"426:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":427,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":430,"mutability":"mutable","name":"b","nameLocation":"445:1:4","nodeType":"VariableDeclaration","scope":443,"src":"437:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":429,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:4"},"returnParameters":{"id":434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":433,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":443,"src":"471:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":432,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:4"},"scope":1284,"src":"413:104:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":460,"nodeType":"Block","src":"655:37:4","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":453,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"672:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":454,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"676:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":457,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"684:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:4","trueExpression":{"id":456,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"680:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":452,"id":459,"nodeType":"Return","src":"665:20:4"}]},"documentation":{"id":444,"nodeType":"StructuredDocumentation","src":"523:60:4","text":" @dev Returns the smallest of two numbers."},"id":461,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:4","nodeType":"FunctionDefinition","parameters":{"id":449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":446,"mutability":"mutable","name":"a","nameLocation":"609:1:4","nodeType":"VariableDeclaration","scope":461,"src":"601:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":445,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":448,"mutability":"mutable","name":"b","nameLocation":"620:1:4","nodeType":"VariableDeclaration","scope":461,"src":"612:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":447,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:4"},"returnParameters":{"id":452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":451,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":461,"src":"646:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":450,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:4"},"scope":1284,"src":"588:104:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":483,"nodeType":"Block","src":"876:82:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":471,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"931:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":472,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"935:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":474,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":475,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"941:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":476,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"945:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":478,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":470,"id":482,"nodeType":"Return","src":"923:28:4"}]},"documentation":{"id":462,"nodeType":"StructuredDocumentation","src":"698:102:4","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":484,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:4","nodeType":"FunctionDefinition","parameters":{"id":467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":464,"mutability":"mutable","name":"a","nameLocation":"830:1:4","nodeType":"VariableDeclaration","scope":484,"src":"822:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":463,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":466,"mutability":"mutable","name":"b","nameLocation":"841:1:4","nodeType":"VariableDeclaration","scope":484,"src":"833:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":465,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:4"},"returnParameters":{"id":470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":469,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":484,"src":"867:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":468,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:4"},"scope":1284,"src":"805:153:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":508,"nodeType":"Block","src":"1228:123:4","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":494,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"1316:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":498,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"1330:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":501,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":502,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"1339:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:4","trueExpression":{"hexValue":"30","id":497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":493,"id":507,"nodeType":"Return","src":"1309:35:4"}]},"documentation":{"id":485,"nodeType":"StructuredDocumentation","src":"964:188:4","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":509,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:4","nodeType":"FunctionDefinition","parameters":{"id":490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":487,"mutability":"mutable","name":"a","nameLocation":"1182:1:4","nodeType":"VariableDeclaration","scope":509,"src":"1174:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":486,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":489,"mutability":"mutable","name":"b","nameLocation":"1193:1:4","nodeType":"VariableDeclaration","scope":509,"src":"1185:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":488,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:4"},"returnParameters":{"id":493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":492,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":509,"src":"1219:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":491,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:4"},"scope":1284,"src":"1157:194:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":631,"nodeType":"Block","src":"1765:4115:4","statements":[{"id":630,"nodeType":"UncheckedBlock","src":"1775:4099:4","statements":[{"assignments":[522],"declarations":[{"constant":false,"id":522,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:4","nodeType":"VariableDeclaration","scope":630,"src":"2096:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":521,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":523,"nodeType":"VariableDeclarationStatement","src":"2096:13:4"},{"assignments":[525],"declarations":[{"constant":false,"id":525,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:4","nodeType":"VariableDeclaration","scope":630,"src":"2168:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":524,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":526,"nodeType":"VariableDeclarationStatement","src":"2168:13:4"},{"AST":{"nodeType":"YulBlock","src":"2248:157:4","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:30:4","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2283:1:4"},{"name":"y","nodeType":"YulIdentifier","src":"2286:1:4"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:1:4","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2289:3:4"},"nodeType":"YulFunctionCall","src":"2289:6:4"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2276:6:4"},"nodeType":"YulFunctionCall","src":"2276:20:4"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2270:2:4","type":""}]},{"nodeType":"YulAssignment","src":"2313:18:4","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2326:1:4"},{"name":"y","nodeType":"YulIdentifier","src":"2329:1:4"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2322:3:4"},"nodeType":"YulFunctionCall","src":"2322:9:4"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2313:5:4"}]},{"nodeType":"YulAssignment","src":"2348:43:4","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2365:2:4"},{"name":"prod0","nodeType":"YulIdentifier","src":"2369:5:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2361:3:4"},"nodeType":"YulFunctionCall","src":"2361:14:4"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2380:2:4"},{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:4"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2377:2:4"},"nodeType":"YulFunctionCall","src":"2377:13:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2357:3:4"},"nodeType":"YulFunctionCall","src":"2357:34:4"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2348:5:4"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":522,"isOffset":false,"isSlot":false,"src":"2313:5:4","valueSize":1},{"declaration":522,"isOffset":false,"isSlot":false,"src":"2369:5:4","valueSize":1},{"declaration":522,"isOffset":false,"isSlot":false,"src":"2384:5:4","valueSize":1},{"declaration":525,"isOffset":false,"isSlot":false,"src":"2348:5:4","valueSize":1},{"declaration":512,"isOffset":false,"isSlot":false,"src":"2283:1:4","valueSize":1},{"declaration":512,"isOffset":false,"isSlot":false,"src":"2326:1:4","valueSize":1},{"declaration":514,"isOffset":false,"isSlot":false,"src":"2286:1:4","valueSize":1},{"declaration":514,"isOffset":false,"isSlot":false,"src":"2329:1:4","valueSize":1}],"id":527,"nodeType":"InlineAssembly","src":"2239:166:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":528,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"2486:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":536,"nodeType":"IfStatement","src":"2482:368:4","trueBody":{"id":535,"nodeType":"Block","src":"2498:352:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":531,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"2816:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":532,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"2824:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":520,"id":534,"nodeType":"Return","src":"2809:26:4"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":538,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"2960:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":539,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"2974:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":537,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2952:53:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":543,"nodeType":"ExpressionStatement","src":"2952:53:4"},{"assignments":[545],"declarations":[{"constant":false,"id":545,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:4","nodeType":"VariableDeclaration","scope":630,"src":"3261:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":544,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":546,"nodeType":"VariableDeclarationStatement","src":"3261:17:4"},{"AST":{"nodeType":"YulBlock","src":"3301:291:4","statements":[{"nodeType":"YulAssignment","src":"3370:38:4","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3390:1:4"},{"name":"y","nodeType":"YulIdentifier","src":"3393:1:4"},{"name":"denominator","nodeType":"YulIdentifier","src":"3396:11:4"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3383:6:4"},"nodeType":"YulFunctionCall","src":"3383:25:4"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3370:9:4"}]},{"nodeType":"YulAssignment","src":"3490:41:4","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3503:5:4"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3513:9:4"},{"name":"prod0","nodeType":"YulIdentifier","src":"3524:5:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3510:2:4"},"nodeType":"YulFunctionCall","src":"3510:20:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3499:3:4"},"nodeType":"YulFunctionCall","src":"3499:32:4"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3490:5:4"}]},{"nodeType":"YulAssignment","src":"3548:30:4","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3561:5:4"},{"name":"remainder","nodeType":"YulIdentifier","src":"3568:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3557:3:4"},"nodeType":"YulFunctionCall","src":"3557:21:4"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3548:5:4"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":516,"isOffset":false,"isSlot":false,"src":"3396:11:4","valueSize":1},{"declaration":522,"isOffset":false,"isSlot":false,"src":"3524:5:4","valueSize":1},{"declaration":522,"isOffset":false,"isSlot":false,"src":"3548:5:4","valueSize":1},{"declaration":522,"isOffset":false,"isSlot":false,"src":"3561:5:4","valueSize":1},{"declaration":525,"isOffset":false,"isSlot":false,"src":"3490:5:4","valueSize":1},{"declaration":525,"isOffset":false,"isSlot":false,"src":"3503:5:4","valueSize":1},{"declaration":545,"isOffset":false,"isSlot":false,"src":"3370:9:4","valueSize":1},{"declaration":545,"isOffset":false,"isSlot":false,"src":"3513:9:4","valueSize":1},{"declaration":545,"isOffset":false,"isSlot":false,"src":"3568:9:4","valueSize":1},{"declaration":512,"isOffset":false,"isSlot":false,"src":"3390:1:4","valueSize":1},{"declaration":514,"isOffset":false,"isSlot":false,"src":"3393:1:4","valueSize":1}],"id":547,"nodeType":"InlineAssembly","src":"3292:300:4"},{"assignments":[549],"declarations":[{"constant":false,"id":549,"mutability":"mutable","name":"twos","nameLocation":"3907:4:4","nodeType":"VariableDeclaration","scope":630,"src":"3899:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":548,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":557,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":550,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"3914:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:4","subExpression":{"id":551,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"3930:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":555,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:4"},{"AST":{"nodeType":"YulBlock","src":"3969:362:4","statements":[{"nodeType":"YulAssignment","src":"4034:37:4","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4053:11:4"},{"name":"twos","nodeType":"YulIdentifier","src":"4066:4:4"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4049:3:4"},"nodeType":"YulFunctionCall","src":"4049:22:4"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4034:11:4"}]},{"nodeType":"YulAssignment","src":"4138:25:4","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4151:5:4"},{"name":"twos","nodeType":"YulIdentifier","src":"4158:4:4"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4147:3:4"},"nodeType":"YulFunctionCall","src":"4147:16:4"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4138:5:4"}]},{"nodeType":"YulAssignment","src":"4278:39:4","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4298:1:4","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4301:4:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4294:3:4"},"nodeType":"YulFunctionCall","src":"4294:12:4"},{"name":"twos","nodeType":"YulIdentifier","src":"4308:4:4"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4290:3:4"},"nodeType":"YulFunctionCall","src":"4290:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"4315:1:4","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:4"},"nodeType":"YulFunctionCall","src":"4286:31:4"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4278:4:4"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":516,"isOffset":false,"isSlot":false,"src":"4034:11:4","valueSize":1},{"declaration":516,"isOffset":false,"isSlot":false,"src":"4053:11:4","valueSize":1},{"declaration":522,"isOffset":false,"isSlot":false,"src":"4138:5:4","valueSize":1},{"declaration":522,"isOffset":false,"isSlot":false,"src":"4151:5:4","valueSize":1},{"declaration":549,"isOffset":false,"isSlot":false,"src":"4066:4:4","valueSize":1},{"declaration":549,"isOffset":false,"isSlot":false,"src":"4158:4:4","valueSize":1},{"declaration":549,"isOffset":false,"isSlot":false,"src":"4278:4:4","valueSize":1},{"declaration":549,"isOffset":false,"isSlot":false,"src":"4301:4:4","valueSize":1},{"declaration":549,"isOffset":false,"isSlot":false,"src":"4308:4:4","valueSize":1}],"id":558,"nodeType":"InlineAssembly","src":"3960:371:4"},{"expression":{"id":563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":559,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"4397:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":560,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"4406:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":561,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":549,"src":"4414:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":564,"nodeType":"ExpressionStatement","src":"4397:21:4"},{"assignments":[566],"declarations":[{"constant":false,"id":566,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:4","nodeType":"VariableDeclaration","scope":630,"src":"4736:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":565,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":573,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:4","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":568,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"4759:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":570,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:4"},{"expression":{"id":580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":574,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"4992:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":576,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"5007:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":577,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"5021:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":581,"nodeType":"ExpressionStatement","src":"4992:36:4"},{"expression":{"id":588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":582,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"5061:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":584,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"5076:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":585,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"5090:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":589,"nodeType":"ExpressionStatement","src":"5061:36:4"},{"expression":{"id":596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":590,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"5131:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":592,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"5146:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":593,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"5160:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":597,"nodeType":"ExpressionStatement","src":"5131:36:4"},{"expression":{"id":604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":598,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"5201:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":600,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"5216:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":601,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"5230:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":605,"nodeType":"ExpressionStatement","src":"5201:36:4"},{"expression":{"id":612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":606,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"5271:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":608,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"5286:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":609,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"5300:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":613,"nodeType":"ExpressionStatement","src":"5271:36:4"},{"expression":{"id":620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":614,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"5342:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":616,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"5357:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":617,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"5371:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":621,"nodeType":"ExpressionStatement","src":"5342:36:4"},{"expression":{"id":626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":622,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"5812:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":623,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"5821:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":624,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"5829:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":627,"nodeType":"ExpressionStatement","src":"5812:24:4"},{"expression":{"id":628,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"5857:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":520,"id":629,"nodeType":"Return","src":"5850:13:4"}]}]},"documentation":{"id":510,"nodeType":"StructuredDocumentation","src":"1357:305:4","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":632,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:4","nodeType":"FunctionDefinition","parameters":{"id":517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":512,"mutability":"mutable","name":"x","nameLocation":"1691:1:4","nodeType":"VariableDeclaration","scope":632,"src":"1683:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":511,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":514,"mutability":"mutable","name":"y","nameLocation":"1702:1:4","nodeType":"VariableDeclaration","scope":632,"src":"1694:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":513,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":516,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:4","nodeType":"VariableDeclaration","scope":632,"src":"1705:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":515,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:4"},"returnParameters":{"id":520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":519,"mutability":"mutable","name":"result","nameLocation":"1757:6:4","nodeType":"VariableDeclaration","scope":632,"src":"1749:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":518,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:4"},"scope":1284,"src":"1667:4213:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":675,"nodeType":"Block","src":"6122:189:4","statements":[{"assignments":[648],"declarations":[{"constant":false,"id":648,"mutability":"mutable","name":"result","nameLocation":"6140:6:4","nodeType":"VariableDeclaration","scope":675,"src":"6132:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":647,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":654,"initialValue":{"arguments":[{"id":650,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":635,"src":"6156:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":651,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":637,"src":"6159:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":652,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"6162:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":649,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[632,676],"referencedDeclaration":632,"src":"6149:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6149:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:4"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"},"id":658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":655,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"6188:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":656,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":425,"src":"6200:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$425_$","typeString":"type(enum Math.Rounding)"}},"id":657,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6209:2:4","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":423,"src":"6200:11:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"}},"src":"6188:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":660,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":635,"src":"6222:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":661,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":637,"src":"6225:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":662,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"6228:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":659,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:4","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6215:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":672,"nodeType":"IfStatement","src":"6184:98:4","trueBody":{"id":671,"nodeType":"Block","src":"6246:36:4","statements":[{"expression":{"id":669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":667,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":648,"src":"6260:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":670,"nodeType":"ExpressionStatement","src":"6260:11:4"}]}},{"expression":{"id":673,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":648,"src":"6298:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":646,"id":674,"nodeType":"Return","src":"6291:13:4"}]},"documentation":{"id":633,"nodeType":"StructuredDocumentation","src":"5886:121:4","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":676,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:4","nodeType":"FunctionDefinition","parameters":{"id":643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":635,"mutability":"mutable","name":"x","nameLocation":"6036:1:4","nodeType":"VariableDeclaration","scope":676,"src":"6028:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":634,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":637,"mutability":"mutable","name":"y","nameLocation":"6047:1:4","nodeType":"VariableDeclaration","scope":676,"src":"6039:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":636,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":639,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:4","nodeType":"VariableDeclaration","scope":676,"src":"6050:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":638,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":642,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:4","nodeType":"VariableDeclaration","scope":676,"src":"6071:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"},"typeName":{"id":641,"nodeType":"UserDefinedTypeName","pathNode":{"id":640,"name":"Rounding","nameLocations":["6071:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":425,"src":"6071:8:4"},"referencedDeclaration":425,"src":"6071:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:4"},"returnParameters":{"id":646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":645,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":676,"src":"6113:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":644,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:4"},"scope":1284,"src":"6012:299:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":787,"nodeType":"Block","src":"6587:1585:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":684,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"6601:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":690,"nodeType":"IfStatement","src":"6597:45:4","trueBody":{"id":689,"nodeType":"Block","src":"6609:33:4","statements":[{"expression":{"hexValue":"30","id":687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":683,"id":688,"nodeType":"Return","src":"6623:8:4"}]}},{"assignments":[692],"declarations":[{"constant":false,"id":692,"mutability":"mutable","name":"result","nameLocation":"7329:6:4","nodeType":"VariableDeclaration","scope":787,"src":"7321:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":691,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":701,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":695,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"7349:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":694,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[956,992],"referencedDeclaration":956,"src":"7344:4:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:7:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":699,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:4"},{"id":786,"nodeType":"UncheckedBlock","src":"7758:408:4","statements":[{"expression":{"id":711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":702,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"7782:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":703,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"7792:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":704,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"7801:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":705,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"7805:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":708,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":712,"nodeType":"ExpressionStatement","src":"7782:35:4"},{"expression":{"id":722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":713,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"7831:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":714,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"7841:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":715,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"7850:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":716,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"7854:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":719,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":723,"nodeType":"ExpressionStatement","src":"7831:35:4"},{"expression":{"id":733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":724,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"7880:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":725,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"7890:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":726,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"7899:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":727,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"7903:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":730,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":734,"nodeType":"ExpressionStatement","src":"7880:35:4"},{"expression":{"id":744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":735,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"7929:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":736,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"7939:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":737,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"7948:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":738,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"7952:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":741,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":745,"nodeType":"ExpressionStatement","src":"7929:35:4"},{"expression":{"id":755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":746,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"7978:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":747,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"7988:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":748,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"7997:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":749,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"8001:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":752,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":756,"nodeType":"ExpressionStatement","src":"7978:35:4"},{"expression":{"id":766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":757,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"8027:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":758,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"8037:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":759,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"8046:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":760,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"8050:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":763,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":767,"nodeType":"ExpressionStatement","src":"8027:35:4"},{"expression":{"id":777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":768,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"8076:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":769,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"8086:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":770,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"8095:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":771,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"8099:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":774,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":778,"nodeType":"ExpressionStatement","src":"8076:35:4"},{"expression":{"arguments":[{"id":780,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"8136:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":781,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"8144:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":782,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"8148:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":779,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"8132:3:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:23:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":683,"id":785,"nodeType":"Return","src":"8125:30:4"}]}]},"documentation":{"id":677,"nodeType":"StructuredDocumentation","src":"6317:208:4","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":788,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:4","nodeType":"FunctionDefinition","parameters":{"id":680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":679,"mutability":"mutable","name":"a","nameLocation":"6552:1:4","nodeType":"VariableDeclaration","scope":788,"src":"6544:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":678,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:4"},"returnParameters":{"id":683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":682,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":788,"src":"6578:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":681,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:4"},"scope":1284,"src":"6530:1642:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":823,"nodeType":"Block","src":"8348:161:4","statements":[{"id":822,"nodeType":"UncheckedBlock","src":"8358:145:4","statements":[{"assignments":[800],"declarations":[{"constant":false,"id":800,"mutability":"mutable","name":"result","nameLocation":"8390:6:4","nodeType":"VariableDeclaration","scope":822,"src":"8382:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":799,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":804,"initialValue":{"arguments":[{"id":802,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"8404:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":801,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[788,824],"referencedDeclaration":788,"src":"8399:4:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:7:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":805,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":800,"src":"8427:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"},"id":809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":806,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"8437:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":807,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":425,"src":"8449:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$425_$","typeString":"type(enum Math.Rounding)"}},"id":808,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8458:2:4","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":423,"src":"8449:11:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"}},"src":"8437:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":810,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":800,"src":"8464:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":811,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":800,"src":"8473:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":813,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"8482:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:4","trueExpression":{"hexValue":"31","id":816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":819,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":798,"id":821,"nodeType":"Return","src":"8420:72:4"}]}]},"documentation":{"id":789,"nodeType":"StructuredDocumentation","src":"8178:89:4","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":824,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:4","nodeType":"FunctionDefinition","parameters":{"id":795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":791,"mutability":"mutable","name":"a","nameLocation":"8294:1:4","nodeType":"VariableDeclaration","scope":824,"src":"8286:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":790,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":794,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:4","nodeType":"VariableDeclaration","scope":824,"src":"8297:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"},"typeName":{"id":793,"nodeType":"UserDefinedTypeName","pathNode":{"id":792,"name":"Rounding","nameLocations":["8297:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":425,"src":"8297:8:4"},"referencedDeclaration":425,"src":"8297:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:4"},"returnParameters":{"id":798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":797,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":824,"src":"8339:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":796,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:4"},"scope":1284,"src":"8272:237:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":955,"nodeType":"Block","src":"8694:922:4","statements":[{"assignments":[833],"declarations":[{"constant":false,"id":833,"mutability":"mutable","name":"result","nameLocation":"8712:6:4","nodeType":"VariableDeclaration","scope":955,"src":"8704:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":832,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":835,"initialValue":{"hexValue":"30","id":834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:4"},{"id":952,"nodeType":"UncheckedBlock","src":"8732:855:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":836,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"8760:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:4","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":850,"nodeType":"IfStatement","src":"8756:99:4","trueBody":{"id":849,"nodeType":"Block","src":"8778:77:4","statements":[{"expression":{"id":843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":841,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"8796:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:4","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":844,"nodeType":"ExpressionStatement","src":"8796:13:4"},{"expression":{"id":847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":845,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"8827:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:4","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":848,"nodeType":"ExpressionStatement","src":"8827:13:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":851,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"8872:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":865,"nodeType":"IfStatement","src":"8868:96:4","trueBody":{"id":864,"nodeType":"Block","src":"8889:75:4","statements":[{"expression":{"id":858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":856,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"8907:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":859,"nodeType":"ExpressionStatement","src":"8907:12:4"},{"expression":{"id":862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":860,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"8937:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":863,"nodeType":"ExpressionStatement","src":"8937:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":866,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"8981:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":880,"nodeType":"IfStatement","src":"8977:96:4","trueBody":{"id":879,"nodeType":"Block","src":"8998:75:4","statements":[{"expression":{"id":873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":871,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"9016:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":874,"nodeType":"ExpressionStatement","src":"9016:12:4"},{"expression":{"id":877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":875,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"9046:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":878,"nodeType":"ExpressionStatement","src":"9046:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":881,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"9090:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":895,"nodeType":"IfStatement","src":"9086:96:4","trueBody":{"id":894,"nodeType":"Block","src":"9107:75:4","statements":[{"expression":{"id":888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":886,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"9125:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":889,"nodeType":"ExpressionStatement","src":"9125:12:4"},{"expression":{"id":892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":890,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"9155:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":891,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":893,"nodeType":"ExpressionStatement","src":"9155:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":896,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"9199:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":910,"nodeType":"IfStatement","src":"9195:93:4","trueBody":{"id":909,"nodeType":"Block","src":"9215:73:4","statements":[{"expression":{"id":903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":901,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"9233:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":904,"nodeType":"ExpressionStatement","src":"9233:11:4"},{"expression":{"id":907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":905,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"9262:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":908,"nodeType":"ExpressionStatement","src":"9262:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":911,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"9305:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":925,"nodeType":"IfStatement","src":"9301:93:4","trueBody":{"id":924,"nodeType":"Block","src":"9321:73:4","statements":[{"expression":{"id":918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":916,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"9339:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":919,"nodeType":"ExpressionStatement","src":"9339:11:4"},{"expression":{"id":922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":920,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"9368:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":923,"nodeType":"ExpressionStatement","src":"9368:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":926,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"9411:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":940,"nodeType":"IfStatement","src":"9407:93:4","trueBody":{"id":939,"nodeType":"Block","src":"9427:73:4","statements":[{"expression":{"id":933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":931,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"9445:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":934,"nodeType":"ExpressionStatement","src":"9445:11:4"},{"expression":{"id":937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":935,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"9474:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":938,"nodeType":"ExpressionStatement","src":"9474:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":941,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"9517:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":951,"nodeType":"IfStatement","src":"9513:64:4","trueBody":{"id":950,"nodeType":"Block","src":"9533:44:4","statements":[{"expression":{"id":948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":946,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"9551:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":949,"nodeType":"ExpressionStatement","src":"9551:11:4"}]}}]},{"expression":{"id":953,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"9603:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":831,"id":954,"nodeType":"Return","src":"9596:13:4"}]},"documentation":{"id":825,"nodeType":"StructuredDocumentation","src":"8515:113:4","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":956,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:4","nodeType":"FunctionDefinition","parameters":{"id":828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":827,"mutability":"mutable","name":"value","nameLocation":"8655:5:4","nodeType":"VariableDeclaration","scope":956,"src":"8647:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":826,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:4"},"returnParameters":{"id":831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":830,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":956,"src":"8685:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":829,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:4"},"scope":1284,"src":"8633:983:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":991,"nodeType":"Block","src":"9849:165:4","statements":[{"id":990,"nodeType":"UncheckedBlock","src":"9859:149:4","statements":[{"assignments":[968],"declarations":[{"constant":false,"id":968,"mutability":"mutable","name":"result","nameLocation":"9891:6:4","nodeType":"VariableDeclaration","scope":990,"src":"9883:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":967,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":972,"initialValue":{"arguments":[{"id":970,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"9905:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":969,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[956,992],"referencedDeclaration":956,"src":"9900:4:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9900:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":973,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":968,"src":"9932:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"},"id":977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":974,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"9942:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":975,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":425,"src":"9954:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$425_$","typeString":"type(enum Math.Rounding)"}},"id":976,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9963:2:4","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":423,"src":"9954:11:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"}},"src":"9942:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":979,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":968,"src":"9974:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":981,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"9983:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:4","trueExpression":{"hexValue":"31","id":984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":987,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":966,"id":989,"nodeType":"Return","src":"9925:72:4"}]}]},"documentation":{"id":957,"nodeType":"StructuredDocumentation","src":"9622:142:4","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":992,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:4","nodeType":"FunctionDefinition","parameters":{"id":963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":959,"mutability":"mutable","name":"value","nameLocation":"9791:5:4","nodeType":"VariableDeclaration","scope":992,"src":"9783:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":958,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":962,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:4","nodeType":"VariableDeclaration","scope":992,"src":"9798:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"},"typeName":{"id":961,"nodeType":"UserDefinedTypeName","pathNode":{"id":960,"name":"Rounding","nameLocations":["9798:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":425,"src":"9798:8:4"},"referencedDeclaration":425,"src":"9798:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:4"},"returnParameters":{"id":966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":965,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":992,"src":"9840:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":964,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:4"},"scope":1284,"src":"9769:245:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1120,"nodeType":"Block","src":"10201:854:4","statements":[{"assignments":[1001],"declarations":[{"constant":false,"id":1001,"mutability":"mutable","name":"result","nameLocation":"10219:6:4","nodeType":"VariableDeclaration","scope":1120,"src":"10211:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1000,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1003,"initialValue":{"hexValue":"30","id":1002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:4"},{"id":1117,"nodeType":"UncheckedBlock","src":"10239:787:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1004,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"10267:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1007,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:4","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1020,"nodeType":"IfStatement","src":"10263:103:4","trueBody":{"id":1019,"nodeType":"Block","src":"10286:80:4","statements":[{"expression":{"id":1013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1009,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"10304:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1012,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:4","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1014,"nodeType":"ExpressionStatement","src":"10304:17:4"},{"expression":{"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1015,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"10339:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1018,"nodeType":"ExpressionStatement","src":"10339:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1021,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"10383:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1024,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:4","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1037,"nodeType":"IfStatement","src":"10379:103:4","trueBody":{"id":1036,"nodeType":"Block","src":"10402:80:4","statements":[{"expression":{"id":1030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1026,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"10420:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1029,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:4","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1031,"nodeType":"ExpressionStatement","src":"10420:17:4"},{"expression":{"id":1034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1032,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"10455:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1035,"nodeType":"ExpressionStatement","src":"10455:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1038,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"10499:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1041,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:4","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1054,"nodeType":"IfStatement","src":"10495:103:4","trueBody":{"id":1053,"nodeType":"Block","src":"10518:80:4","statements":[{"expression":{"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1043,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"10536:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1046,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:4","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1048,"nodeType":"ExpressionStatement","src":"10536:17:4"},{"expression":{"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1049,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"10571:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1052,"nodeType":"ExpressionStatement","src":"10571:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1055,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"10615:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1058,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:4","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1071,"nodeType":"IfStatement","src":"10611:100:4","trueBody":{"id":1070,"nodeType":"Block","src":"10633:78:4","statements":[{"expression":{"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1060,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"10651:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1063,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:4","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1065,"nodeType":"ExpressionStatement","src":"10651:16:4"},{"expression":{"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1066,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"10685:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1069,"nodeType":"ExpressionStatement","src":"10685:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1072,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"10728:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1075,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:4","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1088,"nodeType":"IfStatement","src":"10724:100:4","trueBody":{"id":1087,"nodeType":"Block","src":"10746:78:4","statements":[{"expression":{"id":1081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1077,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"10764:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1080,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:4","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1082,"nodeType":"ExpressionStatement","src":"10764:16:4"},{"expression":{"id":1085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1083,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"10798:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1086,"nodeType":"ExpressionStatement","src":"10798:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1089,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"10841:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1092,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:4","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1105,"nodeType":"IfStatement","src":"10837:100:4","trueBody":{"id":1104,"nodeType":"Block","src":"10859:78:4","statements":[{"expression":{"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1094,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"10877:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1097,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:4","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1099,"nodeType":"ExpressionStatement","src":"10877:16:4"},{"expression":{"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1100,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"10911:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1103,"nodeType":"ExpressionStatement","src":"10911:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1106,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"10954:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":1109,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":1108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1116,"nodeType":"IfStatement","src":"10950:66:4","trueBody":{"id":1115,"nodeType":"Block","src":"10972:44:4","statements":[{"expression":{"id":1113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1111,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"10990:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1114,"nodeType":"ExpressionStatement","src":"10990:11:4"}]}}]},{"expression":{"id":1118,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"11042:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":999,"id":1119,"nodeType":"Return","src":"11035:13:4"}]},"documentation":{"id":993,"nodeType":"StructuredDocumentation","src":"10020:114:4","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1121,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:4","nodeType":"FunctionDefinition","parameters":{"id":996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":995,"mutability":"mutable","name":"value","nameLocation":"10162:5:4","nodeType":"VariableDeclaration","scope":1121,"src":"10154:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":994,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:4"},"returnParameters":{"id":999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":998,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1121,"src":"10192:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":997,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:4"},"scope":1284,"src":"10139:916:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1156,"nodeType":"Block","src":"11290:167:4","statements":[{"id":1155,"nodeType":"UncheckedBlock","src":"11300:151:4","statements":[{"assignments":[1133],"declarations":[{"constant":false,"id":1133,"mutability":"mutable","name":"result","nameLocation":"11332:6:4","nodeType":"VariableDeclaration","scope":1155,"src":"11324:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1132,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1137,"initialValue":{"arguments":[{"id":1135,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"11347:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1134,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[1121,1157],"referencedDeclaration":1121,"src":"11341:5:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11341:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1138,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1133,"src":"11374:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"},"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1139,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1127,"src":"11384:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1140,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":425,"src":"11396:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$425_$","typeString":"type(enum Math.Rounding)"}},"id":1141,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11405:2:4","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":423,"src":"11396:11:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"}},"src":"11384:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":1144,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1133,"src":"11417:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1146,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"11426:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:4","trueExpression":{"hexValue":"31","id":1149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1152,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1131,"id":1154,"nodeType":"Return","src":"11367:73:4"}]}]},"documentation":{"id":1122,"nodeType":"StructuredDocumentation","src":"11061:143:4","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1157,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:4","nodeType":"FunctionDefinition","parameters":{"id":1128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1124,"mutability":"mutable","name":"value","nameLocation":"11232:5:4","nodeType":"VariableDeclaration","scope":1157,"src":"11224:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1123,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1127,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:4","nodeType":"VariableDeclaration","scope":1157,"src":"11239:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"},"typeName":{"id":1126,"nodeType":"UserDefinedTypeName","pathNode":{"id":1125,"name":"Rounding","nameLocations":["11239:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":425,"src":"11239:8:4"},"referencedDeclaration":425,"src":"11239:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:4"},"returnParameters":{"id":1131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1130,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1157,"src":"11281:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1129,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:4"},"scope":1284,"src":"11209:248:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1243,"nodeType":"Block","src":"11771:600:4","statements":[{"assignments":[1166],"declarations":[{"constant":false,"id":1166,"mutability":"mutable","name":"result","nameLocation":"11789:6:4","nodeType":"VariableDeclaration","scope":1243,"src":"11781:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1165,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1168,"initialValue":{"hexValue":"30","id":1167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:4"},{"id":1240,"nodeType":"UncheckedBlock","src":"11809:533:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1169,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"11837:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:4","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1183,"nodeType":"IfStatement","src":"11833:98:4","trueBody":{"id":1182,"nodeType":"Block","src":"11855:76:4","statements":[{"expression":{"id":1176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1174,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"11873:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:4","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1177,"nodeType":"ExpressionStatement","src":"11873:13:4"},{"expression":{"id":1180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1178,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"11904:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1181,"nodeType":"ExpressionStatement","src":"11904:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1184,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"11948:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1198,"nodeType":"IfStatement","src":"11944:95:4","trueBody":{"id":1197,"nodeType":"Block","src":"11965:74:4","statements":[{"expression":{"id":1191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1189,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"11983:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1192,"nodeType":"ExpressionStatement","src":"11983:12:4"},{"expression":{"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1193,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"12013:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1196,"nodeType":"ExpressionStatement","src":"12013:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1199,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"12056:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1213,"nodeType":"IfStatement","src":"12052:95:4","trueBody":{"id":1212,"nodeType":"Block","src":"12073:74:4","statements":[{"expression":{"id":1206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1204,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"12091:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1207,"nodeType":"ExpressionStatement","src":"12091:12:4"},{"expression":{"id":1210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1208,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"12121:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1211,"nodeType":"ExpressionStatement","src":"12121:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1214,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"12164:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1228,"nodeType":"IfStatement","src":"12160:95:4","trueBody":{"id":1227,"nodeType":"Block","src":"12181:74:4","statements":[{"expression":{"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1219,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"12199:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1222,"nodeType":"ExpressionStatement","src":"12199:12:4"},{"expression":{"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1223,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"12229:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1226,"nodeType":"ExpressionStatement","src":"12229:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1229,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"12272:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1239,"nodeType":"IfStatement","src":"12268:64:4","trueBody":{"id":1238,"nodeType":"Block","src":"12288:44:4","statements":[{"expression":{"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1234,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"12306:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1237,"nodeType":"ExpressionStatement","src":"12306:11:4"}]}}]},{"expression":{"id":1241,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"12358:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1164,"id":1242,"nodeType":"Return","src":"12351:13:4"}]},"documentation":{"id":1158,"nodeType":"StructuredDocumentation","src":"11463:240:4","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":1244,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:4","nodeType":"FunctionDefinition","parameters":{"id":1161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1160,"mutability":"mutable","name":"value","nameLocation":"11732:5:4","nodeType":"VariableDeclaration","scope":1244,"src":"11724:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1159,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:4"},"returnParameters":{"id":1164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1163,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1244,"src":"11762:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1162,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:4"},"scope":1284,"src":"11708:663:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1282,"nodeType":"Block","src":"12608:174:4","statements":[{"id":1281,"nodeType":"UncheckedBlock","src":"12618:158:4","statements":[{"assignments":[1256],"declarations":[{"constant":false,"id":1256,"mutability":"mutable","name":"result","nameLocation":"12650:6:4","nodeType":"VariableDeclaration","scope":1281,"src":"12642:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1255,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1260,"initialValue":{"arguments":[{"id":1258,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"12666:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1257,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[1244,1283],"referencedDeclaration":1244,"src":"12659:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12659:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1261,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1256,"src":"12693:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"},"id":1265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1262,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"12703:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1263,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":425,"src":"12715:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$425_$","typeString":"type(enum Math.Rounding)"}},"id":1264,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12724:2:4","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":423,"src":"12715:11:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"}},"src":"12703:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1267,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1256,"src":"12736:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":1268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:4","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1270,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1272,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"12751:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:4","trueExpression":{"hexValue":"31","id":1275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1278,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1254,"id":1280,"nodeType":"Return","src":"12686:79:4"}]}]},"documentation":{"id":1245,"nodeType":"StructuredDocumentation","src":"12377:144:4","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1283,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:4","nodeType":"FunctionDefinition","parameters":{"id":1251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1247,"mutability":"mutable","name":"value","nameLocation":"12550:5:4","nodeType":"VariableDeclaration","scope":1283,"src":"12542:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1246,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1250,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:4","nodeType":"VariableDeclaration","scope":1283,"src":"12557:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"},"typeName":{"id":1249,"nodeType":"UserDefinedTypeName","pathNode":{"id":1248,"name":"Rounding","nameLocations":["12557:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":425,"src":"12557:8:4"},"referencedDeclaration":425,"src":"12557:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$425","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:4"},"returnParameters":{"id":1254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1253,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1283,"src":"12599:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1252,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:4"},"scope":1284,"src":"12526:256:4","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1285,"src":"202:12582:4","usedErrors":[]}],"src":"103:12682:4"},"id":4},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[1389]},"id":1390,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1286,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":1287,"nodeType":"StructuredDocumentation","src":"134:80:5","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":1389,"linearizedBaseContracts":[1389],"name":"SignedMath","nameLocation":"223:10:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":1304,"nodeType":"Block","src":"375:37:5","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1297,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"392:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1298,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"396:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"392:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1301,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"404:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"392:13:5","trueExpression":{"id":1300,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1290,"src":"400:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1296,"id":1303,"nodeType":"Return","src":"385:20:5"}]},"documentation":{"id":1288,"nodeType":"StructuredDocumentation","src":"240:66:5","text":" @dev Returns the largest of two signed numbers."},"id":1305,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"320:3:5","nodeType":"FunctionDefinition","parameters":{"id":1293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1290,"mutability":"mutable","name":"a","nameLocation":"331:1:5","nodeType":"VariableDeclaration","scope":1305,"src":"324:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1289,"name":"int256","nodeType":"ElementaryTypeName","src":"324:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1292,"mutability":"mutable","name":"b","nameLocation":"341:1:5","nodeType":"VariableDeclaration","scope":1305,"src":"334:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1291,"name":"int256","nodeType":"ElementaryTypeName","src":"334:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"323:20:5"},"returnParameters":{"id":1296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1295,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1305,"src":"367:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1294,"name":"int256","nodeType":"ElementaryTypeName","src":"367:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"366:8:5"},"scope":1389,"src":"311:101:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1322,"nodeType":"Block","src":"554:37:5","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1315,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"571:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1316,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1310,"src":"575:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"571:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1319,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1310,"src":"583:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"571:13:5","trueExpression":{"id":1318,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"579:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1314,"id":1321,"nodeType":"Return","src":"564:20:5"}]},"documentation":{"id":1306,"nodeType":"StructuredDocumentation","src":"418:67:5","text":" @dev Returns the smallest of two signed numbers."},"id":1323,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"499:3:5","nodeType":"FunctionDefinition","parameters":{"id":1311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1308,"mutability":"mutable","name":"a","nameLocation":"510:1:5","nodeType":"VariableDeclaration","scope":1323,"src":"503:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1307,"name":"int256","nodeType":"ElementaryTypeName","src":"503:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1310,"mutability":"mutable","name":"b","nameLocation":"520:1:5","nodeType":"VariableDeclaration","scope":1323,"src":"513:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1309,"name":"int256","nodeType":"ElementaryTypeName","src":"513:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"502:20:5"},"returnParameters":{"id":1314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1313,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1323,"src":"546:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1312,"name":"int256","nodeType":"ElementaryTypeName","src":"546:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"545:8:5"},"scope":1389,"src":"490:101:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1366,"nodeType":"Block","src":"796:162:5","statements":[{"assignments":[1334],"declarations":[{"constant":false,"id":1334,"mutability":"mutable","name":"x","nameLocation":"865:1:5","nodeType":"VariableDeclaration","scope":1366,"src":"858:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1333,"name":"int256","nodeType":"ElementaryTypeName","src":"858:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":1347,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1335,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"870:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1336,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"874:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1338,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"869:7:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1339,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"881:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1340,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"885:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1342,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"880:12:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1345,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"879:14:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"869:24:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"858:35:5"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1348,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1334,"src":"910:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1353,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1334,"src":"930:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1352,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"922:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1351,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:5","typeDescriptions":{}}},"id":1354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"922:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":1355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:3:5","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"922:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1350,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":1349,"name":"int256","nodeType":"ElementaryTypeName","src":"915:6:5","typeDescriptions":{}}},"id":1357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"915:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1358,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"944:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1359,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"948:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"944:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1361,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"943:7:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"915:35:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1363,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"914:37:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"910:41:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1332,"id":1365,"nodeType":"Return","src":"903:48:5"}]},"documentation":{"id":1324,"nodeType":"StructuredDocumentation","src":"597:126:5","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":1367,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"737:7:5","nodeType":"FunctionDefinition","parameters":{"id":1329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1326,"mutability":"mutable","name":"a","nameLocation":"752:1:5","nodeType":"VariableDeclaration","scope":1367,"src":"745:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1325,"name":"int256","nodeType":"ElementaryTypeName","src":"745:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1328,"mutability":"mutable","name":"b","nameLocation":"762:1:5","nodeType":"VariableDeclaration","scope":1367,"src":"755:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1327,"name":"int256","nodeType":"ElementaryTypeName","src":"755:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"744:20:5"},"returnParameters":{"id":1332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1331,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1367,"src":"788:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1330,"name":"int256","nodeType":"ElementaryTypeName","src":"788:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"787:8:5"},"scope":1389,"src":"728:230:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1387,"nodeType":"Block","src":"1102:158:5","statements":[{"id":1386,"nodeType":"UncheckedBlock","src":"1112:142:5","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1377,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"1227:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":1378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1227:6:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1240:2:5","subExpression":{"id":1381,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"1241:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1227:15:5","trueExpression":{"id":1380,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"1236:1:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1376,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1219:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1375,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:5","typeDescriptions":{}}},"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1219:24:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1374,"id":1385,"nodeType":"Return","src":"1212:31:5"}]}]},"documentation":{"id":1368,"nodeType":"StructuredDocumentation","src":"964:78:5","text":" @dev Returns the absolute unsigned value of a signed value."},"id":1388,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1056:3:5","nodeType":"FunctionDefinition","parameters":{"id":1371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1370,"mutability":"mutable","name":"n","nameLocation":"1067:1:5","nodeType":"VariableDeclaration","scope":1388,"src":"1060:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1369,"name":"int256","nodeType":"ElementaryTypeName","src":"1060:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1059:10:5"},"returnParameters":{"id":1374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1373,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1388,"src":"1093:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1372,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:9:5"},"scope":1389,"src":"1047:213:5","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1390,"src":"215:1047:5","usedErrors":[]}],"src":"109:1154:5"},"id":5},"contracts/BasePaintRaffle.sol":{"ast":{"absolutePath":"contracts/BasePaintRaffle.sol","exportedSymbols":{"Base64":[159],"BasePaint":[1416],"BasePaintRaffle":[1854],"Context":[189],"ERC721A":[3477],"ERC721A__IERC721Receiver":[1872],"IERC721A":[3683],"Math":[1284],"Ownable":[112],"SignedMath":[1389],"Strings":[418]},"id":1855,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1391,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"354:23:6"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":1392,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1855,"sourceUnit":113,"src":"379:52:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Base64.sol","file":"@openzeppelin/contracts/utils/Base64.sol","id":1393,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1855,"sourceUnit":160,"src":"432:50:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":1394,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1855,"sourceUnit":419,"src":"483:51:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"erc721a/contracts/ERC721A.sol","file":"erc721a/contracts/ERC721A.sol","id":1395,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1855,"sourceUnit":3478,"src":"535:39:6","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"BasePaint","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1416,"linearizedBaseContracts":[1416],"name":"BasePaint","nameLocation":"586:9:6","nodeType":"ContractDefinition","nodes":[{"functionSelector":"b74e452b","id":1400,"implemented":false,"kind":"function","modifiers":[],"name":"today","nameLocation":"611:5:6","nodeType":"FunctionDefinition","parameters":{"id":1396,"nodeType":"ParameterList","parameters":[],"src":"616:2:6"},"returnParameters":{"id":1399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1398,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1400,"src":"642:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1397,"name":"uint256","nodeType":"ElementaryTypeName","src":"642:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"641:9:6"},"scope":1416,"src":"602:49:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"8abe0991","id":1406,"implemented":false,"kind":"function","modifiers":[],"name":"authorWithdraw","nameLocation":"665:14:6","nodeType":"FunctionDefinition","parameters":{"id":1404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1403,"mutability":"mutable","name":"indexes","nameLocation":"699:7:6","nodeType":"VariableDeclaration","scope":1406,"src":"680:26:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1401,"name":"uint256","nodeType":"ElementaryTypeName","src":"680:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1402,"nodeType":"ArrayTypeName","src":"680:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"679:28:6"},"returnParameters":{"id":1405,"nodeType":"ParameterList","parameters":[],"src":"716:0:6"},"scope":1416,"src":"656:61:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"b079bbcc","id":1415,"implemented":false,"kind":"function","modifiers":[],"name":"paint","nameLocation":"731:5:6","nodeType":"FunctionDefinition","parameters":{"id":1413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1408,"mutability":"mutable","name":"day","nameLocation":"745:3:6","nodeType":"VariableDeclaration","scope":1415,"src":"737:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1407,"name":"uint256","nodeType":"ElementaryTypeName","src":"737:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1410,"mutability":"mutable","name":"tokenId","nameLocation":"758:7:6","nodeType":"VariableDeclaration","scope":1415,"src":"750:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1409,"name":"uint256","nodeType":"ElementaryTypeName","src":"750:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1412,"mutability":"mutable","name":"pixels","nameLocation":"782:6:6","nodeType":"VariableDeclaration","scope":1415,"src":"767:21:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1411,"name":"bytes","nodeType":"ElementaryTypeName","src":"767:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"736:53:6"},"returnParameters":{"id":1414,"nodeType":"ParameterList","parameters":[],"src":"798:0:6"},"scope":1416,"src":"722:77:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1855,"src":"576:225:6","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":1418,"name":"ERC721A","nameLocations":["940:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":3477,"src":"940:7:6"},"id":1419,"nodeType":"InheritanceSpecifier","src":"940:7:6"},{"baseName":{"id":1420,"name":"Ownable","nameLocations":["949:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":112,"src":"949:7:6"},"id":1421,"nodeType":"InheritanceSpecifier","src":"949:7:6"}],"canonicalName":"BasePaintRaffle","contractDependencies":[],"contractKind":"contract","documentation":{"id":1417,"nodeType":"StructuredDocumentation","src":"803:109:6","text":"@title BasePaint Raffle Contract\n @author 0xNader\n @notice Buy tickets and win a brush for the day"},"fullyImplemented":true,"id":1854,"linearizedBaseContracts":[1854,112,189,3477,3683],"name":"BasePaintRaffle","nameLocation":"921:15:6","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1424,"libraryName":{"id":1422,"name":"Strings","nameLocations":["969:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":418,"src":"969:7:6"},"nodeType":"UsingForDirective","src":"963:26:6","typeName":{"id":1423,"name":"uint256","nodeType":"ElementaryTypeName","src":"981:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"errorSelector":"618c7242","id":1426,"name":"NotWinner","nameLocation":"1038:9:6","nodeType":"ErrorDefinition","parameters":{"id":1425,"nodeType":"ParameterList","parameters":[],"src":"1047:2:6"},"src":"1032:18:6"},{"errorSelector":"097e1d9b","id":1428,"name":"AlreadyDrawn","nameLocation":"1061:12:6","nodeType":"ErrorDefinition","parameters":{"id":1427,"nodeType":"ParameterList","parameters":[],"src":"1073:2:6"},"src":"1055:21:6"},{"errorSelector":"18795612","id":1430,"name":"ZeroTicketAmount","nameLocation":"1087:16:6","nodeType":"ErrorDefinition","parameters":{"id":1429,"nodeType":"ParameterList","parameters":[],"src":"1103:2:6"},"src":"1081:25:6"},{"errorSelector":"8b6ebb4d","id":1432,"name":"IncorrectEthAmount","nameLocation":"1117:18:6","nodeType":"ErrorDefinition","parameters":{"id":1431,"nodeType":"ParameterList","parameters":[],"src":"1135:2:6"},"src":"1111:27:6"},{"errorSelector":"2684a079","id":1434,"name":"FailedToWithdraw","nameLocation":"1149:16:6","nodeType":"ErrorDefinition","parameters":{"id":1433,"nodeType":"ParameterList","parameters":[],"src":"1165:2:6"},"src":"1143:25:6"},{"errorSelector":"646cf558","id":1436,"name":"AlreadyClaimed","nameLocation":"1179:14:6","nodeType":"ErrorDefinition","parameters":{"id":1435,"nodeType":"ParameterList","parameters":[],"src":"1193:2:6"},"src":"1173:23:6"},{"errorSelector":"9430a17e","id":1438,"name":"NonExistentToken","nameLocation":"1207:16:6","nodeType":"ErrorDefinition","parameters":{"id":1437,"nodeType":"ParameterList","parameters":[],"src":"1223:2:6"},"src":"1201:25:6"},{"errorSelector":"2c11be24","id":1440,"name":"InvalidDay","nameLocation":"1237:10:6","nodeType":"ErrorDefinition","parameters":{"id":1439,"nodeType":"ParameterList","parameters":[],"src":"1247:2:6"},"src":"1231:19:6"},{"constant":false,"functionSelector":"0058fce1","id":1443,"mutability":"immutable","name":"basePaint","nameLocation":"1323:9:6","nodeType":"VariableDeclaration","scope":1854,"src":"1296:36:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_BasePaint_$1416","typeString":"contract BasePaint"},"typeName":{"id":1442,"nodeType":"UserDefinedTypeName","pathNode":{"id":1441,"name":"BasePaint","nameLocations":["1296:9:6"],"nodeType":"IdentifierPath","referencedDeclaration":1416,"src":"1296:9:6"},"referencedDeclaration":1416,"src":"1296:9:6","typeDescriptions":{"typeIdentifier":"t_contract$_BasePaint_$1416","typeString":"contract BasePaint"}},"visibility":"public"},{"constant":false,"functionSelector":"135d088d","id":1445,"mutability":"mutable","name":"imageURI","nameLocation":"1352:8:6","nodeType":"VariableDeclaration","scope":1854,"src":"1338:22:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1444,"name":"string","nodeType":"ElementaryTypeName","src":"1338:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"public"},{"constant":false,"functionSelector":"1209b1f6","id":1447,"mutability":"mutable","name":"ticketPrice","nameLocation":"1381:11:6","nodeType":"VariableDeclaration","scope":1854,"src":"1366:26:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1446,"name":"uint256","nodeType":"ElementaryTypeName","src":"1366:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"e6664cd1","id":1449,"mutability":"mutable","name":"brushId","nameLocation":"1413:7:6","nodeType":"VariableDeclaration","scope":1854,"src":"1398:22:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1448,"name":"uint256","nodeType":"ElementaryTypeName","src":"1398:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":1450,"nodeType":"StructuredDocumentation","src":"1427:43:6","text":"@notice Stores the winning raffle ticket"},"functionSelector":"a2fb1175","id":1454,"mutability":"mutable","name":"winners","nameLocation":"1510:7:6","nodeType":"VariableDeclaration","scope":1854,"src":"1475:42:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":1453,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1451,"name":"uint256","nodeType":"ElementaryTypeName","src":"1483:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1475:27:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1452,"name":"uint256","nodeType":"ElementaryTypeName","src":"1494:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"documentation":{"id":1455,"nodeType":"StructuredDocumentation","src":"1524:57:6","text":"@notice Stores if a winner has claimed their earnings"},"functionSelector":"815bbd83","id":1459,"mutability":"mutable","name":"claimedEarnings","nameLocation":"1618:15:6","nodeType":"VariableDeclaration","scope":1854,"src":"1586:47:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"typeName":{"id":1458,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1456,"name":"uint256","nodeType":"ElementaryTypeName","src":"1594:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1586:24:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1457,"name":"bool","nodeType":"ElementaryTypeName","src":"1605:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"anonymous":false,"eventSelector":"7d58f5ddf17a7f65d89554f5d8144ae1dc788046467927063c090f92ed1145dc","id":1467,"name":"TicketsPurchased","nameLocation":"1683:16:6","nodeType":"EventDefinition","parameters":{"id":1466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1461,"indexed":false,"mutability":"mutable","name":"recipent","nameLocation":"1708:8:6","nodeType":"VariableDeclaration","scope":1467,"src":"1700:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1460,"name":"address","nodeType":"ElementaryTypeName","src":"1700:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1463,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1726:6:6","nodeType":"VariableDeclaration","scope":1467,"src":"1718:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1462,"name":"uint256","nodeType":"ElementaryTypeName","src":"1718:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1465,"indexed":false,"mutability":"mutable","name":"price","nameLocation":"1742:5:6","nodeType":"VariableDeclaration","scope":1467,"src":"1734:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1464,"name":"uint256","nodeType":"ElementaryTypeName","src":"1734:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1699:49:6"},"src":"1677:72:6"},{"anonymous":false,"eventSelector":"d4c5e06b1ae097ba02372652a7adaa6e4a8e00be527497a3ad0ebc3f761ef3fb","id":1473,"name":"TicketPriceUpdated","nameLocation":"1760:18:6","nodeType":"EventDefinition","parameters":{"id":1472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1469,"indexed":false,"mutability":"mutable","name":"prevPrice","nameLocation":"1787:9:6","nodeType":"VariableDeclaration","scope":1473,"src":"1779:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1468,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1471,"indexed":false,"mutability":"mutable","name":"updatedPrice","nameLocation":"1806:12:6","nodeType":"VariableDeclaration","scope":1473,"src":"1798:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1470,"name":"uint256","nodeType":"ElementaryTypeName","src":"1798:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:41:6"},"src":"1754:66:6"},{"anonymous":false,"eventSelector":"a1e3d3bd6bcaf2ce1bc718cef231fcb8c9976e46b16713a3291ae4a66f79ade6","id":1479,"name":"RaffleWinner","nameLocation":"1831:12:6","nodeType":"EventDefinition","parameters":{"id":1478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1475,"indexed":false,"mutability":"mutable","name":"winningTokenId","nameLocation":"1852:14:6","nodeType":"VariableDeclaration","scope":1479,"src":"1844:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1474,"name":"uint256","nodeType":"ElementaryTypeName","src":"1844:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1477,"indexed":false,"mutability":"mutable","name":"day","nameLocation":"1876:3:6","nodeType":"VariableDeclaration","scope":1479,"src":"1868:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1476,"name":"uint256","nodeType":"ElementaryTypeName","src":"1868:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1843:37:6"},"src":"1825:56:6"},{"body":{"id":1512,"nodeType":"Block","src":"2110:151:6","statements":[{"expression":{"id":1498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1494,"name":"basePaint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"2120:9:6","typeDescriptions":{"typeIdentifier":"t_contract$_BasePaint_$1416","typeString":"contract BasePaint"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1496,"name":"_basePaintAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1481,"src":"2142:17:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1495,"name":"BasePaint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1416,"src":"2132:9:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BasePaint_$1416_$","typeString":"type(contract BasePaint)"}},"id":1497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2132:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_BasePaint_$1416","typeString":"contract BasePaint"}},"src":"2120:40:6","typeDescriptions":{"typeIdentifier":"t_contract$_BasePaint_$1416","typeString":"contract BasePaint"}},"id":1499,"nodeType":"ExpressionStatement","src":"2120:40:6"},{"expression":{"id":1502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1500,"name":"brushId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1449,"src":"2170:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1501,"name":"_brushId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1483,"src":"2180:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2170:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1503,"nodeType":"ExpressionStatement","src":"2170:18:6"},{"expression":{"id":1506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1504,"name":"ticketPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"2198:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1505,"name":"_ticketPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"2212:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2198:26:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1507,"nodeType":"ExpressionStatement","src":"2198:26:6"},{"expression":{"id":1510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1508,"name":"imageURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"2234:8:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1509,"name":"_imageURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1487,"src":"2245:9:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2234:20:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1511,"nodeType":"ExpressionStatement","src":"2234:20:6"}]},"id":1513,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"426173655061696e74205469636b657473","id":1490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2082:19:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_fd959e2e07f01f4f9cb54efd07da4c37e646e9634ee2f5555fcf0efd9230b1d5","typeString":"literal_string \"BasePaint Tickets\""},"value":"BasePaint Tickets"},{"hexValue":"425054","id":1491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2103:5:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c4469c3871c2223d094ce996c22463935f1f3c0f4a0177add993c1ee46e9606","typeString":"literal_string \"BPT\""},"value":"BPT"}],"id":1492,"kind":"baseConstructorSpecifier","modifierName":{"id":1489,"name":"ERC721A","nameLocations":["2074:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":3477,"src":"2074:7:6"},"nodeType":"ModifierInvocation","src":"2074:35:6"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1481,"mutability":"mutable","name":"_basePaintAddress","nameLocation":"1958:17:6","nodeType":"VariableDeclaration","scope":1513,"src":"1950:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1480,"name":"address","nodeType":"ElementaryTypeName","src":"1950:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1483,"mutability":"mutable","name":"_brushId","nameLocation":"1994:8:6","nodeType":"VariableDeclaration","scope":1513,"src":"1986:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1482,"name":"uint256","nodeType":"ElementaryTypeName","src":"1986:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1485,"mutability":"mutable","name":"_ticketPrice","nameLocation":"2021:12:6","nodeType":"VariableDeclaration","scope":1513,"src":"2013:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1484,"name":"uint256","nodeType":"ElementaryTypeName","src":"2013:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1487,"mutability":"mutable","name":"_imageURI","nameLocation":"2058:9:6","nodeType":"VariableDeclaration","scope":1513,"src":"2044:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1486,"name":"string","nodeType":"ElementaryTypeName","src":"2044:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1940:133:6"},"returnParameters":{"id":1493,"nodeType":"ParameterList","parameters":[],"src":"2110:0:6"},"scope":1854,"src":"1929:332:6","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1565,"nodeType":"Block","src":"2402:376:6","statements":[{"assignments":[1518],"declarations":[{"constant":false,"id":1518,"mutability":"mutable","name":"today","nameLocation":"2420:5:6","nodeType":"VariableDeclaration","scope":1565,"src":"2412:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1517,"name":"uint256","nodeType":"ElementaryTypeName","src":"2412:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1522,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1519,"name":"basePaint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"2428:9:6","typeDescriptions":{"typeIdentifier":"t_contract$_BasePaint_$1416","typeString":"contract BasePaint"}},"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2438:5:6","memberName":"today","nodeType":"MemberAccess","referencedDeclaration":1400,"src":"2428:15:6","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":1521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2428:17:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2412:33:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1523,"name":"winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"2458:7:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1525,"indexExpression":{"id":1524,"name":"today","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"2466:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2458:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2476:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2458:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1531,"nodeType":"IfStatement","src":"2455:45:6","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1528,"name":"AlreadyDrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"2486:12:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2486:14:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1530,"nodeType":"RevertStatement","src":"2479:21:6"}},{"assignments":[1533],"declarations":[{"constant":false,"id":1533,"mutability":"mutable","name":"semiRandomNumber","nameLocation":"2527:16:6","nodeType":"VariableDeclaration","scope":1565,"src":"2519:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1532,"name":"uint256","nodeType":"ElementaryTypeName","src":"2519:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1545,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":1539,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2581:5:6","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2587:10:6","memberName":"prevrandao","nodeType":"MemberAccess","src":"2581:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1541,"name":"today","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"2599:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1537,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2564:3:6","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1538,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2568:12:6","memberName":"encodePacked","nodeType":"MemberAccess","src":"2564:16:6","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2564:41:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1536,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2554:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2554:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2546:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1534,"name":"uint256","nodeType":"ElementaryTypeName","src":"2546:7:6","typeDescriptions":{}}},"id":1544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2546:61:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2519:88:6"},{"assignments":[1547],"declarations":[{"constant":false,"id":1547,"mutability":"mutable","name":"winningTokenId","nameLocation":"2625:14:6","nodeType":"VariableDeclaration","scope":1565,"src":"2617:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1546,"name":"uint256","nodeType":"ElementaryTypeName","src":"2617:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1553,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1548,"name":"semiRandomNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1533,"src":"2642:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1549,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2661:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_BasePaintRaffle_$1854","typeString":"contract BasePaintRaffle"}},"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2666:11:6","memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":2026,"src":"2661:16:6","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2661:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2642:37:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2617:62:6"},{"expression":{"id":1558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1554,"name":"winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"2689:7:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1556,"indexExpression":{"id":1555,"name":"today","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"2697:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2689:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1557,"name":"winningTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"2706:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2689:31:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1559,"nodeType":"ExpressionStatement","src":"2689:31:6"},{"eventCall":{"arguments":[{"id":1561,"name":"winningTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"2749:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1562,"name":"today","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"2765:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1560,"name":"RaffleWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"2736:12:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:35:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1564,"nodeType":"EmitStatement","src":"2731:40:6"}]},"documentation":{"id":1514,"nodeType":"StructuredDocumentation","src":"2307:60:6","text":"@notice Starts the raffle, can only be called once a day"},"functionSelector":"242284f1","id":1566,"implemented":true,"kind":"function","modifiers":[],"name":"startRaffle","nameLocation":"2381:11:6","nodeType":"FunctionDefinition","parameters":{"id":1515,"nodeType":"ParameterList","parameters":[],"src":"2392:2:6"},"returnParameters":{"id":1516,"nodeType":"ParameterList","parameters":[],"src":"2402:0:6"},"scope":1854,"src":"2372:406:6","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1603,"nodeType":"Block","src":"3033:246:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1574,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"3046:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3057:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3046:12:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1580,"nodeType":"IfStatement","src":"3043:42:6","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1577,"name":"ZeroTicketAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"3067:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3067:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1579,"nodeType":"RevertStatement","src":"3060:25:6"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1581,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3098:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3102:5:6","memberName":"value","nodeType":"MemberAccess","src":"3098:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1583,"name":"ticketPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"3111:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1584,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"3125:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3111:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3098:34:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1590,"nodeType":"IfStatement","src":"3095:66:6","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1587,"name":"IncorrectEthAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"3141:18:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3141:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1589,"nodeType":"RevertStatement","src":"3134:27:6"}},{"expression":{"arguments":[{"expression":{"id":1592,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3187:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3191:6:6","memberName":"sender","nodeType":"MemberAccess","src":"3187:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1594,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"3199:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1591,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"3181:5:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3181:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1596,"nodeType":"ExpressionStatement","src":"3181:26:6"},{"eventCall":{"arguments":[{"id":1598,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1569,"src":"3239:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1599,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"3251:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1600,"name":"ticketPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"3260:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1597,"name":"TicketsPurchased","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1467,"src":"3222:16:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":1601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3222:50:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1602,"nodeType":"EmitStatement","src":"3217:55:6"}]},"documentation":{"id":1567,"nodeType":"StructuredDocumentation","src":"2784:170:6","text":"@notice Stores if a winner has claimed their earnings\n @param _recipient Address that recieves the tickets\n @param _amount Number of tickets to purchase"},"functionSelector":"88f57767","id":1604,"implemented":true,"kind":"function","modifiers":[],"name":"buyTickets","nameLocation":"2968:10:6","nodeType":"FunctionDefinition","parameters":{"id":1572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1569,"mutability":"mutable","name":"_recipient","nameLocation":"2987:10:6","nodeType":"VariableDeclaration","scope":1604,"src":"2979:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1568,"name":"address","nodeType":"ElementaryTypeName","src":"2979:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1571,"mutability":"mutable","name":"_amount","nameLocation":"3007:7:6","nodeType":"VariableDeclaration","scope":1604,"src":"2999:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1570,"name":"uint256","nodeType":"ElementaryTypeName","src":"2999:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2978:37:6"},"returnParameters":{"id":1573,"nodeType":"ParameterList","parameters":[],"src":"3033:0:6"},"scope":1854,"src":"2959:320:6","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":1641,"nodeType":"Block","src":"3446:233:6","statements":[{"assignments":[1611],"declarations":[{"constant":false,"id":1611,"mutability":"mutable","name":"today","nameLocation":"3464:5:6","nodeType":"VariableDeclaration","scope":1641,"src":"3456:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1610,"name":"uint256","nodeType":"ElementaryTypeName","src":"3456:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1615,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1612,"name":"basePaint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"3472:9:6","typeDescriptions":{"typeIdentifier":"t_contract$_BasePaint_$1416","typeString":"contract BasePaint"}},"id":1613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3482:5:6","memberName":"today","nodeType":"MemberAccess","referencedDeclaration":1400,"src":"3472:15:6","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":1614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3472:17:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3456:33:6"},{"assignments":[1617],"declarations":[{"constant":false,"id":1617,"mutability":"mutable","name":"winningTokenId","nameLocation":"3507:14:6","nodeType":"VariableDeclaration","scope":1641,"src":"3499:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1616,"name":"uint256","nodeType":"ElementaryTypeName","src":"3499:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1621,"initialValue":{"baseExpression":{"id":1618,"name":"winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"3524:7:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1620,"indexExpression":{"id":1619,"name":"today","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"3532:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3524:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3499:39:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1622,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3551:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3555:6:6","memberName":"sender","nodeType":"MemberAccess","src":"3551:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":1626,"name":"winningTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"3578:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1624,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3565:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_BasePaintRaffle_$1854","typeString":"contract BasePaintRaffle"}},"id":1625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3570:7:6","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":2279,"src":"3565:12:6","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view external returns (address)"}},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3565:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3551:42:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1632,"nodeType":"IfStatement","src":"3548:65:6","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1629,"name":"NotWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1426,"src":"3602:9:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3602:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1631,"nodeType":"RevertStatement","src":"3595:18:6"}},{"expression":{"arguments":[{"id":1636,"name":"today","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"3648:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1637,"name":"brushId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1449,"src":"3655:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1638,"name":"_pixels","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"3664:7:6","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":1633,"name":"basePaint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"3632:9:6","typeDescriptions":{"typeIdentifier":"t_contract$_BasePaint_$1416","typeString":"contract BasePaint"}},"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3642:5:6","memberName":"paint","nodeType":"MemberAccess","referencedDeclaration":1415,"src":"3632:15:6","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint256,uint256,bytes memory) external"}},"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3632:40:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1640,"nodeType":"ExpressionStatement","src":"3632:40:6"}]},"documentation":{"id":1605,"nodeType":"StructuredDocumentation","src":"3285:100:6","text":"@notice Raffle winner uses this function to paint\n @param _pixels The target pixels paint"},"functionSelector":"17c50bdf","id":1642,"implemented":true,"kind":"function","modifiers":[],"name":"paint","nameLocation":"3399:5:6","nodeType":"FunctionDefinition","parameters":{"id":1608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1607,"mutability":"mutable","name":"_pixels","nameLocation":"3420:7:6","nodeType":"VariableDeclaration","scope":1642,"src":"3405:22:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1606,"name":"bytes","nodeType":"ElementaryTypeName","src":"3405:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3404:24:6"},"returnParameters":{"id":1609,"nodeType":"ParameterList","parameters":[],"src":"3446:0:6"},"scope":1854,"src":"3390:289:6","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":1743,"nodeType":"Block","src":"3858:659:6","statements":[{"condition":{"baseExpression":{"id":1648,"name":"claimedEarnings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1459,"src":"3871:15:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":1650,"indexExpression":{"id":1649,"name":"_day","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1645,"src":"3887:4:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3871:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1654,"nodeType":"IfStatement","src":"3868:49:6","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1651,"name":"AlreadyClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1436,"src":"3901:14:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3901:16:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1653,"nodeType":"RevertStatement","src":"3894:23:6"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1655,"name":"_day","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1645,"src":"3930:4:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1656,"name":"basePaint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"3938:9:6","typeDescriptions":{"typeIdentifier":"t_contract$_BasePaint_$1416","typeString":"contract BasePaint"}},"id":1657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3948:5:6","memberName":"today","nodeType":"MemberAccess","referencedDeclaration":1400,"src":"3938:15:6","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":1658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3938:17:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3930:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1663,"nodeType":"IfStatement","src":"3927:49:6","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1660,"name":"InvalidDay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"3964:10:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3964:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1662,"nodeType":"RevertStatement","src":"3957:19:6"}},{"assignments":[1668],"declarations":[{"constant":false,"id":1668,"mutability":"mutable","name":"dayArr","nameLocation":"4004:6:6","nodeType":"VariableDeclaration","scope":1743,"src":"3987:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1666,"name":"uint256","nodeType":"ElementaryTypeName","src":"3987:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1667,"nodeType":"ArrayTypeName","src":"3987:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1674,"initialValue":{"arguments":[{"hexValue":"31","id":1672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4027:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1671,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"4013:13:6","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":1669,"name":"uint256","nodeType":"ElementaryTypeName","src":"4017:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1670,"nodeType":"ArrayTypeName","src":"4017:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":1673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4013:16:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"3987:42:6"},{"expression":{"id":1679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1675,"name":"dayArr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1668,"src":"4039:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1677,"indexExpression":{"hexValue":"30","id":1676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4046:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4039:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1678,"name":"_day","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1645,"src":"4051:4:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4039:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1680,"nodeType":"ExpressionStatement","src":"4039:16:6"},{"assignments":[1682],"declarations":[{"constant":false,"id":1682,"mutability":"mutable","name":"balanceBefore","nameLocation":"4075:13:6","nodeType":"VariableDeclaration","scope":1743,"src":"4067:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1681,"name":"uint256","nodeType":"ElementaryTypeName","src":"4067:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1688,"initialValue":{"expression":{"arguments":[{"id":1685,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4099:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_BasePaintRaffle_$1854","typeString":"contract BasePaintRaffle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BasePaintRaffle_$1854","typeString":"contract BasePaintRaffle"}],"id":1684,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4091:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1683,"name":"address","nodeType":"ElementaryTypeName","src":"4091:7:6","typeDescriptions":{}}},"id":1686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4091:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4105:7:6","memberName":"balance","nodeType":"MemberAccess","src":"4091:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4067:45:6"},{"expression":{"arguments":[{"id":1692,"name":"dayArr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1668,"src":"4147:6:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"expression":{"id":1689,"name":"basePaint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"4122:9:6","typeDescriptions":{"typeIdentifier":"t_contract$_BasePaint_$1416","typeString":"contract BasePaint"}},"id":1691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4132:14:6","memberName":"authorWithdraw","nodeType":"MemberAccess","referencedDeclaration":1406,"src":"4122:24:6","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256[] memory) external"}},"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4122:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1694,"nodeType":"ExpressionStatement","src":"4122:32:6"},{"assignments":[1696],"declarations":[{"constant":false,"id":1696,"mutability":"mutable","name":"balanceAfter","nameLocation":"4172:12:6","nodeType":"VariableDeclaration","scope":1743,"src":"4164:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1695,"name":"uint256","nodeType":"ElementaryTypeName","src":"4164:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1702,"initialValue":{"expression":{"arguments":[{"id":1699,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4195:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_BasePaintRaffle_$1854","typeString":"contract BasePaintRaffle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BasePaintRaffle_$1854","typeString":"contract BasePaintRaffle"}],"id":1698,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4187:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1697,"name":"address","nodeType":"ElementaryTypeName","src":"4187:7:6","typeDescriptions":{}}},"id":1700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4187:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4201:7:6","memberName":"balance","nodeType":"MemberAccess","src":"4187:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4164:44:6"},{"assignments":[1704],"declarations":[{"constant":false,"id":1704,"mutability":"mutable","name":"earning","nameLocation":"4227:7:6","nodeType":"VariableDeclaration","scope":1743,"src":"4219:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1703,"name":"uint256","nodeType":"ElementaryTypeName","src":"4219:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1708,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1705,"name":"balanceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1696,"src":"4237:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1706,"name":"balanceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"4252:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4237:28:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4219:46:6"},{"assignments":[1710],"declarations":[{"constant":false,"id":1710,"mutability":"mutable","name":"winningTokenId","nameLocation":"4283:14:6","nodeType":"VariableDeclaration","scope":1743,"src":"4275:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1709,"name":"uint256","nodeType":"ElementaryTypeName","src":"4275:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1714,"initialValue":{"baseExpression":{"id":1711,"name":"winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"4300:7:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1713,"indexExpression":{"id":1712,"name":"_day","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1645,"src":"4308:4:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4300:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4275:38:6"},{"assignments":[1716],"declarations":[{"constant":false,"id":1716,"mutability":"mutable","name":"winner","nameLocation":"4332:6:6","nodeType":"VariableDeclaration","scope":1743,"src":"4324:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1715,"name":"address","nodeType":"ElementaryTypeName","src":"4324:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1721,"initialValue":{"arguments":[{"id":1719,"name":"winningTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"4354:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1717,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4341:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_BasePaintRaffle_$1854","typeString":"contract BasePaintRaffle"}},"id":1718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4346:7:6","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":2279,"src":"4341:12:6","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view external returns (address)"}},"id":1720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4341:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4324:45:6"},{"assignments":[1723,null],"declarations":[{"constant":false,"id":1723,"mutability":"mutable","name":"sent","nameLocation":"4385:4:6","nodeType":"VariableDeclaration","scope":1743,"src":"4380:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1722,"name":"bool","nodeType":"ElementaryTypeName","src":"4380:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1730,"initialValue":{"arguments":[{"hexValue":"","id":1728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4423:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1724,"name":"winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"4395:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4402:4:6","memberName":"call","nodeType":"MemberAccess","src":"4395:11:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1726,"name":"earning","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1704,"src":"4414:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"4395:27:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4395:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4379:47:6"},{"condition":{"id":1732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4440:5:6","subExpression":{"id":1731,"name":"sent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"4441:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1736,"nodeType":"IfStatement","src":"4437:35:6","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1733,"name":"FailedToWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"4454:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4454:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1735,"nodeType":"RevertStatement","src":"4447:25:6"}},{"expression":{"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1737,"name":"claimedEarnings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1459,"src":"4482:15:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":1739,"indexExpression":{"id":1738,"name":"_day","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1645,"src":"4498:4:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4482:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4506:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4482:28:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1742,"nodeType":"ExpressionStatement","src":"4482:28:6"}]},"documentation":{"id":1643,"nodeType":"StructuredDocumentation","src":"3685:120:6","text":"@notice Called by winner to withdraw earnings after painting mint is completed\n @param _day The basepaint day"},"functionSelector":"15487ad7","id":1744,"implemented":true,"kind":"function","modifiers":[],"name":"withdawEarnings","nameLocation":"3819:15:6","nodeType":"FunctionDefinition","parameters":{"id":1646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1645,"mutability":"mutable","name":"_day","nameLocation":"3843:4:6","nodeType":"VariableDeclaration","scope":1744,"src":"3835:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1644,"name":"uint256","nodeType":"ElementaryTypeName","src":"3835:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3834:14:6"},"returnParameters":{"id":1647,"nodeType":"ParameterList","parameters":[],"src":"3858:0:6"},"scope":1854,"src":"3810:707:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[2250],"body":{"id":1792,"nodeType":"Block","src":"4759:472:6","statements":[{"condition":{"id":1756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4773:18:6","subExpression":{"arguments":[{"id":1754,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1747,"src":"4782:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1753,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2601,"src":"4774:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":1755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4774:17:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1760,"nodeType":"IfStatement","src":"4769:49:6","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1757,"name":"NonExistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"4800:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4800:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1759,"nodeType":"RevertStatement","src":"4793:25:6"}},{"assignments":[1762],"declarations":[{"constant":false,"id":1762,"mutability":"mutable","name":"dataURI","nameLocation":"4842:7:6","nodeType":"VariableDeclaration","scope":1792,"src":"4829:20:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1761,"name":"bytes","nodeType":"ElementaryTypeName","src":"4829:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1779,"initialValue":{"arguments":[{"hexValue":"7b","id":1765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4882:3:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_a91eddf639b0b768929589c1a9fd21dcb0107199bdd82e55c5348018a1572f52","typeString":"literal_string \"{\""},"value":"{"},{"hexValue":"226e616d65223a2022426173655061696e74205469636b657420","id":1766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4903:28:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_d42a11b37d35a55052d289dce8be6fb4df3139e056ba2326837c95a847ca2be1","typeString":"literal_string \"\"name\": \"BasePaint Ticket \""},"value":"\"name\": \"BasePaint Ticket "},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1767,"name":"_tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1747,"src":"4933:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4942:8:6","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":248,"src":"4933:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4933:19:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"222c","id":1770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4954:4:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb","typeString":"literal_string \"\",\""},"value":"\","},{"hexValue":"226465736372697074696f6e223a2022","id":1771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4976:18:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_63efc49e26c2a0691fbd118ad4ace9a69fa64a27d6ecfb0468e1c404f7b79c0a","typeString":"literal_string \"\"description\": \"\""},"value":"\"description\": \""},{"hexValue":"4a7573742061207469636b65742e2e2e","id":1772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4996:18:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_8cdd418261319b1e50a13c3d613e3de6caa6af5d9770d631b7820c9cd330b60c","typeString":"literal_string \"Just a ticket...\""},"value":"Just a ticket..."},{"hexValue":"222c","id":1773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5016:4:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb","typeString":"literal_string \"\",\""},"value":"\","},{"hexValue":"22696d616765223a2022","id":1774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5038:12:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_dee71bd900939e5251fa52ed0e7fadcfe3990bd7a5ea546147c85d1b972c64b6","typeString":"literal_string \"\"image\": \"\""},"value":"\"image\": \""},{"id":1775,"name":"imageURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"5052:8:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},{"hexValue":"22","id":1776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5062:3:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0","typeString":"literal_string \"\"\""},"value":"\""},{"hexValue":"7d","id":1777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5079:3:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e2ffa389f3a6ded42d759b3377ac0d928e6a268d143bcc9517093d10c843bff","typeString":"literal_string \"}\""},"value":"}"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_a91eddf639b0b768929589c1a9fd21dcb0107199bdd82e55c5348018a1572f52","typeString":"literal_string \"{\""},{"typeIdentifier":"t_stringliteral_d42a11b37d35a55052d289dce8be6fb4df3139e056ba2326837c95a847ca2be1","typeString":"literal_string \"\"name\": \"BasePaint Ticket \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb","typeString":"literal_string \"\",\""},{"typeIdentifier":"t_stringliteral_63efc49e26c2a0691fbd118ad4ace9a69fa64a27d6ecfb0468e1c404f7b79c0a","typeString":"literal_string \"\"description\": \"\""},{"typeIdentifier":"t_stringliteral_8cdd418261319b1e50a13c3d613e3de6caa6af5d9770d631b7820c9cd330b60c","typeString":"literal_string \"Just a ticket...\""},{"typeIdentifier":"t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb","typeString":"literal_string \"\",\""},{"typeIdentifier":"t_stringliteral_dee71bd900939e5251fa52ed0e7fadcfe3990bd7a5ea546147c85d1b972c64b6","typeString":"literal_string \"\"image\": \"\""},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"},{"typeIdentifier":"t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0","typeString":"literal_string \"\"\""},{"typeIdentifier":"t_stringliteral_8e2ffa389f3a6ded42d759b3377ac0d928e6a268d143bcc9517093d10c843bff","typeString":"literal_string \"}\""}],"expression":{"id":1763,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4852:3:6","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1764,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4856:12:6","memberName":"encodePacked","nodeType":"MemberAccess","src":"4852:16:6","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4852:240:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4829:263:6"},{"expression":{"arguments":[{"arguments":[{"hexValue":"646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c","id":1784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5146:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_bccab2d885f86fda81bfd84dd4248d31f8073b473d187111d36536db073076fa","typeString":"literal_string \"data:application/json;base64,\""},"value":"data:application/json;base64,"},{"arguments":[{"id":1787,"name":"dataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1762,"src":"5205:7:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1785,"name":"Base64","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":159,"src":"5191:6:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Base64_$159_$","typeString":"type(library Base64)"}},"id":1786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5198:6:6","memberName":"encode","nodeType":"MemberAccess","referencedDeclaration":158,"src":"5191:13:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure returns (string memory)"}},"id":1788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5191:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_bccab2d885f86fda81bfd84dd4248d31f8073b473d187111d36536db073076fa","typeString":"literal_string \"data:application/json;base64,\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1782,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5116:3:6","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1783,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5120:12:6","memberName":"encodePacked","nodeType":"MemberAccess","src":"5116:16:6","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5116:107:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1781,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5109:6:6","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1780,"name":"string","nodeType":"ElementaryTypeName","src":"5109:6:6","typeDescriptions":{}}},"id":1790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5109:115:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1752,"id":1791,"nodeType":"Return","src":"5102:122:6"}]},"documentation":{"id":1745,"nodeType":"StructuredDocumentation","src":"4523:142:6","text":"@notice Token Metadata getter\n @param _tokenId the id of the token\n @return metadata Encoded JSON metadata for a given token"},"functionSelector":"c87b56dd","id":1793,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"4679:8:6","nodeType":"FunctionDefinition","overrides":{"id":1749,"nodeType":"OverrideSpecifier","overrides":[],"src":"4726:8:6"},"parameters":{"id":1748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1747,"mutability":"mutable","name":"_tokenId","nameLocation":"4696:8:6","nodeType":"VariableDeclaration","scope":1793,"src":"4688:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1746,"name":"uint256","nodeType":"ElementaryTypeName","src":"4688:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4687:18:6"},"returnParameters":{"id":1752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1751,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1793,"src":"4744:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1750,"name":"string","nodeType":"ElementaryTypeName","src":"4744:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4743:15:6"},"scope":1854,"src":"4670:561:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2001],"body":{"id":1802,"nodeType":"Block","src":"5364:25:6","statements":[{"expression":{"hexValue":"31","id":1800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5381:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"functionReturnParameters":1799,"id":1801,"nodeType":"Return","src":"5374:8:6"}]},"documentation":{"id":1794,"nodeType":"StructuredDocumentation","src":"5237:56:6","text":"@notice Override to start tokenIds at 1 instead of 0"},"id":1803,"implemented":true,"kind":"function","modifiers":[],"name":"_startTokenId","nameLocation":"5307:13:6","nodeType":"FunctionDefinition","overrides":{"id":1796,"nodeType":"OverrideSpecifier","overrides":[],"src":"5337:8:6"},"parameters":{"id":1795,"nodeType":"ParameterList","parameters":[],"src":"5320:2:6"},"returnParameters":{"id":1799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1798,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1803,"src":"5355:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1797,"name":"uint256","nodeType":"ElementaryTypeName","src":"5355:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5354:9:6"},"scope":1854,"src":"5298:91:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1824,"nodeType":"Block","src":"5602:149:6","statements":[{"assignments":[1812],"declarations":[{"constant":false,"id":1812,"mutability":"mutable","name":"prevTicketPrice","nameLocation":"5620:15:6","nodeType":"VariableDeclaration","scope":1824,"src":"5612:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1811,"name":"uint256","nodeType":"ElementaryTypeName","src":"5612:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1814,"initialValue":{"id":1813,"name":"ticketPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"5638:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5612:37:6"},{"expression":{"id":1817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1815,"name":"ticketPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"5659:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1816,"name":"_newPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1806,"src":"5673:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5659:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1818,"nodeType":"ExpressionStatement","src":"5659:23:6"},{"eventCall":{"arguments":[{"id":1820,"name":"prevTicketPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"5717:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1821,"name":"_newPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1806,"src":"5734:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1819,"name":"TicketPriceUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"5698:18:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":1822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5698:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1823,"nodeType":"EmitStatement","src":"5693:51:6"}]},"documentation":{"id":1804,"nodeType":"StructuredDocumentation","src":"5441:91:6","text":"@notice Used by owner to update the ticket price\n @param _newPrice The new price"},"functionSelector":"f02137c8","id":1825,"implemented":true,"kind":"function","modifiers":[{"id":1809,"kind":"modifierInvocation","modifierName":{"id":1808,"name":"onlyOwner","nameLocations":["5592:9:6"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"5592:9:6"},"nodeType":"ModifierInvocation","src":"5592:9:6"}],"name":"updateTicketPrice","nameLocation":"5546:17:6","nodeType":"FunctionDefinition","parameters":{"id":1807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1806,"mutability":"mutable","name":"_newPrice","nameLocation":"5572:9:6","nodeType":"VariableDeclaration","scope":1825,"src":"5564:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1805,"name":"uint256","nodeType":"ElementaryTypeName","src":"5564:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5563:19:6"},"returnParameters":{"id":1810,"nodeType":"ParameterList","parameters":[],"src":"5602:0:6"},"scope":1854,"src":"5537:214:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1852,"nodeType":"Block","src":"5942:127:6","statements":[{"assignments":[1834,null],"declarations":[{"constant":false,"id":1834,"mutability":"mutable","name":"sent","nameLocation":"5958:4:6","nodeType":"VariableDeclaration","scope":1852,"src":"5953:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1833,"name":"bool","nodeType":"ElementaryTypeName","src":"5953:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1845,"initialValue":{"arguments":[{"hexValue":"","id":1843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6014:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1835,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"5968:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5979:4:6","memberName":"call","nodeType":"MemberAccess","src":"5968:15:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"arguments":[{"id":1839,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5999:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_BasePaintRaffle_$1854","typeString":"contract BasePaintRaffle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BasePaintRaffle_$1854","typeString":"contract BasePaintRaffle"}],"id":1838,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5991:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1837,"name":"address","nodeType":"ElementaryTypeName","src":"5991:7:6","typeDescriptions":{}}},"id":1840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5991:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6005:7:6","memberName":"balance","nodeType":"MemberAccess","src":"5991:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5968:45:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5968:49:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5952:65:6"},{"condition":{"id":1847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6030:5:6","subExpression":{"id":1846,"name":"sent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1834,"src":"6031:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1851,"nodeType":"IfStatement","src":"6027:35:6","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1848,"name":"FailedToWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"6044:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6044:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1850,"nodeType":"RevertStatement","src":"6037:25:6"}}]},"documentation":{"id":1826,"nodeType":"StructuredDocumentation","src":"5757:112:6","text":"@notice Used by owner to withdraw ETH from ticket sales\n @param _recipient The address to withdraw to"},"functionSelector":"f834eeca","id":1853,"implemented":true,"kind":"function","modifiers":[{"id":1831,"kind":"modifierInvocation","modifierName":{"id":1830,"name":"onlyOwner","nameLocations":["5932:9:6"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"5932:9:6"},"nodeType":"ModifierInvocation","src":"5932:9:6"}],"name":"withdrawTicketSales","nameLocation":"5883:19:6","nodeType":"FunctionDefinition","parameters":{"id":1829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1828,"mutability":"mutable","name":"_recipient","nameLocation":"5911:10:6","nodeType":"VariableDeclaration","scope":1853,"src":"5903:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1827,"name":"address","nodeType":"ElementaryTypeName","src":"5903:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5902:20:6"},"returnParameters":{"id":1832,"nodeType":"ParameterList","parameters":[],"src":"5942:0:6"},"scope":1854,"src":"5874:195:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1855,"src":"912:5159:6","usedErrors":[1426,1428,1430,1432,1434,1436,1438,1440,3483,3486,3489,3492,3495,3498,3501,3504,3507,3510,3513,3516,3519]}],"src":"354:5718:6"},"id":6},"erc721a/contracts/ERC721A.sol":{"ast":{"absolutePath":"erc721a/contracts/ERC721A.sol","exportedSymbols":{"ERC721A":[3477],"ERC721A__IERC721Receiver":[1872],"IERC721A":[3683]},"id":3478,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1856,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"84:23:7"},{"absolutePath":"erc721a/contracts/IERC721A.sol","file":"./IERC721A.sol","id":1857,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3478,"sourceUnit":3684,"src":"109:24:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ERC721A__IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1858,"nodeType":"StructuredDocumentation","src":"135:51:7","text":" @dev Interface of ERC721 token receiver."},"fullyImplemented":false,"id":1872,"linearizedBaseContracts":[1872],"name":"ERC721A__IERC721Receiver","nameLocation":"197:24:7","nodeType":"ContractDefinition","nodes":[{"functionSelector":"150b7a02","id":1871,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"237:16:7","nodeType":"FunctionDefinition","parameters":{"id":1867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1860,"mutability":"mutable","name":"operator","nameLocation":"271:8:7","nodeType":"VariableDeclaration","scope":1871,"src":"263:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1859,"name":"address","nodeType":"ElementaryTypeName","src":"263:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1862,"mutability":"mutable","name":"from","nameLocation":"297:4:7","nodeType":"VariableDeclaration","scope":1871,"src":"289:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1861,"name":"address","nodeType":"ElementaryTypeName","src":"289:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1864,"mutability":"mutable","name":"tokenId","nameLocation":"319:7:7","nodeType":"VariableDeclaration","scope":1871,"src":"311:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1863,"name":"uint256","nodeType":"ElementaryTypeName","src":"311:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1866,"mutability":"mutable","name":"data","nameLocation":"351:4:7","nodeType":"VariableDeclaration","scope":1871,"src":"336:19:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1865,"name":"bytes","nodeType":"ElementaryTypeName","src":"336:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"253:108:7"},"returnParameters":{"id":1870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1869,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1871,"src":"380:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1868,"name":"bytes4","nodeType":"ElementaryTypeName","src":"380:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"379:8:7"},"scope":1872,"src":"228:160:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3478,"src":"187:203:7","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":1874,"name":"IERC721A","nameLocations":["915:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":3683,"src":"915:8:7"},"id":1875,"nodeType":"InheritanceSpecifier","src":"915:8:7"}],"canonicalName":"ERC721A","contractDependencies":[],"contractKind":"contract","documentation":{"id":1873,"nodeType":"StructuredDocumentation","src":"392:502:7","text":" @title ERC721A\n @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n Non-Fungible Token Standard, including the Metadata extension.\n Optimized for lower gas during batch mints.\n Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n starting from `_startTokenId()`.\n Assumptions:\n - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256)."},"fullyImplemented":true,"id":3477,"linearizedBaseContracts":[3477,3683],"name":"ERC721A","nameLocation":"904:7:7","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ERC721A.TokenApprovalRef","id":1878,"members":[{"constant":false,"id":1877,"mutability":"mutable","name":"value","nameLocation":"1057:5:7","nodeType":"VariableDeclaration","scope":1878,"src":"1049:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1876,"name":"address","nodeType":"ElementaryTypeName","src":"1049:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"TokenApprovalRef","nameLocation":"1022:16:7","nodeType":"StructDefinition","scope":3477,"src":"1015:54:7","visibility":"public"},{"constant":true,"id":1886,"mutability":"constant","name":"_BITMASK_ADDRESS_DATA_ENTRY","nameLocation":"1330:27:7","nodeType":"VariableDeclaration","scope":3477,"src":"1305:68:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1879,"name":"uint256","nodeType":"ElementaryTypeName","src":"1305:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_18446744073709551615_by_1","typeString":"int_const 18446744073709551615"},"id":1885,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"},"id":1882,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1361:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3634","id":1881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1366:2:7","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"1361:7:7","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"}}],"id":1883,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1360:9:7","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1372:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1360:13:7","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551615_by_1","typeString":"int_const 18446744073709551615"}},"visibility":"private"},{"constant":true,"id":1889,"mutability":"constant","name":"_BITPOS_NUMBER_MINTED","nameLocation":"1471:21:7","nodeType":"VariableDeclaration","scope":3477,"src":"1446:51:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1887,"name":"uint256","nodeType":"ElementaryTypeName","src":"1446:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3634","id":1888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1495:2:7","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"visibility":"private"},{"constant":true,"id":1892,"mutability":"constant","name":"_BITPOS_NUMBER_BURNED","nameLocation":"1595:21:7","nodeType":"VariableDeclaration","scope":3477,"src":"1570:52:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1890,"name":"uint256","nodeType":"ElementaryTypeName","src":"1570:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313238","id":1891,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1619:3:7","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"visibility":"private"},{"constant":true,"id":1895,"mutability":"constant","name":"_BITPOS_AUX","nameLocation":"1711:11:7","nodeType":"VariableDeclaration","scope":3477,"src":"1686:42:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1893,"name":"uint256","nodeType":"ElementaryTypeName","src":"1686:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313932","id":1894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1725:3:7","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},"visibility":"private"},{"constant":true,"id":1903,"mutability":"constant","name":"_BITMASK_AUX_COMPLEMENT","nameLocation":"1841:23:7","nodeType":"VariableDeclaration","scope":3477,"src":"1816:65:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1896,"name":"uint256","nodeType":"ElementaryTypeName","src":"1816:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512895_by_1","typeString":"int_const 6277...(50 digits omitted)...2895"},"id":1902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"},"id":1899,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1868:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313932","id":1898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1873:3:7","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},"src":"1868:8:7","typeDescriptions":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"}}],"id":1900,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1867:10:7","typeDescriptions":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1880:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1867:14:7","typeDescriptions":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512895_by_1","typeString":"int_const 6277...(50 digits omitted)...2895"}},"visibility":"private"},{"constant":true,"id":1906,"mutability":"constant","name":"_BITPOS_START_TIMESTAMP","nameLocation":"1978:23:7","nodeType":"VariableDeclaration","scope":3477,"src":"1953:54:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1904,"name":"uint256","nodeType":"ElementaryTypeName","src":"1953:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313630","id":1905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2004:3:7","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"visibility":"private"},{"constant":true,"id":1911,"mutability":"constant","name":"_BITMASK_BURNED","nameLocation":"2100:15:7","nodeType":"VariableDeclaration","scope":3477,"src":"2075:51:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1907,"name":"uint256","nodeType":"ElementaryTypeName","src":"2075:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_26959946667150639794667015087019630673637144422540572481103610249216_by_1","typeString":"int_const 2695...(60 digits omitted)...9216"},"id":1910,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2118:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"323234","id":1909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2123:3:7","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},"src":"2118:8:7","typeDescriptions":{"typeIdentifier":"t_rational_26959946667150639794667015087019630673637144422540572481103610249216_by_1","typeString":"int_const 2695...(60 digits omitted)...9216"}},"visibility":"private"},{"constant":true,"id":1914,"mutability":"constant","name":"_BITPOS_NEXT_INITIALIZED","nameLocation":"2232:24:7","nodeType":"VariableDeclaration","scope":3477,"src":"2207:55:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1912,"name":"uint256","nodeType":"ElementaryTypeName","src":"2207:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"323235","id":1913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2259:3:7","typeDescriptions":{"typeIdentifier":"t_rational_225_by_1","typeString":"int_const 225"},"value":"225"},"visibility":"private"},{"constant":true,"id":1919,"mutability":"constant","name":"_BITMASK_NEXT_INITIALIZED","nameLocation":"2364:25:7","nodeType":"VariableDeclaration","scope":3477,"src":"2339:61:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1915,"name":"uint256","nodeType":"ElementaryTypeName","src":"2339:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_53919893334301279589334030174039261347274288845081144962207220498432_by_1","typeString":"int_const 5391...(60 digits omitted)...8432"},"id":1918,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2392:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"323235","id":1917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2397:3:7","typeDescriptions":{"typeIdentifier":"t_rational_225_by_1","typeString":"int_const 225"},"value":"225"},"src":"2392:8:7","typeDescriptions":{"typeIdentifier":"t_rational_53919893334301279589334030174039261347274288845081144962207220498432_by_1","typeString":"int_const 5391...(60 digits omitted)...8432"}},"visibility":"private"},{"constant":true,"id":1922,"mutability":"constant","name":"_BITPOS_EXTRA_DATA","nameLocation":"2492:18:7","nodeType":"VariableDeclaration","scope":3477,"src":"2467:49:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1920,"name":"uint256","nodeType":"ElementaryTypeName","src":"2467:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"323332","id":1921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2513:3:7","typeDescriptions":{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},"value":"232"},"visibility":"private"},{"constant":true,"id":1930,"mutability":"constant","name":"_BITMASK_EXTRA_DATA_COMPLEMENT","nameLocation":"2634:30:7","nodeType":"VariableDeclaration","scope":3477,"src":"2609:72:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1923,"name":"uint256","nodeType":"ElementaryTypeName","src":"2609:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_6901746346790563787434755862277025452451108972170386555162524223799295_by_1","typeString":"int_const 6901...(62 digits omitted)...9295"},"id":1929,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_6901746346790563787434755862277025452451108972170386555162524223799296_by_1","typeString":"int_const 6901...(62 digits omitted)...9296"},"id":1926,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2668:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"323332","id":1925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2673:3:7","typeDescriptions":{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},"value":"232"},"src":"2668:8:7","typeDescriptions":{"typeIdentifier":"t_rational_6901746346790563787434755862277025452451108972170386555162524223799296_by_1","typeString":"int_const 6901...(62 digits omitted)...9296"}}],"id":1927,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2667:10:7","typeDescriptions":{"typeIdentifier":"t_rational_6901746346790563787434755862277025452451108972170386555162524223799296_by_1","typeString":"int_const 6901...(62 digits omitted)...9296"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2680:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2667:14:7","typeDescriptions":{"typeIdentifier":"t_rational_6901746346790563787434755862277025452451108972170386555162524223799295_by_1","typeString":"int_const 6901...(62 digits omitted)...9295"}},"visibility":"private"},{"constant":true,"id":1938,"mutability":"constant","name":"_BITMASK_ADDRESS","nameLocation":"2766:16:7","nodeType":"VariableDeclaration","scope":3477,"src":"2741:58:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1931,"name":"uint256","nodeType":"ElementaryTypeName","src":"2741:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_1461501637330902918203684832716283019655932542975_by_1","typeString":"int_const 1461...(41 digits omitted)...2975"},"id":1937,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_1461501637330902918203684832716283019655932542976_by_1","typeString":"int_const 1461...(41 digits omitted)...2976"},"id":1934,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2786:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313630","id":1933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2791:3:7","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"src":"2786:8:7","typeDescriptions":{"typeIdentifier":"t_rational_1461501637330902918203684832716283019655932542976_by_1","typeString":"int_const 1461...(41 digits omitted)...2976"}}],"id":1935,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2785:10:7","typeDescriptions":{"typeIdentifier":"t_rational_1461501637330902918203684832716283019655932542976_by_1","typeString":"int_const 1461...(41 digits omitted)...2976"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2798:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2785:14:7","typeDescriptions":{"typeIdentifier":"t_rational_1461501637330902918203684832716283019655932542975_by_1","typeString":"int_const 1461...(41 digits omitted)...2975"}},"visibility":"private"},{"constant":true,"id":1941,"mutability":"constant","name":"_MAX_MINT_ERC2309_QUANTITY_LIMIT","nameLocation":"3107:32:7","nodeType":"VariableDeclaration","scope":3477,"src":"3082:64:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1939,"name":"uint256","nodeType":"ElementaryTypeName","src":"3082:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"35303030","id":1940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3142:4:7","typeDescriptions":{"typeIdentifier":"t_rational_5000_by_1","typeString":"int_const 5000"},"value":"5000"},"visibility":"private"},{"constant":true,"id":1944,"mutability":"constant","name":"_TRANSFER_EVENT_SIGNATURE","nameLocation":"3293:25:7","nodeType":"VariableDeclaration","scope":3477,"src":"3268:127:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1942,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3268:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307864646632353261643162653263383962363963326230363866633337386461613935326261376631363363346131313632386635356134646635323362336566","id":1943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3329:66:7","typeDescriptions":{"typeIdentifier":"t_rational_100389287136786176327247604509743168900146139575972864366142685224231313322991_by_1","typeString":"int_const 1003...(70 digits omitted)...2991"},"value":"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"},"visibility":"private"},{"constant":false,"id":1946,"mutability":"mutable","name":"_currentIndex","nameLocation":"3638:13:7","nodeType":"VariableDeclaration","scope":3477,"src":"3622:29:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1945,"name":"uint256","nodeType":"ElementaryTypeName","src":"3622:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":1948,"mutability":"mutable","name":"_burnCounter","nameLocation":"3710:12:7","nodeType":"VariableDeclaration","scope":3477,"src":"3694:28:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1947,"name":"uint256","nodeType":"ElementaryTypeName","src":"3694:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":1950,"mutability":"mutable","name":"_name","nameLocation":"3762:5:7","nodeType":"VariableDeclaration","scope":3477,"src":"3747:20:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1949,"name":"string","nodeType":"ElementaryTypeName","src":"3747:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":1952,"mutability":"mutable","name":"_symbol","nameLocation":"3809:7:7","nodeType":"VariableDeclaration","scope":3477,"src":"3794:22:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1951,"name":"string","nodeType":"ElementaryTypeName","src":"3794:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":1956,"mutability":"mutable","name":"_packedOwnerships","nameLocation":"4236:17:7","nodeType":"VariableDeclaration","scope":3477,"src":"4200:53:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":1955,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1953,"name":"uint256","nodeType":"ElementaryTypeName","src":"4208:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"4200:27:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1954,"name":"uint256","nodeType":"ElementaryTypeName","src":"4219:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":1960,"mutability":"mutable","name":"_packedAddressData","nameLocation":"4495:18:7","nodeType":"VariableDeclaration","scope":3477,"src":"4459:54:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1959,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1957,"name":"address","nodeType":"ElementaryTypeName","src":"4467:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"4459:27:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1958,"name":"uint256","nodeType":"ElementaryTypeName","src":"4478:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":1965,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"4615:15:7","nodeType":"VariableDeclaration","scope":3477,"src":"4570:60:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_TokenApprovalRef_$1878_storage_$","typeString":"mapping(uint256 => struct ERC721A.TokenApprovalRef)"},"typeName":{"id":1964,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1961,"name":"uint256","nodeType":"ElementaryTypeName","src":"4578:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"4570:36:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_TokenApprovalRef_$1878_storage_$","typeString":"mapping(uint256 => struct ERC721A.TokenApprovalRef)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1963,"nodeType":"UserDefinedTypeName","pathNode":{"id":1962,"name":"TokenApprovalRef","nameLocations":["4589:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":1878,"src":"4589:16:7"},"referencedDeclaration":1878,"src":"4589:16:7","typeDescriptions":{"typeIdentifier":"t_struct$_TokenApprovalRef_$1878_storage_ptr","typeString":"struct ERC721A.TokenApprovalRef"}}},"visibility":"private"},{"constant":false,"id":1971,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"4738:18:7","nodeType":"VariableDeclaration","scope":3477,"src":"4685:71:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":1970,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1966,"name":"address","nodeType":"ElementaryTypeName","src":"4693:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"4685:44:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1969,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1967,"name":"address","nodeType":"ElementaryTypeName","src":"4712:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"4704:24:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1968,"name":"bool","nodeType":"ElementaryTypeName","src":"4723:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":1991,"nodeType":"Block","src":"5002:98:7","statements":[{"expression":{"id":1980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1978,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1950,"src":"5012:5:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1979,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1973,"src":"5020:5:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"5012:13:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1981,"nodeType":"ExpressionStatement","src":"5012:13:7"},{"expression":{"id":1984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1982,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1952,"src":"5035:7:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1983,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1975,"src":"5045:7:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"5035:17:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1985,"nodeType":"ExpressionStatement","src":"5035:17:7"},{"expression":{"id":1989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1986,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"5062:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":1987,"name":"_startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"5078:13:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5078:15:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5062:31:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1990,"nodeType":"ExpressionStatement","src":"5062:31:7"}]},"id":1992,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1973,"mutability":"mutable","name":"name_","nameLocation":"4972:5:7","nodeType":"VariableDeclaration","scope":1992,"src":"4958:19:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1972,"name":"string","nodeType":"ElementaryTypeName","src":"4958:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1975,"mutability":"mutable","name":"symbol_","nameLocation":"4993:7:7","nodeType":"VariableDeclaration","scope":1992,"src":"4979:21:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1974,"name":"string","nodeType":"ElementaryTypeName","src":"4979:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4957:44:7"},"returnParameters":{"id":1977,"nodeType":"ParameterList","parameters":[],"src":"5002:0:7"},"scope":3477,"src":"4946:154:7","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2000,"nodeType":"Block","src":"5491:25:7","statements":[{"expression":{"hexValue":"30","id":1998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5508:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1997,"id":1999,"nodeType":"Return","src":"5501:8:7"}]},"documentation":{"id":1993,"nodeType":"StructuredDocumentation","src":"5296:125:7","text":" @dev Returns the starting token ID.\n To change the starting token ID, please override this function."},"id":2001,"implemented":true,"kind":"function","modifiers":[],"name":"_startTokenId","nameLocation":"5435:13:7","nodeType":"FunctionDefinition","parameters":{"id":1994,"nodeType":"ParameterList","parameters":[],"src":"5448:2:7"},"returnParameters":{"id":1997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1996,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2001,"src":"5482:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1995,"name":"uint256","nodeType":"ElementaryTypeName","src":"5482:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5481:9:7"},"scope":3477,"src":"5426:90:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2009,"nodeType":"Block","src":"5654:37:7","statements":[{"expression":{"id":2007,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"5671:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2006,"id":2008,"nodeType":"Return","src":"5664:20:7"}]},"documentation":{"id":2002,"nodeType":"StructuredDocumentation","src":"5522:63:7","text":" @dev Returns the next token ID to be minted."},"id":2010,"implemented":true,"kind":"function","modifiers":[],"name":"_nextTokenId","nameLocation":"5599:12:7","nodeType":"FunctionDefinition","parameters":{"id":2003,"nodeType":"ParameterList","parameters":[],"src":"5611:2:7"},"returnParameters":{"id":2006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2005,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2010,"src":"5645:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2004,"name":"uint256","nodeType":"ElementaryTypeName","src":"5645:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5644:9:7"},"scope":3477,"src":"5590:101:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[3534],"body":{"id":2025,"nodeType":"Block","src":"5964:247:7","statements":[{"id":2024,"nodeType":"UncheckedBlock","src":"6117:88:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2017,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"6148:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2018,"name":"_burnCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"6164:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6148:28:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2020,"name":"_startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"6179:13:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6179:15:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6148:46:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2016,"id":2023,"nodeType":"Return","src":"6141:53:7"}]}]},"documentation":{"id":2011,"nodeType":"StructuredDocumentation","src":"5697:192:7","text":" @dev Returns the total number of tokens in existence.\n Burned tokens will reduce the count.\n To get the total number of tokens minted, please see {_totalMinted}."},"functionSelector":"18160ddd","id":2026,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"5903:11:7","nodeType":"FunctionDefinition","overrides":{"id":2013,"nodeType":"OverrideSpecifier","overrides":[],"src":"5937:8:7"},"parameters":{"id":2012,"nodeType":"ParameterList","parameters":[],"src":"5914:2:7"},"returnParameters":{"id":2016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2015,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2026,"src":"5955:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2014,"name":"uint256","nodeType":"ElementaryTypeName","src":"5955:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5954:9:7"},"scope":3477,"src":"5894:317:7","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2038,"nodeType":"Block","src":"6368:226:7","statements":[{"id":2037,"nodeType":"UncheckedBlock","src":"6515:73:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2032,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"6546:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2033,"name":"_startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"6562:13:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6562:15:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6546:31:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2031,"id":2036,"nodeType":"Return","src":"6539:38:7"}]}]},"documentation":{"id":2027,"nodeType":"StructuredDocumentation","src":"6217:82:7","text":" @dev Returns the total amount of tokens minted in the contract."},"id":2039,"implemented":true,"kind":"function","modifiers":[],"name":"_totalMinted","nameLocation":"6313:12:7","nodeType":"FunctionDefinition","parameters":{"id":2028,"nodeType":"ParameterList","parameters":[],"src":"6325:2:7"},"returnParameters":{"id":2031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2030,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2039,"src":"6359:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2029,"name":"uint256","nodeType":"ElementaryTypeName","src":"6359:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6358:9:7"},"scope":3477,"src":"6304:290:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2047,"nodeType":"Block","src":"6735:36:7","statements":[{"expression":{"id":2045,"name":"_burnCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"6752:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2044,"id":2046,"nodeType":"Return","src":"6745:19:7"}]},"documentation":{"id":2040,"nodeType":"StructuredDocumentation","src":"6600:66:7","text":" @dev Returns the total number of tokens burned."},"id":2048,"implemented":true,"kind":"function","modifiers":[],"name":"_totalBurned","nameLocation":"6680:12:7","nodeType":"FunctionDefinition","parameters":{"id":2041,"nodeType":"ParameterList","parameters":[],"src":"6692:2:7"},"returnParameters":{"id":2044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2043,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2048,"src":"6726:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2042,"name":"uint256","nodeType":"ElementaryTypeName","src":"6726:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6725:9:7"},"scope":3477,"src":"6671:100:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[3577],"body":{"id":2073,"nodeType":"Block","src":"7126:149:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2057,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2051,"src":"7140:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7157:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2059,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7149:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2058,"name":"address","nodeType":"ElementaryTypeName","src":"7149:7:7","typeDescriptions":{}}},"id":2061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7149:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7140:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2066,"nodeType":"IfStatement","src":"7136:60:7","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2063,"name":"BalanceQueryForZeroAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3489,"src":"7168:26:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7168:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2065,"nodeType":"RevertStatement","src":"7161:35:7"}},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2067,"name":"_packedAddressData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"7213:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2069,"indexExpression":{"id":2068,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2051,"src":"7232:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7213:25:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2070,"name":"_BITMASK_ADDRESS_DATA_ENTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"7241:27:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7213:55:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2056,"id":2072,"nodeType":"Return","src":"7206:62:7"}]},"documentation":{"id":2049,"nodeType":"StructuredDocumentation","src":"6966:74:7","text":" @dev Returns the number of tokens in `owner`'s account."},"functionSelector":"70a08231","id":2074,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"7054:9:7","nodeType":"FunctionDefinition","overrides":{"id":2053,"nodeType":"OverrideSpecifier","overrides":[],"src":"7099:8:7"},"parameters":{"id":2052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2051,"mutability":"mutable","name":"owner","nameLocation":"7072:5:7","nodeType":"VariableDeclaration","scope":2074,"src":"7064:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2050,"name":"address","nodeType":"ElementaryTypeName","src":"7064:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7063:15:7"},"returnParameters":{"id":2056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2055,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2074,"src":"7117:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2054,"name":"uint256","nodeType":"ElementaryTypeName","src":"7117:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7116:9:7"},"scope":3477,"src":"7045:230:7","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2091,"nodeType":"Block","src":"7422:106:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2082,"name":"_packedAddressData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"7440:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2084,"indexExpression":{"id":2083,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2077,"src":"7459:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7440:25:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":2085,"name":"_BITPOS_NUMBER_MINTED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"7469:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7440:50:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2087,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7439:52:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2088,"name":"_BITMASK_ADDRESS_DATA_ENTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"7494:27:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7439:82:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2081,"id":2090,"nodeType":"Return","src":"7432:89:7"}]},"documentation":{"id":2075,"nodeType":"StructuredDocumentation","src":"7281:66:7","text":" Returns the number of tokens minted by `owner`."},"id":2092,"implemented":true,"kind":"function","modifiers":[],"name":"_numberMinted","nameLocation":"7361:13:7","nodeType":"FunctionDefinition","parameters":{"id":2078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2077,"mutability":"mutable","name":"owner","nameLocation":"7383:5:7","nodeType":"VariableDeclaration","scope":2092,"src":"7375:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2076,"name":"address","nodeType":"ElementaryTypeName","src":"7375:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7374:15:7"},"returnParameters":{"id":2081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2080,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2092,"src":"7413:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2079,"name":"uint256","nodeType":"ElementaryTypeName","src":"7413:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7412:9:7"},"scope":3477,"src":"7352:176:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2109,"nodeType":"Block","src":"7691:106:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2100,"name":"_packedAddressData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"7709:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2102,"indexExpression":{"id":2101,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7728:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7709:25:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":2103,"name":"_BITPOS_NUMBER_BURNED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"7738:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7709:50:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2105,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7708:52:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2106,"name":"_BITMASK_ADDRESS_DATA_ENTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"7763:27:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7708:82:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2099,"id":2108,"nodeType":"Return","src":"7701:89:7"}]},"documentation":{"id":2093,"nodeType":"StructuredDocumentation","src":"7534:82:7","text":" Returns the number of tokens burned by or on behalf of `owner`."},"id":2110,"implemented":true,"kind":"function","modifiers":[],"name":"_numberBurned","nameLocation":"7630:13:7","nodeType":"FunctionDefinition","parameters":{"id":2096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2095,"mutability":"mutable","name":"owner","nameLocation":"7652:5:7","nodeType":"VariableDeclaration","scope":2110,"src":"7644:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2094,"name":"address","nodeType":"ElementaryTypeName","src":"7644:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7643:15:7"},"returnParameters":{"id":2099,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2098,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2110,"src":"7682:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2097,"name":"uint256","nodeType":"ElementaryTypeName","src":"7682:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7681:9:7"},"scope":3477,"src":"7621:176:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2127,"nodeType":"Block","src":"7973:72:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2120,"name":"_packedAddressData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"7997:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2122,"indexExpression":{"id":2121,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"8016:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7997:25:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":2123,"name":"_BITPOS_AUX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1895,"src":"8026:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:40:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2119,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7990:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":2118,"name":"uint64","nodeType":"ElementaryTypeName","src":"7990:6:7","typeDescriptions":{}}},"id":2125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7990:48:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":2117,"id":2126,"nodeType":"Return","src":"7983:55:7"}]},"documentation":{"id":2111,"nodeType":"StructuredDocumentation","src":"7803:102:7","text":" Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used)."},"id":2128,"implemented":true,"kind":"function","modifiers":[],"name":"_getAux","nameLocation":"7919:7:7","nodeType":"FunctionDefinition","parameters":{"id":2114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2113,"mutability":"mutable","name":"owner","nameLocation":"7935:5:7","nodeType":"VariableDeclaration","scope":2128,"src":"7927:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2112,"name":"address","nodeType":"ElementaryTypeName","src":"7927:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7926:15:7"},"returnParameters":{"id":2117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2116,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2128,"src":"7965:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2115,"name":"uint64","nodeType":"ElementaryTypeName","src":"7965:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"7964:8:7"},"scope":3477,"src":"7910:135:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2164,"nodeType":"Block","src":"8288:334:7","statements":[{"assignments":[2137],"declarations":[{"constant":false,"id":2137,"mutability":"mutable","name":"packed","nameLocation":"8306:6:7","nodeType":"VariableDeclaration","scope":2164,"src":"8298:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2136,"name":"uint256","nodeType":"ElementaryTypeName","src":"8298:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2141,"initialValue":{"baseExpression":{"id":2138,"name":"_packedAddressData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"8315:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2140,"indexExpression":{"id":2139,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"8334:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8315:25:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8298:42:7"},{"assignments":[2143],"declarations":[{"constant":false,"id":2143,"mutability":"mutable","name":"auxCasted","nameLocation":"8358:9:7","nodeType":"VariableDeclaration","scope":2164,"src":"8350:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2142,"name":"uint256","nodeType":"ElementaryTypeName","src":"8350:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2144,"nodeType":"VariableDeclarationStatement","src":"8350:17:7"},{"AST":{"nodeType":"YulBlock","src":"8450:40:7","statements":[{"nodeType":"YulAssignment","src":"8464:16:7","value":{"name":"aux","nodeType":"YulIdentifier","src":"8477:3:7"},"variableNames":[{"name":"auxCasted","nodeType":"YulIdentifier","src":"8464:9:7"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2133,"isOffset":false,"isSlot":false,"src":"8477:3:7","valueSize":1},{"declaration":2143,"isOffset":false,"isSlot":false,"src":"8464:9:7","valueSize":1}],"id":2145,"nodeType":"InlineAssembly","src":"8441:49:7"},{"expression":{"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2146,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2137,"src":"8499:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2147,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2137,"src":"8509:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2148,"name":"_BITMASK_AUX_COMPLEMENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1903,"src":"8518:23:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8509:32:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2150,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8508:34:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2151,"name":"auxCasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2143,"src":"8546:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2152,"name":"_BITPOS_AUX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1895,"src":"8559:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8546:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2154,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8545:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8508:63:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8499:72:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2157,"nodeType":"ExpressionStatement","src":"8499:72:7"},{"expression":{"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2158,"name":"_packedAddressData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"8581:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2160,"indexExpression":{"id":2159,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"8600:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8581:25:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2161,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2137,"src":"8609:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8581:34:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2163,"nodeType":"ExpressionStatement","src":"8581:34:7"}]},"documentation":{"id":2129,"nodeType":"StructuredDocumentation","src":"8051:171:7","text":" Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n If there are multiple variables, please pack them into a uint64."},"id":2165,"implemented":true,"kind":"function","modifiers":[],"name":"_setAux","nameLocation":"8236:7:7","nodeType":"FunctionDefinition","parameters":{"id":2134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2131,"mutability":"mutable","name":"owner","nameLocation":"8252:5:7","nodeType":"VariableDeclaration","scope":2165,"src":"8244:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2130,"name":"address","nodeType":"ElementaryTypeName","src":"8244:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2133,"mutability":"mutable","name":"aux","nameLocation":"8266:3:7","nodeType":"VariableDeclaration","scope":2165,"src":"8259:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2132,"name":"uint64","nodeType":"ElementaryTypeName","src":"8259:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"8243:27:7"},"returnParameters":{"id":2135,"nodeType":"ParameterList","parameters":[],"src":"8288:0:7"},"scope":3477,"src":"8227:395:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[3542],"body":{"id":2186,"nodeType":"Block","src":"9246:539:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2174,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"9558:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783031666663396137","id":2175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9573:10:7","typeDescriptions":{"typeIdentifier":"t_rational_33540519_by_1","typeString":"int_const 33540519"},"value":"0x01ffc9a7"},"src":"9558:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2177,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"9634:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783830616335386364","id":2178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9649:10:7","typeDescriptions":{"typeIdentifier":"t_rational_2158778573_by_1","typeString":"int_const 2158778573"},"value":"0x80ac58cd"},"src":"9634:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9558:101:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2181,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"9710:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783562356531333966","id":2182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9725:10:7","typeDescriptions":{"typeIdentifier":"t_rational_1532892063_by_1","typeString":"int_const 1532892063"},"value":"0x5b5e139f"},"src":"9710:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9558:177:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2173,"id":2185,"nodeType":"Return","src":"9539:196:7"}]},"documentation":{"id":2166,"nodeType":"StructuredDocumentation","src":"8809:341:7","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n to learn more about how these ids are created.\n This function call must use less than 30000 gas."},"functionSelector":"01ffc9a7","id":2187,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"9164:17:7","nodeType":"FunctionDefinition","overrides":{"id":2170,"nodeType":"OverrideSpecifier","overrides":[],"src":"9222:8:7"},"parameters":{"id":2169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2168,"mutability":"mutable","name":"interfaceId","nameLocation":"9189:11:7","nodeType":"VariableDeclaration","scope":2187,"src":"9182:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2167,"name":"bytes4","nodeType":"ElementaryTypeName","src":"9182:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"9181:20:7"},"returnParameters":{"id":2173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2172,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2187,"src":"9240:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2171,"name":"bool","nodeType":"ElementaryTypeName","src":"9240:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9239:6:7"},"scope":3477,"src":"9155:630:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3657],"body":{"id":2196,"nodeType":"Block","src":"10108:29:7","statements":[{"expression":{"id":2194,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1950,"src":"10125:5:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2193,"id":2195,"nodeType":"Return","src":"10118:12:7"}]},"documentation":{"id":2188,"nodeType":"StructuredDocumentation","src":"9976:58:7","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":2197,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"10048:4:7","nodeType":"FunctionDefinition","overrides":{"id":2190,"nodeType":"OverrideSpecifier","overrides":[],"src":"10075:8:7"},"parameters":{"id":2189,"nodeType":"ParameterList","parameters":[],"src":"10052:2:7"},"returnParameters":{"id":2193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2192,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2197,"src":"10093:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2191,"name":"string","nodeType":"ElementaryTypeName","src":"10093:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"10092:15:7"},"scope":3477,"src":"10039:98:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3663],"body":{"id":2206,"nodeType":"Block","src":"10279:31:7","statements":[{"expression":{"id":2204,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1952,"src":"10296:7:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2203,"id":2205,"nodeType":"Return","src":"10289:14:7"}]},"documentation":{"id":2198,"nodeType":"StructuredDocumentation","src":"10143:60:7","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":2207,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"10217:6:7","nodeType":"FunctionDefinition","overrides":{"id":2200,"nodeType":"OverrideSpecifier","overrides":[],"src":"10246:8:7"},"parameters":{"id":2199,"nodeType":"ParameterList","parameters":[],"src":"10223:2:7"},"returnParameters":{"id":2203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2202,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2207,"src":"10264:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2201,"name":"string","nodeType":"ElementaryTypeName","src":"10264:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"10263:15:7"},"scope":3477,"src":"10208:102:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3671],"body":{"id":2249,"nodeType":"Block","src":"10499:225:7","statements":[{"condition":{"id":2219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"10513:17:7","subExpression":{"arguments":[{"id":2217,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"10522:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2216,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2601,"src":"10514:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":2218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10514:16:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2223,"nodeType":"IfStatement","src":"10509:59:7","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2220,"name":"URIQueryForNonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3513,"src":"10539:27:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10539:29:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2222,"nodeType":"RevertStatement","src":"10532:36:7"}},{"assignments":[2225],"declarations":[{"constant":false,"id":2225,"mutability":"mutable","name":"baseURI","nameLocation":"10593:7:7","nodeType":"VariableDeclaration","scope":2249,"src":"10579:21:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2224,"name":"string","nodeType":"ElementaryTypeName","src":"10579:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2228,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2226,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2259,"src":"10603:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":2227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10603:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"10579:34:7"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2231,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"10636:7:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10630:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2229,"name":"bytes","nodeType":"ElementaryTypeName","src":"10630:5:7","typeDescriptions":{}}},"id":2232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10630:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10645:6:7","memberName":"length","nodeType":"MemberAccess","src":"10630:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10655:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10630:26:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":2246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10715:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":2247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10630:87:7","trueExpression":{"arguments":[{"arguments":[{"id":2240,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"10683:7:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"id":2242,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"10702:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2241,"name":"_toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"10692:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10692:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2238,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10666:3:7","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2239,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10670:12:7","memberName":"encodePacked","nodeType":"MemberAccess","src":"10666:16:7","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10666:45:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2237,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10659:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2236,"name":"string","nodeType":"ElementaryTypeName","src":"10659:6:7","typeDescriptions":{}}},"id":2245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10659:53:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2215,"id":2248,"nodeType":"Return","src":"10623:94:7"}]},"documentation":{"id":2208,"nodeType":"StructuredDocumentation","src":"10316:90:7","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":2250,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"10420:8:7","nodeType":"FunctionDefinition","overrides":{"id":2212,"nodeType":"OverrideSpecifier","overrides":[],"src":"10466:8:7"},"parameters":{"id":2211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2210,"mutability":"mutable","name":"tokenId","nameLocation":"10437:7:7","nodeType":"VariableDeclaration","scope":2250,"src":"10429:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2209,"name":"uint256","nodeType":"ElementaryTypeName","src":"10429:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10428:17:7"},"returnParameters":{"id":2215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2214,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2250,"src":"10484:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2213,"name":"string","nodeType":"ElementaryTypeName","src":"10484:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"10483:15:7"},"scope":3477,"src":"10411:313:7","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2258,"nodeType":"Block","src":"11035:26:7","statements":[{"expression":{"hexValue":"","id":2256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11052:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":2255,"id":2257,"nodeType":"Return","src":"11045:9:7"}]},"documentation":{"id":2251,"nodeType":"StructuredDocumentation","src":"10730:234:7","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, it can be overridden in child contracts."},"id":2259,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"10978:8:7","nodeType":"FunctionDefinition","parameters":{"id":2252,"nodeType":"ParameterList","parameters":[],"src":"10986:2:7"},"returnParameters":{"id":2255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2254,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2259,"src":"11020:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2253,"name":"string","nodeType":"ElementaryTypeName","src":"11020:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"11019:15:7"},"scope":3477,"src":"10969:92:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[3585],"body":{"id":2278,"nodeType":"Block","src":"11472:69:7","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2273,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2262,"src":"11524:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2272,"name":"_packedOwnershipOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2387,"src":"11505:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":2274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11505:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2271,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11497:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2270,"name":"uint160","nodeType":"ElementaryTypeName","src":"11497:7:7","typeDescriptions":{}}},"id":2275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11497:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11489:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2268,"name":"address","nodeType":"ElementaryTypeName","src":"11489:7:7","typeDescriptions":{}}},"id":2276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11489:45:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2267,"id":2277,"nodeType":"Return","src":"11482:52:7"}]},"documentation":{"id":2260,"nodeType":"StructuredDocumentation","src":"11255:131:7","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":2279,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"11400:7:7","nodeType":"FunctionDefinition","overrides":{"id":2264,"nodeType":"OverrideSpecifier","overrides":[],"src":"11445:8:7"},"parameters":{"id":2263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2262,"mutability":"mutable","name":"tokenId","nameLocation":"11416:7:7","nodeType":"VariableDeclaration","scope":2279,"src":"11408:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2261,"name":"uint256","nodeType":"ElementaryTypeName","src":"11408:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11407:17:7"},"returnParameters":{"id":2267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2266,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2279,"src":"11463:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2265,"name":"address","nodeType":"ElementaryTypeName","src":"11463:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11462:9:7"},"scope":3477,"src":"11391:150:7","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2294,"nodeType":"Block","src":"11817:71:7","statements":[{"expression":{"arguments":[{"arguments":[{"id":2290,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2282,"src":"11872:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2289,"name":"_packedOwnershipOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2387,"src":"11853:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":2291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11853:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2288,"name":"_unpackedOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"11834:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_TokenOwnership_$3528_memory_ptr_$","typeString":"function (uint256) pure returns (struct IERC721A.TokenOwnership memory)"}},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11834:47:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$3528_memory_ptr","typeString":"struct IERC721A.TokenOwnership memory"}},"functionReturnParameters":2287,"id":2293,"nodeType":"Return","src":"11827:54:7"}]},"documentation":{"id":2280,"nodeType":"StructuredDocumentation","src":"11547:172:7","text":" @dev Gas spent here starts off proportional to the maximum mint batch size.\n It gradually moves to O(1) as tokens get transferred around over time."},"id":2295,"implemented":true,"kind":"function","modifiers":[],"name":"_ownershipOf","nameLocation":"11733:12:7","nodeType":"FunctionDefinition","parameters":{"id":2283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2282,"mutability":"mutable","name":"tokenId","nameLocation":"11754:7:7","nodeType":"VariableDeclaration","scope":2295,"src":"11746:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2281,"name":"uint256","nodeType":"ElementaryTypeName","src":"11746:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11745:17:7"},"returnParameters":{"id":2287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2286,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2295,"src":"11794:21:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$3528_memory_ptr","typeString":"struct IERC721A.TokenOwnership"},"typeName":{"id":2285,"nodeType":"UserDefinedTypeName","pathNode":{"id":2284,"name":"TokenOwnership","nameLocations":["11794:14:7"],"nodeType":"IdentifierPath","referencedDeclaration":3528,"src":"11794:14:7"},"referencedDeclaration":3528,"src":"11794:14:7","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$3528_storage_ptr","typeString":"struct IERC721A.TokenOwnership"}},"visibility":"internal"}],"src":"11793:23:7"},"scope":3477,"src":"11724:164:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2310,"nodeType":"Block","src":"12070:68:7","statements":[{"expression":{"arguments":[{"baseExpression":{"id":2305,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"12106:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2307,"indexExpression":{"id":2306,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"12124:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12106:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2304,"name":"_unpackedOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"12087:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_TokenOwnership_$3528_memory_ptr_$","typeString":"function (uint256) pure returns (struct IERC721A.TokenOwnership memory)"}},"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12087:44:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$3528_memory_ptr","typeString":"struct IERC721A.TokenOwnership memory"}},"functionReturnParameters":2303,"id":2309,"nodeType":"Return","src":"12080:51:7"}]},"documentation":{"id":2296,"nodeType":"StructuredDocumentation","src":"11894:80:7","text":" @dev Returns the unpacked `TokenOwnership` struct at `index`."},"id":2311,"implemented":true,"kind":"function","modifiers":[],"name":"_ownershipAt","nameLocation":"11988:12:7","nodeType":"FunctionDefinition","parameters":{"id":2299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2298,"mutability":"mutable","name":"index","nameLocation":"12009:5:7","nodeType":"VariableDeclaration","scope":2311,"src":"12001:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2297,"name":"uint256","nodeType":"ElementaryTypeName","src":"12001:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12000:15:7"},"returnParameters":{"id":2303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2302,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2311,"src":"12047:21:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$3528_memory_ptr","typeString":"struct IERC721A.TokenOwnership"},"typeName":{"id":2301,"nodeType":"UserDefinedTypeName","pathNode":{"id":2300,"name":"TokenOwnership","nameLocations":["12047:14:7"],"nodeType":"IdentifierPath","referencedDeclaration":3528,"src":"12047:14:7"},"referencedDeclaration":3528,"src":"12047:14:7","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$3528_storage_ptr","typeString":"struct IERC721A.TokenOwnership"}},"visibility":"internal"}],"src":"12046:23:7"},"scope":3477,"src":"11979:159:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2332,"nodeType":"Block","src":"12310:128:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2317,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"12324:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2319,"indexExpression":{"id":2318,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"12342:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12324:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12352:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12324:29:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2331,"nodeType":"IfStatement","src":"12320:112:7","trueBody":{"id":2330,"nodeType":"Block","src":"12355:77:7","statements":[{"expression":{"id":2328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2322,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"12369:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2324,"indexExpression":{"id":2323,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"12387:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12369:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2326,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"12415:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2325,"name":"_packedOwnershipOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2387,"src":"12396:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12396:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12369:52:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2329,"nodeType":"ExpressionStatement","src":"12369:52:7"}]}}]},"documentation":{"id":2312,"nodeType":"StructuredDocumentation","src":"12144:97:7","text":" @dev Initializes the ownership slot minted at `index` for efficiency purposes."},"id":2333,"implemented":true,"kind":"function","modifiers":[],"name":"_initializeOwnershipAt","nameLocation":"12255:22:7","nodeType":"FunctionDefinition","parameters":{"id":2315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2314,"mutability":"mutable","name":"index","nameLocation":"12286:5:7","nodeType":"VariableDeclaration","scope":2333,"src":"12278:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2313,"name":"uint256","nodeType":"ElementaryTypeName","src":"12278:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12277:15:7"},"returnParameters":{"id":2316,"nodeType":"ParameterList","parameters":[],"src":"12310:0:7"},"scope":3477,"src":"12246:192:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2386,"nodeType":"Block","src":"12591:1173:7","statements":[{"assignments":[2342],"declarations":[{"constant":false,"id":2342,"mutability":"mutable","name":"curr","nameLocation":"12609:4:7","nodeType":"VariableDeclaration","scope":2386,"src":"12601:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2341,"name":"uint256","nodeType":"ElementaryTypeName","src":"12601:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2344,"initialValue":{"id":2343,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2336,"src":"12616:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12601:22:7"},{"id":2382,"nodeType":"UncheckedBlock","src":"12634:1076:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2345,"name":"_startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"12662:13:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12662:15:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2347,"name":"curr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2342,"src":"12681:4:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12662:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2381,"nodeType":"IfStatement","src":"12658:1042:7","trueBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2349,"name":"curr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2342,"src":"12707:4:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2350,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"12714:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12707:20:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2380,"nodeType":"IfStatement","src":"12703:997:7","trueBody":{"id":2379,"nodeType":"Block","src":"12729:971:7","statements":[{"assignments":[2353],"declarations":[{"constant":false,"id":2353,"mutability":"mutable","name":"packed","nameLocation":"12759:6:7","nodeType":"VariableDeclaration","scope":2379,"src":"12751:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2352,"name":"uint256","nodeType":"ElementaryTypeName","src":"12751:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2357,"initialValue":{"baseExpression":{"id":2354,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"12768:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2356,"indexExpression":{"id":2355,"name":"curr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2342,"src":"12786:4:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12768:23:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12751:40:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2358,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2353,"src":"12855:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2359,"name":"_BITMASK_BURNED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1911,"src":"12864:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12855:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12883:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12855:29:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2378,"nodeType":"IfStatement","src":"12851:831:7","trueBody":{"id":2377,"nodeType":"Block","src":"12886:796:7","statements":[{"body":{"id":2373,"nodeType":"Block","src":"13530:91:7","statements":[{"expression":{"id":2371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2366,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2353,"src":"13560:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2367,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"13569:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2370,"indexExpression":{"id":2369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"13587:6:7","subExpression":{"id":2368,"name":"curr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2342,"src":"13589:4:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13569:25:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13560:34:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2372,"nodeType":"ExpressionStatement","src":"13560:34:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2363,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2353,"src":"13517:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13527:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13517:11:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2374,"nodeType":"WhileStatement","src":"13510:111:7"},{"expression":{"id":2375,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2353,"src":"13653:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2340,"id":2376,"nodeType":"Return","src":"13646:13:7"}]}}]}}}]},{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2383,"name":"OwnerQueryForNonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3498,"src":"13726:29:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13726:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2385,"nodeType":"RevertStatement","src":"13719:38:7"}]},"documentation":{"id":2334,"nodeType":"StructuredDocumentation","src":"12444:66:7","text":" Returns the packed ownership data of `tokenId`."},"id":2387,"implemented":true,"kind":"function","modifiers":[],"name":"_packedOwnershipOf","nameLocation":"12524:18:7","nodeType":"FunctionDefinition","parameters":{"id":2337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2336,"mutability":"mutable","name":"tokenId","nameLocation":"12551:7:7","nodeType":"VariableDeclaration","scope":2387,"src":"12543:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2335,"name":"uint256","nodeType":"ElementaryTypeName","src":"12543:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12542:17:7"},"returnParameters":{"id":2340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2339,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2387,"src":"12582:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2338,"name":"uint256","nodeType":"ElementaryTypeName","src":"12582:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12581:9:7"},"scope":3477,"src":"12515:1249:7","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":2440,"nodeType":"Block","src":"13957:262:7","statements":[{"expression":{"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2396,"name":"ownership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"13967:9:7","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$3528_memory_ptr","typeString":"struct IERC721A.TokenOwnership memory"}},"id":2398,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"13977:4:7","memberName":"addr","nodeType":"MemberAccess","referencedDeclaration":3521,"src":"13967:14:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2403,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"14000:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2402,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13992:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2401,"name":"uint160","nodeType":"ElementaryTypeName","src":"13992:7:7","typeDescriptions":{}}},"id":2404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13992:15:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2400,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13984:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2399,"name":"address","nodeType":"ElementaryTypeName","src":"13984:7:7","typeDescriptions":{}}},"id":2405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13984:24:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13967:41:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2407,"nodeType":"ExpressionStatement","src":"13967:41:7"},{"expression":{"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2408,"name":"ownership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"14018:9:7","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$3528_memory_ptr","typeString":"struct IERC721A.TokenOwnership memory"}},"id":2410,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14028:14:7","memberName":"startTimestamp","nodeType":"MemberAccess","referencedDeclaration":3523,"src":"14018:24:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2413,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"14052:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":2414,"name":"_BITPOS_START_TIMESTAMP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"14062:23:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14052:33:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2412,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14045:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":2411,"name":"uint64","nodeType":"ElementaryTypeName","src":"14045:6:7","typeDescriptions":{}}},"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14045:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"14018:68:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":2418,"nodeType":"ExpressionStatement","src":"14018:68:7"},{"expression":{"id":2427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2419,"name":"ownership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"14096:9:7","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$3528_memory_ptr","typeString":"struct IERC721A.TokenOwnership memory"}},"id":2421,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14106:6:7","memberName":"burned","nodeType":"MemberAccess","referencedDeclaration":3525,"src":"14096:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2422,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"14115:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2423,"name":"_BITMASK_BURNED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1911,"src":"14124:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14115:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14143:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14115:29:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14096:48:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2428,"nodeType":"ExpressionStatement","src":"14096:48:7"},{"expression":{"id":2438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2429,"name":"ownership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"14154:9:7","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$3528_memory_ptr","typeString":"struct IERC721A.TokenOwnership memory"}},"id":2431,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14164:9:7","memberName":"extraData","nodeType":"MemberAccess","referencedDeclaration":3527,"src":"14154:19:7","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2434,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"14183:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":2435,"name":"_BITPOS_EXTRA_DATA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1922,"src":"14193:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14183:28:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2433,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14176:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":2432,"name":"uint24","nodeType":"ElementaryTypeName","src":"14176:6:7","typeDescriptions":{}}},"id":2437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14176:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"14154:58:7","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"id":2439,"nodeType":"ExpressionStatement","src":"14154:58:7"}]},"documentation":{"id":2388,"nodeType":"StructuredDocumentation","src":"13770:83:7","text":" @dev Returns the unpacked `TokenOwnership` struct from `packed`."},"id":2441,"implemented":true,"kind":"function","modifiers":[],"name":"_unpackedOwnership","nameLocation":"13867:18:7","nodeType":"FunctionDefinition","parameters":{"id":2391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2390,"mutability":"mutable","name":"packed","nameLocation":"13894:6:7","nodeType":"VariableDeclaration","scope":2441,"src":"13886:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2389,"name":"uint256","nodeType":"ElementaryTypeName","src":"13886:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13885:16:7"},"returnParameters":{"id":2395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2394,"mutability":"mutable","name":"ownership","nameLocation":"13946:9:7","nodeType":"VariableDeclaration","scope":2441,"src":"13924:31:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$3528_memory_ptr","typeString":"struct IERC721A.TokenOwnership"},"typeName":{"id":2393,"nodeType":"UserDefinedTypeName","pathNode":{"id":2392,"name":"TokenOwnership","nameLocations":["13924:14:7"],"nodeType":"IdentifierPath","referencedDeclaration":3528,"src":"13924:14:7"},"referencedDeclaration":3528,"src":"13924:14:7","typeDescriptions":{"typeIdentifier":"t_struct$_TokenOwnership_$3528_storage_ptr","typeString":"struct IERC721A.TokenOwnership"}},"visibility":"internal"}],"src":"13923:33:7"},"scope":3477,"src":"13858:361:7","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2452,"nodeType":"Block","src":"14393:347:7","statements":[{"AST":{"nodeType":"YulBlock","src":"14412:322:7","statements":[{"nodeType":"YulAssignment","src":"14522:37:7","value":{"arguments":[{"name":"owner","nodeType":"YulIdentifier","src":"14535:5:7"},{"name":"_BITMASK_ADDRESS","nodeType":"YulIdentifier","src":"14542:16:7"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14531:3:7"},"nodeType":"YulFunctionCall","src":"14531:28:7"},"variableNames":[{"name":"owner","nodeType":"YulIdentifier","src":"14522:5:7"}]},{"nodeType":"YulAssignment","src":"14651:73:7","value":{"arguments":[{"name":"owner","nodeType":"YulIdentifier","src":"14664:5:7"},{"arguments":[{"arguments":[{"name":"_BITPOS_START_TIMESTAMP","nodeType":"YulIdentifier","src":"14678:23:7"},{"arguments":[],"functionName":{"name":"timestamp","nodeType":"YulIdentifier","src":"14703:9:7"},"nodeType":"YulFunctionCall","src":"14703:11:7"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14674:3:7"},"nodeType":"YulFunctionCall","src":"14674:41:7"},{"name":"flags","nodeType":"YulIdentifier","src":"14717:5:7"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"14671:2:7"},"nodeType":"YulFunctionCall","src":"14671:52:7"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"14661:2:7"},"nodeType":"YulFunctionCall","src":"14661:63:7"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"14651:6:7"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1938,"isOffset":false,"isSlot":false,"src":"14542:16:7","valueSize":1},{"declaration":1906,"isOffset":false,"isSlot":false,"src":"14678:23:7","valueSize":1},{"declaration":2446,"isOffset":false,"isSlot":false,"src":"14717:5:7","valueSize":1},{"declaration":2444,"isOffset":false,"isSlot":false,"src":"14522:5:7","valueSize":1},{"declaration":2444,"isOffset":false,"isSlot":false,"src":"14535:5:7","valueSize":1},{"declaration":2444,"isOffset":false,"isSlot":false,"src":"14664:5:7","valueSize":1},{"declaration":2449,"isOffset":false,"isSlot":false,"src":"14651:6:7","valueSize":1}],"id":2451,"nodeType":"InlineAssembly","src":"14403:331:7"}]},"documentation":{"id":2442,"nodeType":"StructuredDocumentation","src":"14225:67:7","text":" @dev Packs ownership data into a single uint256."},"id":2453,"implemented":true,"kind":"function","modifiers":[],"name":"_packOwnershipData","nameLocation":"14306:18:7","nodeType":"FunctionDefinition","parameters":{"id":2447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2444,"mutability":"mutable","name":"owner","nameLocation":"14333:5:7","nodeType":"VariableDeclaration","scope":2453,"src":"14325:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2443,"name":"address","nodeType":"ElementaryTypeName","src":"14325:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2446,"mutability":"mutable","name":"flags","nameLocation":"14348:5:7","nodeType":"VariableDeclaration","scope":2453,"src":"14340:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2445,"name":"uint256","nodeType":"ElementaryTypeName","src":"14340:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14324:30:7"},"returnParameters":{"id":2450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2449,"mutability":"mutable","name":"result","nameLocation":"14385:6:7","nodeType":"VariableDeclaration","scope":2453,"src":"14377:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2448,"name":"uint256","nodeType":"ElementaryTypeName","src":"14377:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14376:16:7"},"scope":3477,"src":"14297:443:7","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":2462,"nodeType":"Block","src":"14923:232:7","statements":[{"AST":{"nodeType":"YulBlock","src":"15007:142:7","statements":[{"nodeType":"YulAssignment","src":"15083:56:7","value":{"arguments":[{"name":"_BITPOS_NEXT_INITIALIZED","nodeType":"YulIdentifier","src":"15097:24:7"},{"arguments":[{"name":"quantity","nodeType":"YulIdentifier","src":"15126:8:7"},{"kind":"number","nodeType":"YulLiteral","src":"15136:1:7","type":"","value":"1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15123:2:7"},"nodeType":"YulFunctionCall","src":"15123:15:7"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15093:3:7"},"nodeType":"YulFunctionCall","src":"15093:46:7"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"15083:6:7"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1914,"isOffset":false,"isSlot":false,"src":"15097:24:7","valueSize":1},{"declaration":2456,"isOffset":false,"isSlot":false,"src":"15126:8:7","valueSize":1},{"declaration":2459,"isOffset":false,"isSlot":false,"src":"15083:6:7","valueSize":1}],"id":2461,"nodeType":"InlineAssembly","src":"14998:151:7"}]},"documentation":{"id":2454,"nodeType":"StructuredDocumentation","src":"14746:86:7","text":" @dev Returns the `nextInitialized` flag set if `quantity` equals 1."},"id":2463,"implemented":true,"kind":"function","modifiers":[],"name":"_nextInitializedFlag","nameLocation":"14846:20:7","nodeType":"FunctionDefinition","parameters":{"id":2457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2456,"mutability":"mutable","name":"quantity","nameLocation":"14875:8:7","nodeType":"VariableDeclaration","scope":2463,"src":"14867:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2455,"name":"uint256","nodeType":"ElementaryTypeName","src":"14867:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14866:18:7"},"returnParameters":{"id":2460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2459,"mutability":"mutable","name":"result","nameLocation":"14915:6:7","nodeType":"VariableDeclaration","scope":2463,"src":"14907:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2458,"name":"uint256","nodeType":"ElementaryTypeName","src":"14907:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14906:16:7"},"scope":3477,"src":"14837:318:7","stateMutability":"pure","virtual":false,"visibility":"private"},{"baseFunctions":[3625],"body":{"id":2507,"nodeType":"Block","src":"15890:320:7","statements":[{"assignments":[2473],"declarations":[{"constant":false,"id":2473,"mutability":"mutable","name":"owner","nameLocation":"15908:5:7","nodeType":"VariableDeclaration","scope":2507,"src":"15900:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2472,"name":"address","nodeType":"ElementaryTypeName","src":"15900:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2477,"initialValue":{"arguments":[{"id":2475,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"15924:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2474,"name":"ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"15916:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15916:16:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"15900:32:7"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2478,"name":"_msgSenderERC721A","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3466,"src":"15947:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15947:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2480,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"15970:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15947:28:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2493,"nodeType":"IfStatement","src":"15943:172:7","trueBody":{"condition":{"id":2487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"15993:45:7","subExpression":{"arguments":[{"id":2483,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"16011:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2484,"name":"_msgSenderERC721A","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3466,"src":"16018:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16018:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2482,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"15994:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15994:44:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2492,"nodeType":"IfStatement","src":"15989:126:7","trueBody":{"id":2491,"nodeType":"Block","src":"16040:75:7","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2488,"name":"ApprovalCallerNotOwnerNorApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3483,"src":"16065:33:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16065:35:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2490,"nodeType":"RevertStatement","src":"16058:42:7"}]}}},{"expression":{"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":2494,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"16125:15:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_TokenApprovalRef_$1878_storage_$","typeString":"mapping(uint256 => struct ERC721A.TokenApprovalRef storage ref)"}},"id":2496,"indexExpression":{"id":2495,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"16141:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16125:24:7","typeDescriptions":{"typeIdentifier":"t_struct$_TokenApprovalRef_$1878_storage","typeString":"struct ERC721A.TokenApprovalRef storage ref"}},"id":2497,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"16150:5:7","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1877,"src":"16125:30:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2498,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2466,"src":"16158:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16125:35:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2500,"nodeType":"ExpressionStatement","src":"16125:35:7"},{"eventCall":{"arguments":[{"id":2502,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"16184:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2503,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2466,"src":"16191:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2504,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"16195:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2501,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3560,"src":"16175:8:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16175:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2506,"nodeType":"EmitStatement","src":"16170:33:7"}]},"documentation":{"id":2464,"nodeType":"StructuredDocumentation","src":"15348:459:7","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the\n zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2508,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"15821:7:7","nodeType":"FunctionDefinition","overrides":{"id":2470,"nodeType":"OverrideSpecifier","overrides":[],"src":"15881:8:7"},"parameters":{"id":2469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2466,"mutability":"mutable","name":"to","nameLocation":"15837:2:7","nodeType":"VariableDeclaration","scope":2508,"src":"15829:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2465,"name":"address","nodeType":"ElementaryTypeName","src":"15829:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2468,"mutability":"mutable","name":"tokenId","nameLocation":"15849:7:7","nodeType":"VariableDeclaration","scope":2508,"src":"15841:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2467,"name":"uint256","nodeType":"ElementaryTypeName","src":"15841:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15828:29:7"},"returnParameters":{"id":2471,"nodeType":"ParameterList","parameters":[],"src":"15890:0:7"},"scope":3477,"src":"15812:398:7","stateMutability":"payable","virtual":true,"visibility":"public"},{"baseFunctions":[3641],"body":{"id":2530,"nodeType":"Block","src":"16445:129:7","statements":[{"condition":{"id":2520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"16459:17:7","subExpression":{"arguments":[{"id":2518,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2511,"src":"16468:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2517,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2601,"src":"16460:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":2519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16460:16:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2524,"nodeType":"IfStatement","src":"16455:64:7","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2521,"name":"ApprovalQueryForNonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3486,"src":"16485:32:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16485:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2523,"nodeType":"RevertStatement","src":"16478:41:7"}},{"expression":{"expression":{"baseExpression":{"id":2525,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"16537:15:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_TokenApprovalRef_$1878_storage_$","typeString":"mapping(uint256 => struct ERC721A.TokenApprovalRef storage ref)"}},"id":2527,"indexExpression":{"id":2526,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2511,"src":"16553:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16537:24:7","typeDescriptions":{"typeIdentifier":"t_struct$_TokenApprovalRef_$1878_storage","typeString":"struct ERC721A.TokenApprovalRef storage ref"}},"id":2528,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16562:5:7","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1877,"src":"16537:30:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2516,"id":2529,"nodeType":"Return","src":"16530:37:7"}]},"documentation":{"id":2509,"nodeType":"StructuredDocumentation","src":"16216:139:7","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":2531,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"16369:11:7","nodeType":"FunctionDefinition","overrides":{"id":2513,"nodeType":"OverrideSpecifier","overrides":[],"src":"16418:8:7"},"parameters":{"id":2512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2511,"mutability":"mutable","name":"tokenId","nameLocation":"16389:7:7","nodeType":"VariableDeclaration","scope":2531,"src":"16381:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2510,"name":"uint256","nodeType":"ElementaryTypeName","src":"16381:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16380:17:7"},"returnParameters":{"id":2516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2515,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2531,"src":"16436:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2514,"name":"address","nodeType":"ElementaryTypeName","src":"16436:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16435:9:7"},"scope":3477,"src":"16360:214:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3633],"body":{"id":2556,"nodeType":"Block","src":"16985:147:7","statements":[{"expression":{"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2540,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"16995:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":2544,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2541,"name":"_msgSenderERC721A","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3466,"src":"17014:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17014:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16995:39:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2545,"indexExpression":{"id":2543,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2534,"src":"17035:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16995:49:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2546,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2536,"src":"17047:8:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16995:60:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2548,"nodeType":"ExpressionStatement","src":"16995:60:7"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2550,"name":"_msgSenderERC721A","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3466,"src":"17085:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17085:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2552,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2534,"src":"17106:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2553,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2536,"src":"17116:8:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2549,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3569,"src":"17070:14:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":2554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17070:55:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2555,"nodeType":"EmitStatement","src":"17065:60:7"}]},"documentation":{"id":2532,"nodeType":"StructuredDocumentation","src":"16580:316:7","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom}\n for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":2557,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"16910:17:7","nodeType":"FunctionDefinition","overrides":{"id":2538,"nodeType":"OverrideSpecifier","overrides":[],"src":"16976:8:7"},"parameters":{"id":2537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2534,"mutability":"mutable","name":"operator","nameLocation":"16936:8:7","nodeType":"VariableDeclaration","scope":2557,"src":"16928:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2533,"name":"address","nodeType":"ElementaryTypeName","src":"16928:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2536,"mutability":"mutable","name":"approved","nameLocation":"16951:8:7","nodeType":"VariableDeclaration","scope":2557,"src":"16946:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2535,"name":"bool","nodeType":"ElementaryTypeName","src":"16946:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16927:33:7"},"returnParameters":{"id":2539,"nodeType":"ParameterList","parameters":[],"src":"16985:0:7"},"scope":3477,"src":"16901:231:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[3651],"body":{"id":2574,"nodeType":"Block","src":"17385:59:7","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":2568,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"17402:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":2570,"indexExpression":{"id":2569,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2560,"src":"17421:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17402:25:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2572,"indexExpression":{"id":2571,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"17428:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17402:35:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2567,"id":2573,"nodeType":"Return","src":"17395:42:7"}]},"documentation":{"id":2558,"nodeType":"StructuredDocumentation","src":"17138:139:7","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}."},"functionSelector":"e985e9c5","id":2575,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"17291:16:7","nodeType":"FunctionDefinition","overrides":{"id":2564,"nodeType":"OverrideSpecifier","overrides":[],"src":"17361:8:7"},"parameters":{"id":2563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2560,"mutability":"mutable","name":"owner","nameLocation":"17316:5:7","nodeType":"VariableDeclaration","scope":2575,"src":"17308:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2559,"name":"address","nodeType":"ElementaryTypeName","src":"17308:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2562,"mutability":"mutable","name":"operator","nameLocation":"17331:8:7","nodeType":"VariableDeclaration","scope":2575,"src":"17323:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2561,"name":"address","nodeType":"ElementaryTypeName","src":"17323:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17307:33:7"},"returnParameters":{"id":2567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2566,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2575,"src":"17379:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2565,"name":"bool","nodeType":"ElementaryTypeName","src":"17379:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"17378:6:7"},"scope":3477,"src":"17282:162:7","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2600,"nodeType":"Block","src":"17764:206:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2583,"name":"_startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"17793:13:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17793:15:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2585,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"17812:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17793:26:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2587,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"17835:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2588,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"17845:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17835:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"17793:65:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2591,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"17895:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2593,"indexExpression":{"id":2592,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"17913:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17895:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2594,"name":"_BITMASK_BURNED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1911,"src":"17924:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17895:44:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17943:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17895:49:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"17793:151:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2582,"id":2599,"nodeType":"Return","src":"17774:170:7"}]},"documentation":{"id":2576,"nodeType":"StructuredDocumentation","src":"17450:238:7","text":" @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted. See {_mint}."},"id":2601,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"17702:7:7","nodeType":"FunctionDefinition","parameters":{"id":2579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2578,"mutability":"mutable","name":"tokenId","nameLocation":"17718:7:7","nodeType":"VariableDeclaration","scope":2601,"src":"17710:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2577,"name":"uint256","nodeType":"ElementaryTypeName","src":"17710:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17709:17:7"},"returnParameters":{"id":2582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2581,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2601,"src":"17758:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2580,"name":"bool","nodeType":"ElementaryTypeName","src":"17758:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"17757:6:7"},"scope":3477,"src":"17693:277:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2614,"nodeType":"Block","src":"18232:488:7","statements":[{"AST":{"nodeType":"YulBlock","src":"18251:463:7","statements":[{"nodeType":"YulAssignment","src":"18361:37:7","value":{"arguments":[{"name":"owner","nodeType":"YulIdentifier","src":"18374:5:7"},{"name":"_BITMASK_ADDRESS","nodeType":"YulIdentifier","src":"18381:16:7"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18370:3:7"},"nodeType":"YulFunctionCall","src":"18370:28:7"},"variableNames":[{"name":"owner","nodeType":"YulIdentifier","src":"18361:5:7"}]},{"nodeType":"YulAssignment","src":"18511:45:7","value":{"arguments":[{"name":"msgSender","nodeType":"YulIdentifier","src":"18528:9:7"},{"name":"_BITMASK_ADDRESS","nodeType":"YulIdentifier","src":"18539:16:7"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18524:3:7"},"nodeType":"YulFunctionCall","src":"18524:32:7"},"variableNames":[{"name":"msgSender","nodeType":"YulIdentifier","src":"18511:9:7"}]},{"nodeType":"YulAssignment","src":"18638:66:7","value":{"arguments":[{"arguments":[{"name":"msgSender","nodeType":"YulIdentifier","src":"18654:9:7"},{"name":"owner","nodeType":"YulIdentifier","src":"18665:5:7"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18651:2:7"},"nodeType":"YulFunctionCall","src":"18651:20:7"},{"arguments":[{"name":"msgSender","nodeType":"YulIdentifier","src":"18676:9:7"},{"name":"approvedAddress","nodeType":"YulIdentifier","src":"18687:15:7"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18673:2:7"},"nodeType":"YulFunctionCall","src":"18673:30:7"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"18648:2:7"},"nodeType":"YulFunctionCall","src":"18648:56:7"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"18638:6:7"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1938,"isOffset":false,"isSlot":false,"src":"18381:16:7","valueSize":1},{"declaration":1938,"isOffset":false,"isSlot":false,"src":"18539:16:7","valueSize":1},{"declaration":2604,"isOffset":false,"isSlot":false,"src":"18687:15:7","valueSize":1},{"declaration":2608,"isOffset":false,"isSlot":false,"src":"18511:9:7","valueSize":1},{"declaration":2608,"isOffset":false,"isSlot":false,"src":"18528:9:7","valueSize":1},{"declaration":2608,"isOffset":false,"isSlot":false,"src":"18654:9:7","valueSize":1},{"declaration":2608,"isOffset":false,"isSlot":false,"src":"18676:9:7","valueSize":1},{"declaration":2606,"isOffset":false,"isSlot":false,"src":"18361:5:7","valueSize":1},{"declaration":2606,"isOffset":false,"isSlot":false,"src":"18374:5:7","valueSize":1},{"declaration":2606,"isOffset":false,"isSlot":false,"src":"18665:5:7","valueSize":1},{"declaration":2611,"isOffset":false,"isSlot":false,"src":"18638:6:7","valueSize":1}],"id":2613,"nodeType":"InlineAssembly","src":"18242:472:7"}]},"documentation":{"id":2602,"nodeType":"StructuredDocumentation","src":"17976:93:7","text":" @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`."},"id":2615,"implemented":true,"kind":"function","modifiers":[],"name":"_isSenderApprovedOrOwner","nameLocation":"18083:24:7","nodeType":"FunctionDefinition","parameters":{"id":2609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2604,"mutability":"mutable","name":"approvedAddress","nameLocation":"18125:15:7","nodeType":"VariableDeclaration","scope":2615,"src":"18117:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2603,"name":"address","nodeType":"ElementaryTypeName","src":"18117:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2606,"mutability":"mutable","name":"owner","nameLocation":"18158:5:7","nodeType":"VariableDeclaration","scope":2615,"src":"18150:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2605,"name":"address","nodeType":"ElementaryTypeName","src":"18150:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2608,"mutability":"mutable","name":"msgSender","nameLocation":"18181:9:7","nodeType":"VariableDeclaration","scope":2615,"src":"18173:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2607,"name":"address","nodeType":"ElementaryTypeName","src":"18173:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"18107:89:7"},"returnParameters":{"id":2612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2611,"mutability":"mutable","name":"result","nameLocation":"18224:6:7","nodeType":"VariableDeclaration","scope":2615,"src":"18219:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2610,"name":"bool","nodeType":"ElementaryTypeName","src":"18219:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"18218:13:7"},"scope":3477,"src":"18074:646:7","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2633,"nodeType":"Block","src":"18985:317:7","statements":[{"assignments":[2627],"declarations":[{"constant":false,"id":2627,"mutability":"mutable","name":"tokenApproval","nameLocation":"19020:13:7","nodeType":"VariableDeclaration","scope":2633,"src":"18995:38:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_TokenApprovalRef_$1878_storage_ptr","typeString":"struct ERC721A.TokenApprovalRef"},"typeName":{"id":2626,"nodeType":"UserDefinedTypeName","pathNode":{"id":2625,"name":"TokenApprovalRef","nameLocations":["18995:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":1878,"src":"18995:16:7"},"referencedDeclaration":1878,"src":"18995:16:7","typeDescriptions":{"typeIdentifier":"t_struct$_TokenApprovalRef_$1878_storage_ptr","typeString":"struct ERC721A.TokenApprovalRef"}},"visibility":"internal"}],"id":2631,"initialValue":{"baseExpression":{"id":2628,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"19036:15:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_TokenApprovalRef_$1878_storage_$","typeString":"mapping(uint256 => struct ERC721A.TokenApprovalRef storage ref)"}},"id":2630,"indexExpression":{"id":2629,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2618,"src":"19052:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19036:24:7","typeDescriptions":{"typeIdentifier":"t_struct$_TokenApprovalRef_$1878_storage","typeString":"struct ERC721A.TokenApprovalRef storage ref"}},"nodeType":"VariableDeclarationStatement","src":"18995:65:7"},{"AST":{"nodeType":"YulBlock","src":"19173:123:7","statements":[{"nodeType":"YulAssignment","src":"19187:41:7","value":{"name":"tokenApproval.slot","nodeType":"YulIdentifier","src":"19210:18:7"},"variableNames":[{"name":"approvedAddressSlot","nodeType":"YulIdentifier","src":"19187:19:7"}]},{"nodeType":"YulAssignment","src":"19241:45:7","value":{"arguments":[{"name":"approvedAddressSlot","nodeType":"YulIdentifier","src":"19266:19:7"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"19260:5:7"},"nodeType":"YulFunctionCall","src":"19260:26:7"},"variableNames":[{"name":"approvedAddress","nodeType":"YulIdentifier","src":"19241:15:7"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2623,"isOffset":false,"isSlot":false,"src":"19241:15:7","valueSize":1},{"declaration":2621,"isOffset":false,"isSlot":false,"src":"19187:19:7","valueSize":1},{"declaration":2621,"isOffset":false,"isSlot":false,"src":"19266:19:7","valueSize":1},{"declaration":2627,"isOffset":false,"isSlot":true,"src":"19210:18:7","suffix":"slot","valueSize":1}],"id":2632,"nodeType":"InlineAssembly","src":"19164:132:7"}]},"documentation":{"id":2616,"nodeType":"StructuredDocumentation","src":"18726:97:7","text":" @dev Returns the storage slot and value for the approved address of `tokenId`."},"id":2634,"implemented":true,"kind":"function","modifiers":[],"name":"_getApprovedSlotAndAddress","nameLocation":"18837:26:7","nodeType":"FunctionDefinition","parameters":{"id":2619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2618,"mutability":"mutable","name":"tokenId","nameLocation":"18872:7:7","nodeType":"VariableDeclaration","scope":2634,"src":"18864:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2617,"name":"uint256","nodeType":"ElementaryTypeName","src":"18864:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18863:17:7"},"returnParameters":{"id":2624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2621,"mutability":"mutable","name":"approvedAddressSlot","nameLocation":"18935:19:7","nodeType":"VariableDeclaration","scope":2634,"src":"18927:27:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2620,"name":"uint256","nodeType":"ElementaryTypeName","src":"18927:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2623,"mutability":"mutable","name":"approvedAddress","nameLocation":"18964:15:7","nodeType":"VariableDeclaration","scope":2634,"src":"18956:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2622,"name":"address","nodeType":"ElementaryTypeName","src":"18956:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"18926:54:7"},"scope":3477,"src":"18828:474:7","stateMutability":"view","virtual":false,"visibility":"private"},{"baseFunctions":[3617],"body":{"id":2778,"nodeType":"Block","src":"20030:2637:7","statements":[{"assignments":[2646],"declarations":[{"constant":false,"id":2646,"mutability":"mutable","name":"prevOwnershipPacked","nameLocation":"20048:19:7","nodeType":"VariableDeclaration","scope":2778,"src":"20040:27:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2645,"name":"uint256","nodeType":"ElementaryTypeName","src":"20040:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2650,"initialValue":{"arguments":[{"id":2648,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"20089:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2647,"name":"_packedOwnershipOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2387,"src":"20070:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":2649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20070:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"20040:57:7"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":2655,"name":"prevOwnershipPacked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"20128:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2654,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20120:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2653,"name":"uint160","nodeType":"ElementaryTypeName","src":"20120:7:7","typeDescriptions":{}}},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20120:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2652,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20112:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2651,"name":"address","nodeType":"ElementaryTypeName","src":"20112:7:7","typeDescriptions":{}}},"id":2657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20112:37:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2658,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"20153:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"20112:45:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2663,"nodeType":"IfStatement","src":"20108:86:7","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2660,"name":"TransferFromIncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3504,"src":"20166:26:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20166:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2662,"nodeType":"RevertStatement","src":"20159:35:7"}},{"assignments":[2665,2667],"declarations":[{"constant":false,"id":2665,"mutability":"mutable","name":"approvedAddressSlot","nameLocation":"20214:19:7","nodeType":"VariableDeclaration","scope":2778,"src":"20206:27:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2664,"name":"uint256","nodeType":"ElementaryTypeName","src":"20206:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2667,"mutability":"mutable","name":"approvedAddress","nameLocation":"20243:15:7","nodeType":"VariableDeclaration","scope":2778,"src":"20235:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2666,"name":"address","nodeType":"ElementaryTypeName","src":"20235:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2671,"initialValue":{"arguments":[{"id":2669,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"20289:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2668,"name":"_getApprovedSlotAndAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2634,"src":"20262:26:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$_t_address_$","typeString":"function (uint256) view returns (uint256,address)"}},"id":2670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20262:35:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_address_$","typeString":"tuple(uint256,address)"}},"nodeType":"VariableDeclarationStatement","src":"20205:92:7"},{"condition":{"id":2678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"20393:69:7","subExpression":{"arguments":[{"id":2673,"name":"approvedAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"20419:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2674,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"20436:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2675,"name":"_msgSenderERC721A","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3466,"src":"20442:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20442:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2672,"name":"_isSenderApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2615,"src":"20394:24:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address,address) pure returns (bool)"}},"id":2677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20394:68:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2689,"nodeType":"IfStatement","src":"20389:179:7","trueBody":{"condition":{"id":2684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"20480:44:7","subExpression":{"arguments":[{"id":2680,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"20498:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2681,"name":"_msgSenderERC721A","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3466,"src":"20504:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20504:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2679,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"20481:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20481:43:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2688,"nodeType":"IfStatement","src":"20476:92:7","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2685,"name":"TransferCallerNotOwnerNorApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3501,"src":"20533:33:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20533:35:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2687,"nodeType":"RevertStatement","src":"20526:42:7"}}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2690,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"20583:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20597:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2692,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20589:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2691,"name":"address","nodeType":"ElementaryTypeName","src":"20589:7:7","typeDescriptions":{}}},"id":2694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20589:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"20583:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2699,"nodeType":"IfStatement","src":"20579:52:7","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2696,"name":"TransferToZeroAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"20608:21:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20608:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2698,"nodeType":"RevertStatement","src":"20601:30:7"}},{"expression":{"arguments":[{"id":2701,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"20664:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2702,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"20670:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2703,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"20674:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":2704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20683:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2700,"name":"_beforeTokenTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"20642:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":2705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20642:43:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2706,"nodeType":"ExpressionStatement","src":"20642:43:7"},{"AST":{"nodeType":"YulBlock","src":"20757:181:7","statements":[{"body":{"nodeType":"YulBlock","src":"20790:138:7","statements":[{"expression":{"arguments":[{"name":"approvedAddressSlot","nodeType":"YulIdentifier","src":"20891:19:7"},{"kind":"number","nodeType":"YulLiteral","src":"20912:1:7","type":"","value":"0"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"20884:6:7"},"nodeType":"YulFunctionCall","src":"20884:30:7"},"nodeType":"YulExpressionStatement","src":"20884:30:7"}]},"condition":{"name":"approvedAddress","nodeType":"YulIdentifier","src":"20774:15:7"},"nodeType":"YulIf","src":"20771:157:7"}]},"evmVersion":"paris","externalReferences":[{"declaration":2667,"isOffset":false,"isSlot":false,"src":"20774:15:7","valueSize":1},{"declaration":2665,"isOffset":false,"isSlot":false,"src":"20891:19:7","valueSize":1}],"id":2707,"nodeType":"InlineAssembly","src":"20748:190:7"},{"id":2764,"nodeType":"UncheckedBlock","src":"21205:1361:7","statements":[{"expression":{"id":2711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"21298:26:7","subExpression":{"baseExpression":{"id":2708,"name":"_packedAddressData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"21300:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2710,"indexExpression":{"id":2709,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"21319:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21300:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2712,"nodeType":"ExpressionStatement","src":"21298:26:7"},{"expression":{"id":2716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"21366:24:7","subExpression":{"baseExpression":{"id":2713,"name":"_packedAddressData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"21368:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2715,"indexExpression":{"id":2714,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"21387:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21368:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2717,"nodeType":"ExpressionStatement","src":"21366:24:7"},{"expression":{"id":2731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2718,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"21654:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2720,"indexExpression":{"id":2719,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"21672:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21654:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2722,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"21719:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2723,"name":"_BITMASK_NEXT_INITIALIZED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"21739:25:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"arguments":[{"id":2725,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"21782:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2726,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"21788:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2727,"name":"prevOwnershipPacked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"21792:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2724,"name":"_nextExtraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"21767:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,uint256) view returns (uint256)"}},"id":2728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21767:45:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21739:73:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2721,"name":"_packOwnershipData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"21683:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":2730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21683:143:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21654:172:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2732,"nodeType":"ExpressionStatement","src":"21654:172:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2733,"name":"prevOwnershipPacked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"21943:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2734,"name":"_BITMASK_NEXT_INITIALIZED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"21965:25:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21943:47:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21994:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"21943:52:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2763,"nodeType":"IfStatement","src":"21939:617:7","trueBody":{"id":2762,"nodeType":"Block","src":"21997:559:7","statements":[{"assignments":[2739],"declarations":[{"constant":false,"id":2739,"mutability":"mutable","name":"nextTokenId","nameLocation":"22023:11:7","nodeType":"VariableDeclaration","scope":2762,"src":"22015:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2738,"name":"uint256","nodeType":"ElementaryTypeName","src":"22015:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2743,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2740,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"22037:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22047:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22037:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22015:33:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2744,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"22168:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2746,"indexExpression":{"id":2745,"name":"nextTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"22186:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22168:30:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22202:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"22168:35:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2761,"nodeType":"IfStatement","src":"22164:378:7","trueBody":{"id":2760,"nodeType":"Block","src":"22205:337:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2749,"name":"nextTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"22289:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2750,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"22304:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22289:28:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2759,"nodeType":"IfStatement","src":"22285:239:7","trueBody":{"id":2758,"nodeType":"Block","src":"22319:205:7","statements":[{"expression":{"id":2756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2752,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"22449:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2754,"indexExpression":{"id":2753,"name":"nextTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"22467:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"22449:30:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2755,"name":"prevOwnershipPacked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"22482:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22449:52:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2757,"nodeType":"ExpressionStatement","src":"22449:52:7"}]}}]}}]}}]},{"eventCall":{"arguments":[{"id":2766,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"22590:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2767,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"22596:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2768,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"22600:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2765,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3551,"src":"22581:8:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22581:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2770,"nodeType":"EmitStatement","src":"22576:32:7"},{"expression":{"arguments":[{"id":2772,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"22639:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2773,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"22645:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2774,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"22649:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":2775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22658:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2771,"name":"_afterTokenTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2862,"src":"22618:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":2776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22618:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2777,"nodeType":"ExpressionStatement","src":"22618:42:7"}]},"documentation":{"id":2635,"nodeType":"StructuredDocumentation","src":"19495:403:7","text":" @dev Transfers `tokenId` from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token\n by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2779,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"19912:12:7","nodeType":"FunctionDefinition","overrides":{"id":2643,"nodeType":"OverrideSpecifier","overrides":[],"src":"20021:8:7"},"parameters":{"id":2642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2637,"mutability":"mutable","name":"from","nameLocation":"19942:4:7","nodeType":"VariableDeclaration","scope":2779,"src":"19934:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2636,"name":"address","nodeType":"ElementaryTypeName","src":"19934:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2639,"mutability":"mutable","name":"to","nameLocation":"19964:2:7","nodeType":"VariableDeclaration","scope":2779,"src":"19956:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2638,"name":"address","nodeType":"ElementaryTypeName","src":"19956:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2641,"mutability":"mutable","name":"tokenId","nameLocation":"19984:7:7","nodeType":"VariableDeclaration","scope":2779,"src":"19976:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2640,"name":"uint256","nodeType":"ElementaryTypeName","src":"19976:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19924:73:7"},"returnParameters":{"id":2644,"nodeType":"ParameterList","parameters":[],"src":"20030:0:7"},"scope":3477,"src":"19903:2764:7","stateMutability":"payable","virtual":true,"visibility":"public"},{"baseFunctions":[3607],"body":{"id":2797,"nodeType":"Block","src":"22889:56:7","statements":[{"expression":{"arguments":[{"id":2791,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"22916:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2792,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2784,"src":"22922:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2793,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2786,"src":"22926:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":2794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22935:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":2790,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[2798,2836],"referencedDeclaration":2836,"src":"22899:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":2795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22899:39:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2796,"nodeType":"ExpressionStatement","src":"22899:39:7"}]},"documentation":{"id":2780,"nodeType":"StructuredDocumentation","src":"22673:80:7","text":" @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`."},"functionSelector":"42842e0e","id":2798,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"22767:16:7","nodeType":"FunctionDefinition","overrides":{"id":2788,"nodeType":"OverrideSpecifier","overrides":[],"src":"22880:8:7"},"parameters":{"id":2787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2782,"mutability":"mutable","name":"from","nameLocation":"22801:4:7","nodeType":"VariableDeclaration","scope":2798,"src":"22793:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2781,"name":"address","nodeType":"ElementaryTypeName","src":"22793:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2784,"mutability":"mutable","name":"to","nameLocation":"22823:2:7","nodeType":"VariableDeclaration","scope":2798,"src":"22815:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2783,"name":"address","nodeType":"ElementaryTypeName","src":"22815:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2786,"mutability":"mutable","name":"tokenId","nameLocation":"22843:7:7","nodeType":"VariableDeclaration","scope":2798,"src":"22835:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2785,"name":"uint256","nodeType":"ElementaryTypeName","src":"22835:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22783:73:7"},"returnParameters":{"id":2789,"nodeType":"ParameterList","parameters":[],"src":"22889:0:7"},"scope":3477,"src":"22758:187:7","stateMutability":"payable","virtual":true,"visibility":"public"},{"baseFunctions":[3597],"body":{"id":2835,"nodeType":"Block","src":"23685:237:7","statements":[{"expression":{"arguments":[{"id":2812,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2801,"src":"23708:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2813,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2803,"src":"23714:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2814,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"23718:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2811,"name":"transferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"23695:12:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23695:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2816,"nodeType":"ExpressionStatement","src":"23695:31:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2817,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2803,"src":"23740:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23743:4:7","memberName":"code","nodeType":"MemberAccess","src":"23740:7:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23748:6:7","memberName":"length","nodeType":"MemberAccess","src":"23740:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23758:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"23740:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2834,"nodeType":"IfStatement","src":"23736:180:7","trueBody":{"condition":{"id":2828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"23777:57:7","subExpression":{"arguments":[{"id":2823,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2801,"src":"23809:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2824,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2803,"src":"23815:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2825,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2805,"src":"23819:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2826,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"23828:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2822,"name":"_checkContractOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2917,"src":"23778:30:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":2827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23778:56:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2833,"nodeType":"IfStatement","src":"23773:143:7","trueBody":{"id":2832,"nodeType":"Block","src":"23836:80:7","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2829,"name":"TransferToNonERC721ReceiverImplementer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3507,"src":"23861:38:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23861:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2831,"nodeType":"RevertStatement","src":"23854:47:7"}]}}}]},"documentation":{"id":2799,"nodeType":"StructuredDocumentation","src":"22951:570:7","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token\n by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement\n {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":2836,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"23535:16:7","nodeType":"FunctionDefinition","overrides":{"id":2809,"nodeType":"OverrideSpecifier","overrides":[],"src":"23676:8:7"},"parameters":{"id":2808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2801,"mutability":"mutable","name":"from","nameLocation":"23569:4:7","nodeType":"VariableDeclaration","scope":2836,"src":"23561:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2800,"name":"address","nodeType":"ElementaryTypeName","src":"23561:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2803,"mutability":"mutable","name":"to","nameLocation":"23591:2:7","nodeType":"VariableDeclaration","scope":2836,"src":"23583:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2802,"name":"address","nodeType":"ElementaryTypeName","src":"23583:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2805,"mutability":"mutable","name":"tokenId","nameLocation":"23611:7:7","nodeType":"VariableDeclaration","scope":2836,"src":"23603:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2804,"name":"uint256","nodeType":"ElementaryTypeName","src":"23603:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2807,"mutability":"mutable","name":"_data","nameLocation":"23641:5:7","nodeType":"VariableDeclaration","scope":2836,"src":"23628:18:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2806,"name":"bytes","nodeType":"ElementaryTypeName","src":"23628:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"23551:101:7"},"returnParameters":{"id":2810,"nodeType":"ParameterList","parameters":[],"src":"23685:0:7"},"scope":3477,"src":"23526:396:7","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":2848,"nodeType":"Block","src":"24718:2:7","statements":[]},"documentation":{"id":2837,"nodeType":"StructuredDocumentation","src":"23928:633:7","text":" @dev Hook that is called before a set of serially-ordered token IDs\n are about to be transferred. This includes minting.\n And also called before burning one token.\n `startTokenId` - the first token ID to be transferred.\n `quantity` - the amount to be transferred.\n Calling conditions:\n - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n transferred to `to`.\n - When `from` is zero, `tokenId` will be minted for `to`.\n - When `to` is zero, `tokenId` will be burned by `from`.\n - `from` and `to` are never both zero."},"id":2849,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfers","nameLocation":"24575:21:7","nodeType":"FunctionDefinition","parameters":{"id":2846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2839,"mutability":"mutable","name":"from","nameLocation":"24614:4:7","nodeType":"VariableDeclaration","scope":2849,"src":"24606:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2838,"name":"address","nodeType":"ElementaryTypeName","src":"24606:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2841,"mutability":"mutable","name":"to","nameLocation":"24636:2:7","nodeType":"VariableDeclaration","scope":2849,"src":"24628:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2840,"name":"address","nodeType":"ElementaryTypeName","src":"24628:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2843,"mutability":"mutable","name":"startTokenId","nameLocation":"24656:12:7","nodeType":"VariableDeclaration","scope":2849,"src":"24648:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2842,"name":"uint256","nodeType":"ElementaryTypeName","src":"24648:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2845,"mutability":"mutable","name":"quantity","nameLocation":"24686:8:7","nodeType":"VariableDeclaration","scope":2849,"src":"24678:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2844,"name":"uint256","nodeType":"ElementaryTypeName","src":"24678:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24596:104:7"},"returnParameters":{"id":2847,"nodeType":"ParameterList","parameters":[],"src":"24718:0:7"},"scope":3477,"src":"24566:154:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2861,"nodeType":"Block","src":"25518:2:7","statements":[]},"documentation":{"id":2850,"nodeType":"StructuredDocumentation","src":"24726:636:7","text":" @dev Hook that is called after a set of serially-ordered token IDs\n have been transferred. This includes minting.\n And also called after one token has been burned.\n `startTokenId` - the first token ID to be transferred.\n `quantity` - the amount to be transferred.\n Calling conditions:\n - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n transferred to `to`.\n - When `from` is zero, `tokenId` has been minted for `to`.\n - When `to` is zero, `tokenId` has been burned by `from`.\n - `from` and `to` are never both zero."},"id":2862,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfers","nameLocation":"25376:20:7","nodeType":"FunctionDefinition","parameters":{"id":2859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2852,"mutability":"mutable","name":"from","nameLocation":"25414:4:7","nodeType":"VariableDeclaration","scope":2862,"src":"25406:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2851,"name":"address","nodeType":"ElementaryTypeName","src":"25406:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2854,"mutability":"mutable","name":"to","nameLocation":"25436:2:7","nodeType":"VariableDeclaration","scope":2862,"src":"25428:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2853,"name":"address","nodeType":"ElementaryTypeName","src":"25428:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2856,"mutability":"mutable","name":"startTokenId","nameLocation":"25456:12:7","nodeType":"VariableDeclaration","scope":2862,"src":"25448:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2855,"name":"uint256","nodeType":"ElementaryTypeName","src":"25448:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2858,"mutability":"mutable","name":"quantity","nameLocation":"25486:8:7","nodeType":"VariableDeclaration","scope":2862,"src":"25478:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2857,"name":"uint256","nodeType":"ElementaryTypeName","src":"25478:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25396:104:7"},"returnParameters":{"id":2860,"nodeType":"ParameterList","parameters":[],"src":"25518:0:7"},"scope":3477,"src":"25367:153:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2916,"nodeType":"Block","src":"26112:533:7","statements":[{"clauses":[{"block":{"id":2897,"nodeType":"Block","src":"26261:96:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2889,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2887,"src":"26282:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"arguments":[{"id":2891,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2867,"src":"26317:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2890,"name":"ERC721A__IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1872,"src":"26292:24:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721A__IERC721Receiver_$1872_$","typeString":"type(contract ERC721A__IERC721Receiver)"}},"id":2892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26292:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ERC721A__IERC721Receiver_$1872","typeString":"contract ERC721A__IERC721Receiver"}},"id":2893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26321:16:7","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1871,"src":"26292:45:7","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":2894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26338:8:7","memberName":"selector","nodeType":"MemberAccess","src":"26292:54:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"26282:64:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2875,"id":2896,"nodeType":"Return","src":"26275:71:7"}]},"errorName":"","id":2898,"nodeType":"TryCatchClause","parameters":{"id":2888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2887,"mutability":"mutable","name":"retval","nameLocation":"26244:6:7","nodeType":"VariableDeclaration","scope":2898,"src":"26237:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2886,"name":"bytes4","nodeType":"ElementaryTypeName","src":"26237:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"26223:37:7"},"src":"26215:142:7"},{"block":{"id":2913,"nodeType":"Block","src":"26386:253:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2902,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"26404:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26411:6:7","memberName":"length","nodeType":"MemberAccess","src":"26404:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26421:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"26404:18:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2911,"nodeType":"Block","src":"26510:119:7","statements":[{"AST":{"nodeType":"YulBlock","src":"26537:78:7","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26570:2:7","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"26574:6:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26566:3:7"},"nodeType":"YulFunctionCall","src":"26566:15:7"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"26589:6:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"26583:5:7"},"nodeType":"YulFunctionCall","src":"26583:13:7"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"26559:6:7"},"nodeType":"YulFunctionCall","src":"26559:38:7"},"nodeType":"YulExpressionStatement","src":"26559:38:7"}]},"evmVersion":"paris","externalReferences":[{"declaration":2900,"isOffset":false,"isSlot":false,"src":"26574:6:7","valueSize":1},{"declaration":2900,"isOffset":false,"isSlot":false,"src":"26589:6:7","valueSize":1}],"id":2910,"nodeType":"InlineAssembly","src":"26528:87:7"}]},"id":2912,"nodeType":"IfStatement","src":"26400:229:7","trueBody":{"id":2909,"nodeType":"Block","src":"26424:80:7","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2906,"name":"TransferToNonERC721ReceiverImplementer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3507,"src":"26449:38:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26449:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2908,"nodeType":"RevertStatement","src":"26442:47:7"}]}}]},"errorName":"","id":2914,"nodeType":"TryCatchClause","parameters":{"id":2901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2900,"mutability":"mutable","name":"reason","nameLocation":"26378:6:7","nodeType":"VariableDeclaration","scope":2914,"src":"26365:19:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2899,"name":"bytes","nodeType":"ElementaryTypeName","src":"26365:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"26364:21:7"},"src":"26358:281:7"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2880,"name":"_msgSenderERC721A","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3466,"src":"26172:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26172:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2882,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2865,"src":"26193:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2883,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2869,"src":"26199:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2884,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"26208:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":2877,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2867,"src":"26151:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2876,"name":"ERC721A__IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1872,"src":"26126:24:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721A__IERC721Receiver_$1872_$","typeString":"type(contract ERC721A__IERC721Receiver)"}},"id":2878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26126:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ERC721A__IERC721Receiver_$1872","typeString":"contract ERC721A__IERC721Receiver"}},"id":2879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26155:16:7","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1871,"src":"26126:45:7","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":2885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26126:88:7","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":2915,"nodeType":"TryStatement","src":"26122:517:7"}]},"documentation":{"id":2863,"nodeType":"StructuredDocumentation","src":"25526:417:7","text":" @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n `from` - Previous owner of the given token ID.\n `to` - Target address that will receive the token.\n `tokenId` - Token ID to be transferred.\n `_data` - Optional data to send along with the call.\n Returns whether the call correctly returned the expected magic value."},"id":2917,"implemented":true,"kind":"function","modifiers":[],"name":"_checkContractOnERC721Received","nameLocation":"25957:30:7","nodeType":"FunctionDefinition","parameters":{"id":2872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2865,"mutability":"mutable","name":"from","nameLocation":"26005:4:7","nodeType":"VariableDeclaration","scope":2917,"src":"25997:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2864,"name":"address","nodeType":"ElementaryTypeName","src":"25997:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2867,"mutability":"mutable","name":"to","nameLocation":"26027:2:7","nodeType":"VariableDeclaration","scope":2917,"src":"26019:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2866,"name":"address","nodeType":"ElementaryTypeName","src":"26019:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2869,"mutability":"mutable","name":"tokenId","nameLocation":"26047:7:7","nodeType":"VariableDeclaration","scope":2917,"src":"26039:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2868,"name":"uint256","nodeType":"ElementaryTypeName","src":"26039:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2871,"mutability":"mutable","name":"_data","nameLocation":"26077:5:7","nodeType":"VariableDeclaration","scope":2917,"src":"26064:18:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2870,"name":"bytes","nodeType":"ElementaryTypeName","src":"26064:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"25987:101:7"},"returnParameters":{"id":2875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2874,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2917,"src":"26106:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2873,"name":"bool","nodeType":"ElementaryTypeName","src":"26106:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"26105:6:7"},"scope":3477,"src":"25948:697:7","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3012,"nodeType":"Block","src":"27153:2840:7","statements":[{"assignments":[2926],"declarations":[{"constant":false,"id":2926,"mutability":"mutable","name":"startTokenId","nameLocation":"27171:12:7","nodeType":"VariableDeclaration","scope":3012,"src":"27163:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2925,"name":"uint256","nodeType":"ElementaryTypeName","src":"27163:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2928,"initialValue":{"id":2927,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"27186:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"27163:36:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2929,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"27213:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27225:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"27213:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2935,"nodeType":"IfStatement","src":"27209:44:7","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2932,"name":"MintZeroQuantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3495,"src":"27235:16:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27235:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2934,"nodeType":"RevertStatement","src":"27228:25:7"}},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27294:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2938,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27286:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2937,"name":"address","nodeType":"ElementaryTypeName","src":"27286:7:7","typeDescriptions":{}}},"id":2940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27286:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2941,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"27298:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2942,"name":"startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2926,"src":"27302:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2943,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"27316:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2936,"name":"_beforeTokenTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"27264:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":2944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27264:61:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2945,"nodeType":"ExpressionStatement","src":"27264:61:7"},{"id":3001,"nodeType":"UncheckedBlock","src":"27508:2409:7","statements":[{"expression":{"id":2958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2946,"name":"_packedAddressData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"27728:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2948,"indexExpression":{"id":2947,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"27747:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"27728:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2949,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"27754:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2955,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2952,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27767:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2951,"name":"_BITPOS_NUMBER_MINTED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"27772:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27767:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2953,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"27766:28:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"31","id":2954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27797:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"27766:32:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2956,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"27765:34:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27754:45:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27728:71:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2959,"nodeType":"ExpressionStatement","src":"27728:71:7"},{"expression":{"id":2978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2960,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"28035:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2962,"indexExpression":{"id":2961,"name":"startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2926,"src":"28053:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"28035:31:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2964,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"28105:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2966,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"28146:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2965,"name":"_nextInitializedFlag","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"28125:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28125:30:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"arguments":[{"arguments":[{"hexValue":"30","id":2971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28181:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28173:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2969,"name":"address","nodeType":"ElementaryTypeName","src":"28173:7:7","typeDescriptions":{}}},"id":2972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28173:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2973,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"28185:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":2974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28189:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2968,"name":"_nextExtraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"28158:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,uint256) view returns (uint256)"}},"id":2975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28158:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28125:66:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2963,"name":"_packOwnershipData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"28069:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":2977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28069:136:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28035:170:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2979,"nodeType":"ExpressionStatement","src":"28035:170:7"},{"assignments":[2981],"declarations":[{"constant":false,"id":2981,"mutability":"mutable","name":"toMasked","nameLocation":"28228:8:7","nodeType":"VariableDeclaration","scope":3001,"src":"28220:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2980,"name":"uint256","nodeType":"ElementaryTypeName","src":"28220:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2982,"nodeType":"VariableDeclarationStatement","src":"28220:16:7"},{"assignments":[2984],"declarations":[{"constant":false,"id":2984,"mutability":"mutable","name":"end","nameLocation":"28258:3:7","nodeType":"VariableDeclaration","scope":3001,"src":"28250:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2983,"name":"uint256","nodeType":"ElementaryTypeName","src":"28250:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2988,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2985,"name":"startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2926,"src":"28264:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2986,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"28279:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28264:23:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"28250:37:7"},{"AST":{"nodeType":"YulBlock","src":"28657:1157:7","statements":[{"nodeType":"YulAssignment","src":"28772:37:7","value":{"arguments":[{"name":"to","nodeType":"YulIdentifier","src":"28788:2:7"},{"name":"_BITMASK_ADDRESS","nodeType":"YulIdentifier","src":"28792:16:7"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28784:3:7"},"nodeType":"YulFunctionCall","src":"28784:25:7"},"variableNames":[{"name":"toMasked","nodeType":"YulIdentifier","src":"28772:8:7"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28898:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28958:1:7","type":"","value":"0"},{"name":"_TRANSFER_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"29016:25:7"},{"kind":"number","nodeType":"YulLiteral","src":"29077:1:7","type":"","value":"0"},{"name":"toMasked","nodeType":"YulIdentifier","src":"29117:8:7"},{"name":"startTokenId","nodeType":"YulIdentifier","src":"29156:12:7"}],"functionName":{"name":"log4","nodeType":"YulIdentifier","src":"28872:4:7"},"nodeType":"YulFunctionCall","src":"28872:328:7"},"nodeType":"YulExpressionStatement","src":"28872:328:7"},{"body":{"nodeType":"YulBlock","src":"29633:167:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29728:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"29731:1:7","type":"","value":"0"},{"name":"_TRANSFER_EVENT_SIGNATURE","nodeType":"YulIdentifier","src":"29734:25:7"},{"kind":"number","nodeType":"YulLiteral","src":"29761:1:7","type":"","value":"0"},{"name":"toMasked","nodeType":"YulIdentifier","src":"29764:8:7"},{"name":"tokenId","nodeType":"YulIdentifier","src":"29774:7:7"}],"functionName":{"name":"log4","nodeType":"YulIdentifier","src":"29723:4:7"},"nodeType":"YulFunctionCall","src":"29723:59:7"},"nodeType":"YulExpressionStatement","src":"29723:59:7"}]},"condition":{"arguments":[{"arguments":[{"name":"tokenId","nodeType":"YulIdentifier","src":"29551:7:7"},{"name":"end","nodeType":"YulIdentifier","src":"29560:3:7"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"29548:2:7"},"nodeType":"YulFunctionCall","src":"29548:16:7"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"29541:6:7"},"nodeType":"YulFunctionCall","src":"29541:24:7"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"29566:66:7","statements":[{"nodeType":"YulAssignment","src":"29588:26:7","value":{"arguments":[{"name":"tokenId","nodeType":"YulIdentifier","src":"29603:7:7"},{"kind":"number","nodeType":"YulLiteral","src":"29612:1:7","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29599:3:7"},"nodeType":"YulFunctionCall","src":"29599:15:7"},"variableNames":[{"name":"tokenId","nodeType":"YulIdentifier","src":"29588:7:7"}]}]},"pre":{"nodeType":"YulBlock","src":"29465:75:7","statements":[{"nodeType":"YulVariableDeclaration","src":"29487:35:7","value":{"arguments":[{"name":"startTokenId","nodeType":"YulIdentifier","src":"29506:12:7"},{"kind":"number","nodeType":"YulLiteral","src":"29520:1:7","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29502:3:7"},"nodeType":"YulFunctionCall","src":"29502:20:7"},"variables":[{"name":"tokenId","nodeType":"YulTypedName","src":"29491:7:7","type":""}]}]},"src":"29461:339:7"}]},"evmVersion":"paris","externalReferences":[{"declaration":1938,"isOffset":false,"isSlot":false,"src":"28792:16:7","valueSize":1},{"declaration":1944,"isOffset":false,"isSlot":false,"src":"29016:25:7","valueSize":1},{"declaration":1944,"isOffset":false,"isSlot":false,"src":"29734:25:7","valueSize":1},{"declaration":2984,"isOffset":false,"isSlot":false,"src":"29560:3:7","valueSize":1},{"declaration":2926,"isOffset":false,"isSlot":false,"src":"29156:12:7","valueSize":1},{"declaration":2926,"isOffset":false,"isSlot":false,"src":"29506:12:7","valueSize":1},{"declaration":2920,"isOffset":false,"isSlot":false,"src":"28788:2:7","valueSize":1},{"declaration":2981,"isOffset":false,"isSlot":false,"src":"28772:8:7","valueSize":1},{"declaration":2981,"isOffset":false,"isSlot":false,"src":"29117:8:7","valueSize":1},{"declaration":2981,"isOffset":false,"isSlot":false,"src":"29764:8:7","valueSize":1}],"id":2989,"nodeType":"InlineAssembly","src":"28648:1166:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2990,"name":"toMasked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"29831:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29843:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"29831:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2996,"nodeType":"IfStatement","src":"29827:45:7","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2993,"name":"MintToZeroAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3492,"src":"29853:17:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29853:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2995,"nodeType":"RevertStatement","src":"29846:26:7"}},{"expression":{"id":2999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2997,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"29887:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2998,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"29903:3:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29887:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3000,"nodeType":"ExpressionStatement","src":"29887:19:7"}]},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29955:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3004,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29947:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3003,"name":"address","nodeType":"ElementaryTypeName","src":"29947:7:7","typeDescriptions":{}}},"id":3006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29947:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3007,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"29959:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3008,"name":"startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2926,"src":"29963:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3009,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"29977:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3002,"name":"_afterTokenTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2862,"src":"29926:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":3010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29926:60:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3011,"nodeType":"ExpressionStatement","src":"29926:60:7"}]},"documentation":{"id":2918,"nodeType":"StructuredDocumentation","src":"26836:250:7","text":" @dev Mints `quantity` tokens and transfers them to `to`.\n Requirements:\n - `to` cannot be the zero address.\n - `quantity` must be greater than 0.\n Emits a {Transfer} event for each mint."},"id":3013,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"27100:5:7","nodeType":"FunctionDefinition","parameters":{"id":2923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2920,"mutability":"mutable","name":"to","nameLocation":"27114:2:7","nodeType":"VariableDeclaration","scope":3013,"src":"27106:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2919,"name":"address","nodeType":"ElementaryTypeName","src":"27106:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2922,"mutability":"mutable","name":"quantity","nameLocation":"27126:8:7","nodeType":"VariableDeclaration","scope":3013,"src":"27118:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2921,"name":"uint256","nodeType":"ElementaryTypeName","src":"27118:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27105:30:7"},"returnParameters":{"id":2924,"nodeType":"ParameterList","parameters":[],"src":"27153:0:7"},"scope":3477,"src":"27091:2902:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3124,"nodeType":"Block","src":"30902:1374:7","statements":[{"assignments":[3022],"declarations":[{"constant":false,"id":3022,"mutability":"mutable","name":"startTokenId","nameLocation":"30920:12:7","nodeType":"VariableDeclaration","scope":3124,"src":"30912:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3021,"name":"uint256","nodeType":"ElementaryTypeName","src":"30912:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3024,"initialValue":{"id":3023,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"30935:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"30912:36:7"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3025,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"30962:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30976:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3027,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30968:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3026,"name":"address","nodeType":"ElementaryTypeName","src":"30968:7:7","typeDescriptions":{}}},"id":3029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30968:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"30962:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3034,"nodeType":"IfStatement","src":"30958:48:7","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3031,"name":"MintToZeroAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3492,"src":"30987:17:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30987:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3033,"nodeType":"RevertStatement","src":"30980:26:7"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3035,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"31020:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31032:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"31020:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3041,"nodeType":"IfStatement","src":"31016:44:7","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3038,"name":"MintZeroQuantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3495,"src":"31042:16:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31042:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3040,"nodeType":"RevertStatement","src":"31035:25:7"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3042,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"31074:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3043,"name":"_MAX_MINT_ERC2309_QUANTITY_LIMIT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"31085:32:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31074:43:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3048,"nodeType":"IfStatement","src":"31070:89:7","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3045,"name":"MintERC2309QuantityExceedsLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"31126:31:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31126:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3047,"nodeType":"RevertStatement","src":"31119:40:7"}},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31200:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3051,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31192:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3050,"name":"address","nodeType":"ElementaryTypeName","src":"31192:7:7","typeDescriptions":{}}},"id":3053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31192:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3054,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"31204:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3055,"name":"startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3022,"src":"31208:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3056,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"31222:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3049,"name":"_beforeTokenTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"31170:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":3057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31170:61:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3058,"nodeType":"ExpressionStatement","src":"31170:61:7"},{"id":3113,"nodeType":"UncheckedBlock","src":"31340:860:7","statements":[{"expression":{"id":3071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3059,"name":"_packedAddressData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"31560:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3061,"indexExpression":{"id":3060,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"31579:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"31560:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3062,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"31586:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3068,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3065,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31599:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3064,"name":"_BITPOS_NUMBER_MINTED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"31604:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31599:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3066,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"31598:28:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"31","id":3067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31629:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"31598:32:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3069,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"31597:34:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31586:45:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31560:71:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3072,"nodeType":"ExpressionStatement","src":"31560:71:7"},{"expression":{"id":3091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3073,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"31867:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3075,"indexExpression":{"id":3074,"name":"startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3022,"src":"31885:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"31867:31:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3077,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"31937:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3079,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"31978:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3078,"name":"_nextInitializedFlag","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"31957:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3080,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31957:30:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"arguments":[{"arguments":[{"hexValue":"30","id":3084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32013:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3083,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32005:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3082,"name":"address","nodeType":"ElementaryTypeName","src":"32005:7:7","typeDescriptions":{}}},"id":3085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32005:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3086,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"32017:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":3087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32021:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3081,"name":"_nextExtraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"31990:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,uint256) view returns (uint256)"}},"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31990:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31957:66:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3076,"name":"_packOwnershipData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"31901:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":3090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31901:136:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31867:170:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3092,"nodeType":"ExpressionStatement","src":"31867:170:7"},{"eventCall":{"arguments":[{"id":3094,"name":"startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3022,"src":"32077:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3095,"name":"startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3022,"src":"32091:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3096,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"32106:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"32091:23:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32117:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"32091:27:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":3102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32128:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3101,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32120:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3100,"name":"address","nodeType":"ElementaryTypeName","src":"32120:7:7","typeDescriptions":{}}},"id":3103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32120:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3104,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"32132:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3093,"name":"ConsecutiveTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3682,"src":"32057:19:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_address_$_t_address_$returns$__$","typeString":"function (uint256,uint256,address,address)"}},"id":3105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32057:78:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3106,"nodeType":"EmitStatement","src":"32052:83:7"},{"expression":{"id":3111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3107,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"32150:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3108,"name":"startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3022,"src":"32166:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3109,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"32181:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"32166:23:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"32150:39:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3112,"nodeType":"ExpressionStatement","src":"32150:39:7"}]},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32238:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3116,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32230:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3115,"name":"address","nodeType":"ElementaryTypeName","src":"32230:7:7","typeDescriptions":{}}},"id":3118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32230:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3119,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"32242:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3120,"name":"startTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3022,"src":"32246:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3121,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"32260:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3114,"name":"_afterTokenTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2862,"src":"32209:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":3122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32209:60:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3123,"nodeType":"ExpressionStatement","src":"32209:60:7"}]},"documentation":{"id":3014,"nodeType":"StructuredDocumentation","src":"29999:829:7","text":" @dev Mints `quantity` tokens and transfers them to `to`.\n This function is intended for efficient minting only during contract creation.\n It emits only one {ConsecutiveTransfer} as defined in\n [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n instead of a sequence of {Transfer} event(s).\n Calling this function outside of contract creation WILL make your contract\n non-compliant with the ERC721 standard.\n For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n {ConsecutiveTransfer} event is only permissible during contract creation.\n Requirements:\n - `to` cannot be the zero address.\n - `quantity` must be greater than 0.\n Emits a {ConsecutiveTransfer} event."},"id":3125,"implemented":true,"kind":"function","modifiers":[],"name":"_mintERC2309","nameLocation":"30842:12:7","nodeType":"FunctionDefinition","parameters":{"id":3019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3016,"mutability":"mutable","name":"to","nameLocation":"30863:2:7","nodeType":"VariableDeclaration","scope":3125,"src":"30855:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3015,"name":"address","nodeType":"ElementaryTypeName","src":"30855:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3018,"mutability":"mutable","name":"quantity","nameLocation":"30875:8:7","nodeType":"VariableDeclaration","scope":3125,"src":"30867:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3017,"name":"uint256","nodeType":"ElementaryTypeName","src":"30867:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30854:30:7"},"returnParameters":{"id":3020,"nodeType":"ParameterList","parameters":[],"src":"30902:0:7"},"scope":3477,"src":"30833:1443:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3186,"nodeType":"Block","src":"32791:553:7","statements":[{"expression":{"arguments":[{"id":3136,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3128,"src":"32807:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3137,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"32811:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3135,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"32801:5:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32801:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3139,"nodeType":"ExpressionStatement","src":"32801:19:7"},{"id":3185,"nodeType":"UncheckedBlock","src":"32831:507:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3140,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3128,"src":"32859:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"32862:4:7","memberName":"code","nodeType":"MemberAccess","src":"32859:7:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"32867:6:7","memberName":"length","nodeType":"MemberAccess","src":"32859:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32877:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"32859:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3184,"nodeType":"IfStatement","src":"32855:473:7","trueBody":{"id":3183,"nodeType":"Block","src":"32880:448:7","statements":[{"assignments":[3146],"declarations":[{"constant":false,"id":3146,"mutability":"mutable","name":"end","nameLocation":"32906:3:7","nodeType":"VariableDeclaration","scope":3183,"src":"32898:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3145,"name":"uint256","nodeType":"ElementaryTypeName","src":"32898:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3148,"initialValue":{"id":3147,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"32912:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"32898:27:7"},{"assignments":[3150],"declarations":[{"constant":false,"id":3150,"mutability":"mutable","name":"index","nameLocation":"32951:5:7","nodeType":"VariableDeclaration","scope":3183,"src":"32943:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3149,"name":"uint256","nodeType":"ElementaryTypeName","src":"32943:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3154,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3151,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"32959:3:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3152,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"32965:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"32959:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"32943:30:7"},{"body":{"id":3171,"nodeType":"Block","src":"32994:205:7","statements":[{"condition":{"id":3165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"33020:63:7","subExpression":{"arguments":[{"arguments":[{"hexValue":"30","id":3158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33060:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3157,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33052:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3156,"name":"address","nodeType":"ElementaryTypeName","src":"33052:7:7","typeDescriptions":{}}},"id":3159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33052:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3160,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3128,"src":"33064:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"33068:7:7","subExpression":{"id":3161,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"33068:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3163,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"33077:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3155,"name":"_checkContractOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2917,"src":"33021:30:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33021:62:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3170,"nodeType":"IfStatement","src":"33016:165:7","trueBody":{"id":3169,"nodeType":"Block","src":"33085:96:7","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3166,"name":"TransferToNonERC721ReceiverImplementer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3507,"src":"33118:38:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33118:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3168,"nodeType":"RevertStatement","src":"33111:47:7"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3172,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"33207:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3173,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"33215:3:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"33207:11:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3175,"nodeType":"DoWhileStatement","src":"32991:229:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3176,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"33283:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3177,"name":"end","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"33300:3:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"33283:20:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3182,"nodeType":"IfStatement","src":"33279:34:7","trueBody":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3179,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"33305:6:7","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$__$returns$__$","typeString":"function () pure"}},"id":3180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33305:8:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3181,"nodeType":"ExpressionStatement","src":"33305:8:7"}}]}}]}]},"documentation":{"id":3126,"nodeType":"StructuredDocumentation","src":"32282:388:7","text":" @dev Safely mints `quantity` tokens and transfers them to `to`.\n Requirements:\n - If `to` refers to a smart contract, it must implement\n {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n - `quantity` must be greater than 0.\n See {_mint}.\n Emits a {Transfer} event for each mint."},"id":3187,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"32684:9:7","nodeType":"FunctionDefinition","parameters":{"id":3133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3128,"mutability":"mutable","name":"to","nameLocation":"32711:2:7","nodeType":"VariableDeclaration","scope":3187,"src":"32703:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3127,"name":"address","nodeType":"ElementaryTypeName","src":"32703:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3130,"mutability":"mutable","name":"quantity","nameLocation":"32731:8:7","nodeType":"VariableDeclaration","scope":3187,"src":"32723:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3129,"name":"uint256","nodeType":"ElementaryTypeName","src":"32723:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3132,"mutability":"mutable","name":"_data","nameLocation":"32762:5:7","nodeType":"VariableDeclaration","scope":3187,"src":"32749:18:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3131,"name":"bytes","nodeType":"ElementaryTypeName","src":"32749:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"32693:80:7"},"returnParameters":{"id":3134,"nodeType":"ParameterList","parameters":[],"src":"32791:0:7"},"scope":3477,"src":"32675:669:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3201,"nodeType":"Block","src":"33489:44:7","statements":[{"expression":{"arguments":[{"id":3196,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3190,"src":"33509:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3197,"name":"quantity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3192,"src":"33513:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":3198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"33523:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":3195,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[3187,3202],"referencedDeclaration":3187,"src":"33499:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":3199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33499:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3200,"nodeType":"ExpressionStatement","src":"33499:27:7"}]},"documentation":{"id":3188,"nodeType":"StructuredDocumentation","src":"33350:68:7","text":" @dev Equivalent to `_safeMint(to, quantity, '')`."},"id":3202,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"33432:9:7","nodeType":"FunctionDefinition","parameters":{"id":3193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3190,"mutability":"mutable","name":"to","nameLocation":"33450:2:7","nodeType":"VariableDeclaration","scope":3202,"src":"33442:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3189,"name":"address","nodeType":"ElementaryTypeName","src":"33442:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3192,"mutability":"mutable","name":"quantity","nameLocation":"33462:8:7","nodeType":"VariableDeclaration","scope":3202,"src":"33454:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3191,"name":"uint256","nodeType":"ElementaryTypeName","src":"33454:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"33441:30:7"},"returnParameters":{"id":3194,"nodeType":"ParameterList","parameters":[],"src":"33489:0:7"},"scope":3477,"src":"33423:110:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3213,"nodeType":"Block","src":"33840:38:7","statements":[{"expression":{"arguments":[{"id":3209,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3205,"src":"33856:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":3210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"33865:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3208,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[3214,3366],"referencedDeclaration":3366,"src":"33850:5:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_bool_$returns$__$","typeString":"function (uint256,bool)"}},"id":3211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33850:21:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3212,"nodeType":"ExpressionStatement","src":"33850:21:7"}]},"documentation":{"id":3203,"nodeType":"StructuredDocumentation","src":"33724:62:7","text":" @dev Equivalent to `_burn(tokenId, false)`."},"id":3214,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"33800:5:7","nodeType":"FunctionDefinition","parameters":{"id":3206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3205,"mutability":"mutable","name":"tokenId","nameLocation":"33814:7:7","nodeType":"VariableDeclaration","scope":3214,"src":"33806:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3204,"name":"uint256","nodeType":"ElementaryTypeName","src":"33806:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"33805:17:7"},"returnParameters":{"id":3207,"nodeType":"ParameterList","parameters":[],"src":"33840:0:7"},"scope":3477,"src":"33791:87:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3365,"nodeType":"Block","src":"34164:2946:7","statements":[{"assignments":[3223],"declarations":[{"constant":false,"id":3223,"mutability":"mutable","name":"prevOwnershipPacked","nameLocation":"34182:19:7","nodeType":"VariableDeclaration","scope":3365,"src":"34174:27:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3222,"name":"uint256","nodeType":"ElementaryTypeName","src":"34174:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3227,"initialValue":{"arguments":[{"id":3225,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3217,"src":"34223:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3224,"name":"_packedOwnershipOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2387,"src":"34204:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":3226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34204:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"34174:57:7"},{"assignments":[3229],"declarations":[{"constant":false,"id":3229,"mutability":"mutable","name":"from","nameLocation":"34250:4:7","nodeType":"VariableDeclaration","scope":3365,"src":"34242:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3228,"name":"address","nodeType":"ElementaryTypeName","src":"34242:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3237,"initialValue":{"arguments":[{"arguments":[{"id":3234,"name":"prevOwnershipPacked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3223,"src":"34273:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3233,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34265:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3232,"name":"uint160","nodeType":"ElementaryTypeName","src":"34265:7:7","typeDescriptions":{}}},"id":3235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34265:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3231,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34257:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3230,"name":"address","nodeType":"ElementaryTypeName","src":"34257:7:7","typeDescriptions":{}}},"id":3236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34257:37:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"34242:52:7"},{"assignments":[3239,3241],"declarations":[{"constant":false,"id":3239,"mutability":"mutable","name":"approvedAddressSlot","nameLocation":"34314:19:7","nodeType":"VariableDeclaration","scope":3365,"src":"34306:27:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3238,"name":"uint256","nodeType":"ElementaryTypeName","src":"34306:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3241,"mutability":"mutable","name":"approvedAddress","nameLocation":"34343:15:7","nodeType":"VariableDeclaration","scope":3365,"src":"34335:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3240,"name":"address","nodeType":"ElementaryTypeName","src":"34335:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3245,"initialValue":{"arguments":[{"id":3243,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3217,"src":"34389:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3242,"name":"_getApprovedSlotAndAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2634,"src":"34362:26:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$_t_address_$","typeString":"function (uint256) view returns (uint256,address)"}},"id":3244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34362:35:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_address_$","typeString":"tuple(uint256,address)"}},"nodeType":"VariableDeclarationStatement","src":"34305:92:7"},{"condition":{"id":3246,"name":"approvalCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"34412:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3266,"nodeType":"IfStatement","src":"34408:312:7","trueBody":{"id":3265,"nodeType":"Block","src":"34427:293:7","statements":[{"condition":{"id":3253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"34530:69:7","subExpression":{"arguments":[{"id":3248,"name":"approvedAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3241,"src":"34556:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3249,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"34573:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3250,"name":"_msgSenderERC721A","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3466,"src":"34579:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34579:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3247,"name":"_isSenderApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2615,"src":"34531:24:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address,address) pure returns (bool)"}},"id":3252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34531:68:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3264,"nodeType":"IfStatement","src":"34526:183:7","trueBody":{"condition":{"id":3259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"34621:44:7","subExpression":{"arguments":[{"id":3255,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"34639:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3256,"name":"_msgSenderERC721A","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3466,"src":"34645:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34645:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3254,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"34622:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":3258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34622:43:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3263,"nodeType":"IfStatement","src":"34617:92:7","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3260,"name":"TransferCallerNotOwnerNorApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3501,"src":"34674:33:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34674:35:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3262,"nodeType":"RevertStatement","src":"34667:42:7"}}}]}},{"expression":{"arguments":[{"id":3268,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"34752:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"34766:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3270,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34758:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3269,"name":"address","nodeType":"ElementaryTypeName","src":"34758:7:7","typeDescriptions":{}}},"id":3272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34758:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3273,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3217,"src":"34770:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":3274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"34779:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":3267,"name":"_beforeTokenTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"34730:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":3275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34730:51:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3276,"nodeType":"ExpressionStatement","src":"34730:51:7"},{"AST":{"nodeType":"YulBlock","src":"34853:181:7","statements":[{"body":{"nodeType":"YulBlock","src":"34886:138:7","statements":[{"expression":{"arguments":[{"name":"approvedAddressSlot","nodeType":"YulIdentifier","src":"34987:19:7"},{"kind":"number","nodeType":"YulLiteral","src":"35008:1:7","type":"","value":"0"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"34980:6:7"},"nodeType":"YulFunctionCall","src":"34980:30:7"},"nodeType":"YulExpressionStatement","src":"34980:30:7"}]},"condition":{"name":"approvedAddress","nodeType":"YulIdentifier","src":"34870:15:7"},"nodeType":"YulIf","src":"34867:157:7"}]},"evmVersion":"paris","externalReferences":[{"declaration":3241,"isOffset":false,"isSlot":false,"src":"34870:15:7","valueSize":1},{"declaration":3239,"isOffset":false,"isSlot":false,"src":"34987:19:7","valueSize":1}],"id":3277,"nodeType":"InlineAssembly","src":"34844:190:7"},{"id":3341,"nodeType":"UncheckedBlock","src":"35301:1545:7","statements":[{"expression":{"id":3287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3278,"name":"_packedAddressData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"35613:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3280,"indexExpression":{"id":3279,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"35632:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"35613:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3286,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3283,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35642:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3282,"name":"_BITPOS_NUMBER_BURNED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"35647:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"35642:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3284,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"35641:28:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35672:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"35641:32:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"35613:60:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3288,"nodeType":"ExpressionStatement","src":"35613:60:7"},{"expression":{"id":3308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3289,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"35904:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3291,"indexExpression":{"id":3290,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3217,"src":"35922:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"35904:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3293,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"35969:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3296,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":3294,"name":"_BITMASK_BURNED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1911,"src":"35992:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":3295,"name":"_BITMASK_NEXT_INITIALIZED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"36010:25:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"35992:43:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3297,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"35991:45:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"arguments":[{"id":3299,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"36054:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36068:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3301,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"36060:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3300,"name":"address","nodeType":"ElementaryTypeName","src":"36060:7:7","typeDescriptions":{}}},"id":3303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"36060:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3304,"name":"prevOwnershipPacked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3223,"src":"36072:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3298,"name":"_nextExtraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"36039:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,uint256) view returns (uint256)"}},"id":3305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"36039:53:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"35991:101:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3292,"name":"_packOwnershipData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"35933:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":3307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"35933:173:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"35904:202:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3309,"nodeType":"ExpressionStatement","src":"35904:202:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3310,"name":"prevOwnershipPacked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3223,"src":"36223:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3311,"name":"_BITMASK_NEXT_INITIALIZED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"36245:25:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"36223:47:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36274:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"36223:52:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3340,"nodeType":"IfStatement","src":"36219:617:7","trueBody":{"id":3339,"nodeType":"Block","src":"36277:559:7","statements":[{"assignments":[3316],"declarations":[{"constant":false,"id":3316,"mutability":"mutable","name":"nextTokenId","nameLocation":"36303:11:7","nodeType":"VariableDeclaration","scope":3339,"src":"36295:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3315,"name":"uint256","nodeType":"ElementaryTypeName","src":"36295:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3320,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3317,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3217,"src":"36317:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36327:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"36317:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"36295:33:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3321,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"36448:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3323,"indexExpression":{"id":3322,"name":"nextTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3316,"src":"36466:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"36448:30:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36482:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"36448:35:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3338,"nodeType":"IfStatement","src":"36444:378:7","trueBody":{"id":3337,"nodeType":"Block","src":"36485:337:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3326,"name":"nextTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3316,"src":"36569:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3327,"name":"_currentIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"36584:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"36569:28:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3336,"nodeType":"IfStatement","src":"36565:239:7","trueBody":{"id":3335,"nodeType":"Block","src":"36599:205:7","statements":[{"expression":{"id":3333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3329,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"36729:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3331,"indexExpression":{"id":3330,"name":"nextTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3316,"src":"36747:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"36729:30:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3332,"name":"prevOwnershipPacked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3223,"src":"36762:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"36729:52:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3334,"nodeType":"ExpressionStatement","src":"36729:52:7"}]}}]}}]}}]},{"eventCall":{"arguments":[{"id":3343,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"36870:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36884:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3345,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"36876:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3344,"name":"address","nodeType":"ElementaryTypeName","src":"36876:7:7","typeDescriptions":{}}},"id":3347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"36876:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3348,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3217,"src":"36888:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3342,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3551,"src":"36861:8:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"36861:35:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3350,"nodeType":"EmitStatement","src":"36856:40:7"},{"expression":{"arguments":[{"id":3352,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"36927:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36941:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3354,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"36933:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3353,"name":"address","nodeType":"ElementaryTypeName","src":"36933:7:7","typeDescriptions":{}}},"id":3356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"36933:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3357,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3217,"src":"36945:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":3358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36954:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":3351,"name":"_afterTokenTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2862,"src":"36906:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":3359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"36906:50:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3360,"nodeType":"ExpressionStatement","src":"36906:50:7"},{"id":3364,"nodeType":"UncheckedBlock","src":"37055:49:7","statements":[{"expression":{"id":3362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"37079:14:7","subExpression":{"id":3361,"name":"_burnCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"37079:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3363,"nodeType":"ExpressionStatement","src":"37079:14:7"}]}]},"documentation":{"id":3215,"nodeType":"StructuredDocumentation","src":"33884:206:7","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":3366,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"34104:5:7","nodeType":"FunctionDefinition","parameters":{"id":3220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3217,"mutability":"mutable","name":"tokenId","nameLocation":"34118:7:7","nodeType":"VariableDeclaration","scope":3366,"src":"34110:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3216,"name":"uint256","nodeType":"ElementaryTypeName","src":"34110:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3219,"mutability":"mutable","name":"approvalCheck","nameLocation":"34132:13:7","nodeType":"VariableDeclaration","scope":3366,"src":"34127:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3218,"name":"bool","nodeType":"ElementaryTypeName","src":"34127:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"34109:37:7"},"returnParameters":{"id":3221,"nodeType":"ParameterList","parameters":[],"src":"34164:0:7"},"scope":3477,"src":"34095:3015:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3409,"nodeType":"Block","src":"37468:447:7","statements":[{"assignments":[3375],"declarations":[{"constant":false,"id":3375,"mutability":"mutable","name":"packed","nameLocation":"37486:6:7","nodeType":"VariableDeclaration","scope":3409,"src":"37478:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3374,"name":"uint256","nodeType":"ElementaryTypeName","src":"37478:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3379,"initialValue":{"baseExpression":{"id":3376,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"37495:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3378,"indexExpression":{"id":3377,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"37513:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"37495:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"37478:41:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3380,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3375,"src":"37533:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"37543:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"37533:11:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3386,"nodeType":"IfStatement","src":"37529:61:7","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3383,"name":"OwnershipNotInitializedForExtraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3519,"src":"37553:35:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"37553:37:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3385,"nodeType":"RevertStatement","src":"37546:44:7"}},{"assignments":[3388],"declarations":[{"constant":false,"id":3388,"mutability":"mutable","name":"extraDataCasted","nameLocation":"37608:15:7","nodeType":"VariableDeclaration","scope":3409,"src":"37600:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3387,"name":"uint256","nodeType":"ElementaryTypeName","src":"37600:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3389,"nodeType":"VariableDeclarationStatement","src":"37600:23:7"},{"AST":{"nodeType":"YulBlock","src":"37712:52:7","statements":[{"nodeType":"YulAssignment","src":"37726:28:7","value":{"name":"extraData","nodeType":"YulIdentifier","src":"37745:9:7"},"variableNames":[{"name":"extraDataCasted","nodeType":"YulIdentifier","src":"37726:15:7"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3371,"isOffset":false,"isSlot":false,"src":"37745:9:7","valueSize":1},{"declaration":3388,"isOffset":false,"isSlot":false,"src":"37726:15:7","valueSize":1}],"id":3390,"nodeType":"InlineAssembly","src":"37703:61:7"},{"expression":{"id":3401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3391,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3375,"src":"37773:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3392,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3375,"src":"37783:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3393,"name":"_BITMASK_EXTRA_DATA_COMPLEMENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"37792:30:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"37783:39:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3395,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"37782:41:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3396,"name":"extraDataCasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"37827:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3397,"name":"_BITPOS_EXTRA_DATA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1922,"src":"37846:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"37827:37:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3399,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"37826:39:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"37782:83:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"37773:92:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3402,"nodeType":"ExpressionStatement","src":"37773:92:7"},{"expression":{"id":3407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3403,"name":"_packedOwnerships","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"37875:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3405,"indexExpression":{"id":3404,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"37893:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"37875:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3406,"name":"packed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3375,"src":"37902:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"37875:33:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3408,"nodeType":"ExpressionStatement","src":"37875:33:7"}]},"documentation":{"id":3367,"nodeType":"StructuredDocumentation","src":"37304:84:7","text":" @dev Directly sets the extra data for the ownership data `index`."},"id":3410,"implemented":true,"kind":"function","modifiers":[],"name":"_setExtraDataAt","nameLocation":"37402:15:7","nodeType":"FunctionDefinition","parameters":{"id":3372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3369,"mutability":"mutable","name":"index","nameLocation":"37426:5:7","nodeType":"VariableDeclaration","scope":3410,"src":"37418:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3368,"name":"uint256","nodeType":"ElementaryTypeName","src":"37418:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3371,"mutability":"mutable","name":"extraData","nameLocation":"37440:9:7","nodeType":"VariableDeclaration","scope":3410,"src":"37433:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":3370,"name":"uint24","nodeType":"ElementaryTypeName","src":"37433:6:7","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"37417:33:7"},"returnParameters":{"id":3373,"nodeType":"ParameterList","parameters":[],"src":"37468:0:7"},"scope":3477,"src":"37393:522:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3422,"nodeType":"Block","src":"38616:2:7","statements":[]},"documentation":{"id":3411,"nodeType":"StructuredDocumentation","src":"37921:549:7","text":" @dev Called during each token transfer to set the 24bit `extraData` field.\n Intended to be overridden by the cosumer contract.\n `previousExtraData` - the value of `extraData` before transfer.\n Calling conditions:\n - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n transferred to `to`.\n - When `from` is zero, `tokenId` will be minted for `to`.\n - When `to` is zero, `tokenId` will be burned by `from`.\n - `from` and `to` are never both zero."},"id":3423,"implemented":true,"kind":"function","modifiers":[],"name":"_extraData","nameLocation":"38484:10:7","nodeType":"FunctionDefinition","parameters":{"id":3418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3413,"mutability":"mutable","name":"from","nameLocation":"38512:4:7","nodeType":"VariableDeclaration","scope":3423,"src":"38504:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3412,"name":"address","nodeType":"ElementaryTypeName","src":"38504:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3415,"mutability":"mutable","name":"to","nameLocation":"38534:2:7","nodeType":"VariableDeclaration","scope":3423,"src":"38526:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3414,"name":"address","nodeType":"ElementaryTypeName","src":"38526:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3417,"mutability":"mutable","name":"previousExtraData","nameLocation":"38553:17:7","nodeType":"VariableDeclaration","scope":3423,"src":"38546:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":3416,"name":"uint24","nodeType":"ElementaryTypeName","src":"38546:6:7","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"38494:82:7"},"returnParameters":{"id":3421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3420,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3423,"src":"38608:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":3419,"name":"uint24","nodeType":"ElementaryTypeName","src":"38608:6:7","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"38607:8:7"},"scope":3477,"src":"38475:143:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3455,"nodeType":"Block","src":"38904:164:7","statements":[{"assignments":[3436],"declarations":[{"constant":false,"id":3436,"mutability":"mutable","name":"extraData","nameLocation":"38921:9:7","nodeType":"VariableDeclaration","scope":3455,"src":"38914:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":3435,"name":"uint24","nodeType":"ElementaryTypeName","src":"38914:6:7","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"id":3443,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3439,"name":"prevOwnershipPacked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"38940:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":3440,"name":"_BITPOS_EXTRA_DATA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1922,"src":"38963:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"38940:41:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3438,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"38933:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":3437,"name":"uint24","nodeType":"ElementaryTypeName","src":"38933:6:7","typeDescriptions":{}}},"id":3442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"38933:49:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"nodeType":"VariableDeclarationStatement","src":"38914:68:7"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":3447,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3426,"src":"39018:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3448,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3428,"src":"39024:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3449,"name":"extraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"39028:9:7","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"id":3446,"name":"_extraData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3423,"src":"39007:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint24_$returns$_t_uint24_$","typeString":"function (address,address,uint24) view returns (uint24)"}},"id":3450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"39007:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint24","typeString":"uint24"}],"id":3445,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"38999:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3444,"name":"uint256","nodeType":"ElementaryTypeName","src":"38999:7:7","typeDescriptions":{}}},"id":3451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"38999:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3452,"name":"_BITPOS_EXTRA_DATA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1922,"src":"39043:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"38999:62:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3434,"id":3454,"nodeType":"Return","src":"38992:69:7"}]},"documentation":{"id":3424,"nodeType":"StructuredDocumentation","src":"38624:135:7","text":" @dev Returns the next extra data for the packed ownership data.\n The returned result is shifted into position."},"id":3456,"implemented":true,"kind":"function","modifiers":[],"name":"_nextExtraData","nameLocation":"38773:14:7","nodeType":"FunctionDefinition","parameters":{"id":3431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3426,"mutability":"mutable","name":"from","nameLocation":"38805:4:7","nodeType":"VariableDeclaration","scope":3456,"src":"38797:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3425,"name":"address","nodeType":"ElementaryTypeName","src":"38797:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3428,"mutability":"mutable","name":"to","nameLocation":"38827:2:7","nodeType":"VariableDeclaration","scope":3456,"src":"38819:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3427,"name":"address","nodeType":"ElementaryTypeName","src":"38819:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3430,"mutability":"mutable","name":"prevOwnershipPacked","nameLocation":"38847:19:7","nodeType":"VariableDeclaration","scope":3456,"src":"38839:27:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3429,"name":"uint256","nodeType":"ElementaryTypeName","src":"38839:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"38787:85:7"},"returnParameters":{"id":3434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3433,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3456,"src":"38895:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3432,"name":"uint256","nodeType":"ElementaryTypeName","src":"38895:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"38894:9:7"},"scope":3477,"src":"38764:304:7","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":3465,"nodeType":"Block","src":"39506:34:7","statements":[{"expression":{"expression":{"id":3462,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"39523:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"39527:6:7","memberName":"sender","nodeType":"MemberAccess","src":"39523:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3461,"id":3464,"nodeType":"Return","src":"39516:17:7"}]},"documentation":{"id":3457,"nodeType":"StructuredDocumentation","src":"39259:173:7","text":" @dev Returns the message sender (defaults to `msg.sender`).\n If you are writing GSN compatible contracts, you need to override this function."},"id":3466,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSenderERC721A","nameLocation":"39446:17:7","nodeType":"FunctionDefinition","parameters":{"id":3458,"nodeType":"ParameterList","parameters":[],"src":"39463:2:7"},"returnParameters":{"id":3461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3460,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3466,"src":"39497:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3459,"name":"address","nodeType":"ElementaryTypeName","src":"39497:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"39496:9:7"},"scope":3477,"src":"39437:103:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3475,"nodeType":"Block","src":"39721:1624:7","statements":[{"AST":{"nodeType":"YulBlock","src":"39740:1599:7","statements":[{"nodeType":"YulVariableDeclaration","src":"40104:31:7","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"40123:4:7","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"40117:5:7"},"nodeType":"YulFunctionCall","src":"40117:11:7"},{"kind":"number","nodeType":"YulLiteral","src":"40130:4:7","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40113:3:7"},"nodeType":"YulFunctionCall","src":"40113:22:7"},"variables":[{"name":"m","nodeType":"YulTypedName","src":"40108:1:7","type":""}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"40214:4:7","type":"","value":"0x40"},{"name":"m","nodeType":"YulIdentifier","src":"40220:1:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40207:6:7"},"nodeType":"YulFunctionCall","src":"40207:15:7"},"nodeType":"YulExpressionStatement","src":"40207:15:7"},{"nodeType":"YulAssignment","src":"40279:19:7","value":{"arguments":[{"name":"m","nodeType":"YulIdentifier","src":"40290:1:7"},{"kind":"number","nodeType":"YulLiteral","src":"40293:4:7","type":"","value":"0x20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"40286:3:7"},"nodeType":"YulFunctionCall","src":"40286:12:7"},"variableNames":[{"name":"str","nodeType":"YulIdentifier","src":"40279:3:7"}]},{"expression":{"arguments":[{"name":"str","nodeType":"YulIdentifier","src":"40368:3:7"},{"kind":"number","nodeType":"YulLiteral","src":"40373:1:7","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40361:6:7"},"nodeType":"YulFunctionCall","src":"40361:14:7"},"nodeType":"YulExpressionStatement","src":"40361:14:7"},{"nodeType":"YulVariableDeclaration","src":"40463:14:7","value":{"name":"str","nodeType":"YulIdentifier","src":"40474:3:7"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"40467:3:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"40721:388:7","statements":[{"nodeType":"YulAssignment","src":"40739:18:7","value":{"arguments":[{"name":"str","nodeType":"YulIdentifier","src":"40750:3:7"},{"kind":"number","nodeType":"YulLiteral","src":"40755:1:7","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"40746:3:7"},"nodeType":"YulFunctionCall","src":"40746:11:7"},"variableNames":[{"name":"str","nodeType":"YulIdentifier","src":"40739:3:7"}]},{"expression":{"arguments":[{"name":"str","nodeType":"YulIdentifier","src":"40900:3:7"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"40909:2:7","type":"","value":"48"},{"arguments":[{"name":"temp","nodeType":"YulIdentifier","src":"40917:4:7"},{"kind":"number","nodeType":"YulLiteral","src":"40923:2:7","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"40913:3:7"},"nodeType":"YulFunctionCall","src":"40913:13:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40905:3:7"},"nodeType":"YulFunctionCall","src":"40905:22:7"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"40892:7:7"},"nodeType":"YulFunctionCall","src":"40892:36:7"},"nodeType":"YulExpressionStatement","src":"40892:36:7"},{"nodeType":"YulAssignment","src":"40997:21:7","value":{"arguments":[{"name":"temp","nodeType":"YulIdentifier","src":"41009:4:7"},{"kind":"number","nodeType":"YulLiteral","src":"41015:2:7","type":"","value":"10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"41005:3:7"},"nodeType":"YulFunctionCall","src":"41005:13:7"},"variableNames":[{"name":"temp","nodeType":"YulIdentifier","src":"40997:4:7"}]},{"body":{"nodeType":"YulBlock","src":"41086:9:7","statements":[{"nodeType":"YulBreak","src":"41088:5:7"}]},"condition":{"arguments":[{"name":"temp","nodeType":"YulIdentifier","src":"41080:4:7"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"41073:6:7"},"nodeType":"YulFunctionCall","src":"41073:12:7"},"nodeType":"YulIf","src":"41070:25:7"}]},"condition":{"kind":"number","nodeType":"YulLiteral","src":"40716:1:7","type":"","value":"1"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"40718:2:7","statements":[]},"pre":{"nodeType":"YulBlock","src":"40694:21:7","statements":[{"nodeType":"YulVariableDeclaration","src":"40696:17:7","value":{"name":"value","nodeType":"YulIdentifier","src":"40708:5:7"},"variables":[{"name":"temp","nodeType":"YulTypedName","src":"40700:4:7","type":""}]}]},"src":"40690:419:7"},{"nodeType":"YulVariableDeclaration","src":"41123:27:7","value":{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"41141:3:7"},{"name":"str","nodeType":"YulIdentifier","src":"41146:3:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"41137:3:7"},"nodeType":"YulFunctionCall","src":"41137:13:7"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"41127:6:7","type":""}]},{"nodeType":"YulAssignment","src":"41243:21:7","value":{"arguments":[{"name":"str","nodeType":"YulIdentifier","src":"41254:3:7"},{"kind":"number","nodeType":"YulLiteral","src":"41259:4:7","type":"","value":"0x20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"41250:3:7"},"nodeType":"YulFunctionCall","src":"41250:14:7"},"variableNames":[{"name":"str","nodeType":"YulIdentifier","src":"41243:3:7"}]},{"expression":{"arguments":[{"name":"str","nodeType":"YulIdentifier","src":"41317:3:7"},{"name":"length","nodeType":"YulIdentifier","src":"41322:6:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41310:6:7"},"nodeType":"YulFunctionCall","src":"41310:19:7"},"nodeType":"YulExpressionStatement","src":"41310:19:7"}]},"evmVersion":"paris","externalReferences":[{"declaration":3472,"isOffset":false,"isSlot":false,"src":"40279:3:7","valueSize":1},{"declaration":3472,"isOffset":false,"isSlot":false,"src":"40368:3:7","valueSize":1},{"declaration":3472,"isOffset":false,"isSlot":false,"src":"40474:3:7","valueSize":1},{"declaration":3472,"isOffset":false,"isSlot":false,"src":"40739:3:7","valueSize":1},{"declaration":3472,"isOffset":false,"isSlot":false,"src":"40750:3:7","valueSize":1},{"declaration":3472,"isOffset":false,"isSlot":false,"src":"40900:3:7","valueSize":1},{"declaration":3472,"isOffset":false,"isSlot":false,"src":"41146:3:7","valueSize":1},{"declaration":3472,"isOffset":false,"isSlot":false,"src":"41243:3:7","valueSize":1},{"declaration":3472,"isOffset":false,"isSlot":false,"src":"41254:3:7","valueSize":1},{"declaration":3472,"isOffset":false,"isSlot":false,"src":"41317:3:7","valueSize":1},{"declaration":3469,"isOffset":false,"isSlot":false,"src":"40708:5:7","valueSize":1}],"id":3474,"nodeType":"InlineAssembly","src":"39731:1608:7"}]},"documentation":{"id":3467,"nodeType":"StructuredDocumentation","src":"39546:86:7","text":" @dev Converts a uint256 to its ASCII string decimal representation."},"id":3476,"implemented":true,"kind":"function","modifiers":[],"name":"_toString","nameLocation":"39646:9:7","nodeType":"FunctionDefinition","parameters":{"id":3470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3469,"mutability":"mutable","name":"value","nameLocation":"39664:5:7","nodeType":"VariableDeclaration","scope":3476,"src":"39656:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3468,"name":"uint256","nodeType":"ElementaryTypeName","src":"39656:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"39655:15:7"},"returnParameters":{"id":3473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3472,"mutability":"mutable","name":"str","nameLocation":"39716:3:7","nodeType":"VariableDeclaration","scope":3476,"src":"39702:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3471,"name":"string","nodeType":"ElementaryTypeName","src":"39702:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"39701:19:7"},"scope":3477,"src":"39637:1708:7","stateMutability":"pure","virtual":true,"visibility":"internal"}],"scope":3478,"src":"895:40452:7","usedErrors":[3483,3486,3489,3492,3495,3498,3501,3504,3507,3510,3513,3516,3519]}],"src":"84:41264:7"},"id":7},"erc721a/contracts/IERC721A.sol":{"ast":{"absolutePath":"erc721a/contracts/IERC721A.sol","exportedSymbols":{"IERC721A":[3683]},"id":3684,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3479,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"84:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721A","contractDependencies":[],"contractKind":"interface","documentation":{"id":3480,"nodeType":"StructuredDocumentation","src":"109:37:8","text":" @dev Interface of ERC721A."},"fullyImplemented":false,"id":3683,"linearizedBaseContracts":[3683],"name":"IERC721A","nameLocation":"157:8:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3481,"nodeType":"StructuredDocumentation","src":"172:76:8","text":" The caller must own the token or be an approved operator."},"errorSelector":"cfb3b942","id":3483,"name":"ApprovalCallerNotOwnerNorApproved","nameLocation":"259:33:8","nodeType":"ErrorDefinition","parameters":{"id":3482,"nodeType":"ParameterList","parameters":[],"src":"292:2:8"},"src":"253:42:8"},{"documentation":{"id":3484,"nodeType":"StructuredDocumentation","src":"301:44:8","text":" The token does not exist."},"errorSelector":"cf4700e4","id":3486,"name":"ApprovalQueryForNonexistentToken","nameLocation":"356:32:8","nodeType":"ErrorDefinition","parameters":{"id":3485,"nodeType":"ParameterList","parameters":[],"src":"388:2:8"},"src":"350:41:8"},{"documentation":{"id":3487,"nodeType":"StructuredDocumentation","src":"397:65:8","text":" Cannot query the balance for the zero address."},"errorSelector":"8f4eb604","id":3489,"name":"BalanceQueryForZeroAddress","nameLocation":"473:26:8","nodeType":"ErrorDefinition","parameters":{"id":3488,"nodeType":"ParameterList","parameters":[],"src":"499:2:8"},"src":"467:35:8"},{"documentation":{"id":3490,"nodeType":"StructuredDocumentation","src":"508:51:8","text":" Cannot mint to the zero address."},"errorSelector":"2e076300","id":3492,"name":"MintToZeroAddress","nameLocation":"570:17:8","nodeType":"ErrorDefinition","parameters":{"id":3491,"nodeType":"ParameterList","parameters":[],"src":"587:2:8"},"src":"564:26:8"},{"documentation":{"id":3493,"nodeType":"StructuredDocumentation","src":"596:72:8","text":" The quantity of tokens minted must be more than zero."},"errorSelector":"b562e8dd","id":3495,"name":"MintZeroQuantity","nameLocation":"679:16:8","nodeType":"ErrorDefinition","parameters":{"id":3494,"nodeType":"ParameterList","parameters":[],"src":"695:2:8"},"src":"673:25:8"},{"documentation":{"id":3496,"nodeType":"StructuredDocumentation","src":"704:44:8","text":" The token does not exist."},"errorSelector":"df2d9b42","id":3498,"name":"OwnerQueryForNonexistentToken","nameLocation":"759:29:8","nodeType":"ErrorDefinition","parameters":{"id":3497,"nodeType":"ParameterList","parameters":[],"src":"788:2:8"},"src":"753:38:8"},{"documentation":{"id":3499,"nodeType":"StructuredDocumentation","src":"797:76:8","text":" The caller must own the token or be an approved operator."},"errorSelector":"59c896be","id":3501,"name":"TransferCallerNotOwnerNorApproved","nameLocation":"884:33:8","nodeType":"ErrorDefinition","parameters":{"id":3500,"nodeType":"ParameterList","parameters":[],"src":"917:2:8"},"src":"878:42:8"},{"documentation":{"id":3502,"nodeType":"StructuredDocumentation","src":"926:53:8","text":" The token must be owned by `from`."},"errorSelector":"a1148100","id":3504,"name":"TransferFromIncorrectOwner","nameLocation":"990:26:8","nodeType":"ErrorDefinition","parameters":{"id":3503,"nodeType":"ParameterList","parameters":[],"src":"1016:2:8"},"src":"984:35:8"},{"documentation":{"id":3505,"nodeType":"StructuredDocumentation","src":"1025:116:8","text":" Cannot safely transfer to a contract that does not implement the\n ERC721Receiver interface."},"errorSelector":"d1a57ed6","id":3507,"name":"TransferToNonERC721ReceiverImplementer","nameLocation":"1152:38:8","nodeType":"ErrorDefinition","parameters":{"id":3506,"nodeType":"ParameterList","parameters":[],"src":"1190:2:8"},"src":"1146:47:8"},{"documentation":{"id":3508,"nodeType":"StructuredDocumentation","src":"1199:55:8","text":" Cannot transfer to the zero address."},"errorSelector":"ea553b34","id":3510,"name":"TransferToZeroAddress","nameLocation":"1265:21:8","nodeType":"ErrorDefinition","parameters":{"id":3509,"nodeType":"ParameterList","parameters":[],"src":"1286:2:8"},"src":"1259:30:8"},{"documentation":{"id":3511,"nodeType":"StructuredDocumentation","src":"1295:44:8","text":" The token does not exist."},"errorSelector":"a14c4b50","id":3513,"name":"URIQueryForNonexistentToken","nameLocation":"1350:27:8","nodeType":"ErrorDefinition","parameters":{"id":3512,"nodeType":"ParameterList","parameters":[],"src":"1377:2:8"},"src":"1344:36:8"},{"documentation":{"id":3514,"nodeType":"StructuredDocumentation","src":"1386:79:8","text":" The `quantity` minted with ERC2309 exceeds the safety limit."},"errorSelector":"3db1f9af","id":3516,"name":"MintERC2309QuantityExceedsLimit","nameLocation":"1476:31:8","nodeType":"ErrorDefinition","parameters":{"id":3515,"nodeType":"ParameterList","parameters":[],"src":"1507:2:8"},"src":"1470:40:8"},{"documentation":{"id":3517,"nodeType":"StructuredDocumentation","src":"1516:83:8","text":" The `extraData` cannot be set on an unintialized ownership slot."},"errorSelector":"00d58153","id":3519,"name":"OwnershipNotInitializedForExtraData","nameLocation":"1610:35:8","nodeType":"ErrorDefinition","parameters":{"id":3518,"nodeType":"ParameterList","parameters":[],"src":"1645:2:8"},"src":"1604:44:8"},{"canonicalName":"IERC721A.TokenOwnership","id":3528,"members":[{"constant":false,"id":3521,"mutability":"mutable","name":"addr","nameLocation":"1912:4:8","nodeType":"VariableDeclaration","scope":3528,"src":"1904:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3520,"name":"address","nodeType":"ElementaryTypeName","src":"1904:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3523,"mutability":"mutable","name":"startTimestamp","nameLocation":"2017:14:8","nodeType":"VariableDeclaration","scope":3528,"src":"2010:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3522,"name":"uint64","nodeType":"ElementaryTypeName","src":"2010:6:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3525,"mutability":"mutable","name":"burned","nameLocation":"2092:6:8","nodeType":"VariableDeclaration","scope":3528,"src":"2087:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3524,"name":"bool","nodeType":"ElementaryTypeName","src":"2087:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3527,"mutability":"mutable","name":"extraData","nameLocation":"2203:9:8","nodeType":"VariableDeclaration","scope":3528,"src":"2196:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":3526,"name":"uint24","nodeType":"ElementaryTypeName","src":"2196:6:8","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"name":"TokenOwnership","nameLocation":"1842:14:8","nodeType":"StructDefinition","scope":3683,"src":"1835:384:8","visibility":"public"},{"documentation":{"id":3529,"nodeType":"StructuredDocumentation","src":"2410:192:8","text":" @dev Returns the total number of tokens in existence.\n Burned tokens will reduce the count.\n To get the total number of tokens minted, please see {_totalMinted}."},"functionSelector":"18160ddd","id":3534,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"2616:11:8","nodeType":"FunctionDefinition","parameters":{"id":3530,"nodeType":"ParameterList","parameters":[],"src":"2627:2:8"},"returnParameters":{"id":3533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3532,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3534,"src":"2653:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3531,"name":"uint256","nodeType":"ElementaryTypeName","src":"2653:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2652:9:8"},"scope":3683,"src":"2607:55:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3535,"nodeType":"StructuredDocumentation","src":"2849:341:8","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n to learn more about how these ids are created.\n This function call must use less than 30000 gas."},"functionSelector":"01ffc9a7","id":3542,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"3204:17:8","nodeType":"FunctionDefinition","parameters":{"id":3538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3537,"mutability":"mutable","name":"interfaceId","nameLocation":"3229:11:8","nodeType":"VariableDeclaration","scope":3542,"src":"3222:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3536,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3222:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"3221:20:8"},"returnParameters":{"id":3541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3540,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3542,"src":"3265:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3539,"name":"bool","nodeType":"ElementaryTypeName","src":"3265:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3264:6:8"},"scope":3683,"src":"3195:76:8","stateMutability":"view","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":3543,"nodeType":"StructuredDocumentation","src":"3458:88:8","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":3551,"name":"Transfer","nameLocation":"3557:8:8","nodeType":"EventDefinition","parameters":{"id":3550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3545,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"3582:4:8","nodeType":"VariableDeclaration","scope":3551,"src":"3566:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3544,"name":"address","nodeType":"ElementaryTypeName","src":"3566:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3547,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"3604:2:8","nodeType":"VariableDeclaration","scope":3551,"src":"3588:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3546,"name":"address","nodeType":"ElementaryTypeName","src":"3588:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3549,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"3624:7:8","nodeType":"VariableDeclaration","scope":3551,"src":"3608:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3548,"name":"uint256","nodeType":"ElementaryTypeName","src":"3608:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3565:67:8"},"src":"3551:82:8"},{"anonymous":false,"documentation":{"id":3552,"nodeType":"StructuredDocumentation","src":"3639:94:8","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":3560,"name":"Approval","nameLocation":"3744:8:8","nodeType":"EventDefinition","parameters":{"id":3559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3554,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"3769:5:8","nodeType":"VariableDeclaration","scope":3560,"src":"3753:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3553,"name":"address","nodeType":"ElementaryTypeName","src":"3753:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3556,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"3792:8:8","nodeType":"VariableDeclaration","scope":3560,"src":"3776:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3555,"name":"address","nodeType":"ElementaryTypeName","src":"3776:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3558,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"3818:7:8","nodeType":"VariableDeclaration","scope":3560,"src":"3802:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3557,"name":"uint256","nodeType":"ElementaryTypeName","src":"3802:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3752:74:8"},"src":"3738:89:8"},{"anonymous":false,"documentation":{"id":3561,"nodeType":"StructuredDocumentation","src":"3833:124:8","text":" @dev Emitted when `owner` enables or disables\n (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":3569,"name":"ApprovalForAll","nameLocation":"3968:14:8","nodeType":"EventDefinition","parameters":{"id":3568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3563,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"3999:5:8","nodeType":"VariableDeclaration","scope":3569,"src":"3983:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3562,"name":"address","nodeType":"ElementaryTypeName","src":"3983:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3565,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"4022:8:8","nodeType":"VariableDeclaration","scope":3569,"src":"4006:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3564,"name":"address","nodeType":"ElementaryTypeName","src":"4006:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3567,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"4037:8:8","nodeType":"VariableDeclaration","scope":3569,"src":"4032:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3566,"name":"bool","nodeType":"ElementaryTypeName","src":"4032:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3982:64:8"},"src":"3962:85:8"},{"documentation":{"id":3570,"nodeType":"StructuredDocumentation","src":"4053:74:8","text":" @dev Returns the number of tokens in `owner`'s account."},"functionSelector":"70a08231","id":3577,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"4141:9:8","nodeType":"FunctionDefinition","parameters":{"id":3573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3572,"mutability":"mutable","name":"owner","nameLocation":"4159:5:8","nodeType":"VariableDeclaration","scope":3577,"src":"4151:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3571,"name":"address","nodeType":"ElementaryTypeName","src":"4151:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4150:15:8"},"returnParameters":{"id":3576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3575,"mutability":"mutable","name":"balance","nameLocation":"4197:7:8","nodeType":"VariableDeclaration","scope":3577,"src":"4189:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3574,"name":"uint256","nodeType":"ElementaryTypeName","src":"4189:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4188:17:8"},"scope":3683,"src":"4132:74:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3578,"nodeType":"StructuredDocumentation","src":"4212:131:8","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":3585,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"4357:7:8","nodeType":"FunctionDefinition","parameters":{"id":3581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3580,"mutability":"mutable","name":"tokenId","nameLocation":"4373:7:8","nodeType":"VariableDeclaration","scope":3585,"src":"4365:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3579,"name":"uint256","nodeType":"ElementaryTypeName","src":"4365:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4364:17:8"},"returnParameters":{"id":3584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3583,"mutability":"mutable","name":"owner","nameLocation":"4413:5:8","nodeType":"VariableDeclaration","scope":3585,"src":"4405:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3582,"name":"address","nodeType":"ElementaryTypeName","src":"4405:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4404:15:8"},"scope":3683,"src":"4348:72:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3586,"nodeType":"StructuredDocumentation","src":"4426:711:8","text":" @dev Safely transfers `tokenId` token from `from` to `to`,\n checking first that contract recipients are aware of the ERC721 protocol\n to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be have been allowed to move\n this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement\n {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":3597,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5151:16:8","nodeType":"FunctionDefinition","parameters":{"id":3595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3588,"mutability":"mutable","name":"from","nameLocation":"5185:4:8","nodeType":"VariableDeclaration","scope":3597,"src":"5177:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3587,"name":"address","nodeType":"ElementaryTypeName","src":"5177:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3590,"mutability":"mutable","name":"to","nameLocation":"5207:2:8","nodeType":"VariableDeclaration","scope":3597,"src":"5199:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3589,"name":"address","nodeType":"ElementaryTypeName","src":"5199:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3592,"mutability":"mutable","name":"tokenId","nameLocation":"5227:7:8","nodeType":"VariableDeclaration","scope":3597,"src":"5219:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3591,"name":"uint256","nodeType":"ElementaryTypeName","src":"5219:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3594,"mutability":"mutable","name":"data","nameLocation":"5259:4:8","nodeType":"VariableDeclaration","scope":3597,"src":"5244:19:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3593,"name":"bytes","nodeType":"ElementaryTypeName","src":"5244:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5167:102:8"},"returnParameters":{"id":3596,"nodeType":"ParameterList","parameters":[],"src":"5286:0:8"},"scope":3683,"src":"5142:145:8","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":3598,"nodeType":"StructuredDocumentation","src":"5293:80:8","text":" @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`."},"functionSelector":"42842e0e","id":3607,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5387:16:8","nodeType":"FunctionDefinition","parameters":{"id":3605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3600,"mutability":"mutable","name":"from","nameLocation":"5421:4:8","nodeType":"VariableDeclaration","scope":3607,"src":"5413:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3599,"name":"address","nodeType":"ElementaryTypeName","src":"5413:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3602,"mutability":"mutable","name":"to","nameLocation":"5443:2:8","nodeType":"VariableDeclaration","scope":3607,"src":"5435:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3601,"name":"address","nodeType":"ElementaryTypeName","src":"5435:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3604,"mutability":"mutable","name":"tokenId","nameLocation":"5463:7:8","nodeType":"VariableDeclaration","scope":3607,"src":"5455:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3603,"name":"uint256","nodeType":"ElementaryTypeName","src":"5455:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5403:73:8"},"returnParameters":{"id":3606,"nodeType":"ParameterList","parameters":[],"src":"5493:0:8"},"scope":3683,"src":"5378:116:8","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":3608,"nodeType":"StructuredDocumentation","src":"5500:512:8","text":" @dev Transfers `tokenId` from `from` to `to`.\n WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n whenever possible.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token\n by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":3617,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"6026:12:8","nodeType":"FunctionDefinition","parameters":{"id":3615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3610,"mutability":"mutable","name":"from","nameLocation":"6056:4:8","nodeType":"VariableDeclaration","scope":3617,"src":"6048:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3609,"name":"address","nodeType":"ElementaryTypeName","src":"6048:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3612,"mutability":"mutable","name":"to","nameLocation":"6078:2:8","nodeType":"VariableDeclaration","scope":3617,"src":"6070:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3611,"name":"address","nodeType":"ElementaryTypeName","src":"6070:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3614,"mutability":"mutable","name":"tokenId","nameLocation":"6098:7:8","nodeType":"VariableDeclaration","scope":3617,"src":"6090:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3613,"name":"uint256","nodeType":"ElementaryTypeName","src":"6090:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6038:73:8"},"returnParameters":{"id":3616,"nodeType":"ParameterList","parameters":[],"src":"6128:0:8"},"scope":3683,"src":"6017:112:8","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":3618,"nodeType":"StructuredDocumentation","src":"6135:459:8","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the\n zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":3625,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"6608:7:8","nodeType":"FunctionDefinition","parameters":{"id":3623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3620,"mutability":"mutable","name":"to","nameLocation":"6624:2:8","nodeType":"VariableDeclaration","scope":3625,"src":"6616:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3619,"name":"address","nodeType":"ElementaryTypeName","src":"6616:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3622,"mutability":"mutable","name":"tokenId","nameLocation":"6636:7:8","nodeType":"VariableDeclaration","scope":3625,"src":"6628:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3621,"name":"uint256","nodeType":"ElementaryTypeName","src":"6628:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6615:29:8"},"returnParameters":{"id":3624,"nodeType":"ParameterList","parameters":[],"src":"6661:0:8"},"scope":3683,"src":"6599:63:8","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":3626,"nodeType":"StructuredDocumentation","src":"6668:316:8","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom}\n for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":3633,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"6998:17:8","nodeType":"FunctionDefinition","parameters":{"id":3631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3628,"mutability":"mutable","name":"operator","nameLocation":"7024:8:8","nodeType":"VariableDeclaration","scope":3633,"src":"7016:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3627,"name":"address","nodeType":"ElementaryTypeName","src":"7016:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3630,"mutability":"mutable","name":"_approved","nameLocation":"7039:9:8","nodeType":"VariableDeclaration","scope":3633,"src":"7034:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3629,"name":"bool","nodeType":"ElementaryTypeName","src":"7034:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7015:34:8"},"returnParameters":{"id":3632,"nodeType":"ParameterList","parameters":[],"src":"7058:0:8"},"scope":3683,"src":"6989:70:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3634,"nodeType":"StructuredDocumentation","src":"7065:139:8","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":3641,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"7218:11:8","nodeType":"FunctionDefinition","parameters":{"id":3637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3636,"mutability":"mutable","name":"tokenId","nameLocation":"7238:7:8","nodeType":"VariableDeclaration","scope":3641,"src":"7230:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3635,"name":"uint256","nodeType":"ElementaryTypeName","src":"7230:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7229:17:8"},"returnParameters":{"id":3640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3639,"mutability":"mutable","name":"operator","nameLocation":"7278:8:8","nodeType":"VariableDeclaration","scope":3641,"src":"7270:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3638,"name":"address","nodeType":"ElementaryTypeName","src":"7270:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7269:18:8"},"scope":3683,"src":"7209:79:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3642,"nodeType":"StructuredDocumentation","src":"7294:139:8","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}."},"functionSelector":"e985e9c5","id":3651,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"7447:16:8","nodeType":"FunctionDefinition","parameters":{"id":3647,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3644,"mutability":"mutable","name":"owner","nameLocation":"7472:5:8","nodeType":"VariableDeclaration","scope":3651,"src":"7464:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3643,"name":"address","nodeType":"ElementaryTypeName","src":"7464:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3646,"mutability":"mutable","name":"operator","nameLocation":"7487:8:8","nodeType":"VariableDeclaration","scope":3651,"src":"7479:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3645,"name":"address","nodeType":"ElementaryTypeName","src":"7479:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7463:33:8"},"returnParameters":{"id":3650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3649,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3651,"src":"7520:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3648,"name":"bool","nodeType":"ElementaryTypeName","src":"7520:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7519:6:8"},"scope":3683,"src":"7438:88:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3652,"nodeType":"StructuredDocumentation","src":"7717:58:8","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":3657,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"7789:4:8","nodeType":"FunctionDefinition","parameters":{"id":3653,"nodeType":"ParameterList","parameters":[],"src":"7793:2:8"},"returnParameters":{"id":3656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3655,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3657,"src":"7819:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3654,"name":"string","nodeType":"ElementaryTypeName","src":"7819:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7818:15:8"},"scope":3683,"src":"7780:54:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3658,"nodeType":"StructuredDocumentation","src":"7840:60:8","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":3663,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"7914:6:8","nodeType":"FunctionDefinition","parameters":{"id":3659,"nodeType":"ParameterList","parameters":[],"src":"7920:2:8"},"returnParameters":{"id":3662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3661,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3663,"src":"7946:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3660,"name":"string","nodeType":"ElementaryTypeName","src":"7946:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7945:15:8"},"scope":3683,"src":"7905:56:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3664,"nodeType":"StructuredDocumentation","src":"7967:90:8","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":3671,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"8071:8:8","nodeType":"FunctionDefinition","parameters":{"id":3667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3666,"mutability":"mutable","name":"tokenId","nameLocation":"8088:7:8","nodeType":"VariableDeclaration","scope":3671,"src":"8080:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3665,"name":"uint256","nodeType":"ElementaryTypeName","src":"8080:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8079:17:8"},"returnParameters":{"id":3670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3669,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3671,"src":"8120:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3668,"name":"string","nodeType":"ElementaryTypeName","src":"8120:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8119:15:8"},"scope":3683,"src":"8062:73:8","stateMutability":"view","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":3672,"nodeType":"StructuredDocumentation","src":"8322:267:8","text":" @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n (inclusive) is transferred from `from` to `to`, as defined in the\n [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n See {_mintERC2309} for more details."},"eventSelector":"deaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d","id":3682,"name":"ConsecutiveTransfer","nameLocation":"8600:19:8","nodeType":"EventDefinition","parameters":{"id":3681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3674,"indexed":true,"mutability":"mutable","name":"fromTokenId","nameLocation":"8636:11:8","nodeType":"VariableDeclaration","scope":3682,"src":"8620:27:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3673,"name":"uint256","nodeType":"ElementaryTypeName","src":"8620:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3676,"indexed":false,"mutability":"mutable","name":"toTokenId","nameLocation":"8657:9:8","nodeType":"VariableDeclaration","scope":3682,"src":"8649:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3675,"name":"uint256","nodeType":"ElementaryTypeName","src":"8649:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3678,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"8684:4:8","nodeType":"VariableDeclaration","scope":3682,"src":"8668:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3677,"name":"address","nodeType":"ElementaryTypeName","src":"8668:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3680,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"8706:2:8","nodeType":"VariableDeclaration","scope":3682,"src":"8690:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3679,"name":"address","nodeType":"ElementaryTypeName","src":"8690:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8619:90:8"},"src":"8594:116:8"}],"scope":3684,"src":"147:8565:8","usedErrors":[3483,3486,3489,3492,3495,3498,3501,3504,3507,3510,3513,3516,3519]}],"src":"84:8629:8"},"id":8}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Base64.sol":{"Base64":{"abi":[],"devdoc":{"details":"Provides a set of functions to operate with Base64 strings. _Available since v4.5._","kind":"dev","methods":{},"stateVariables":{"_TABLE":{"details":"Base64 Encoding/Decoding Table"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203ad79fbe7ac4289d66db5554af62053e8f6ebaaa5a918124602e568e6ae9ea5464736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASPRICE 0xD7 SWAP16 0xBE PUSH27 0xC4289D66DB5554AF62053E8F6EBAAA5A918124602E568E6AE9EA54 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"231:3302:1:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;231:3302:1;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203ad79fbe7ac4289d66db5554af62053e8f6ebaaa5a918124602e568e6ae9ea5464736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASPRICE 0xD7 SWAP16 0xBE PUSH27 0xC4289D66DB5554AF62053E8F6EBAAA5A918124602E568E6AE9EA54 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"231:3302:1:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"encode(bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides a set of functions to operate with Base64 strings. _Available since v4.5._\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_TABLE\":{\"details\":\"Base64 Encoding/Decoding Table\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Base64.sol\":\"Base64\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f10e3915e24522481e5a1a0de9fa798046c1f8cc22bf352b4fbb68afaab1609064736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL 0xE CODECOPY ISZERO 0xE2 GASLIMIT 0x22 BASEFEE 0x1E GAS BYTE 0xD 0xE9 STATICCALL PUSH26 0x8046C1F8CC22BF352B4FBB68AFAAB1609064736F6C6343000813 STOP CALLER ","sourceMap":"220:2559:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;220:2559:3;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f10e3915e24522481e5a1a0de9fa798046c1f8cc22bf352b4fbb68afaab1609064736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL 0xE CODECOPY ISZERO 0xE2 GASLIMIT 0x22 BASEFEE 0x1E GAS BYTE 0xD 0xE9 STATICCALL PUSH26 0x8046C1F8CC22BF352B4FBB68AFAAB1609064736F6C6343000813 STOP CALLER ","sourceMap":"220:2559:3:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220765816f29ba456b8ec2a4d8f710cfa5de929f52bfee4c59cab2e4ee9b6dd7fb664736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH23 0x5816F29BA456B8EC2A4D8F710CFA5DE929F52BFEE4C59C 0xAB 0x2E 0x4E 0xE9 0xB6 0xDD PUSH32 0xB664736F6C634300081300330000000000000000000000000000000000000000 ","sourceMap":"202:12582:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12582:4;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220765816f29ba456b8ec2a4d8f710cfa5de929f52bfee4c59cab2e4ee9b6dd7fb664736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH23 0x5816F29BA456B8EC2A4D8F710CFA5DE929F52BFEE4C59C 0xAB 0x2E 0x4E 0xE9 0xB6 0xDD PUSH32 0xB664736F6C634300081300330000000000000000000000000000000000000000 ","sourceMap":"202:12582:4:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200808c2527f727a5dd582227df2fd31a2da483c5750fe3f1d935b0d386ac945c664736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD ADDMOD 0xC2 MSTORE PUSH32 0x727A5DD582227DF2FD31A2DA483C5750FE3F1D935B0D386AC945C664736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ","sourceMap":"215:1047:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;215:1047:5;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200808c2527f727a5dd582227df2fd31a2da483c5750fe3f1d935b0d386ac945c664736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD ADDMOD 0xC2 MSTORE PUSH32 0x727A5DD582227DF2FD31A2DA483C5750FE3F1D935B0D386AC945C664736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ","sourceMap":"215:1047:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/BasePaintRaffle.sol":{"BasePaint":{"abi":[{"inputs":[{"internalType":"uint256[]","name":"indexes","type":"uint256[]"}],"name":"authorWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"day","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"pixels","type":"bytes"}],"name":"paint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"today","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"authorWithdraw(uint256[])":"8abe0991","paint(uint256,uint256,bytes)":"b079bbcc","today()":"b74e452b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"name\":\"authorWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pixels\",\"type\":\"bytes\"}],\"name\":\"paint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"today\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BasePaintRaffle.sol\":\"BasePaint\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/BasePaintRaffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n//    ___                  ___         _       __    ___         ___ ___ __    \\n//   / _ ) ___ _ ___ ___  / _ \\\\ ___ _ (_)___  / /_  / _ \\\\ ___ _ / _// _// /___ \\n//  / _  |/ _ `/(_-</ -_)/ ___// _ `// // _ \\\\/ __/ / , _// _ `// _// _// // -_)\\n// /____/ \\\\_,_//___/\\\\__//_/    \\\\_,_//_//_//_/\\\\__/ /_/|_| \\\\_,_//_/ /_/ /_/ \\\\__/ \\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\n\\ninterface BasePaint {\\n    function today() external view returns (uint256);\\n    function authorWithdraw(uint256[] calldata indexes) external;\\n    function paint(uint256 day, uint256 tokenId, bytes calldata pixels) external;\\n}\\n\\n/// @title BasePaint Raffle Contract\\n/// @author 0xNader\\n/// @notice Buy tickets and win a brush for the day\\ncontract BasePaintRaffle is ERC721A, Ownable {\\n    using Strings for uint256;\\n\\n// *********** Errors *********** //\\n    error NotWinner();\\n    error AlreadyDrawn();\\n    error ZeroTicketAmount();\\n    error IncorrectEthAmount();\\n    error FailedToWithdraw();\\n    error AlreadyClaimed();\\n    error NonExistentToken();\\n    error InvalidDay();\\n\\n// *********** Variables *********** //\\n    BasePaint public immutable basePaint;\\n    string public imageURI;\\n    uint256 public ticketPrice;\\n    uint256 public brushId;\\n\\n    ///@notice Stores the winning raffle ticket\\n    mapping(uint256 => uint256) public winners;\\n\\n    /// @notice Stores if a winner has claimed their earnings\\n    mapping(uint256 => bool) public claimedEarnings;\\n\\n// *********** Events *********** //\\n    event TicketsPurchased(address recipent, uint256 amount, uint256 price);\\n    event TicketPriceUpdated(uint256 prevPrice, uint256 updatedPrice);\\n    event RaffleWinner(uint256 winningTokenId, uint256 day);\\n\\n// *********** Constructor *********** //\\n    constructor(\\n        address _basePaintAddress, \\n        uint256 _brushId, \\n        uint256 _ticketPrice, \\n        string memory _imageURI\\n    ) ERC721A(\\\"BasePaint Tickets\\\", \\\"BPT\\\") {\\n        basePaint = BasePaint(_basePaintAddress);\\n        brushId = _brushId;\\n        ticketPrice = _ticketPrice;\\n        imageURI = _imageURI;\\n    }\\n\\n// *********** Functions *********** //\\n    /// @notice Starts the raffle, can only be called once a day\\n    function startRaffle() public {\\n        uint256 today = basePaint.today();\\n        if(winners[today] != 0) revert AlreadyDrawn();\\n        \\n        uint256 semiRandomNumber = uint256(keccak256(abi.encodePacked(block.prevrandao, today)));\\n        uint256 winningTokenId = semiRandomNumber % this.totalSupply();\\n        winners[today] = winningTokenId;\\n\\n        emit RaffleWinner(winningTokenId, today);\\n    }\\n\\n    /// @notice Stores if a winner has claimed their earnings\\n    /// @param _recipient Address that recieves the tickets\\n    /// @param _amount Number of tickets to purchase\\n    function buyTickets(address _recipient, uint256 _amount) external payable {\\n        if(_amount == 0) revert ZeroTicketAmount();\\n        if(msg.value != ticketPrice * _amount) revert IncorrectEthAmount();\\n        \\n\\n        _mint(msg.sender, _amount);\\n        emit TicketsPurchased(_recipient, _amount, ticketPrice);\\n    }\\n\\n    /// @notice Raffle winner uses this function to paint\\n    /// @param _pixels The target pixels paint\\n    function paint(bytes calldata _pixels) external payable {\\n        uint256 today = basePaint.today();\\n        uint256 winningTokenId = winners[today];\\n        if(msg.sender != this.ownerOf(winningTokenId)) revert NotWinner();\\n        \\n        basePaint.paint(today, brushId, _pixels);\\n    }\\n\\n    /// @notice Called by winner to withdraw earnings after painting mint is completed\\n    /// @param _day The basepaint day\\n    function withdawEarnings(uint256 _day) external {\\n        if(claimedEarnings[_day]) revert AlreadyClaimed();\\n        if(_day >= basePaint.today()) revert InvalidDay();\\n\\n        uint256[] memory dayArr = new uint256[](1);\\n        dayArr[0] = _day; \\n\\n        uint256 balanceBefore = address(this).balance;\\n        basePaint.authorWithdraw(dayArr);\\n        uint256 balanceAfter = address(this).balance;\\n\\n        uint256 earning = balanceAfter - balanceBefore;\\n        uint256 winningTokenId = winners[_day];\\n\\n        address winner = this.ownerOf(winningTokenId);\\n        (bool sent, ) = winner.call{value: earning}(\\\"\\\");\\n\\n        if(!sent) revert FailedToWithdraw();\\n        claimedEarnings[_day] = true;\\n    }\\n\\n    /// @notice Token Metadata getter\\n    /// @param _tokenId the id of the token\\n    /// @return metadata Encoded JSON metadata for a given token\\n    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(_tokenId)) revert NonExistentToken();\\n\\n        bytes memory dataURI = abi.encodePacked(\\n            '{',\\n                '\\\"name\\\": \\\"BasePaint Ticket ', _tokenId.toString(), '\\\",',\\n                '\\\"description\\\": \\\"', \\\"Just a ticket...\\\", '\\\",',\\n                '\\\"image\\\": \\\"', imageURI, '\\\"',\\n            '}'\\n        );\\n        return string(abi.encodePacked(\\n            \\\"data:application/json;base64,\\\",\\n            Base64.encode(dataURI)\\n        ));\\n    }\\n\\n    /// @notice Override to start tokenIds at 1 instead of 0\\n    function _startTokenId() internal pure override returns (uint256) {\\n        return 1;\\n    }\\n\\n// *********** Owner Functions *********** //\\n    /// @notice Used by owner to update the ticket price\\n    /// @param _newPrice The new price\\n    function updateTicketPrice(uint256 _newPrice) external onlyOwner {\\n        uint256 prevTicketPrice = ticketPrice;\\n        ticketPrice = _newPrice;\\n\\n        emit TicketPriceUpdated(prevTicketPrice, _newPrice);\\n    }\\n\\n    /// @notice Used by owner to withdraw ETH from ticket sales\\n    /// @param _recipient The address to withdraw to\\n    function withdrawTicketSales(address _recipient) external onlyOwner {\\n        (bool sent, ) = _recipient.call{value: address(this).balance}(\\\"\\\");\\n        if(!sent) revert FailedToWithdraw();\\n    }\\n}\\n\",\"keccak256\":\"0x0f977d359efc51c62d16aba9b7959d793206d2c86436c1c0cfa3a083a3fcd6af\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23116c16976b7d8c0c714ba1b38ae6b16c16fc90ec69b568fb1ebf1bc063e01c\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"BasePaintRaffle":{"abi":[{"inputs":[{"internalType":"address","name":"_basePaintAddress","type":"address"},{"internalType":"uint256","name":"_brushId","type":"uint256"},{"internalType":"uint256","name":"_ticketPrice","type":"uint256"},{"internalType":"string","name":"_imageURI","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AlreadyClaimed","type":"error"},{"inputs":[],"name":"AlreadyDrawn","type":"error"},{"inputs":[],"name":"ApprovalCallerNotOwnerNorApproved","type":"error"},{"inputs":[],"name":"ApprovalQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"BalanceQueryForZeroAddress","type":"error"},{"inputs":[],"name":"FailedToWithdraw","type":"error"},{"inputs":[],"name":"IncorrectEthAmount","type":"error"},{"inputs":[],"name":"InvalidDay","type":"error"},{"inputs":[],"name":"MintERC2309QuantityExceedsLimit","type":"error"},{"inputs":[],"name":"MintToZeroAddress","type":"error"},{"inputs":[],"name":"MintZeroQuantity","type":"error"},{"inputs":[],"name":"NonExistentToken","type":"error"},{"inputs":[],"name":"NotWinner","type":"error"},{"inputs":[],"name":"OwnerQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"OwnershipNotInitializedForExtraData","type":"error"},{"inputs":[],"name":"TransferCallerNotOwnerNorApproved","type":"error"},{"inputs":[],"name":"TransferFromIncorrectOwner","type":"error"},{"inputs":[],"name":"TransferToNonERC721ReceiverImplementer","type":"error"},{"inputs":[],"name":"TransferToZeroAddress","type":"error"},{"inputs":[],"name":"URIQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"ZeroTicketAmount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"toTokenId","type":"uint256"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"ConsecutiveTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"winningTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"day","type":"uint256"}],"name":"RaffleWinner","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"prevPrice","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"updatedPrice","type":"uint256"}],"name":"TicketPriceUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"recipent","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"}],"name":"TicketsPurchased","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"basePaint","outputs":[{"internalType":"contract BasePaint","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"brushId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"buyTickets","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"claimedEarnings","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"imageURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"_pixels","type":"bytes"}],"name":"paint","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"startRaffle","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ticketPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_newPrice","type":"uint256"}],"name":"updateTicketPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"winners","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_day","type":"uint256"}],"name":"withdawEarnings","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"}],"name":"withdrawTicketSales","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"0xNader","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"ConsecutiveTransfer(uint256,uint256,address,address)":{"details":"Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in `owner`'s account."},"buyTickets(address,uint256)":{"params":{"_amount":"Number of tickets to purchase","_recipient":"Address that recieves the tickets"}},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."},"name()":{"details":"Returns the token collection name."},"owner()":{"details":"Returns the address of the current owner."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"paint(bytes)":{"params":{"_pixels":"The target pixels paint"}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"safeTransferFrom(address,address,uint256)":{"details":"Equivalent to `safeTransferFrom(from, to, tokenId, '')`."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"params":{"_tokenId":"the id of the token"},"returns":{"_0":"metadata Encoded JSON metadata for a given token"}},"totalSupply()":{"details":"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"updateTicketPrice(uint256)":{"params":{"_newPrice":"The new price"}},"withdawEarnings(uint256)":{"params":{"_day":"The basepaint day"}},"withdrawTicketSales(address)":{"params":{"_recipient":"The address to withdraw to"}}},"title":"BasePaint Raffle Contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_1513":{"entryPoint":null,"id":1513,"parameterSlots":4,"returnSlots":0},"@_1992":{"entryPoint":null,"id":1992,"parameterSlots":2,"returnSlots":0},"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_msgSender_171":{"entryPoint":null,"id":171,"parameterSlots":0,"returnSlots":1},"@_startTokenId_1803":{"entryPoint":null,"id":1803,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":221,"id":111,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_addresst_uint256t_uint256t_string_memory_ptr_fromMemory":{"entryPoint":325,"id":null,"parameterSlots":2,"returnSlots":4},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":651,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":734,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":591,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":303,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4069:9","statements":[{"nodeType":"YulBlock","src":"6:3:9","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:9"},"nodeType":"YulFunctionCall","src":"66:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:9"},"nodeType":"YulFunctionCall","src":"56:31:9"},"nodeType":"YulExpressionStatement","src":"56:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:9","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:9"},"nodeType":"YulFunctionCall","src":"96:15:9"},"nodeType":"YulExpressionStatement","src":"96:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:9"},"nodeType":"YulFunctionCall","src":"120:15:9"},"nodeType":"YulExpressionStatement","src":"120:15:9"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:9"},{"body":{"nodeType":"YulBlock","src":"288:1190:9","statements":[{"body":{"nodeType":"YulBlock","src":"335:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"344:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"347:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"337:6:9"},"nodeType":"YulFunctionCall","src":"337:12:9"},"nodeType":"YulExpressionStatement","src":"337:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"309:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"318:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"305:3:9"},"nodeType":"YulFunctionCall","src":"305:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"330:3:9","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"301:3:9"},"nodeType":"YulFunctionCall","src":"301:33:9"},"nodeType":"YulIf","src":"298:53:9"},{"nodeType":"YulVariableDeclaration","src":"360:29:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"379:9:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"373:5:9"},"nodeType":"YulFunctionCall","src":"373:16:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"364:5:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"452:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"461:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"464:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"454:6:9"},"nodeType":"YulFunctionCall","src":"454:12:9"},"nodeType":"YulExpressionStatement","src":"454:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"411:5:9"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"422:5:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"437:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"442:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"433:3:9"},"nodeType":"YulFunctionCall","src":"433:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"446:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"429:3:9"},"nodeType":"YulFunctionCall","src":"429:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"418:3:9"},"nodeType":"YulFunctionCall","src":"418:31:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"408:2:9"},"nodeType":"YulFunctionCall","src":"408:42:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"401:6:9"},"nodeType":"YulFunctionCall","src":"401:50:9"},"nodeType":"YulIf","src":"398:70:9"},{"nodeType":"YulAssignment","src":"477:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"487:5:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"477:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"501:12:9","value":{"kind":"number","nodeType":"YulLiteral","src":"511:2:9","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"505:2:9","type":""}]},{"nodeType":"YulAssignment","src":"522:35:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"542:9:9"},{"name":"_1","nodeType":"YulIdentifier","src":"553:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"538:3:9"},"nodeType":"YulFunctionCall","src":"538:18:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"532:5:9"},"nodeType":"YulFunctionCall","src":"532:25:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"522:6:9"}]},{"nodeType":"YulAssignment","src":"566:35:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"586:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"597:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"582:3:9"},"nodeType":"YulFunctionCall","src":"582:18:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"576:5:9"},"nodeType":"YulFunctionCall","src":"576:25:9"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"566:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"610:39:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"634:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"645:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"630:3:9"},"nodeType":"YulFunctionCall","src":"630:18:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"624:5:9"},"nodeType":"YulFunctionCall","src":"624:25:9"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"614:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"658:28:9","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"676:2:9","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"672:3:9"},"nodeType":"YulFunctionCall","src":"672:10:9"},{"kind":"number","nodeType":"YulLiteral","src":"684:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"668:3:9"},"nodeType":"YulFunctionCall","src":"668:18:9"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"662:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"713:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"722:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"725:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"715:6:9"},"nodeType":"YulFunctionCall","src":"715:12:9"},"nodeType":"YulExpressionStatement","src":"715:12:9"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"701:6:9"},{"name":"_2","nodeType":"YulIdentifier","src":"709:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"698:2:9"},"nodeType":"YulFunctionCall","src":"698:14:9"},"nodeType":"YulIf","src":"695:34:9"},{"nodeType":"YulVariableDeclaration","src":"738:32:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"752:9:9"},{"name":"offset","nodeType":"YulIdentifier","src":"763:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"748:3:9"},"nodeType":"YulFunctionCall","src":"748:22:9"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"742:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"818:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"827:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"830:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"820:6:9"},"nodeType":"YulFunctionCall","src":"820:12:9"},"nodeType":"YulExpressionStatement","src":"820:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"797:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"801:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"793:3:9"},"nodeType":"YulFunctionCall","src":"793:13:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"808:7:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"789:3:9"},"nodeType":"YulFunctionCall","src":"789:27:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"782:6:9"},"nodeType":"YulFunctionCall","src":"782:35:9"},"nodeType":"YulIf","src":"779:55:9"},{"nodeType":"YulVariableDeclaration","src":"843:19:9","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"859:2:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"853:5:9"},"nodeType":"YulFunctionCall","src":"853:9:9"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"847:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"885:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"887:16:9"},"nodeType":"YulFunctionCall","src":"887:18:9"},"nodeType":"YulExpressionStatement","src":"887:18:9"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"877:2:9"},{"name":"_2","nodeType":"YulIdentifier","src":"881:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"874:2:9"},"nodeType":"YulFunctionCall","src":"874:10:9"},"nodeType":"YulIf","src":"871:36:9"},{"nodeType":"YulVariableDeclaration","src":"916:17:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"930:2:9","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"926:3:9"},"nodeType":"YulFunctionCall","src":"926:7:9"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"920:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"942:23:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"962:2:9","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"956:5:9"},"nodeType":"YulFunctionCall","src":"956:9:9"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"946:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"974:71:9","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"996:6:9"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"1020:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"1024:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1016:3:9"},"nodeType":"YulFunctionCall","src":"1016:13:9"},{"name":"_5","nodeType":"YulIdentifier","src":"1031:2:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1012:3:9"},"nodeType":"YulFunctionCall","src":"1012:22:9"},{"kind":"number","nodeType":"YulLiteral","src":"1036:2:9","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1008:3:9"},"nodeType":"YulFunctionCall","src":"1008:31:9"},{"name":"_5","nodeType":"YulIdentifier","src":"1041:2:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1004:3:9"},"nodeType":"YulFunctionCall","src":"1004:40:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"992:3:9"},"nodeType":"YulFunctionCall","src":"992:53:9"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"978:10:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1104:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1106:16:9"},"nodeType":"YulFunctionCall","src":"1106:18:9"},"nodeType":"YulExpressionStatement","src":"1106:18:9"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1063:10:9"},{"name":"_2","nodeType":"YulIdentifier","src":"1075:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1060:2:9"},"nodeType":"YulFunctionCall","src":"1060:18:9"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1083:10:9"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1095:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1080:2:9"},"nodeType":"YulFunctionCall","src":"1080:22:9"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1057:2:9"},"nodeType":"YulFunctionCall","src":"1057:46:9"},"nodeType":"YulIf","src":"1054:72:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1142:2:9","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1146:10:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1135:6:9"},"nodeType":"YulFunctionCall","src":"1135:22:9"},"nodeType":"YulExpressionStatement","src":"1135:22:9"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1173:6:9"},{"name":"_4","nodeType":"YulIdentifier","src":"1181:2:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1166:6:9"},"nodeType":"YulFunctionCall","src":"1166:18:9"},"nodeType":"YulExpressionStatement","src":"1166:18:9"},{"body":{"nodeType":"YulBlock","src":"1230:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1239:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1242:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1232:6:9"},"nodeType":"YulFunctionCall","src":"1232:12:9"},"nodeType":"YulExpressionStatement","src":"1232:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1207:2:9"},{"name":"_4","nodeType":"YulIdentifier","src":"1211:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1203:3:9"},"nodeType":"YulFunctionCall","src":"1203:11:9"},{"name":"_1","nodeType":"YulIdentifier","src":"1216:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1199:3:9"},"nodeType":"YulFunctionCall","src":"1199:20:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1221:7:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1196:2:9"},"nodeType":"YulFunctionCall","src":"1196:33:9"},"nodeType":"YulIf","src":"1193:53:9"},{"nodeType":"YulVariableDeclaration","src":"1255:10:9","value":{"kind":"number","nodeType":"YulLiteral","src":"1264:1:9","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1259:1:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1320:83:9","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1349:6:9"},{"name":"i","nodeType":"YulIdentifier","src":"1357:1:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1345:3:9"},"nodeType":"YulFunctionCall","src":"1345:14:9"},{"name":"_1","nodeType":"YulIdentifier","src":"1361:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1341:3:9"},"nodeType":"YulFunctionCall","src":"1341:23:9"},{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1380:2:9"},{"name":"i","nodeType":"YulIdentifier","src":"1384:1:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1376:3:9"},"nodeType":"YulFunctionCall","src":"1376:10:9"},{"name":"_1","nodeType":"YulIdentifier","src":"1388:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1372:3:9"},"nodeType":"YulFunctionCall","src":"1372:19:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1366:5:9"},"nodeType":"YulFunctionCall","src":"1366:26:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1334:6:9"},"nodeType":"YulFunctionCall","src":"1334:59:9"},"nodeType":"YulExpressionStatement","src":"1334:59:9"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1285:1:9"},{"name":"_4","nodeType":"YulIdentifier","src":"1288:2:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1282:2:9"},"nodeType":"YulFunctionCall","src":"1282:9:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1292:19:9","statements":[{"nodeType":"YulAssignment","src":"1294:15:9","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1303:1:9"},{"name":"_1","nodeType":"YulIdentifier","src":"1306:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1299:3:9"},"nodeType":"YulFunctionCall","src":"1299:10:9"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1294:1:9"}]}]},"pre":{"nodeType":"YulBlock","src":"1278:3:9","statements":[]},"src":"1274:129:9"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1427:6:9"},{"name":"_4","nodeType":"YulIdentifier","src":"1435:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1423:3:9"},"nodeType":"YulFunctionCall","src":"1423:15:9"},{"name":"_1","nodeType":"YulIdentifier","src":"1440:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1419:3:9"},"nodeType":"YulFunctionCall","src":"1419:24:9"},{"kind":"number","nodeType":"YulLiteral","src":"1445:1:9","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1412:6:9"},"nodeType":"YulFunctionCall","src":"1412:35:9"},"nodeType":"YulExpressionStatement","src":"1412:35:9"},{"nodeType":"YulAssignment","src":"1456:16:9","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1466:6:9"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1456:6:9"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_uint256t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"230:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"241:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"253:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"261:6:9","type":""},{"name":"value2","nodeType":"YulTypedName","src":"269:6:9","type":""},{"name":"value3","nodeType":"YulTypedName","src":"277:6:9","type":""}],"src":"146:1332:9"},{"body":{"nodeType":"YulBlock","src":"1538:325:9","statements":[{"nodeType":"YulAssignment","src":"1548:22:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1562:1:9","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1565:4:9"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1558:3:9"},"nodeType":"YulFunctionCall","src":"1558:12:9"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1548:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"1579:38:9","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1609:4:9"},{"kind":"number","nodeType":"YulLiteral","src":"1615:1:9","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1605:3:9"},"nodeType":"YulFunctionCall","src":"1605:12:9"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1583:18:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1656:31:9","statements":[{"nodeType":"YulAssignment","src":"1658:27:9","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1672:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"1680:4:9","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1668:3:9"},"nodeType":"YulFunctionCall","src":"1668:17:9"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1658:6:9"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1636:18:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1629:6:9"},"nodeType":"YulFunctionCall","src":"1629:26:9"},"nodeType":"YulIf","src":"1626:61:9"},{"body":{"nodeType":"YulBlock","src":"1746:111:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1767:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1774:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1779:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1770:3:9"},"nodeType":"YulFunctionCall","src":"1770:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1760:6:9"},"nodeType":"YulFunctionCall","src":"1760:31:9"},"nodeType":"YulExpressionStatement","src":"1760:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1811:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1814:4:9","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1804:6:9"},"nodeType":"YulFunctionCall","src":"1804:15:9"},"nodeType":"YulExpressionStatement","src":"1804:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1839:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1842:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1832:6:9"},"nodeType":"YulFunctionCall","src":"1832:15:9"},"nodeType":"YulExpressionStatement","src":"1832:15:9"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1702:18:9"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1725:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"1733:2:9","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1722:2:9"},"nodeType":"YulFunctionCall","src":"1722:14:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1699:2:9"},"nodeType":"YulFunctionCall","src":"1699:38:9"},"nodeType":"YulIf","src":"1696:161:9"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1518:4:9","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1527:6:9","type":""}],"src":"1483:380:9"},{"body":{"nodeType":"YulBlock","src":"1924:65:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1941:1:9","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"1944:3:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1934:6:9"},"nodeType":"YulFunctionCall","src":"1934:14:9"},"nodeType":"YulExpressionStatement","src":"1934:14:9"},{"nodeType":"YulAssignment","src":"1957:26:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1975:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1978:4:9","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"1965:9:9"},"nodeType":"YulFunctionCall","src":"1965:18:9"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1957:4:9"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1907:3:9","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"1915:4:9","type":""}],"src":"1868:121:9"},{"body":{"nodeType":"YulBlock","src":"2075:464:9","statements":[{"body":{"nodeType":"YulBlock","src":"2108:425:9","statements":[{"nodeType":"YulVariableDeclaration","src":"2122:11:9","value":{"kind":"number","nodeType":"YulLiteral","src":"2132:1:9","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2126:2:9","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2153:2:9"},{"name":"array","nodeType":"YulIdentifier","src":"2157:5:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2146:6:9"},"nodeType":"YulFunctionCall","src":"2146:17:9"},"nodeType":"YulExpressionStatement","src":"2146:17:9"},{"nodeType":"YulVariableDeclaration","src":"2176:31:9","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2198:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"2202:4:9","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2188:9:9"},"nodeType":"YulFunctionCall","src":"2188:19:9"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"2180:4:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2220:57:9","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2243:4:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2253:1:9","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2260:10:9"},{"kind":"number","nodeType":"YulLiteral","src":"2272:2:9","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2256:3:9"},"nodeType":"YulFunctionCall","src":"2256:19:9"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2249:3:9"},"nodeType":"YulFunctionCall","src":"2249:27:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2239:3:9"},"nodeType":"YulFunctionCall","src":"2239:38:9"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"2224:11:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2314:23:9","statements":[{"nodeType":"YulAssignment","src":"2316:19:9","value":{"name":"data","nodeType":"YulIdentifier","src":"2331:4:9"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"2316:11:9"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2296:10:9"},{"kind":"number","nodeType":"YulLiteral","src":"2308:4:9","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2293:2:9"},"nodeType":"YulFunctionCall","src":"2293:20:9"},"nodeType":"YulIf","src":"2290:47:9"},{"nodeType":"YulVariableDeclaration","src":"2350:41:9","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2364:4:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2374:1:9","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2381:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"2386:2:9","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2377:3:9"},"nodeType":"YulFunctionCall","src":"2377:12:9"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2370:3:9"},"nodeType":"YulFunctionCall","src":"2370:20:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2360:3:9"},"nodeType":"YulFunctionCall","src":"2360:31:9"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2354:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2404:24:9","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"2417:11:9"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"2408:5:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2502:21:9","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2511:5:9"},{"name":"_1","nodeType":"YulIdentifier","src":"2518:2:9"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2504:6:9"},"nodeType":"YulFunctionCall","src":"2504:17:9"},"nodeType":"YulExpressionStatement","src":"2504:17:9"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2452:5:9"},{"name":"_2","nodeType":"YulIdentifier","src":"2459:2:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2449:2:9"},"nodeType":"YulFunctionCall","src":"2449:13:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2463:26:9","statements":[{"nodeType":"YulAssignment","src":"2465:22:9","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2478:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"2485:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2474:3:9"},"nodeType":"YulFunctionCall","src":"2474:13:9"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2465:5:9"}]}]},"pre":{"nodeType":"YulBlock","src":"2445:3:9","statements":[]},"src":"2441:82:9"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2091:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"2096:2:9","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2088:2:9"},"nodeType":"YulFunctionCall","src":"2088:11:9"},"nodeType":"YulIf","src":"2085:448:9"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2047:5:9","type":""},{"name":"len","nodeType":"YulTypedName","src":"2054:3:9","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2059:10:9","type":""}],"src":"1994:545:9"},{"body":{"nodeType":"YulBlock","src":"2629:81:9","statements":[{"nodeType":"YulAssignment","src":"2639:65:9","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2654:4:9"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2672:1:9","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"2675:3:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2668:3:9"},"nodeType":"YulFunctionCall","src":"2668:11:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2685:1:9","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2681:3:9"},"nodeType":"YulFunctionCall","src":"2681:6:9"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2664:3:9"},"nodeType":"YulFunctionCall","src":"2664:24:9"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2660:3:9"},"nodeType":"YulFunctionCall","src":"2660:29:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2650:3:9"},"nodeType":"YulFunctionCall","src":"2650:40:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2696:1:9","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"2699:3:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2692:3:9"},"nodeType":"YulFunctionCall","src":"2692:11:9"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2647:2:9"},"nodeType":"YulFunctionCall","src":"2647:57:9"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"2639:4:9"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2606:4:9","type":""},{"name":"len","nodeType":"YulTypedName","src":"2612:3:9","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"2620:4:9","type":""}],"src":"2544:166:9"},{"body":{"nodeType":"YulBlock","src":"2811:1256:9","statements":[{"nodeType":"YulVariableDeclaration","src":"2821:24:9","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2841:3:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2835:5:9"},"nodeType":"YulFunctionCall","src":"2835:10:9"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"2825:6:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2888:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2890:16:9"},"nodeType":"YulFunctionCall","src":"2890:18:9"},"nodeType":"YulExpressionStatement","src":"2890:18:9"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2860:6:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2876:2:9","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2880:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2872:3:9"},"nodeType":"YulFunctionCall","src":"2872:10:9"},{"kind":"number","nodeType":"YulLiteral","src":"2884:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2868:3:9"},"nodeType":"YulFunctionCall","src":"2868:18:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2857:2:9"},"nodeType":"YulFunctionCall","src":"2857:30:9"},"nodeType":"YulIf","src":"2854:56:9"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2963:4:9"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3001:4:9"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"2995:5:9"},"nodeType":"YulFunctionCall","src":"2995:11:9"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"2969:25:9"},"nodeType":"YulFunctionCall","src":"2969:38:9"},{"name":"newLen","nodeType":"YulIdentifier","src":"3009:6:9"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"2919:43:9"},"nodeType":"YulFunctionCall","src":"2919:97:9"},"nodeType":"YulExpressionStatement","src":"2919:97:9"},{"nodeType":"YulVariableDeclaration","src":"3025:18:9","value":{"kind":"number","nodeType":"YulLiteral","src":"3042:1:9","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"3029:9:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3052:23:9","value":{"kind":"number","nodeType":"YulLiteral","src":"3071:4:9","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"3056:11:9","type":""}]},{"nodeType":"YulAssignment","src":"3084:24:9","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3097:11:9"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3084:9:9"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"3154:656:9","statements":[{"nodeType":"YulVariableDeclaration","src":"3168:35:9","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3187:6:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3199:2:9","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3195:3:9"},"nodeType":"YulFunctionCall","src":"3195:7:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3183:3:9"},"nodeType":"YulFunctionCall","src":"3183:20:9"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"3172:7:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3216:49:9","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3260:4:9"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"3230:29:9"},"nodeType":"YulFunctionCall","src":"3230:35:9"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"3220:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3278:10:9","value":{"kind":"number","nodeType":"YulLiteral","src":"3287:1:9","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3282:1:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"3365:172:9","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3390:6:9"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3408:3:9"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3413:9:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3404:3:9"},"nodeType":"YulFunctionCall","src":"3404:19:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3398:5:9"},"nodeType":"YulFunctionCall","src":"3398:26:9"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3383:6:9"},"nodeType":"YulFunctionCall","src":"3383:42:9"},"nodeType":"YulExpressionStatement","src":"3383:42:9"},{"nodeType":"YulAssignment","src":"3442:24:9","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3456:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"3464:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3452:3:9"},"nodeType":"YulFunctionCall","src":"3452:14:9"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3442:6:9"}]},{"nodeType":"YulAssignment","src":"3483:40:9","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3500:9:9"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3511:11:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3496:3:9"},"nodeType":"YulFunctionCall","src":"3496:27:9"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3483:9:9"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3312:1:9"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"3315:7:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3309:2:9"},"nodeType":"YulFunctionCall","src":"3309:14:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3324:28:9","statements":[{"nodeType":"YulAssignment","src":"3326:24:9","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3335:1:9"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3338:11:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3331:3:9"},"nodeType":"YulFunctionCall","src":"3331:19:9"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3326:1:9"}]}]},"pre":{"nodeType":"YulBlock","src":"3305:3:9","statements":[]},"src":"3301:236:9"},{"body":{"nodeType":"YulBlock","src":"3585:166:9","statements":[{"nodeType":"YulVariableDeclaration","src":"3603:43:9","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3630:3:9"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3635:9:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3626:3:9"},"nodeType":"YulFunctionCall","src":"3626:19:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3620:5:9"},"nodeType":"YulFunctionCall","src":"3620:26:9"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"3607:9:9","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3670:6:9"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"3682:9:9"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3709:1:9","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"3712:6:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3705:3:9"},"nodeType":"YulFunctionCall","src":"3705:14:9"},{"kind":"number","nodeType":"YulLiteral","src":"3721:3:9","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3701:3:9"},"nodeType":"YulFunctionCall","src":"3701:24:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3731:1:9","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3727:3:9"},"nodeType":"YulFunctionCall","src":"3727:6:9"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3697:3:9"},"nodeType":"YulFunctionCall","src":"3697:37:9"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3693:3:9"},"nodeType":"YulFunctionCall","src":"3693:42:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3678:3:9"},"nodeType":"YulFunctionCall","src":"3678:58:9"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3663:6:9"},"nodeType":"YulFunctionCall","src":"3663:74:9"},"nodeType":"YulExpressionStatement","src":"3663:74:9"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"3556:7:9"},{"name":"newLen","nodeType":"YulIdentifier","src":"3565:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3553:2:9"},"nodeType":"YulFunctionCall","src":"3553:19:9"},"nodeType":"YulIf","src":"3550:201:9"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3771:4:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3785:1:9","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"3788:6:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3781:3:9"},"nodeType":"YulFunctionCall","src":"3781:14:9"},{"kind":"number","nodeType":"YulLiteral","src":"3797:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3777:3:9"},"nodeType":"YulFunctionCall","src":"3777:22:9"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3764:6:9"},"nodeType":"YulFunctionCall","src":"3764:36:9"},"nodeType":"YulExpressionStatement","src":"3764:36:9"}]},"nodeType":"YulCase","src":"3147:663:9","value":{"kind":"number","nodeType":"YulLiteral","src":"3152:1:9","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"3827:234:9","statements":[{"nodeType":"YulVariableDeclaration","src":"3841:14:9","value":{"kind":"number","nodeType":"YulLiteral","src":"3854:1:9","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3845:5:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"3890:67:9","statements":[{"nodeType":"YulAssignment","src":"3908:35:9","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3927:3:9"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3932:9:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3923:3:9"},"nodeType":"YulFunctionCall","src":"3923:19:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3917:5:9"},"nodeType":"YulFunctionCall","src":"3917:26:9"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3908:5:9"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"3871:6:9"},"nodeType":"YulIf","src":"3868:89:9"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3977:4:9"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4036:5:9"},{"name":"newLen","nodeType":"YulIdentifier","src":"4043:6:9"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"3983:52:9"},"nodeType":"YulFunctionCall","src":"3983:67:9"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3970:6:9"},"nodeType":"YulFunctionCall","src":"3970:81:9"},"nodeType":"YulExpressionStatement","src":"3970:81:9"}]},"nodeType":"YulCase","src":"3819:242:9","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3127:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"3135:2:9","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3124:2:9"},"nodeType":"YulFunctionCall","src":"3124:14:9"},"nodeType":"YulSwitch","src":"3117:944:9"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"2796:4:9","type":""},{"name":"src","nodeType":"YulTypedName","src":"2802:3:9","type":""}],"src":"2715:1352:9"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        let _1 := 32\n        value1 := mload(add(headStart, _1))\n        value2 := mload(add(headStart, 64))\n        let offset := mload(add(headStart, 96))\n        let _2 := sub(shl(64, 1), 1)\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := mload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_4, 0x1f), _5), 63), _5))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _4)\n        if gt(add(add(_3, _4), _1), dataEnd) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _4) { i := add(i, _1) }\n        {\n            mstore(add(add(memPtr, i), _1), mload(add(add(_3, i), _1)))\n        }\n        mstore(add(add(memPtr, _4), _1), 0)\n        value3 := memPtr\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":9,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a06040523480156200001157600080fd5b506040516200244b3803806200244b833981016040819052620000349162000145565b60405180604001604052806011815260200170426173655061696e74205469636b65747360781b8152506040518060400160405280600381526020016210941560ea1b81525081600290816200008b9190620002de565b5060036200009a8282620002de565b5050600160005550620000ad33620000dd565b6001600160a01b038416608052600b839055600a8290556009620000d28282620002de565b5050505050620003aa565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156200015c57600080fd5b84516001600160a01b03811681146200017457600080fd5b602086810151604088015160608901519397509095509350906001600160401b0380821115620001a357600080fd5b818801915088601f830112620001b857600080fd5b815181811115620001cd57620001cd6200012f565b604051601f8201601f19908116603f01168101908382118183101715620001f857620001f86200012f565b816040528281528b868487010111156200021157600080fd5b600093505b8284101562000235578484018601518185018701529285019262000216565b600086848301015280965050505050505092959194509250565b600181811c908216806200026457607f821691505b6020821081036200028557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002d957600081815260208120601f850160051c81016020861015620002b45750805b601f850160051c820191505b81811015620002d557828155600101620002c0565b5050505b505050565b81516001600160401b03811115620002fa57620002fa6200012f565b62000312816200030b84546200024f565b846200028b565b602080601f8311600181146200034a5760008415620003315750858301515b600019600386901b1c1916600185901b178555620002d5565b600085815260208120601f198616915b828110156200037b578886015182559484019460019091019084016200035a565b50858210156200039a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051612062620003e9600039600081816101d8015281816107cb015281816108c401528181610a4a01528181610b890152610d9601526120626000f3fe6080604052600436106101c15760003560e01c806370a08231116100f7578063a2fb117511610095578063e985e9c511610064578063e985e9c5146104c3578063f02137c8146104e3578063f2fde38b14610503578063f834eeca1461052357600080fd5b8063a2fb11751461044d578063b88d4fde1461047a578063c87b56dd1461048d578063e6664cd1146104ad57600080fd5b806388f57767116100d157806388f57767146103e75780638da5cb5b146103fa57806395d89b4114610418578063a22cb4651461042d57600080fd5b806370a0823114610382578063715018a6146103a2578063815bbd83146103b757600080fd5b806315487ad71161016457806323b872dd1161013e57806323b872dd14610327578063242284f11461033a57806342842e0e1461034f5780636352211e1461036257600080fd5b806315487ad7146102d757806317c50bdf146102f757806318160ddd1461030a57600080fd5b8063081812fc116101a0578063081812fc14610269578063095ea7b3146102895780631209b1f61461029e578063135d088d146102c257600080fd5b806258fce1146101c657806301ffc9a71461021757806306fdde0314610247575b600080fd5b3480156101d257600080fd5b506101fa7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561022357600080fd5b50610237610232366004611943565b610543565b604051901515815260200161020e565b34801561025357600080fd5b5061025c610595565b60405161020e91906119b0565b34801561027557600080fd5b506101fa6102843660046119c3565b610627565b61029c6102973660046119f1565b61066b565b005b3480156102aa57600080fd5b506102b4600a5481565b60405190815260200161020e565b3480156102ce57600080fd5b5061025c61070b565b3480156102e357600080fd5b5061029c6102f23660046119c3565b610799565b61029c610305366004611a1d565b610a46565b34801561031657600080fd5b5060015460005403600019016102b4565b61029c610335366004611a8f565b610bfa565b34801561034657600080fd5b5061029c610d92565b61029c61035d366004611a8f565b610f38565b34801561036e57600080fd5b506101fa61037d3660046119c3565b610f58565b34801561038e57600080fd5b506102b461039d366004611ad0565b610f63565b3480156103ae57600080fd5b5061029c610fb2565b3480156103c357600080fd5b506102376103d23660046119c3565b600d6020526000908152604090205460ff1681565b61029c6103f53660046119f1565b610fc6565b34801561040657600080fd5b506008546001600160a01b03166101fa565b34801561042457600080fd5b5061025c611071565b34801561043957600080fd5b5061029c610448366004611aed565b611080565b34801561045957600080fd5b506102b46104683660046119c3565b600c6020526000908152604090205481565b61029c610488366004611b41565b6110ec565b34801561049957600080fd5b5061025c6104a83660046119c3565b611136565b3480156104b957600080fd5b506102b4600b5481565b3480156104cf57600080fd5b506102376104de366004611c21565b6111bd565b3480156104ef57600080fd5b5061029c6104fe3660046119c3565b6111eb565b34801561050f57600080fd5b5061029c61051e366004611ad0565b611231565b34801561052f57600080fd5b5061029c61053e366004611ad0565b6112af565b60006301ffc9a760e01b6001600160e01b03198316148061057457506380ac58cd60e01b6001600160e01b03198316145b8061058f5750635b5e139f60e01b6001600160e01b03198316145b92915050565b6060600280546105a490611c4f565b80601f01602080910402602001604051908101604052809291908181526020018280546105d090611c4f565b801561061d5780601f106105f25761010080835404028352916020019161061d565b820191906000526020600020905b81548152906001019060200180831161060057829003601f168201915b5050505050905090565b60006106328261132f565b61064f576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b600061067682610f58565b9050336001600160a01b038216146106af5761069281336111bd565b6106af576040516367d9dca160e11b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6009805461071890611c4f565b80601f016020809104026020016040519081016040528092919081815260200182805461074490611c4f565b80156107915780601f1061076657610100808354040283529160200191610791565b820191906000526020600020905b81548152906001019060200180831161077457829003601f168201915b505050505081565b6000818152600d602052604090205460ff16156107c957604051630c8d9eab60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b74e452b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084b9190611c89565b811061086a57604051630b046f8960e21b815260040160405180910390fd5b6040805160018082528183019092526000916020808301908036833701905050905081816000815181106108a0576108a0611ca2565b6020908102919091010152604051638abe099160e01b815247906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638abe0991906108f9908590600401611cb8565b600060405180830381600087803b15801561091357600080fd5b505af1158015610927573d6000803e3d6000fd5b504792506000915061093b90508383611d12565b6000868152600c60205260408082205490516331a9108f60e11b815260048101829052929350913090636352211e90602401602060405180830381865afa15801561098a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ae9190611d25565b90506000816001600160a01b03168460405160006040518083038185875af1925050503d80600081146109fd576040519150601f19603f3d011682016040523d82523d6000602084013e610a02565b606091505b5050905080610a2457604051632684a07960e01b815260040160405180910390fd5b50505060009485525050600d602052505060409020805460ff19166001179055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b74e452b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aca9190611c89565b6000818152600c6020526040908190205490516331a9108f60e11b815260048101829052919250903090636352211e90602401602060405180830381865afa158015610b1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3e9190611d25565b6001600160a01b0316336001600160a01b031614610b6f576040516330c6392160e11b815260040160405180910390fd5b600b54604051632c1e6ef360e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163b079bbcc91610bc291869189908990600401611d42565b600060405180830381600087803b158015610bdc57600080fd5b505af1158015610bf0573d6000803e3d6000fd5b5050505050505050565b6000610c0582611364565b9050836001600160a01b0316816001600160a01b031614610c385760405162a1148160e81b815260040160405180910390fd5b60008281526006602052604090208054338082146001600160a01b03881690911417610c8557610c6886336111bd565b610c8557604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b038516610cac57604051633a954ecd60e21b815260040160405180910390fd5b8015610cb757600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040812091909155600160e11b84169003610d4957600184016000818152600460205260408120549003610d47576000548114610d475760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b74e452b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e169190611c89565b6000818152600c602052604090205490915015610e465760405163097e1d9b60e01b815260040160405180910390fd5b604080514460208201529081018290526000906060016040516020818303038152906040528051906020012060001c90506000306001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb9190611c89565b610ee59083611d95565b6000848152600c602090815260409182902083905581518381529081018690529192507fa1e3d3bd6bcaf2ce1bc718cef231fcb8c9976e46b16713a3291ae4a66f79ade6910160405180910390a1505050565b610f53838383604051806020016040528060008152506110ec565b505050565b600061058f82611364565b60006001600160a01b038216610f8c576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b610fba6113da565b610fc46000611434565b565b80600003610fe757604051630c3cab0960e11b815260040160405180910390fd5b80600a54610ff59190611da9565b341461101457604051638b6ebb4d60e01b815260040160405180910390fd5b61101e3382611486565b600a54604080516001600160a01b038516815260208101849052908101919091527f7d58f5ddf17a7f65d89554f5d8144ae1dc788046467927063c090f92ed1145dc906060015b60405180910390a15050565b6060600380546105a490611c4f565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6110f7848484610bfa565b6001600160a01b0383163b156111305761111384848484611584565b611130576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b60606111418261132f565b61115e57604051634a1850bf60e11b815260040160405180910390fd5b60006111698361166f565b600960405160200161117c929190611dc0565b604051602081830303815290604052905061119681611702565b6040516020016111a69190611f26565b604051602081830303815290604052915050919050565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6111f36113da565b600a80549082905560408051828152602081018490527fd4c5e06b1ae097ba02372652a7adaa6e4a8e00be527497a3ad0ebc3f761ef3fb9101611065565b6112396113da565b6001600160a01b0381166112a35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6112ac81611434565b50565b6112b76113da565b6000816001600160a01b03164760405160006040518083038185875af1925050503d8060008114611304576040519150601f19603f3d011682016040523d82523d6000602084013e611309565b606091505b505090508061132b57604051632684a07960e01b815260040160405180910390fd5b5050565b600081600111158015611343575060005482105b801561058f575050600090815260046020526040902054600160e01b161590565b600081806001116113c1576000548110156113c15760008181526004602052604081205490600160e01b821690036113bf575b806000036113b8575060001901600081815260046020526040902054611397565b9392505050565b505b604051636f96cda160e11b815260040160405180910390fd5b6008546001600160a01b03163314610fc45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161129a565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054908290036114ab5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b03831660008181526005602090815260408083208054680100000000000000018802019055848352600490915281206001851460e11b4260a01b178317905582840190839083907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4600183015b81811461155a57808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600101611522565b508160000361157b57604051622e076360e81b815260040160405180910390fd5b60005550505050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906115b9903390899088908890600401611f6b565b6020604051808303816000875af19250505080156115f4575060408051601f3d908101601f191682019092526115f191810190611fa8565b60015b611652573d808015611622576040519150601f19603f3d011682016040523d82523d6000602084013e611627565b606091505b50805160000361164a576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b6060600061167c83611855565b600101905060008167ffffffffffffffff81111561169c5761169c611b2b565b6040519080825280601f01601f1916602001820160405280156116c6576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846116d057509392505050565b6060815160000361172157505060408051602081019091526000815290565b6000604051806060016040528060408152602001611fed60409139905060006003845160026117509190611fc5565b61175a9190611fd8565b611765906004611da9565b67ffffffffffffffff81111561177d5761177d611b2b565b6040519080825280601f01601f1916602001820160405280156117a7576020820181803683370190505b509050600182016020820185865187015b80821015611813576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453506001830192506117b8565b505060038651066001811461182f57600281146118425761184a565b603d6001830353603d600283035361184a565b603d60018303535b509195945050505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106118945772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106118c0576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106118de57662386f26fc10000830492506010015b6305f5e10083106118f6576305f5e100830492506008015b612710831061190a57612710830492506004015b6064831061191c576064830492506002015b600a831061058f5760010192915050565b6001600160e01b0319811681146112ac57600080fd5b60006020828403121561195557600080fd5b81356113b88161192d565b60005b8381101561197b578181015183820152602001611963565b50506000910152565b6000815180845261199c816020860160208601611960565b601f01601f19169290920160200192915050565b6020815260006113b86020830184611984565b6000602082840312156119d557600080fd5b5035919050565b6001600160a01b03811681146112ac57600080fd5b60008060408385031215611a0457600080fd5b8235611a0f816119dc565b946020939093013593505050565b60008060208385031215611a3057600080fd5b823567ffffffffffffffff80821115611a4857600080fd5b818501915085601f830112611a5c57600080fd5b813581811115611a6b57600080fd5b866020828501011115611a7d57600080fd5b60209290920196919550909350505050565b600080600060608486031215611aa457600080fd5b8335611aaf816119dc565b92506020840135611abf816119dc565b929592945050506040919091013590565b600060208284031215611ae257600080fd5b81356113b8816119dc565b60008060408385031215611b0057600080fd5b8235611b0b816119dc565b915060208301358015158114611b2057600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611b5757600080fd5b8435611b62816119dc565b93506020850135611b72816119dc565b925060408501359150606085013567ffffffffffffffff80821115611b9657600080fd5b818701915087601f830112611baa57600080fd5b813581811115611bbc57611bbc611b2b565b604051601f8201601f19908116603f01168101908382118183101715611be457611be4611b2b565b816040528281528a6020848701011115611bfd57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215611c3457600080fd5b8235611c3f816119dc565b91506020830135611b20816119dc565b600181811c90821680611c6357607f821691505b602082108103611c8357634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215611c9b57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6020808252825182820181905260009190848201906040850190845b81811015611cf057835183529284019291840191600101611cd4565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561058f5761058f611cfc565b600060208284031215611d3757600080fd5b81516113b8816119dc565b84815283602082015260606040820152816060820152818360808301376000818301608090810191909152601f909201601f191601019392505050565b634e487b7160e01b600052601260045260246000fd5b600082611da457611da4611d7f565b500690565b808202811582820484141761058f5761058f611cfc565b607b60f81b8152600060017f226e616d65223a2022426173655061696e74205469636b6574200000000000008184015284516020611e0482601b8701838a01611960565b61088b60f21b601b9286019283018190526f113232b9b1b934b83a34b7b7111d101160811b601d8401526f253ab9ba1030903a34b1b5b2ba17171760811b602d840152603d830152691134b6b0b3b2911d101160b11b603f830152855460499060009080861c86821680611e7957607f821691505b8582108103611e9657634e487b7160e01b84526022600452602484fd5b808015611eaa5760018114611ec357611ef4565b60ff198416888701528215158302880186019450611ef4565b60008c81526020902060005b84811015611eea5781548a8201890152908a01908801611ecf565b5050858389010194505b50505050611f19611f0c82601160f91b815260010190565b607d60f81b815260010190565b9998505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251611f5e81601d850160208701611960565b91909101601d0192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611f9e90830184611984565b9695505050505050565b600060208284031215611fba57600080fd5b81516113b88161192d565b8082018082111561058f5761058f611cfc565b600082611fe757611fe7611d7f565b50049056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220cac06bdfb2020a204147e7b935cb2543c9ae8a99c85f0f338e3c1b95c228463264736f6c63430008130033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x244B CODESIZE SUB DUP1 PUSH3 0x244B DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x145 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x11 DUP2 MSTORE PUSH1 0x20 ADD PUSH17 0x426173655061696E74205469636B657473 PUSH1 0x78 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x109415 PUSH1 0xEA SHL DUP2 MSTORE POP DUP2 PUSH1 0x2 SWAP1 DUP2 PUSH3 0x8B SWAP2 SWAP1 PUSH3 0x2DE JUMP JUMPDEST POP PUSH1 0x3 PUSH3 0x9A DUP3 DUP3 PUSH3 0x2DE JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP PUSH3 0xAD CALLER PUSH3 0xDD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x80 MSTORE PUSH1 0xB DUP4 SWAP1 SSTORE PUSH1 0xA DUP3 SWAP1 SSTORE PUSH1 0x9 PUSH3 0xD2 DUP3 DUP3 PUSH3 0x2DE JUMP JUMPDEST POP POP POP POP POP PUSH3 0x3AA JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x15C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x174 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP7 DUP2 ADD MLOAD PUSH1 0x40 DUP9 ADD MLOAD PUSH1 0x60 DUP10 ADD MLOAD SWAP4 SWAP8 POP SWAP1 SWAP6 POP SWAP4 POP SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x1A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x1B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH3 0x1CD JUMPI PUSH3 0x1CD PUSH3 0x12F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x1F8 JUMPI PUSH3 0x1F8 PUSH3 0x12F JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP12 DUP7 DUP5 DUP8 ADD ADD GT ISZERO PUSH3 0x211 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP4 POP JUMPDEST DUP3 DUP5 LT ISZERO PUSH3 0x235 JUMPI DUP5 DUP5 ADD DUP7 ADD MLOAD DUP2 DUP6 ADD DUP8 ADD MSTORE SWAP3 DUP6 ADD SWAP3 PUSH3 0x216 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x264 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x285 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x2D9 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x2B4 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x2D5 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x2C0 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x2FA JUMPI PUSH3 0x2FA PUSH3 0x12F JUMP JUMPDEST PUSH3 0x312 DUP2 PUSH3 0x30B DUP5 SLOAD PUSH3 0x24F JUMP JUMPDEST DUP5 PUSH3 0x28B JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x34A JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x331 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x2D5 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x37B JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x35A JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x39A JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x2062 PUSH3 0x3E9 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x1D8 ADD MSTORE DUP2 DUP2 PUSH2 0x7CB ADD MSTORE DUP2 DUP2 PUSH2 0x8C4 ADD MSTORE DUP2 DUP2 PUSH2 0xA4A ADD MSTORE DUP2 DUP2 PUSH2 0xB89 ADD MSTORE PUSH2 0xD96 ADD MSTORE PUSH2 0x2062 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C1 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xA2FB1175 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xE985E9C5 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x4C3 JUMPI DUP1 PUSH4 0xF02137C8 EQ PUSH2 0x4E3 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x503 JUMPI DUP1 PUSH4 0xF834EECA EQ PUSH2 0x523 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA2FB1175 EQ PUSH2 0x44D JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x47A JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x48D JUMPI DUP1 PUSH4 0xE6664CD1 EQ PUSH2 0x4AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x88F57767 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x88F57767 EQ PUSH2 0x3E7 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3FA JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x418 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x42D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x382 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3A2 JUMPI DUP1 PUSH4 0x815BBD83 EQ PUSH2 0x3B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x15487AD7 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x23B872DD GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x327 JUMPI DUP1 PUSH4 0x242284F1 EQ PUSH2 0x33A JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x34F JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x15487AD7 EQ PUSH2 0x2D7 JUMPI DUP1 PUSH4 0x17C50BDF EQ PUSH2 0x2F7 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x30A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x81812FC GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x269 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0x1209B1F6 EQ PUSH2 0x29E JUMPI DUP1 PUSH4 0x135D088D EQ PUSH2 0x2C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x58FCE1 EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x217 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x247 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FA PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x223 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x232 CALLDATASIZE PUSH1 0x4 PUSH2 0x1943 JUMP JUMPDEST PUSH2 0x543 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x20E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x253 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25C PUSH2 0x595 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20E SWAP2 SWAP1 PUSH2 0x19B0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FA PUSH2 0x284 CALLDATASIZE PUSH1 0x4 PUSH2 0x19C3 JUMP JUMPDEST PUSH2 0x627 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x19F1 JUMP JUMPDEST PUSH2 0x66B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x20E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25C PUSH2 0x70B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29C PUSH2 0x2F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x19C3 JUMP JUMPDEST PUSH2 0x799 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x305 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A1D JUMP JUMPDEST PUSH2 0xA46 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB PUSH1 0x0 NOT ADD PUSH2 0x2B4 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x335 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A8F JUMP JUMPDEST PUSH2 0xBFA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29C PUSH2 0xD92 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x35D CALLDATASIZE PUSH1 0x4 PUSH2 0x1A8F JUMP JUMPDEST PUSH2 0xF38 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FA PUSH2 0x37D CALLDATASIZE PUSH1 0x4 PUSH2 0x19C3 JUMP JUMPDEST PUSH2 0xF58 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH2 0x39D CALLDATASIZE PUSH1 0x4 PUSH2 0x1AD0 JUMP JUMPDEST PUSH2 0xF63 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29C PUSH2 0xFB2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x3D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x19C3 JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x3F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x19F1 JUMP JUMPDEST PUSH2 0xFC6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x406 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x424 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25C PUSH2 0x1071 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x439 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29C PUSH2 0x448 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AED JUMP JUMPDEST PUSH2 0x1080 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x459 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH2 0x468 CALLDATASIZE PUSH1 0x4 PUSH2 0x19C3 JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x488 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B41 JUMP JUMPDEST PUSH2 0x10EC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x499 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25C PUSH2 0x4A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x19C3 JUMP JUMPDEST PUSH2 0x1136 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x4DE CALLDATASIZE PUSH1 0x4 PUSH2 0x1C21 JUMP JUMPDEST PUSH2 0x11BD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29C PUSH2 0x4FE CALLDATASIZE PUSH1 0x4 PUSH2 0x19C3 JUMP JUMPDEST PUSH2 0x11EB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29C PUSH2 0x51E CALLDATASIZE PUSH1 0x4 PUSH2 0x1AD0 JUMP JUMPDEST PUSH2 0x1231 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29C PUSH2 0x53E CALLDATASIZE PUSH1 0x4 PUSH2 0x1AD0 JUMP JUMPDEST PUSH2 0x12AF JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ DUP1 PUSH2 0x574 JUMPI POP PUSH4 0x80AC58CD PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST DUP1 PUSH2 0x58F JUMPI POP PUSH4 0x5B5E139F PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x5A4 SWAP1 PUSH2 0x1C4F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5D0 SWAP1 PUSH2 0x1C4F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x61D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5F2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x61D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x600 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x632 DUP3 PUSH2 0x132F JUMP JUMPDEST PUSH2 0x64F JUMPI PUSH1 0x40 MLOAD PUSH4 0x33D1C039 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x676 DUP3 PUSH2 0xF58 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ PUSH2 0x6AF JUMPI PUSH2 0x692 DUP2 CALLER PUSH2 0x11BD JUMP JUMPDEST PUSH2 0x6AF JUMPI PUSH1 0x40 MLOAD PUSH4 0x67D9DCA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH2 0x718 SWAP1 PUSH2 0x1C4F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x744 SWAP1 PUSH2 0x1C4F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x791 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x766 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x791 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x774 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x7C9 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC8D9EAB PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB74E452B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x827 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x84B SWAP2 SWAP1 PUSH2 0x1C89 JUMP JUMPDEST DUP2 LT PUSH2 0x86A JUMPI PUSH1 0x40 MLOAD PUSH4 0xB046F89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x8A0 JUMPI PUSH2 0x8A0 PUSH2 0x1CA2 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x8ABE0991 PUSH1 0xE0 SHL DUP2 MSTORE SELFBALANCE SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x8ABE0991 SWAP1 PUSH2 0x8F9 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1CB8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x913 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x927 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SELFBALANCE SWAP3 POP PUSH1 0x0 SWAP2 POP PUSH2 0x93B SWAP1 POP DUP4 DUP4 PUSH2 0x1D12 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE SWAP3 SWAP4 POP SWAP2 ADDRESS SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x98A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9AE SWAP2 SWAP1 PUSH2 0x1D25 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9FD JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA02 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xA24 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2684A079 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP PUSH1 0x0 SWAP5 DUP6 MSTORE POP POP PUSH1 0xD PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB74E452B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xAA6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xACA SWAP2 SWAP1 PUSH2 0x1C89 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE SWAP2 SWAP3 POP SWAP1 ADDRESS SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB1A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB3E SWAP2 SWAP1 PUSH2 0x1D25 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xB6F JUMPI PUSH1 0x40 MLOAD PUSH4 0x30C63921 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xB SLOAD PUSH1 0x40 MLOAD PUSH4 0x2C1E6EF3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0xB079BBCC SWAP2 PUSH2 0xBC2 SWAP2 DUP7 SWAP2 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x1D42 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBF0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC05 DUP3 PUSH2 0x1364 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC38 JUMPI PUSH1 0x40 MLOAD PUSH3 0xA11481 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD CALLER DUP1 DUP3 EQ PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 SWAP2 EQ OR PUSH2 0xC85 JUMPI PUSH2 0xC68 DUP7 CALLER PUSH2 0x11BD JUMP JUMPDEST PUSH2 0xC85 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CE44B5F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0xCAC JUMPI PUSH1 0x40 MLOAD PUSH4 0x3A954ECD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0xCB7 JUMPI PUSH1 0x0 DUP3 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP2 DUP8 AND DUP1 DUP3 MSTORE SWAP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE TIMESTAMP PUSH1 0xA0 SHL OR PUSH1 0x1 PUSH1 0xE1 SHL OR PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0xE1 SHL DUP5 AND SWAP1 SUB PUSH2 0xD49 JUMPI PUSH1 0x1 DUP5 ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SUB PUSH2 0xD47 JUMPI PUSH1 0x0 SLOAD DUP2 EQ PUSH2 0xD47 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE JUMPDEST POP JUMPDEST DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB74E452B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDF2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE16 SWAP2 SWAP1 PUSH2 0x1C89 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xE46 JUMPI PUSH1 0x40 MLOAD PUSH4 0x97E1D9B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PREVRANDAO PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEB7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEDB SWAP2 SWAP1 PUSH2 0x1C89 JUMP JUMPDEST PUSH2 0xEE5 SWAP1 DUP4 PUSH2 0x1D95 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE DUP2 MLOAD DUP4 DUP2 MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH32 0xA1E3D3BD6BCAF2CE1BC718CEF231FCB8C9976E46B16713A3291AE4A66F79ADE6 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0xF53 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x10EC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58F DUP3 PUSH2 0x1364 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xF8C JUMPI PUSH1 0x40 MLOAD PUSH4 0x23D3AD81 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0xFBA PUSH2 0x13DA JUMP JUMPDEST PUSH2 0xFC4 PUSH1 0x0 PUSH2 0x1434 JUMP JUMPDEST JUMP JUMPDEST DUP1 PUSH1 0x0 SUB PUSH2 0xFE7 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC3CAB09 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xA SLOAD PUSH2 0xFF5 SWAP2 SWAP1 PUSH2 0x1DA9 JUMP JUMPDEST CALLVALUE EQ PUSH2 0x1014 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8B6EBB4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x101E CALLER DUP3 PUSH2 0x1486 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x7D58F5DDF17A7F65D89554F5D8144AE1DC788046467927063C090F92ED1145DC SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x5A4 SWAP1 PUSH2 0x1C4F JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x10F7 DUP5 DUP5 DUP5 PUSH2 0xBFA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x1130 JUMPI PUSH2 0x1113 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1584 JUMP JUMPDEST PUSH2 0x1130 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1141 DUP3 PUSH2 0x132F JUMP JUMPDEST PUSH2 0x115E JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1850BF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1169 DUP4 PUSH2 0x166F JUMP JUMPDEST PUSH1 0x9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x117C SWAP3 SWAP2 SWAP1 PUSH2 0x1DC0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0x1196 DUP2 PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x11A6 SWAP2 SWAP1 PUSH2 0x1F26 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x11F3 PUSH2 0x13DA JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD SWAP1 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0xD4C5E06B1AE097BA02372652A7ADAA6E4A8E00BE527497A3AD0EBC3F761EF3FB SWAP2 ADD PUSH2 0x1065 JUMP JUMPDEST PUSH2 0x1239 PUSH2 0x13DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x12A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x12AC DUP2 PUSH2 0x1434 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x12B7 PUSH2 0x13DA JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SELFBALANCE PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1304 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1309 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x132B JUMPI PUSH1 0x40 MLOAD PUSH4 0x2684A079 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 GT ISZERO DUP1 ISZERO PUSH2 0x1343 JUMPI POP PUSH1 0x0 SLOAD DUP3 LT JUMPDEST DUP1 ISZERO PUSH2 0x58F JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xE0 SHL AND ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x1 GT PUSH2 0x13C1 JUMPI PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x13C1 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 PUSH1 0x1 PUSH1 0xE0 SHL DUP3 AND SWAP1 SUB PUSH2 0x13BF JUMPI JUMPDEST DUP1 PUSH1 0x0 SUB PUSH2 0x13B8 JUMPI POP PUSH1 0x0 NOT ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1397 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6F96CDA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xFC4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x129A JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 DUP3 SWAP1 SUB PUSH2 0x14AB JUMPI PUSH1 0x40 MLOAD PUSH4 0xB562E8DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH9 0x10000000000000001 DUP9 MUL ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x4 SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x1 DUP6 EQ PUSH1 0xE1 SHL TIMESTAMP PUSH1 0xA0 SHL OR DUP4 OR SWAP1 SSTORE DUP3 DUP5 ADD SWAP1 DUP4 SWAP1 DUP4 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP2 DUP1 LOG4 PUSH1 0x1 DUP4 ADD JUMPDEST DUP2 DUP2 EQ PUSH2 0x155A JUMPI DUP1 DUP4 PUSH1 0x0 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x0 DUP1 LOG4 PUSH1 0x1 ADD PUSH2 0x1522 JUMP JUMPDEST POP DUP2 PUSH1 0x0 SUB PUSH2 0x157B JUMPI PUSH1 0x40 MLOAD PUSH3 0x2E0763 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x15B9 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1F6B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x15F4 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x15F1 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1FA8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1652 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1622 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1627 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x164A JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x167C DUP4 PUSH2 0x1855 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x169C JUMPI PUSH2 0x169C PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x16C6 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x16D0 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x0 SUB PUSH2 0x1721 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FED PUSH1 0x40 SWAP2 CODECOPY SWAP1 POP PUSH1 0x0 PUSH1 0x3 DUP5 MLOAD PUSH1 0x2 PUSH2 0x1750 SWAP2 SWAP1 PUSH2 0x1FC5 JUMP JUMPDEST PUSH2 0x175A SWAP2 SWAP1 PUSH2 0x1FD8 JUMP JUMPDEST PUSH2 0x1765 SWAP1 PUSH1 0x4 PUSH2 0x1DA9 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x177D JUMPI PUSH2 0x177D PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x17A7 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x1 DUP3 ADD PUSH1 0x20 DUP3 ADD DUP6 DUP7 MLOAD DUP8 ADD JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x1813 JUMPI PUSH1 0x3 DUP3 ADD SWAP2 POP DUP2 MLOAD PUSH1 0x3F DUP2 PUSH1 0x12 SHR AND DUP6 ADD MLOAD DUP5 MSTORE8 PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH1 0x3F DUP2 PUSH1 0xC SHR AND DUP6 ADD MLOAD DUP5 MSTORE8 PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH1 0x3F DUP2 PUSH1 0x6 SHR AND DUP6 ADD MLOAD DUP5 MSTORE8 PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH1 0x3F DUP2 AND DUP6 ADD MLOAD DUP5 MSTORE8 POP PUSH1 0x1 DUP4 ADD SWAP3 POP PUSH2 0x17B8 JUMP JUMPDEST POP POP PUSH1 0x3 DUP7 MLOAD MOD PUSH1 0x1 DUP2 EQ PUSH2 0x182F JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x1842 JUMPI PUSH2 0x184A JUMP JUMPDEST PUSH1 0x3D PUSH1 0x1 DUP4 SUB MSTORE8 PUSH1 0x3D PUSH1 0x2 DUP4 SUB MSTORE8 PUSH2 0x184A JUMP JUMPDEST PUSH1 0x3D PUSH1 0x1 DUP4 SUB MSTORE8 JUMPDEST POP SWAP2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1894 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x18C0 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x18DE JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x18F6 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x190A JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x191C JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x58F JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x12AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1955 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x13B8 DUP2 PUSH2 0x192D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x197B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1963 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x199C DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1960 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x13B8 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1984 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x12AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1A0F DUP2 PUSH2 0x19DC JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1A48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1A6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1A7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1AA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1AAF DUP2 PUSH2 0x19DC JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1ABF DUP2 PUSH2 0x19DC JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x13B8 DUP2 PUSH2 0x19DC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1B0B DUP2 PUSH2 0x19DC JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1B20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1B57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1B62 DUP2 PUSH2 0x19DC JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1B72 DUP2 PUSH2 0x19DC JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1B96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1BAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1BBC JUMPI PUSH2 0x1BBC PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1BE4 JUMPI PUSH2 0x1BE4 PUSH2 0x1B2B JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1BFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1C3F DUP2 PUSH2 0x19DC JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1B20 DUP2 PUSH2 0x19DC JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1C63 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1C83 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1CF0 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1CD4 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x58F JUMPI PUSH2 0x58F PUSH2 0x1CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x13B8 DUP2 PUSH2 0x19DC JUMP JUMPDEST DUP5 DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE DUP2 PUSH1 0x60 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x80 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x80 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1DA4 JUMPI PUSH2 0x1DA4 PUSH2 0x1D7F JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x58F JUMPI PUSH2 0x58F PUSH2 0x1CFC JUMP JUMPDEST PUSH1 0x7B PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH32 0x226E616D65223A2022426173655061696E74205469636B657420000000000000 DUP2 DUP5 ADD MSTORE DUP5 MLOAD PUSH1 0x20 PUSH2 0x1E04 DUP3 PUSH1 0x1B DUP8 ADD DUP4 DUP11 ADD PUSH2 0x1960 JUMP JUMPDEST PUSH2 0x88B PUSH1 0xF2 SHL PUSH1 0x1B SWAP3 DUP7 ADD SWAP3 DUP4 ADD DUP2 SWAP1 MSTORE PUSH16 0x113232B9B1B934B83A34B7B7111D1011 PUSH1 0x81 SHL PUSH1 0x1D DUP5 ADD MSTORE PUSH16 0x253AB9BA1030903A34B1B5B2BA171717 PUSH1 0x81 SHL PUSH1 0x2D DUP5 ADD MSTORE PUSH1 0x3D DUP4 ADD MSTORE PUSH10 0x1134B6B0B3B2911D1011 PUSH1 0xB1 SHL PUSH1 0x3F DUP4 ADD MSTORE DUP6 SLOAD PUSH1 0x49 SWAP1 PUSH1 0x0 SWAP1 DUP1 DUP7 SHR DUP7 DUP3 AND DUP1 PUSH2 0x1E79 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST DUP6 DUP3 LT DUP2 SUB PUSH2 0x1E96 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST DUP1 DUP1 ISZERO PUSH2 0x1EAA JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x1EC3 JUMPI PUSH2 0x1EF4 JUMP JUMPDEST PUSH1 0xFF NOT DUP5 AND DUP9 DUP8 ADD MSTORE DUP3 ISZERO ISZERO DUP4 MUL DUP9 ADD DUP7 ADD SWAP5 POP PUSH2 0x1EF4 JUMP JUMPDEST PUSH1 0x0 DUP13 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1EEA JUMPI DUP2 SLOAD DUP11 DUP3 ADD DUP10 ADD MSTORE SWAP1 DUP11 ADD SWAP1 DUP9 ADD PUSH2 0x1ECF JUMP JUMPDEST POP POP DUP6 DUP4 DUP10 ADD ADD SWAP5 POP JUMPDEST POP POP POP POP PUSH2 0x1F19 PUSH2 0x1F0C DUP3 PUSH1 0x11 PUSH1 0xF9 SHL DUP2 MSTORE PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x7D PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x646174613A6170706C69636174696F6E2F6A736F6E3B6261736536342C000000 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x1F5E DUP2 PUSH1 0x1D DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1960 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1D ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1F9E SWAP1 DUP4 ADD DUP5 PUSH2 0x1984 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1FBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x13B8 DUP2 PUSH2 0x192D JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x58F JUMPI PUSH2 0x58F PUSH2 0x1CFC JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1FE7 JUMPI PUSH2 0x1FE7 PUSH2 0x1D7F JUMP JUMPDEST POP DIV SWAP1 JUMP INVALID COINBASE TIMESTAMP NUMBER PREVRANDAO GASLIMIT CHAINID SELFBALANCE BASEFEE 0x49 0x4A 0x4B 0x4C 0x4D 0x4E 0x4F POP MLOAD MSTORE MSTORE8 SLOAD SSTORE JUMP JUMPI PC MSIZE GAS PUSH2 0x6263 PUSH5 0x6566676869 PUSH11 0x6B6C6D6E6F707172737475 PUSH23 0x7778797A303132333435363738392B2FA2646970667358 0x22 SLT KECCAK256 0xCA 0xC0 PUSH12 0xDFB2020A204147E7B935CB25 NUMBER 0xC9 0xAE DUP11 SWAP10 0xC8 0x5F 0xF CALLER DUP15 EXTCODECOPY SHL SWAP6 0xC2 0x28 CHAINID ORIGIN PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"912:5159:6:-:0;;;1929:332;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4946:154:7;;;;;;;;;;;;;-1:-1:-1;;;4946:154:7;;;;;;;;;;;;;;;;-1:-1:-1;;;4946:154:7;;;5020:5;5012;:13;;;;;;:::i;:::-;-1:-1:-1;5035:7:7;:17;5045:7;5035;:17;:::i;:::-;-1:-1:-1;;5381:1:6;5062:13:7;:31;-1:-1:-1;936:32:0;734:10:2;936:18:0;:32::i;:::-;-1:-1:-1;;;;;2120:40:6;::::1;;::::0;2170:7:::1;:18:::0;;;2198:11:::1;:26:::0;;;2234:8:::1;:20;2245:9:::0;2234:8;:20:::1;:::i;:::-;;1929:332:::0;;;;912:5159;;2426:187:0;2518:6;;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;;2566:40;;2518:6;;;2534:17;2518:6;;2566:40;;2499:16;;2566:40;2489:124;2426:187;:::o;14:127:9:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:1332;253:6;261;269;277;330:3;318:9;309:7;305:23;301:33;298:53;;;347:1;344;337:12;298:53;373:16;;-1:-1:-1;;;;;418:31:9;;408:42;;398:70;;464:1;461;454:12;398:70;511:2;538:18;;;532:25;597:2;582:18;;576:25;645:2;630:18;;624:25;487:5;;-1:-1:-1;532:25:9;;-1:-1:-1;576:25:9;-1:-1:-1;511:2:9;-1:-1:-1;;;;;698:14:9;;;695:34;;;725:1;722;715:12;695:34;763:6;752:9;748:22;738:32;;808:7;801:4;797:2;793:13;789:27;779:55;;830:1;827;820:12;779:55;859:2;853:9;881:2;877;874:10;871:36;;;887:18;;:::i;:::-;962:2;956:9;930:2;1016:13;;-1:-1:-1;;1012:22:9;;;1036:2;1008:31;1004:40;992:53;;;1060:18;;;1080:22;;;1057:46;1054:72;;;1106:18;;:::i;:::-;1146:10;1142:2;1135:22;1181:2;1173:6;1166:18;1221:7;1216:2;1211;1207;1203:11;1199:20;1196:33;1193:53;;;1242:1;1239;1232:12;1193:53;1264:1;1255:10;;1274:129;1288:2;1285:1;1282:9;1274:129;;;1376:10;;;1372:19;;1366:26;1345:14;;;1341:23;;1334:59;1299:10;;;;1274:129;;;1445:1;1440:2;1435;1427:6;1423:15;1419:24;1412:35;1466:6;1456:16;;;;;;;;146:1332;;;;;;;:::o;1483:380::-;1562:1;1558:12;;;;1605;;;1626:61;;1680:4;1672:6;1668:17;1658:27;;1626:61;1733:2;1725:6;1722:14;1702:18;1699:38;1696:161;;1779:10;1774:3;1770:20;1767:1;1760:31;1814:4;1811:1;1804:15;1842:4;1839:1;1832:15;1696:161;;1483:380;;;:::o;1994:545::-;2096:2;2091:3;2088:11;2085:448;;;2132:1;2157:5;2153:2;2146:17;2202:4;2198:2;2188:19;2272:2;2260:10;2256:19;2253:1;2249:27;2243:4;2239:38;2308:4;2296:10;2293:20;2290:47;;;-1:-1:-1;2331:4:9;2290:47;2386:2;2381:3;2377:12;2374:1;2370:20;2364:4;2360:31;2350:41;;2441:82;2459:2;2452:5;2449:13;2441:82;;;2504:17;;;2485:1;2474:13;2441:82;;;2445:3;;;2085:448;1994:545;;;:::o;2715:1352::-;2835:10;;-1:-1:-1;;;;;2857:30:9;;2854:56;;;2890:18;;:::i;:::-;2919:97;3009:6;2969:38;3001:4;2995:11;2969:38;:::i;:::-;2963:4;2919:97;:::i;:::-;3071:4;;3135:2;3124:14;;3152:1;3147:663;;;;3854:1;3871:6;3868:89;;;-1:-1:-1;3923:19:9;;;3917:26;3868:89;-1:-1:-1;;2672:1:9;2668:11;;;2664:24;2660:29;2650:40;2696:1;2692:11;;;2647:57;3970:81;;3117:944;;3147:663;1941:1;1934:14;;;1978:4;1965:18;;-1:-1:-1;;3183:20:9;;;3301:236;3315:7;3312:1;3309:14;3301:236;;;3404:19;;;3398:26;3383:42;;3496:27;;;;3464:1;3452:14;;;;3331:19;;3301:236;;;3305:3;3565:6;3556:7;3553:19;3550:201;;;3626:19;;;3620:26;-1:-1:-1;;3709:1:9;3705:14;;;3721:3;3701:24;3697:37;3693:42;3678:58;3663:74;;3550:201;-1:-1:-1;;;;;3797:1:9;3781:14;;;3777:22;3764:36;;-1:-1:-1;2715:1352:9:o;:::-;912:5159:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfers_2862":{"entryPoint":null,"id":2862,"parameterSlots":4,"returnSlots":0},"@_beforeTokenTransfers_2849":{"entryPoint":null,"id":2849,"parameterSlots":4,"returnSlots":0},"@_checkContractOnERC721Received_2917":{"entryPoint":5508,"id":2917,"parameterSlots":4,"returnSlots":1},"@_checkOwner_54":{"entryPoint":5082,"id":54,"parameterSlots":0,"returnSlots":0},"@_exists_2601":{"entryPoint":4911,"id":2601,"parameterSlots":1,"returnSlots":1},"@_extraData_3423":{"entryPoint":null,"id":3423,"parameterSlots":3,"returnSlots":1},"@_getApprovedSlotAndAddress_2634":{"entryPoint":null,"id":2634,"parameterSlots":1,"returnSlots":2},"@_isSenderApprovedOrOwner_2615":{"entryPoint":null,"id":2615,"parameterSlots":3,"returnSlots":1},"@_mint_3013":{"entryPoint":5254,"id":3013,"parameterSlots":2,"returnSlots":0},"@_msgSenderERC721A_3466":{"entryPoint":null,"id":3466,"parameterSlots":0,"returnSlots":1},"@_msgSender_171":{"entryPoint":null,"id":171,"parameterSlots":0,"returnSlots":1},"@_nextExtraData_3456":{"entryPoint":null,"id":3456,"parameterSlots":3,"returnSlots":1},"@_nextInitializedFlag_2463":{"entryPoint":null,"id":2463,"parameterSlots":1,"returnSlots":1},"@_packOwnershipData_2453":{"entryPoint":null,"id":2453,"parameterSlots":2,"returnSlots":1},"@_packedOwnershipOf_2387":{"entryPoint":4964,"id":2387,"parameterSlots":1,"returnSlots":1},"@_startTokenId_1803":{"entryPoint":null,"id":1803,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":5172,"id":111,"parameterSlots":1,"returnSlots":0},"@approve_2508":{"entryPoint":1643,"id":2508,"parameterSlots":2,"returnSlots":0},"@balanceOf_2074":{"entryPoint":3939,"id":2074,"parameterSlots":1,"returnSlots":1},"@basePaint_1443":{"entryPoint":null,"id":1443,"parameterSlots":0,"returnSlots":0},"@brushId_1449":{"entryPoint":null,"id":1449,"parameterSlots":0,"returnSlots":0},"@buyTickets_1604":{"entryPoint":4038,"id":1604,"parameterSlots":2,"returnSlots":0},"@claimedEarnings_1459":{"entryPoint":null,"id":1459,"parameterSlots":0,"returnSlots":0},"@encode_158":{"entryPoint":5890,"id":158,"parameterSlots":1,"returnSlots":1},"@getApproved_2531":{"entryPoint":1575,"id":2531,"parameterSlots":1,"returnSlots":1},"@imageURI_1445":{"entryPoint":1803,"id":1445,"parameterSlots":0,"returnSlots":0},"@isApprovedForAll_2575":{"entryPoint":4541,"id":2575,"parameterSlots":2,"returnSlots":1},"@log10_1121":{"entryPoint":6229,"id":1121,"parameterSlots":1,"returnSlots":1},"@name_2197":{"entryPoint":1429,"id":2197,"parameterSlots":0,"returnSlots":1},"@ownerOf_2279":{"entryPoint":3928,"id":2279,"parameterSlots":1,"returnSlots":1},"@owner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@paint_1642":{"entryPoint":2630,"id":1642,"parameterSlots":2,"returnSlots":0},"@renounceOwnership_68":{"entryPoint":4018,"id":68,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_2798":{"entryPoint":3896,"id":2798,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_2836":{"entryPoint":4332,"id":2836,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_2557":{"entryPoint":4224,"id":2557,"parameterSlots":2,"returnSlots":0},"@startRaffle_1566":{"entryPoint":3474,"id":1566,"parameterSlots":0,"returnSlots":0},"@supportsInterface_2187":{"entryPoint":1347,"id":2187,"parameterSlots":1,"returnSlots":1},"@symbol_2207":{"entryPoint":4209,"id":2207,"parameterSlots":0,"returnSlots":1},"@ticketPrice_1447":{"entryPoint":null,"id":1447,"parameterSlots":0,"returnSlots":0},"@toString_248":{"entryPoint":5743,"id":248,"parameterSlots":1,"returnSlots":1},"@tokenURI_1793":{"entryPoint":4406,"id":1793,"parameterSlots":1,"returnSlots":1},"@totalSupply_2026":{"entryPoint":null,"id":2026,"parameterSlots":0,"returnSlots":1},"@transferFrom_2779":{"entryPoint":3066,"id":2779,"parameterSlots":3,"returnSlots":0},"@transferOwnership_91":{"entryPoint":4657,"id":91,"parameterSlots":1,"returnSlots":0},"@updateTicketPrice_1825":{"entryPoint":4587,"id":1825,"parameterSlots":1,"returnSlots":0},"@winners_1454":{"entryPoint":null,"id":1454,"parameterSlots":0,"returnSlots":0},"@withdawEarnings_1744":{"entryPoint":1945,"id":1744,"parameterSlots":1,"returnSlots":0},"@withdrawTicketSales_1853":{"entryPoint":4783,"id":1853,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address":{"entryPoint":6864,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":7461,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":7201,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":6799,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":6977,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":6893,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":6641,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":6467,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":8104,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_calldata_ptr":{"entryPoint":6685,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256":{"entryPoint":6595,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":7305,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":6532,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_stringliteral_6e9f":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_stringliteral_8e2f":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_a91eddf639b0b768929589c1a9fd21dcb0107199bdd82e55c5348018a1572f52_t_stringliteral_d42a11b37d35a55052d289dce8be6fb4df3139e056ba2326837c95a847ca2be1_t_string_memory_ptr_t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb_t_stringliteral_63efc49e26c2a0691fbd118ad4ace9a69fa64a27d6ecfb0468e1c404f7b79c0a_t_stringliteral_8cdd418261319b1e50a13c3d613e3de6caa6af5d9770d631b7820c9cd330b60c_t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb_t_stringliteral_dee71bd900939e5251fa52ed0e7fadcfe3990bd7a5ea546147c85d1b972c64b6_t_string_storage_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0_t_stringliteral_8e2ffa389f3a6ded42d759b3377ac0d928e6a268d143bcc9517093d10c843bff__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7616,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_bccab2d885f86fda81bfd84dd4248d31f8073b473d187111d36536db073076fa_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7974,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_packed_t_uint256_t_uint256__to_t_uint256_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":8043,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":7352,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_BasePaint_$1416__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6576,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_bytes_calldata_ptr__to_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":7490,"id":null,"parameterSlots":5,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":8133,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":8152,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":7593,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":7442,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":6496,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":7247,"id":null,"parameterSlots":1,"returnSlots":1},"mod_t_uint256":{"entryPoint":7573,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":7420,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":7551,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":7330,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6955,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":6620,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":6445,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:15432:9","statements":[{"nodeType":"YulBlock","src":"6:3:9","statements":[]},{"body":{"nodeType":"YulBlock","src":"133:102:9","statements":[{"nodeType":"YulAssignment","src":"143:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"155:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"166:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"151:3:9"},"nodeType":"YulFunctionCall","src":"151:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"143:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"185:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"200:6:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"216:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"221:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"212:3:9"},"nodeType":"YulFunctionCall","src":"212:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"225:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"208:3:9"},"nodeType":"YulFunctionCall","src":"208:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"196:3:9"},"nodeType":"YulFunctionCall","src":"196:32:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"178:6:9"},"nodeType":"YulFunctionCall","src":"178:51:9"},"nodeType":"YulExpressionStatement","src":"178:51:9"}]},"name":"abi_encode_tuple_t_contract$_BasePaint_$1416__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"102:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"113:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"124:4:9","type":""}],"src":"14:221:9"},{"body":{"nodeType":"YulBlock","src":"284:87:9","statements":[{"body":{"nodeType":"YulBlock","src":"349:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"358:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"361:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"351:6:9"},"nodeType":"YulFunctionCall","src":"351:12:9"},"nodeType":"YulExpressionStatement","src":"351:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"307:5:9"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"318:5:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"329:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"334:10:9","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"325:3:9"},"nodeType":"YulFunctionCall","src":"325:20:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"314:3:9"},"nodeType":"YulFunctionCall","src":"314:32:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"304:2:9"},"nodeType":"YulFunctionCall","src":"304:43:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"297:6:9"},"nodeType":"YulFunctionCall","src":"297:51:9"},"nodeType":"YulIf","src":"294:71:9"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"273:5:9","type":""}],"src":"240:131:9"},{"body":{"nodeType":"YulBlock","src":"445:176:9","statements":[{"body":{"nodeType":"YulBlock","src":"491:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"500:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"503:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"493:6:9"},"nodeType":"YulFunctionCall","src":"493:12:9"},"nodeType":"YulExpressionStatement","src":"493:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"466:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"475:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"462:3:9"},"nodeType":"YulFunctionCall","src":"462:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"487:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"458:3:9"},"nodeType":"YulFunctionCall","src":"458:32:9"},"nodeType":"YulIf","src":"455:52:9"},{"nodeType":"YulVariableDeclaration","src":"516:36:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"542:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"529:12:9"},"nodeType":"YulFunctionCall","src":"529:23:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"520:5:9","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"585:5:9"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"561:23:9"},"nodeType":"YulFunctionCall","src":"561:30:9"},"nodeType":"YulExpressionStatement","src":"561:30:9"},{"nodeType":"YulAssignment","src":"600:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"610:5:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"600:6:9"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"411:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"422:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"434:6:9","type":""}],"src":"376:245:9"},{"body":{"nodeType":"YulBlock","src":"721:92:9","statements":[{"nodeType":"YulAssignment","src":"731:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"743:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"754:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"739:3:9"},"nodeType":"YulFunctionCall","src":"739:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"731:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"773:9:9"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"798:6:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"791:6:9"},"nodeType":"YulFunctionCall","src":"791:14:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"784:6:9"},"nodeType":"YulFunctionCall","src":"784:22:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"766:6:9"},"nodeType":"YulFunctionCall","src":"766:41:9"},"nodeType":"YulExpressionStatement","src":"766:41:9"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"690:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"701:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"712:4:9","type":""}],"src":"626:187:9"},{"body":{"nodeType":"YulBlock","src":"884:184:9","statements":[{"nodeType":"YulVariableDeclaration","src":"894:10:9","value":{"kind":"number","nodeType":"YulLiteral","src":"903:1:9","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"898:1:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"963:63:9","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"988:3:9"},{"name":"i","nodeType":"YulIdentifier","src":"993:1:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"984:3:9"},"nodeType":"YulFunctionCall","src":"984:11:9"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1007:3:9"},{"name":"i","nodeType":"YulIdentifier","src":"1012:1:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1003:3:9"},"nodeType":"YulFunctionCall","src":"1003:11:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"997:5:9"},"nodeType":"YulFunctionCall","src":"997:18:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"977:6:9"},"nodeType":"YulFunctionCall","src":"977:39:9"},"nodeType":"YulExpressionStatement","src":"977:39:9"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"924:1:9"},{"name":"length","nodeType":"YulIdentifier","src":"927:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"921:2:9"},"nodeType":"YulFunctionCall","src":"921:13:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"935:19:9","statements":[{"nodeType":"YulAssignment","src":"937:15:9","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"946:1:9"},{"kind":"number","nodeType":"YulLiteral","src":"949:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"942:3:9"},"nodeType":"YulFunctionCall","src":"942:10:9"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"937:1:9"}]}]},"pre":{"nodeType":"YulBlock","src":"917:3:9","statements":[]},"src":"913:113:9"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1046:3:9"},{"name":"length","nodeType":"YulIdentifier","src":"1051:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1042:3:9"},"nodeType":"YulFunctionCall","src":"1042:16:9"},{"kind":"number","nodeType":"YulLiteral","src":"1060:1:9","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1035:6:9"},"nodeType":"YulFunctionCall","src":"1035:27:9"},"nodeType":"YulExpressionStatement","src":"1035:27:9"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"862:3:9","type":""},{"name":"dst","nodeType":"YulTypedName","src":"867:3:9","type":""},{"name":"length","nodeType":"YulTypedName","src":"872:6:9","type":""}],"src":"818:250:9"},{"body":{"nodeType":"YulBlock","src":"1123:221:9","statements":[{"nodeType":"YulVariableDeclaration","src":"1133:26:9","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1153:5:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1147:5:9"},"nodeType":"YulFunctionCall","src":"1147:12:9"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1137:6:9","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1175:3:9"},{"name":"length","nodeType":"YulIdentifier","src":"1180:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1168:6:9"},"nodeType":"YulFunctionCall","src":"1168:19:9"},"nodeType":"YulExpressionStatement","src":"1168:19:9"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1235:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"1242:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1231:3:9"},"nodeType":"YulFunctionCall","src":"1231:16:9"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1253:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"1258:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1249:3:9"},"nodeType":"YulFunctionCall","src":"1249:14:9"},{"name":"length","nodeType":"YulIdentifier","src":"1265:6:9"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"1196:34:9"},"nodeType":"YulFunctionCall","src":"1196:76:9"},"nodeType":"YulExpressionStatement","src":"1196:76:9"},{"nodeType":"YulAssignment","src":"1281:57:9","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1296:3:9"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1309:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"1317:2:9","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1305:3:9"},"nodeType":"YulFunctionCall","src":"1305:15:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1326:2:9","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1322:3:9"},"nodeType":"YulFunctionCall","src":"1322:7:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1301:3:9"},"nodeType":"YulFunctionCall","src":"1301:29:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1292:3:9"},"nodeType":"YulFunctionCall","src":"1292:39:9"},{"kind":"number","nodeType":"YulLiteral","src":"1333:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1288:3:9"},"nodeType":"YulFunctionCall","src":"1288:50:9"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1281:3:9"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1100:5:9","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1107:3:9","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1115:3:9","type":""}],"src":"1073:271:9"},{"body":{"nodeType":"YulBlock","src":"1470:99:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1487:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1498:2:9","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1480:6:9"},"nodeType":"YulFunctionCall","src":"1480:21:9"},"nodeType":"YulExpressionStatement","src":"1480:21:9"},{"nodeType":"YulAssignment","src":"1510:53:9","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1536:6:9"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1548:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1559:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1544:3:9"},"nodeType":"YulFunctionCall","src":"1544:18:9"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1518:17:9"},"nodeType":"YulFunctionCall","src":"1518:45:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1510:4:9"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1439:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1450:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1461:4:9","type":""}],"src":"1349:220:9"},{"body":{"nodeType":"YulBlock","src":"1644:110:9","statements":[{"body":{"nodeType":"YulBlock","src":"1690:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1699:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1702:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1692:6:9"},"nodeType":"YulFunctionCall","src":"1692:12:9"},"nodeType":"YulExpressionStatement","src":"1692:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1665:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"1674:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1661:3:9"},"nodeType":"YulFunctionCall","src":"1661:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"1686:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1657:3:9"},"nodeType":"YulFunctionCall","src":"1657:32:9"},"nodeType":"YulIf","src":"1654:52:9"},{"nodeType":"YulAssignment","src":"1715:33:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1738:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1725:12:9"},"nodeType":"YulFunctionCall","src":"1725:23:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1715:6:9"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1610:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1621:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1633:6:9","type":""}],"src":"1574:180:9"},{"body":{"nodeType":"YulBlock","src":"1860:102:9","statements":[{"nodeType":"YulAssignment","src":"1870:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1882:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1893:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1878:3:9"},"nodeType":"YulFunctionCall","src":"1878:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1870:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1912:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1927:6:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1943:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1948:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1939:3:9"},"nodeType":"YulFunctionCall","src":"1939:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"1952:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1935:3:9"},"nodeType":"YulFunctionCall","src":"1935:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1923:3:9"},"nodeType":"YulFunctionCall","src":"1923:32:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1905:6:9"},"nodeType":"YulFunctionCall","src":"1905:51:9"},"nodeType":"YulExpressionStatement","src":"1905:51:9"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1829:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1840:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1851:4:9","type":""}],"src":"1759:203:9"},{"body":{"nodeType":"YulBlock","src":"2012:86:9","statements":[{"body":{"nodeType":"YulBlock","src":"2076:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2085:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2088:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2078:6:9"},"nodeType":"YulFunctionCall","src":"2078:12:9"},"nodeType":"YulExpressionStatement","src":"2078:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2035:5:9"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2046:5:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2061:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2066:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2057:3:9"},"nodeType":"YulFunctionCall","src":"2057:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"2070:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2053:3:9"},"nodeType":"YulFunctionCall","src":"2053:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2042:3:9"},"nodeType":"YulFunctionCall","src":"2042:31:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2032:2:9"},"nodeType":"YulFunctionCall","src":"2032:42:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2025:6:9"},"nodeType":"YulFunctionCall","src":"2025:50:9"},"nodeType":"YulIf","src":"2022:70:9"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2001:5:9","type":""}],"src":"1967:131:9"},{"body":{"nodeType":"YulBlock","src":"2190:228:9","statements":[{"body":{"nodeType":"YulBlock","src":"2236:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2245:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2248:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2238:6:9"},"nodeType":"YulFunctionCall","src":"2238:12:9"},"nodeType":"YulExpressionStatement","src":"2238:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2211:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"2220:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2207:3:9"},"nodeType":"YulFunctionCall","src":"2207:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"2232:2:9","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2203:3:9"},"nodeType":"YulFunctionCall","src":"2203:32:9"},"nodeType":"YulIf","src":"2200:52:9"},{"nodeType":"YulVariableDeclaration","src":"2261:36:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2287:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2274:12:9"},"nodeType":"YulFunctionCall","src":"2274:23:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2265:5:9","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2331:5:9"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2306:24:9"},"nodeType":"YulFunctionCall","src":"2306:31:9"},"nodeType":"YulExpressionStatement","src":"2306:31:9"},{"nodeType":"YulAssignment","src":"2346:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"2356:5:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2346:6:9"}]},{"nodeType":"YulAssignment","src":"2370:42:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2397:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2408:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2393:3:9"},"nodeType":"YulFunctionCall","src":"2393:18:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2380:12:9"},"nodeType":"YulFunctionCall","src":"2380:32:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2370:6:9"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2148:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2159:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2171:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2179:6:9","type":""}],"src":"2103:315:9"},{"body":{"nodeType":"YulBlock","src":"2524:76:9","statements":[{"nodeType":"YulAssignment","src":"2534:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2546:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2557:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2542:3:9"},"nodeType":"YulFunctionCall","src":"2542:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2534:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2576:9:9"},{"name":"value0","nodeType":"YulIdentifier","src":"2587:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2569:6:9"},"nodeType":"YulFunctionCall","src":"2569:25:9"},"nodeType":"YulExpressionStatement","src":"2569:25:9"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2493:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2504:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2515:4:9","type":""}],"src":"2423:177:9"},{"body":{"nodeType":"YulBlock","src":"2694:502:9","statements":[{"body":{"nodeType":"YulBlock","src":"2740:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2749:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2752:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2742:6:9"},"nodeType":"YulFunctionCall","src":"2742:12:9"},"nodeType":"YulExpressionStatement","src":"2742:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2715:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"2724:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2711:3:9"},"nodeType":"YulFunctionCall","src":"2711:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"2736:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2707:3:9"},"nodeType":"YulFunctionCall","src":"2707:32:9"},"nodeType":"YulIf","src":"2704:52:9"},{"nodeType":"YulVariableDeclaration","src":"2765:37:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2792:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2779:12:9"},"nodeType":"YulFunctionCall","src":"2779:23:9"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2769:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2811:28:9","value":{"kind":"number","nodeType":"YulLiteral","src":"2821:18:9","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2815:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2866:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2875:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2878:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2868:6:9"},"nodeType":"YulFunctionCall","src":"2868:12:9"},"nodeType":"YulExpressionStatement","src":"2868:12:9"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2854:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"2862:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2851:2:9"},"nodeType":"YulFunctionCall","src":"2851:14:9"},"nodeType":"YulIf","src":"2848:34:9"},{"nodeType":"YulVariableDeclaration","src":"2891:32:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2905:9:9"},{"name":"offset","nodeType":"YulIdentifier","src":"2916:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2901:3:9"},"nodeType":"YulFunctionCall","src":"2901:22:9"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2895:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2971:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2980:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2983:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2973:6:9"},"nodeType":"YulFunctionCall","src":"2973:12:9"},"nodeType":"YulExpressionStatement","src":"2973:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2950:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"2954:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2946:3:9"},"nodeType":"YulFunctionCall","src":"2946:13:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2961:7:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2942:3:9"},"nodeType":"YulFunctionCall","src":"2942:27:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2935:6:9"},"nodeType":"YulFunctionCall","src":"2935:35:9"},"nodeType":"YulIf","src":"2932:55:9"},{"nodeType":"YulVariableDeclaration","src":"2996:30:9","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3023:2:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3010:12:9"},"nodeType":"YulFunctionCall","src":"3010:16:9"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3000:6:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"3053:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3062:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3065:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3055:6:9"},"nodeType":"YulFunctionCall","src":"3055:12:9"},"nodeType":"YulExpressionStatement","src":"3055:12:9"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3041:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"3049:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3038:2:9"},"nodeType":"YulFunctionCall","src":"3038:14:9"},"nodeType":"YulIf","src":"3035:34:9"},{"body":{"nodeType":"YulBlock","src":"3119:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3128:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3131:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3121:6:9"},"nodeType":"YulFunctionCall","src":"3121:12:9"},"nodeType":"YulExpressionStatement","src":"3121:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3092:2:9"},{"name":"length","nodeType":"YulIdentifier","src":"3096:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3088:3:9"},"nodeType":"YulFunctionCall","src":"3088:15:9"},{"kind":"number","nodeType":"YulLiteral","src":"3105:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3084:3:9"},"nodeType":"YulFunctionCall","src":"3084:24:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3110:7:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3081:2:9"},"nodeType":"YulFunctionCall","src":"3081:37:9"},"nodeType":"YulIf","src":"3078:57:9"},{"nodeType":"YulAssignment","src":"3144:21:9","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3158:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"3162:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3154:3:9"},"nodeType":"YulFunctionCall","src":"3154:11:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3144:6:9"}]},{"nodeType":"YulAssignment","src":"3174:16:9","value":{"name":"length","nodeType":"YulIdentifier","src":"3184:6:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3174:6:9"}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2652:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2663:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2675:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2683:6:9","type":""}],"src":"2605:591:9"},{"body":{"nodeType":"YulBlock","src":"3305:352:9","statements":[{"body":{"nodeType":"YulBlock","src":"3351:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3360:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3363:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3353:6:9"},"nodeType":"YulFunctionCall","src":"3353:12:9"},"nodeType":"YulExpressionStatement","src":"3353:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3326:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"3335:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3322:3:9"},"nodeType":"YulFunctionCall","src":"3322:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"3347:2:9","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3318:3:9"},"nodeType":"YulFunctionCall","src":"3318:32:9"},"nodeType":"YulIf","src":"3315:52:9"},{"nodeType":"YulVariableDeclaration","src":"3376:36:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3402:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3389:12:9"},"nodeType":"YulFunctionCall","src":"3389:23:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3380:5:9","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3446:5:9"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"3421:24:9"},"nodeType":"YulFunctionCall","src":"3421:31:9"},"nodeType":"YulExpressionStatement","src":"3421:31:9"},{"nodeType":"YulAssignment","src":"3461:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"3471:5:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3461:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"3485:47:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3517:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"3528:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3513:3:9"},"nodeType":"YulFunctionCall","src":"3513:18:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3500:12:9"},"nodeType":"YulFunctionCall","src":"3500:32:9"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"3489:7:9","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"3566:7:9"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"3541:24:9"},"nodeType":"YulFunctionCall","src":"3541:33:9"},"nodeType":"YulExpressionStatement","src":"3541:33:9"},{"nodeType":"YulAssignment","src":"3583:17:9","value":{"name":"value_1","nodeType":"YulIdentifier","src":"3593:7:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3583:6:9"}]},{"nodeType":"YulAssignment","src":"3609:42:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3636:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"3647:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3632:3:9"},"nodeType":"YulFunctionCall","src":"3632:18:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3619:12:9"},"nodeType":"YulFunctionCall","src":"3619:32:9"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3609:6:9"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3255:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3266:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3278:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3286:6:9","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3294:6:9","type":""}],"src":"3201:456:9"},{"body":{"nodeType":"YulBlock","src":"3732:177:9","statements":[{"body":{"nodeType":"YulBlock","src":"3778:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3787:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3790:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3780:6:9"},"nodeType":"YulFunctionCall","src":"3780:12:9"},"nodeType":"YulExpressionStatement","src":"3780:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3753:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"3762:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3749:3:9"},"nodeType":"YulFunctionCall","src":"3749:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"3774:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3745:3:9"},"nodeType":"YulFunctionCall","src":"3745:32:9"},"nodeType":"YulIf","src":"3742:52:9"},{"nodeType":"YulVariableDeclaration","src":"3803:36:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3829:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3816:12:9"},"nodeType":"YulFunctionCall","src":"3816:23:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3807:5:9","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3873:5:9"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"3848:24:9"},"nodeType":"YulFunctionCall","src":"3848:31:9"},"nodeType":"YulExpressionStatement","src":"3848:31:9"},{"nodeType":"YulAssignment","src":"3888:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"3898:5:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3888:6:9"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3698:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3709:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3721:6:9","type":""}],"src":"3662:247:9"},{"body":{"nodeType":"YulBlock","src":"3998:332:9","statements":[{"body":{"nodeType":"YulBlock","src":"4044:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4053:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4056:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4046:6:9"},"nodeType":"YulFunctionCall","src":"4046:12:9"},"nodeType":"YulExpressionStatement","src":"4046:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4019:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"4028:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4015:3:9"},"nodeType":"YulFunctionCall","src":"4015:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"4040:2:9","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4011:3:9"},"nodeType":"YulFunctionCall","src":"4011:32:9"},"nodeType":"YulIf","src":"4008:52:9"},{"nodeType":"YulVariableDeclaration","src":"4069:36:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4095:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4082:12:9"},"nodeType":"YulFunctionCall","src":"4082:23:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4073:5:9","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4139:5:9"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4114:24:9"},"nodeType":"YulFunctionCall","src":"4114:31:9"},"nodeType":"YulExpressionStatement","src":"4114:31:9"},{"nodeType":"YulAssignment","src":"4154:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"4164:5:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4154:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"4178:47:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4210:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"4221:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4206:3:9"},"nodeType":"YulFunctionCall","src":"4206:18:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4193:12:9"},"nodeType":"YulFunctionCall","src":"4193:32:9"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"4182:7:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"4282:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4291:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4294:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4284:6:9"},"nodeType":"YulFunctionCall","src":"4284:12:9"},"nodeType":"YulExpressionStatement","src":"4284:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"4247:7:9"},{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"4270:7:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4263:6:9"},"nodeType":"YulFunctionCall","src":"4263:15:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4256:6:9"},"nodeType":"YulFunctionCall","src":"4256:23:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4244:2:9"},"nodeType":"YulFunctionCall","src":"4244:36:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4237:6:9"},"nodeType":"YulFunctionCall","src":"4237:44:9"},"nodeType":"YulIf","src":"4234:64:9"},{"nodeType":"YulAssignment","src":"4307:17:9","value":{"name":"value_1","nodeType":"YulIdentifier","src":"4317:7:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4307:6:9"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3956:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3967:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3979:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3987:6:9","type":""}],"src":"3914:416:9"},{"body":{"nodeType":"YulBlock","src":"4367:95:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4384:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4391:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4396:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4387:3:9"},"nodeType":"YulFunctionCall","src":"4387:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4377:6:9"},"nodeType":"YulFunctionCall","src":"4377:31:9"},"nodeType":"YulExpressionStatement","src":"4377:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4424:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4427:4:9","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4417:6:9"},"nodeType":"YulFunctionCall","src":"4417:15:9"},"nodeType":"YulExpressionStatement","src":"4417:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4448:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4451:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4441:6:9"},"nodeType":"YulFunctionCall","src":"4441:15:9"},"nodeType":"YulExpressionStatement","src":"4441:15:9"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"4335:127:9"},{"body":{"nodeType":"YulBlock","src":"4597:1136:9","statements":[{"body":{"nodeType":"YulBlock","src":"4644:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4653:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4656:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4646:6:9"},"nodeType":"YulFunctionCall","src":"4646:12:9"},"nodeType":"YulExpressionStatement","src":"4646:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4618:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"4627:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4614:3:9"},"nodeType":"YulFunctionCall","src":"4614:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"4639:3:9","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4610:3:9"},"nodeType":"YulFunctionCall","src":"4610:33:9"},"nodeType":"YulIf","src":"4607:53:9"},{"nodeType":"YulVariableDeclaration","src":"4669:36:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4695:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4682:12:9"},"nodeType":"YulFunctionCall","src":"4682:23:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4673:5:9","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4739:5:9"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4714:24:9"},"nodeType":"YulFunctionCall","src":"4714:31:9"},"nodeType":"YulExpressionStatement","src":"4714:31:9"},{"nodeType":"YulAssignment","src":"4754:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"4764:5:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4754:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"4778:47:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4810:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"4821:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4806:3:9"},"nodeType":"YulFunctionCall","src":"4806:18:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4793:12:9"},"nodeType":"YulFunctionCall","src":"4793:32:9"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"4782:7:9","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"4859:7:9"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4834:24:9"},"nodeType":"YulFunctionCall","src":"4834:33:9"},"nodeType":"YulExpressionStatement","src":"4834:33:9"},{"nodeType":"YulAssignment","src":"4876:17:9","value":{"name":"value_1","nodeType":"YulIdentifier","src":"4886:7:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4876:6:9"}]},{"nodeType":"YulAssignment","src":"4902:42:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4929:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"4940:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4925:3:9"},"nodeType":"YulFunctionCall","src":"4925:18:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4912:12:9"},"nodeType":"YulFunctionCall","src":"4912:32:9"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4902:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"4953:46:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4984:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"4995:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4980:3:9"},"nodeType":"YulFunctionCall","src":"4980:18:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4967:12:9"},"nodeType":"YulFunctionCall","src":"4967:32:9"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4957:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5008:28:9","value":{"kind":"number","nodeType":"YulLiteral","src":"5018:18:9","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5012:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"5063:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5072:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5075:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5065:6:9"},"nodeType":"YulFunctionCall","src":"5065:12:9"},"nodeType":"YulExpressionStatement","src":"5065:12:9"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5051:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"5059:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5048:2:9"},"nodeType":"YulFunctionCall","src":"5048:14:9"},"nodeType":"YulIf","src":"5045:34:9"},{"nodeType":"YulVariableDeclaration","src":"5088:32:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5102:9:9"},{"name":"offset","nodeType":"YulIdentifier","src":"5113:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5098:3:9"},"nodeType":"YulFunctionCall","src":"5098:22:9"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"5092:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"5168:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5177:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5180:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5170:6:9"},"nodeType":"YulFunctionCall","src":"5170:12:9"},"nodeType":"YulExpressionStatement","src":"5170:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5147:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"5151:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5143:3:9"},"nodeType":"YulFunctionCall","src":"5143:13:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5158:7:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5139:3:9"},"nodeType":"YulFunctionCall","src":"5139:27:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5132:6:9"},"nodeType":"YulFunctionCall","src":"5132:35:9"},"nodeType":"YulIf","src":"5129:55:9"},{"nodeType":"YulVariableDeclaration","src":"5193:26:9","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5216:2:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5203:12:9"},"nodeType":"YulFunctionCall","src":"5203:16:9"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"5197:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"5242:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5244:16:9"},"nodeType":"YulFunctionCall","src":"5244:18:9"},"nodeType":"YulExpressionStatement","src":"5244:18:9"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"5234:2:9"},{"name":"_1","nodeType":"YulIdentifier","src":"5238:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5231:2:9"},"nodeType":"YulFunctionCall","src":"5231:10:9"},"nodeType":"YulIf","src":"5228:36:9"},{"nodeType":"YulVariableDeclaration","src":"5273:17:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5287:2:9","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5283:3:9"},"nodeType":"YulFunctionCall","src":"5283:7:9"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"5277:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5299:23:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5319:2:9","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5313:5:9"},"nodeType":"YulFunctionCall","src":"5313:9:9"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5303:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5331:71:9","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5353:6:9"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"5377:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"5381:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5373:3:9"},"nodeType":"YulFunctionCall","src":"5373:13:9"},{"name":"_4","nodeType":"YulIdentifier","src":"5388:2:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5369:3:9"},"nodeType":"YulFunctionCall","src":"5369:22:9"},{"kind":"number","nodeType":"YulLiteral","src":"5393:2:9","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5365:3:9"},"nodeType":"YulFunctionCall","src":"5365:31:9"},{"name":"_4","nodeType":"YulIdentifier","src":"5398:2:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5361:3:9"},"nodeType":"YulFunctionCall","src":"5361:40:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5349:3:9"},"nodeType":"YulFunctionCall","src":"5349:53:9"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"5335:10:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"5461:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5463:16:9"},"nodeType":"YulFunctionCall","src":"5463:18:9"},"nodeType":"YulExpressionStatement","src":"5463:18:9"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5420:10:9"},{"name":"_1","nodeType":"YulIdentifier","src":"5432:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5417:2:9"},"nodeType":"YulFunctionCall","src":"5417:18:9"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5440:10:9"},{"name":"memPtr","nodeType":"YulIdentifier","src":"5452:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5437:2:9"},"nodeType":"YulFunctionCall","src":"5437:22:9"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5414:2:9"},"nodeType":"YulFunctionCall","src":"5414:46:9"},"nodeType":"YulIf","src":"5411:72:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5499:2:9","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5503:10:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5492:6:9"},"nodeType":"YulFunctionCall","src":"5492:22:9"},"nodeType":"YulExpressionStatement","src":"5492:22:9"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5530:6:9"},{"name":"_3","nodeType":"YulIdentifier","src":"5538:2:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5523:6:9"},"nodeType":"YulFunctionCall","src":"5523:18:9"},"nodeType":"YulExpressionStatement","src":"5523:18:9"},{"body":{"nodeType":"YulBlock","src":"5587:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5596:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5599:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5589:6:9"},"nodeType":"YulFunctionCall","src":"5589:12:9"},"nodeType":"YulExpressionStatement","src":"5589:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5564:2:9"},{"name":"_3","nodeType":"YulIdentifier","src":"5568:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5560:3:9"},"nodeType":"YulFunctionCall","src":"5560:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"5573:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5556:3:9"},"nodeType":"YulFunctionCall","src":"5556:20:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5578:7:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5553:2:9"},"nodeType":"YulFunctionCall","src":"5553:33:9"},"nodeType":"YulIf","src":"5550:53:9"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5629:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"5637:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5625:3:9"},"nodeType":"YulFunctionCall","src":"5625:15:9"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5646:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"5650:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5642:3:9"},"nodeType":"YulFunctionCall","src":"5642:11:9"},{"name":"_3","nodeType":"YulIdentifier","src":"5655:2:9"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"5612:12:9"},"nodeType":"YulFunctionCall","src":"5612:46:9"},"nodeType":"YulExpressionStatement","src":"5612:46:9"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5682:6:9"},{"name":"_3","nodeType":"YulIdentifier","src":"5690:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5678:3:9"},"nodeType":"YulFunctionCall","src":"5678:15:9"},{"kind":"number","nodeType":"YulLiteral","src":"5695:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5674:3:9"},"nodeType":"YulFunctionCall","src":"5674:24:9"},{"kind":"number","nodeType":"YulLiteral","src":"5700:1:9","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5667:6:9"},"nodeType":"YulFunctionCall","src":"5667:35:9"},"nodeType":"YulExpressionStatement","src":"5667:35:9"},{"nodeType":"YulAssignment","src":"5711:16:9","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"5721:6:9"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5711:6:9"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4539:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4550:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4562:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4570:6:9","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4578:6:9","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4586:6:9","type":""}],"src":"4467:1266:9"},{"body":{"nodeType":"YulBlock","src":"5825:301:9","statements":[{"body":{"nodeType":"YulBlock","src":"5871:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5880:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5883:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5873:6:9"},"nodeType":"YulFunctionCall","src":"5873:12:9"},"nodeType":"YulExpressionStatement","src":"5873:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5846:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"5855:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5842:3:9"},"nodeType":"YulFunctionCall","src":"5842:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"5867:2:9","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5838:3:9"},"nodeType":"YulFunctionCall","src":"5838:32:9"},"nodeType":"YulIf","src":"5835:52:9"},{"nodeType":"YulVariableDeclaration","src":"5896:36:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5922:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5909:12:9"},"nodeType":"YulFunctionCall","src":"5909:23:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5900:5:9","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5966:5:9"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5941:24:9"},"nodeType":"YulFunctionCall","src":"5941:31:9"},"nodeType":"YulExpressionStatement","src":"5941:31:9"},{"nodeType":"YulAssignment","src":"5981:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"5991:5:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5981:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"6005:47:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6037:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"6048:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6033:3:9"},"nodeType":"YulFunctionCall","src":"6033:18:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6020:12:9"},"nodeType":"YulFunctionCall","src":"6020:32:9"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"6009:7:9","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"6086:7:9"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"6061:24:9"},"nodeType":"YulFunctionCall","src":"6061:33:9"},"nodeType":"YulExpressionStatement","src":"6061:33:9"},{"nodeType":"YulAssignment","src":"6103:17:9","value":{"name":"value_1","nodeType":"YulIdentifier","src":"6113:7:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6103:6:9"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5783:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5794:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5806:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5814:6:9","type":""}],"src":"5738:388:9"},{"body":{"nodeType":"YulBlock","src":"6186:325:9","statements":[{"nodeType":"YulAssignment","src":"6196:22:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6210:1:9","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"6213:4:9"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6206:3:9"},"nodeType":"YulFunctionCall","src":"6206:12:9"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6196:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"6227:38:9","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6257:4:9"},{"kind":"number","nodeType":"YulLiteral","src":"6263:1:9","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6253:3:9"},"nodeType":"YulFunctionCall","src":"6253:12:9"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"6231:18:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"6304:31:9","statements":[{"nodeType":"YulAssignment","src":"6306:27:9","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6320:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"6328:4:9","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6316:3:9"},"nodeType":"YulFunctionCall","src":"6316:17:9"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6306:6:9"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6284:18:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6277:6:9"},"nodeType":"YulFunctionCall","src":"6277:26:9"},"nodeType":"YulIf","src":"6274:61:9"},{"body":{"nodeType":"YulBlock","src":"6394:111:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6415:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6422:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6427:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6418:3:9"},"nodeType":"YulFunctionCall","src":"6418:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6408:6:9"},"nodeType":"YulFunctionCall","src":"6408:31:9"},"nodeType":"YulExpressionStatement","src":"6408:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6459:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6462:4:9","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6452:6:9"},"nodeType":"YulFunctionCall","src":"6452:15:9"},"nodeType":"YulExpressionStatement","src":"6452:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6487:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6490:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6480:6:9"},"nodeType":"YulFunctionCall","src":"6480:15:9"},"nodeType":"YulExpressionStatement","src":"6480:15:9"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6350:18:9"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6373:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"6381:2:9","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6370:2:9"},"nodeType":"YulFunctionCall","src":"6370:14:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6347:2:9"},"nodeType":"YulFunctionCall","src":"6347:38:9"},"nodeType":"YulIf","src":"6344:161:9"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6166:4:9","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"6175:6:9","type":""}],"src":"6131:380:9"},{"body":{"nodeType":"YulBlock","src":"6597:103:9","statements":[{"body":{"nodeType":"YulBlock","src":"6643:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6652:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6655:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6645:6:9"},"nodeType":"YulFunctionCall","src":"6645:12:9"},"nodeType":"YulExpressionStatement","src":"6645:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6618:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"6627:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6614:3:9"},"nodeType":"YulFunctionCall","src":"6614:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"6639:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6610:3:9"},"nodeType":"YulFunctionCall","src":"6610:32:9"},"nodeType":"YulIf","src":"6607:52:9"},{"nodeType":"YulAssignment","src":"6668:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6684:9:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6678:5:9"},"nodeType":"YulFunctionCall","src":"6678:16:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6668:6:9"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6563:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6574:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6586:6:9","type":""}],"src":"6516:184:9"},{"body":{"nodeType":"YulBlock","src":"6737:95:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6754:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6761:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6766:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6757:3:9"},"nodeType":"YulFunctionCall","src":"6757:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6747:6:9"},"nodeType":"YulFunctionCall","src":"6747:31:9"},"nodeType":"YulExpressionStatement","src":"6747:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6794:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6797:4:9","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6787:6:9"},"nodeType":"YulFunctionCall","src":"6787:15:9"},"nodeType":"YulExpressionStatement","src":"6787:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6818:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6821:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6811:6:9"},"nodeType":"YulFunctionCall","src":"6811:15:9"},"nodeType":"YulExpressionStatement","src":"6811:15:9"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"6705:127:9"},{"body":{"nodeType":"YulBlock","src":"6988:481:9","statements":[{"nodeType":"YulVariableDeclaration","src":"6998:12:9","value":{"kind":"number","nodeType":"YulLiteral","src":"7008:2:9","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7002:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7019:32:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7037:9:9"},{"name":"_1","nodeType":"YulIdentifier","src":"7048:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7033:3:9"},"nodeType":"YulFunctionCall","src":"7033:18:9"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"7023:6:9","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7067:9:9"},{"name":"_1","nodeType":"YulIdentifier","src":"7078:2:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7060:6:9"},"nodeType":"YulFunctionCall","src":"7060:21:9"},"nodeType":"YulExpressionStatement","src":"7060:21:9"},{"nodeType":"YulVariableDeclaration","src":"7090:17:9","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"7101:6:9"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"7094:3:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7116:27:9","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7136:6:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7130:5:9"},"nodeType":"YulFunctionCall","src":"7130:13:9"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7120:6:9","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"7159:6:9"},{"name":"length","nodeType":"YulIdentifier","src":"7167:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7152:6:9"},"nodeType":"YulFunctionCall","src":"7152:22:9"},"nodeType":"YulExpressionStatement","src":"7152:22:9"},{"nodeType":"YulAssignment","src":"7183:25:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7194:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"7205:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7190:3:9"},"nodeType":"YulFunctionCall","src":"7190:18:9"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7183:3:9"}]},{"nodeType":"YulVariableDeclaration","src":"7217:29:9","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7235:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"7243:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7231:3:9"},"nodeType":"YulFunctionCall","src":"7231:15:9"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"7221:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7255:10:9","value":{"kind":"number","nodeType":"YulLiteral","src":"7264:1:9","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7259:1:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"7323:120:9","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7344:3:9"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7355:6:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7349:5:9"},"nodeType":"YulFunctionCall","src":"7349:13:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7337:6:9"},"nodeType":"YulFunctionCall","src":"7337:26:9"},"nodeType":"YulExpressionStatement","src":"7337:26:9"},{"nodeType":"YulAssignment","src":"7376:19:9","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7387:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"7392:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7383:3:9"},"nodeType":"YulFunctionCall","src":"7383:12:9"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7376:3:9"}]},{"nodeType":"YulAssignment","src":"7408:25:9","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7422:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"7430:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7418:3:9"},"nodeType":"YulFunctionCall","src":"7418:15:9"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7408:6:9"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7285:1:9"},{"name":"length","nodeType":"YulIdentifier","src":"7288:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7282:2:9"},"nodeType":"YulFunctionCall","src":"7282:13:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7296:18:9","statements":[{"nodeType":"YulAssignment","src":"7298:14:9","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7307:1:9"},{"kind":"number","nodeType":"YulLiteral","src":"7310:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7303:3:9"},"nodeType":"YulFunctionCall","src":"7303:9:9"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7298:1:9"}]}]},"pre":{"nodeType":"YulBlock","src":"7278:3:9","statements":[]},"src":"7274:169:9"},{"nodeType":"YulAssignment","src":"7452:11:9","value":{"name":"pos","nodeType":"YulIdentifier","src":"7460:3:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7452:4:9"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6957:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6968:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6979:4:9","type":""}],"src":"6837:632:9"},{"body":{"nodeType":"YulBlock","src":"7506:95:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7523:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7530:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"7535:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7526:3:9"},"nodeType":"YulFunctionCall","src":"7526:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7516:6:9"},"nodeType":"YulFunctionCall","src":"7516:31:9"},"nodeType":"YulExpressionStatement","src":"7516:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7563:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7566:4:9","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7556:6:9"},"nodeType":"YulFunctionCall","src":"7556:15:9"},"nodeType":"YulExpressionStatement","src":"7556:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7587:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7590:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7580:6:9"},"nodeType":"YulFunctionCall","src":"7580:15:9"},"nodeType":"YulExpressionStatement","src":"7580:15:9"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"7474:127:9"},{"body":{"nodeType":"YulBlock","src":"7655:79:9","statements":[{"nodeType":"YulAssignment","src":"7665:17:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7677:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"7680:1:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7673:3:9"},"nodeType":"YulFunctionCall","src":"7673:9:9"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"7665:4:9"}]},{"body":{"nodeType":"YulBlock","src":"7706:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"7708:16:9"},"nodeType":"YulFunctionCall","src":"7708:18:9"},"nodeType":"YulExpressionStatement","src":"7708:18:9"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"7697:4:9"},{"name":"x","nodeType":"YulIdentifier","src":"7703:1:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7694:2:9"},"nodeType":"YulFunctionCall","src":"7694:11:9"},"nodeType":"YulIf","src":"7691:37:9"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"7637:1:9","type":""},{"name":"y","nodeType":"YulTypedName","src":"7640:1:9","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"7646:4:9","type":""}],"src":"7606:128:9"},{"body":{"nodeType":"YulBlock","src":"7820:170:9","statements":[{"body":{"nodeType":"YulBlock","src":"7866:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7875:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7878:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7868:6:9"},"nodeType":"YulFunctionCall","src":"7868:12:9"},"nodeType":"YulExpressionStatement","src":"7868:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7841:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"7850:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7837:3:9"},"nodeType":"YulFunctionCall","src":"7837:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"7862:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7833:3:9"},"nodeType":"YulFunctionCall","src":"7833:32:9"},"nodeType":"YulIf","src":"7830:52:9"},{"nodeType":"YulVariableDeclaration","src":"7891:29:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7910:9:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7904:5:9"},"nodeType":"YulFunctionCall","src":"7904:16:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7895:5:9","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7954:5:9"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"7929:24:9"},"nodeType":"YulFunctionCall","src":"7929:31:9"},"nodeType":"YulExpressionStatement","src":"7929:31:9"},{"nodeType":"YulAssignment","src":"7969:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"7979:5:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7969:6:9"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7786:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7797:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7809:6:9","type":""}],"src":"7739:251:9"},{"body":{"nodeType":"YulBlock","src":"8186:14:9","statements":[{"nodeType":"YulAssignment","src":"8188:10:9","value":{"name":"pos","nodeType":"YulIdentifier","src":"8195:3:9"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8188:3:9"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8170:3:9","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8178:3:9","type":""}],"src":"7995:205:9"},{"body":{"nodeType":"YulBlock","src":"8390:348:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8407:9:9"},{"name":"value0","nodeType":"YulIdentifier","src":"8418:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8400:6:9"},"nodeType":"YulFunctionCall","src":"8400:25:9"},"nodeType":"YulExpressionStatement","src":"8400:25:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8445:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"8456:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8441:3:9"},"nodeType":"YulFunctionCall","src":"8441:18:9"},{"name":"value1","nodeType":"YulIdentifier","src":"8461:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8434:6:9"},"nodeType":"YulFunctionCall","src":"8434:34:9"},"nodeType":"YulExpressionStatement","src":"8434:34:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8488:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"8499:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8484:3:9"},"nodeType":"YulFunctionCall","src":"8484:18:9"},{"kind":"number","nodeType":"YulLiteral","src":"8504:2:9","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8477:6:9"},"nodeType":"YulFunctionCall","src":"8477:30:9"},"nodeType":"YulExpressionStatement","src":"8477:30:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8527:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"8538:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8523:3:9"},"nodeType":"YulFunctionCall","src":"8523:18:9"},{"name":"value3","nodeType":"YulIdentifier","src":"8543:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8516:6:9"},"nodeType":"YulFunctionCall","src":"8516:34:9"},"nodeType":"YulExpressionStatement","src":"8516:34:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8576:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"8587:3:9","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8572:3:9"},"nodeType":"YulFunctionCall","src":"8572:19:9"},{"name":"value2","nodeType":"YulIdentifier","src":"8593:6:9"},{"name":"value3","nodeType":"YulIdentifier","src":"8601:6:9"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"8559:12:9"},"nodeType":"YulFunctionCall","src":"8559:49:9"},"nodeType":"YulExpressionStatement","src":"8559:49:9"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8632:9:9"},{"name":"value3","nodeType":"YulIdentifier","src":"8643:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8628:3:9"},"nodeType":"YulFunctionCall","src":"8628:22:9"},{"kind":"number","nodeType":"YulLiteral","src":"8652:3:9","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8624:3:9"},"nodeType":"YulFunctionCall","src":"8624:32:9"},{"kind":"number","nodeType":"YulLiteral","src":"8658:1:9","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8617:6:9"},"nodeType":"YulFunctionCall","src":"8617:43:9"},"nodeType":"YulExpressionStatement","src":"8617:43:9"},{"nodeType":"YulAssignment","src":"8669:63:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8685:9:9"},{"arguments":[{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"8704:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"8712:2:9","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8700:3:9"},"nodeType":"YulFunctionCall","src":"8700:15:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8721:2:9","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8717:3:9"},"nodeType":"YulFunctionCall","src":"8717:7:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8696:3:9"},"nodeType":"YulFunctionCall","src":"8696:29:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8681:3:9"},"nodeType":"YulFunctionCall","src":"8681:45:9"},{"kind":"number","nodeType":"YulLiteral","src":"8728:3:9","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8677:3:9"},"nodeType":"YulFunctionCall","src":"8677:55:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8669:4:9"}]}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_bytes_calldata_ptr__to_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8335:9:9","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8346:6:9","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8354:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8362:6:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8370:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8381:4:9","type":""}],"src":"8205:533:9"},{"body":{"nodeType":"YulBlock","src":"8890:100:9","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8907:3:9"},{"name":"value0","nodeType":"YulIdentifier","src":"8912:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8900:6:9"},"nodeType":"YulFunctionCall","src":"8900:19:9"},"nodeType":"YulExpressionStatement","src":"8900:19:9"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8939:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"8944:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8935:3:9"},"nodeType":"YulFunctionCall","src":"8935:12:9"},{"name":"value1","nodeType":"YulIdentifier","src":"8949:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8928:6:9"},"nodeType":"YulFunctionCall","src":"8928:28:9"},"nodeType":"YulExpressionStatement","src":"8928:28:9"},{"nodeType":"YulAssignment","src":"8965:19:9","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8976:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"8981:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8972:3:9"},"nodeType":"YulFunctionCall","src":"8972:12:9"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8965:3:9"}]}]},"name":"abi_encode_tuple_packed_t_uint256_t_uint256__to_t_uint256_t_uint256__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8858:3:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8863:6:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8871:6:9","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8882:3:9","type":""}],"src":"8743:247:9"},{"body":{"nodeType":"YulBlock","src":"9027:95:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9044:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9051:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9056:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9047:3:9"},"nodeType":"YulFunctionCall","src":"9047:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9037:6:9"},"nodeType":"YulFunctionCall","src":"9037:31:9"},"nodeType":"YulExpressionStatement","src":"9037:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9084:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9087:4:9","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9077:6:9"},"nodeType":"YulFunctionCall","src":"9077:15:9"},"nodeType":"YulExpressionStatement","src":"9077:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9108:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9111:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9101:6:9"},"nodeType":"YulFunctionCall","src":"9101:15:9"},"nodeType":"YulExpressionStatement","src":"9101:15:9"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"8995:127:9"},{"body":{"nodeType":"YulBlock","src":"9165:74:9","statements":[{"body":{"nodeType":"YulBlock","src":"9188:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"9190:16:9"},"nodeType":"YulFunctionCall","src":"9190:18:9"},"nodeType":"YulExpressionStatement","src":"9190:18:9"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9185:1:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9178:6:9"},"nodeType":"YulFunctionCall","src":"9178:9:9"},"nodeType":"YulIf","src":"9175:35:9"},{"nodeType":"YulAssignment","src":"9219:14:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9228:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"9231:1:9"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"9224:3:9"},"nodeType":"YulFunctionCall","src":"9224:9:9"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"9219:1:9"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9150:1:9","type":""},{"name":"y","nodeType":"YulTypedName","src":"9153:1:9","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"9159:1:9","type":""}],"src":"9127:112:9"},{"body":{"nodeType":"YulBlock","src":"9373:119:9","statements":[{"nodeType":"YulAssignment","src":"9383:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9395:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"9406:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9391:3:9"},"nodeType":"YulFunctionCall","src":"9391:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9383:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9425:9:9"},{"name":"value0","nodeType":"YulIdentifier","src":"9436:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9418:6:9"},"nodeType":"YulFunctionCall","src":"9418:25:9"},"nodeType":"YulExpressionStatement","src":"9418:25:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9463:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"9474:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9459:3:9"},"nodeType":"YulFunctionCall","src":"9459:18:9"},{"name":"value1","nodeType":"YulIdentifier","src":"9479:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9452:6:9"},"nodeType":"YulFunctionCall","src":"9452:34:9"},"nodeType":"YulExpressionStatement","src":"9452:34:9"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9334:9:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9345:6:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9353:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9364:4:9","type":""}],"src":"9244:248:9"},{"body":{"nodeType":"YulBlock","src":"9549:116:9","statements":[{"nodeType":"YulAssignment","src":"9559:20:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9574:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"9577:1:9"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"9570:3:9"},"nodeType":"YulFunctionCall","src":"9570:9:9"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"9559:7:9"}]},{"body":{"nodeType":"YulBlock","src":"9637:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9639:16:9"},"nodeType":"YulFunctionCall","src":"9639:18:9"},"nodeType":"YulExpressionStatement","src":"9639:18:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9608:1:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9601:6:9"},"nodeType":"YulFunctionCall","src":"9601:9:9"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9615:1:9"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"9622:7:9"},{"name":"x","nodeType":"YulIdentifier","src":"9631:1:9"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"9618:3:9"},"nodeType":"YulFunctionCall","src":"9618:15:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9612:2:9"},"nodeType":"YulFunctionCall","src":"9612:22:9"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"9598:2:9"},"nodeType":"YulFunctionCall","src":"9598:37:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9591:6:9"},"nodeType":"YulFunctionCall","src":"9591:45:9"},"nodeType":"YulIf","src":"9588:71:9"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9528:1:9","type":""},{"name":"y","nodeType":"YulTypedName","src":"9531:1:9","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"9537:7:9","type":""}],"src":"9497:168:9"},{"body":{"nodeType":"YulBlock","src":"9827:188:9","statements":[{"nodeType":"YulAssignment","src":"9837:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9849:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"9860:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9845:3:9"},"nodeType":"YulFunctionCall","src":"9845:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9837:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9879:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9894:6:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9910:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"9915:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9906:3:9"},"nodeType":"YulFunctionCall","src":"9906:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"9919:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9902:3:9"},"nodeType":"YulFunctionCall","src":"9902:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9890:3:9"},"nodeType":"YulFunctionCall","src":"9890:32:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9872:6:9"},"nodeType":"YulFunctionCall","src":"9872:51:9"},"nodeType":"YulExpressionStatement","src":"9872:51:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9943:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"9954:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9939:3:9"},"nodeType":"YulFunctionCall","src":"9939:18:9"},{"name":"value1","nodeType":"YulIdentifier","src":"9959:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9932:6:9"},"nodeType":"YulFunctionCall","src":"9932:34:9"},"nodeType":"YulExpressionStatement","src":"9932:34:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9986:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"9997:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9982:3:9"},"nodeType":"YulFunctionCall","src":"9982:18:9"},{"name":"value2","nodeType":"YulIdentifier","src":"10002:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9975:6:9"},"nodeType":"YulFunctionCall","src":"9975:34:9"},"nodeType":"YulExpressionStatement","src":"9975:34:9"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9780:9:9","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9791:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9799:6:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9807:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9818:4:9","type":""}],"src":"9670:345:9"},{"body":{"nodeType":"YulBlock","src":"10076:65:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10093:1:9","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"10096:3:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10086:6:9"},"nodeType":"YulFunctionCall","src":"10086:14:9"},"nodeType":"YulExpressionStatement","src":"10086:14:9"},{"nodeType":"YulAssignment","src":"10109:26:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10127:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10130:4:9","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"10117:9:9"},"nodeType":"YulFunctionCall","src":"10117:18:9"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"10109:4:9"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"10059:3:9","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"10067:4:9","type":""}],"src":"10020:121:9"},{"body":{"nodeType":"YulBlock","src":"10201:68:9","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10218:3:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10227:3:9","type":"","value":"249"},{"kind":"number","nodeType":"YulLiteral","src":"10232:2:9","type":"","value":"17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10223:3:9"},"nodeType":"YulFunctionCall","src":"10223:12:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10211:6:9"},"nodeType":"YulFunctionCall","src":"10211:25:9"},"nodeType":"YulExpressionStatement","src":"10211:25:9"},{"nodeType":"YulAssignment","src":"10245:18:9","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10256:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"10261:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10252:3:9"},"nodeType":"YulFunctionCall","src":"10252:11:9"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10245:3:9"}]}]},"name":"abi_encode_stringliteral_6e9f","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10185:3:9","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10193:3:9","type":""}],"src":"10146:123:9"},{"body":{"nodeType":"YulBlock","src":"10329:59:9","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10346:3:9"},{"hexValue":"7d","kind":"string","nodeType":"YulLiteral","src":"10351:3:9","type":"","value":"}"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10339:6:9"},"nodeType":"YulFunctionCall","src":"10339:16:9"},"nodeType":"YulExpressionStatement","src":"10339:16:9"},{"nodeType":"YulAssignment","src":"10364:18:9","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10375:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"10380:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10371:3:9"},"nodeType":"YulFunctionCall","src":"10371:11:9"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10364:3:9"}]}]},"name":"abi_encode_stringliteral_8e2f","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10313:3:9","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10321:3:9","type":""}],"src":"10274:114:9"},{"body":{"nodeType":"YulBlock","src":"11486:1707:9","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11503:3:9"},{"hexValue":"7b","kind":"string","nodeType":"YulLiteral","src":"11508:3:9","type":"","value":"{"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11496:6:9"},"nodeType":"YulFunctionCall","src":"11496:16:9"},"nodeType":"YulExpressionStatement","src":"11496:16:9"},{"nodeType":"YulVariableDeclaration","src":"11521:11:9","value":{"kind":"number","nodeType":"YulLiteral","src":"11531:1:9","type":"","value":"1"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"11525:2:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11552:3:9"},{"name":"_1","nodeType":"YulIdentifier","src":"11557:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11548:3:9"},"nodeType":"YulFunctionCall","src":"11548:12:9"},{"kind":"number","nodeType":"YulLiteral","src":"11562:66:9","type":"","value":"0x226e616d65223a2022426173655061696e74205469636b657420000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11541:6:9"},"nodeType":"YulFunctionCall","src":"11541:88:9"},"nodeType":"YulExpressionStatement","src":"11541:88:9"},{"nodeType":"YulVariableDeclaration","src":"11638:27:9","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11658:6:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11652:5:9"},"nodeType":"YulFunctionCall","src":"11652:13:9"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"11642:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11674:14:9","value":{"kind":"number","nodeType":"YulLiteral","src":"11684:4:9","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"11678:2:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11736:6:9"},{"name":"_2","nodeType":"YulIdentifier","src":"11744:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11732:3:9"},"nodeType":"YulFunctionCall","src":"11732:15:9"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11753:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"11758:2:9","type":"","value":"27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11749:3:9"},"nodeType":"YulFunctionCall","src":"11749:12:9"},{"name":"length","nodeType":"YulIdentifier","src":"11763:6:9"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"11697:34:9"},"nodeType":"YulFunctionCall","src":"11697:73:9"},"nodeType":"YulExpressionStatement","src":"11697:73:9"},{"nodeType":"YulVariableDeclaration","src":"11779:26:9","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11793:3:9"},{"name":"length","nodeType":"YulIdentifier","src":"11798:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11789:3:9"},"nodeType":"YulFunctionCall","src":"11789:16:9"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"11783:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11814:24:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11828:3:9","type":"","value":"242"},{"kind":"number","nodeType":"YulLiteral","src":"11833:4:9","type":"","value":"2187"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11824:3:9"},"nodeType":"YulFunctionCall","src":"11824:14:9"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"11818:2:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"11858:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"11862:2:9","type":"","value":"27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11854:3:9"},"nodeType":"YulFunctionCall","src":"11854:11:9"},{"name":"_4","nodeType":"YulIdentifier","src":"11867:2:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11847:6:9"},"nodeType":"YulFunctionCall","src":"11847:23:9"},"nodeType":"YulExpressionStatement","src":"11847:23:9"},{"expression":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"11890:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"11894:2:9","type":"","value":"29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11886:3:9"},"nodeType":"YulFunctionCall","src":"11886:11:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11903:3:9","type":"","value":"129"},{"kind":"number","nodeType":"YulLiteral","src":"11908:34:9","type":"","value":"0x113232b9b1b934b83a34b7b7111d1011"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11899:3:9"},"nodeType":"YulFunctionCall","src":"11899:44:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11879:6:9"},"nodeType":"YulFunctionCall","src":"11879:65:9"},"nodeType":"YulExpressionStatement","src":"11879:65:9"},{"expression":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"11964:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"11968:2:9","type":"","value":"45"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11960:3:9"},"nodeType":"YulFunctionCall","src":"11960:11:9"},{"hexValue":"4a7573742061207469636b65742e2e2e","kind":"string","nodeType":"YulLiteral","src":"11973:18:9","type":"","value":"Just a ticket..."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11953:6:9"},"nodeType":"YulFunctionCall","src":"11953:39:9"},"nodeType":"YulExpressionStatement","src":"11953:39:9"},{"expression":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"12012:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"12016:2:9","type":"","value":"61"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12008:3:9"},"nodeType":"YulFunctionCall","src":"12008:11:9"},{"name":"_4","nodeType":"YulIdentifier","src":"12021:2:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12001:6:9"},"nodeType":"YulFunctionCall","src":"12001:23:9"},"nodeType":"YulExpressionStatement","src":"12001:23:9"},{"expression":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"12044:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"12048:2:9","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12040:3:9"},"nodeType":"YulFunctionCall","src":"12040:11:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12057:3:9","type":"","value":"177"},{"kind":"number","nodeType":"YulLiteral","src":"12062:22:9","type":"","value":"0x1134b6b0b3b2911d1011"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12053:3:9"},"nodeType":"YulFunctionCall","src":"12053:32:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12033:6:9"},"nodeType":"YulFunctionCall","src":"12033:53:9"},"nodeType":"YulExpressionStatement","src":"12033:53:9"},{"nodeType":"YulVariableDeclaration","src":"12095:12:9","value":{"kind":"number","nodeType":"YulLiteral","src":"12105:2:9","type":"","value":"73"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"12099:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12116:12:9","value":{"kind":"number","nodeType":"YulLiteral","src":"12127:1:9","type":"","value":"0"},"variables":[{"name":"ret","nodeType":"YulTypedName","src":"12120:3:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12137:30:9","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12160:6:9"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"12154:5:9"},"nodeType":"YulFunctionCall","src":"12154:13:9"},"variables":[{"name":"slotValue","nodeType":"YulTypedName","src":"12141:9:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12176:19:9","value":{"name":"ret","nodeType":"YulIdentifier","src":"12192:3:9"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"12180:8:9","type":""}]},{"nodeType":"YulAssignment","src":"12204:30:9","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"12220:2:9"},{"name":"slotValue","nodeType":"YulIdentifier","src":"12224:9:9"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"12216:3:9"},"nodeType":"YulFunctionCall","src":"12216:18:9"},"variableNames":[{"name":"length_1","nodeType":"YulIdentifier","src":"12204:8:9"}]},{"nodeType":"YulVariableDeclaration","src":"12243:44:9","value":{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"12273:9:9"},{"name":"_1","nodeType":"YulIdentifier","src":"12284:2:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12269:3:9"},"nodeType":"YulFunctionCall","src":"12269:18:9"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"12247:18:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"12334:55:9","statements":[{"nodeType":"YulAssignment","src":"12348:31:9","value":{"arguments":[{"name":"length_1","nodeType":"YulIdentifier","src":"12364:8:9"},{"kind":"number","nodeType":"YulLiteral","src":"12374:4:9","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12360:3:9"},"nodeType":"YulFunctionCall","src":"12360:19:9"},"variableNames":[{"name":"length_1","nodeType":"YulIdentifier","src":"12348:8:9"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"12306:18:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12299:6:9"},"nodeType":"YulFunctionCall","src":"12299:26:9"},"nodeType":"YulIf","src":"12296:93:9"},{"body":{"nodeType":"YulBlock","src":"12450:111:9","statements":[{"expression":{"arguments":[{"name":"ret","nodeType":"YulIdentifier","src":"12471:3:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12480:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"12485:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12476:3:9"},"nodeType":"YulFunctionCall","src":"12476:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12464:6:9"},"nodeType":"YulFunctionCall","src":"12464:33:9"},"nodeType":"YulExpressionStatement","src":"12464:33:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12517:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12520:2:9","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12510:6:9"},"nodeType":"YulFunctionCall","src":"12510:13:9"},"nodeType":"YulExpressionStatement","src":"12510:13:9"},{"expression":{"arguments":[{"name":"ret","nodeType":"YulIdentifier","src":"12543:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"12548:2:9","type":"","value":"36"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12536:6:9"},"nodeType":"YulFunctionCall","src":"12536:15:9"},"nodeType":"YulExpressionStatement","src":"12536:15:9"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"12404:18:9"},{"arguments":[{"name":"length_1","nodeType":"YulIdentifier","src":"12427:8:9"},{"name":"_2","nodeType":"YulIdentifier","src":"12437:2:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12424:2:9"},"nodeType":"YulFunctionCall","src":"12424:16:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12401:2:9"},"nodeType":"YulFunctionCall","src":"12401:40:9"},"nodeType":"YulIf","src":"12398:163:9"},{"cases":[{"body":{"nodeType":"YulBlock","src":"12611:146:9","statements":[{"expression":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"12636:2:9"},{"name":"_5","nodeType":"YulIdentifier","src":"12640:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12632:3:9"},"nodeType":"YulFunctionCall","src":"12632:11:9"},{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"12649:9:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12664:3:9","type":"","value":"255"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"12660:3:9"},"nodeType":"YulFunctionCall","src":"12660:8:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12645:3:9"},"nodeType":"YulFunctionCall","src":"12645:24:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12625:6:9"},"nodeType":"YulFunctionCall","src":"12625:45:9"},"nodeType":"YulExpressionStatement","src":"12625:45:9"},{"nodeType":"YulAssignment","src":"12683:64:9","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"12698:2:9"},{"arguments":[{"name":"length_1","nodeType":"YulIdentifier","src":"12706:8:9"},{"arguments":[{"arguments":[{"name":"length_1","nodeType":"YulIdentifier","src":"12730:8:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12723:6:9"},"nodeType":"YulFunctionCall","src":"12723:16:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12716:6:9"},"nodeType":"YulFunctionCall","src":"12716:24:9"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"12702:3:9"},"nodeType":"YulFunctionCall","src":"12702:39:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12694:3:9"},"nodeType":"YulFunctionCall","src":"12694:48:9"},{"name":"_5","nodeType":"YulIdentifier","src":"12744:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12690:3:9"},"nodeType":"YulFunctionCall","src":"12690:57:9"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"12683:3:9"}]}]},"nodeType":"YulCase","src":"12604:153:9","value":{"kind":"number","nodeType":"YulLiteral","src":"12609:1:9","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"12773:333:9","statements":[{"nodeType":"YulVariableDeclaration","src":"12787:52:9","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12832:6:9"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"12802:29:9"},"nodeType":"YulFunctionCall","src":"12802:37:9"},"variables":[{"name":"dataPos","nodeType":"YulTypedName","src":"12791:7:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12852:10:9","value":{"kind":"number","nodeType":"YulLiteral","src":"12861:1:9","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"12856:1:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"12931:119:9","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"12964:2:9"},{"name":"i","nodeType":"YulIdentifier","src":"12968:1:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12960:3:9"},"nodeType":"YulFunctionCall","src":"12960:10:9"},{"name":"_5","nodeType":"YulIdentifier","src":"12972:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12956:3:9"},"nodeType":"YulFunctionCall","src":"12956:19:9"},{"arguments":[{"name":"dataPos","nodeType":"YulIdentifier","src":"12983:7:9"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"12977:5:9"},"nodeType":"YulFunctionCall","src":"12977:14:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12949:6:9"},"nodeType":"YulFunctionCall","src":"12949:43:9"},"nodeType":"YulExpressionStatement","src":"12949:43:9"},{"nodeType":"YulAssignment","src":"13009:27:9","value":{"arguments":[{"name":"dataPos","nodeType":"YulIdentifier","src":"13024:7:9"},{"name":"_1","nodeType":"YulIdentifier","src":"13033:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13020:3:9"},"nodeType":"YulFunctionCall","src":"13020:16:9"},"variableNames":[{"name":"dataPos","nodeType":"YulIdentifier","src":"13009:7:9"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12886:1:9"},{"name":"length_1","nodeType":"YulIdentifier","src":"12889:8:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12883:2:9"},"nodeType":"YulFunctionCall","src":"12883:15:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"12899:19:9","statements":[{"nodeType":"YulAssignment","src":"12901:15:9","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12910:1:9"},{"name":"_2","nodeType":"YulIdentifier","src":"12913:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12906:3:9"},"nodeType":"YulFunctionCall","src":"12906:10:9"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"12901:1:9"}]}]},"pre":{"nodeType":"YulBlock","src":"12879:3:9","statements":[]},"src":"12875:175:9"},{"nodeType":"YulAssignment","src":"13063:33:9","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"13078:2:9"},{"name":"length_1","nodeType":"YulIdentifier","src":"13082:8:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13074:3:9"},"nodeType":"YulFunctionCall","src":"13074:17:9"},{"name":"_5","nodeType":"YulIdentifier","src":"13093:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13070:3:9"},"nodeType":"YulFunctionCall","src":"13070:26:9"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"13063:3:9"}]}]},"nodeType":"YulCase","src":"12766:340:9","value":{"kind":"number","nodeType":"YulLiteral","src":"12771:1:9","type":"","value":"1"}}],"expression":{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"12577:18:9"},"nodeType":"YulSwitch","src":"12570:536:9"},{"nodeType":"YulAssignment","src":"13115:72:9","value":{"arguments":[{"arguments":[{"name":"ret","nodeType":"YulIdentifier","src":"13182:3:9"}],"functionName":{"name":"abi_encode_stringliteral_6e9f","nodeType":"YulIdentifier","src":"13152:29:9"},"nodeType":"YulFunctionCall","src":"13152:34:9"}],"functionName":{"name":"abi_encode_stringliteral_8e2f","nodeType":"YulIdentifier","src":"13122:29:9"},"nodeType":"YulFunctionCall","src":"13122:65:9"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13115:3:9"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_a91eddf639b0b768929589c1a9fd21dcb0107199bdd82e55c5348018a1572f52_t_stringliteral_d42a11b37d35a55052d289dce8be6fb4df3139e056ba2326837c95a847ca2be1_t_string_memory_ptr_t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb_t_stringliteral_63efc49e26c2a0691fbd118ad4ace9a69fa64a27d6ecfb0468e1c404f7b79c0a_t_stringliteral_8cdd418261319b1e50a13c3d613e3de6caa6af5d9770d631b7820c9cd330b60c_t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb_t_stringliteral_dee71bd900939e5251fa52ed0e7fadcfe3990bd7a5ea546147c85d1b972c64b6_t_string_storage_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0_t_stringliteral_8e2ffa389f3a6ded42d759b3377ac0d928e6a268d143bcc9517093d10c843bff__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11454:3:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11459:6:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11467:6:9","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11478:3:9","type":""}],"src":"10393:2800:9"},{"body":{"nodeType":"YulBlock","src":"13438:221:9","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13455:3:9"},{"hexValue":"646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c","kind":"string","nodeType":"YulLiteral","src":"13460:31:9","type":"","value":"data:application/json;base64,"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13448:6:9"},"nodeType":"YulFunctionCall","src":"13448:44:9"},"nodeType":"YulExpressionStatement","src":"13448:44:9"},{"nodeType":"YulVariableDeclaration","src":"13501:27:9","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13521:6:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13515:5:9"},"nodeType":"YulFunctionCall","src":"13515:13:9"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"13505:6:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13576:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"13584:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13572:3:9"},"nodeType":"YulFunctionCall","src":"13572:17:9"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13595:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"13600:2:9","type":"","value":"29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13591:3:9"},"nodeType":"YulFunctionCall","src":"13591:12:9"},{"name":"length","nodeType":"YulIdentifier","src":"13605:6:9"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"13537:34:9"},"nodeType":"YulFunctionCall","src":"13537:75:9"},"nodeType":"YulExpressionStatement","src":"13537:75:9"},{"nodeType":"YulAssignment","src":"13621:32:9","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13636:3:9"},{"name":"length","nodeType":"YulIdentifier","src":"13641:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13632:3:9"},"nodeType":"YulFunctionCall","src":"13632:16:9"},{"kind":"number","nodeType":"YulLiteral","src":"13650:2:9","type":"","value":"29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13628:3:9"},"nodeType":"YulFunctionCall","src":"13628:25:9"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13621:3:9"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_bccab2d885f86fda81bfd84dd4248d31f8073b473d187111d36536db073076fa_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13414:3:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13419:6:9","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13430:3:9","type":""}],"src":"13198:461:9"},{"body":{"nodeType":"YulBlock","src":"13838:228:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13855:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"13866:2:9","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13848:6:9"},"nodeType":"YulFunctionCall","src":"13848:21:9"},"nodeType":"YulExpressionStatement","src":"13848:21:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13889:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"13900:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13885:3:9"},"nodeType":"YulFunctionCall","src":"13885:18:9"},{"kind":"number","nodeType":"YulLiteral","src":"13905:2:9","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13878:6:9"},"nodeType":"YulFunctionCall","src":"13878:30:9"},"nodeType":"YulExpressionStatement","src":"13878:30:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13928:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"13939:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13924:3:9"},"nodeType":"YulFunctionCall","src":"13924:18:9"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"13944:34:9","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13917:6:9"},"nodeType":"YulFunctionCall","src":"13917:62:9"},"nodeType":"YulExpressionStatement","src":"13917:62:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13999:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"14010:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13995:3:9"},"nodeType":"YulFunctionCall","src":"13995:18:9"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"14015:8:9","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13988:6:9"},"nodeType":"YulFunctionCall","src":"13988:36:9"},"nodeType":"YulExpressionStatement","src":"13988:36:9"},{"nodeType":"YulAssignment","src":"14033:27:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14045:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"14056:3:9","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14041:3:9"},"nodeType":"YulFunctionCall","src":"14041:19:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14033:4:9"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13815:9:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13829:4:9","type":""}],"src":"13664:402:9"},{"body":{"nodeType":"YulBlock","src":"14245:182:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14262:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"14273:2:9","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14255:6:9"},"nodeType":"YulFunctionCall","src":"14255:21:9"},"nodeType":"YulExpressionStatement","src":"14255:21:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14296:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"14307:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14292:3:9"},"nodeType":"YulFunctionCall","src":"14292:18:9"},{"kind":"number","nodeType":"YulLiteral","src":"14312:2:9","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14285:6:9"},"nodeType":"YulFunctionCall","src":"14285:30:9"},"nodeType":"YulExpressionStatement","src":"14285:30:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14335:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"14346:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14331:3:9"},"nodeType":"YulFunctionCall","src":"14331:18:9"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"14351:34:9","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14324:6:9"},"nodeType":"YulFunctionCall","src":"14324:62:9"},"nodeType":"YulExpressionStatement","src":"14324:62:9"},{"nodeType":"YulAssignment","src":"14395:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14407:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"14418:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14403:3:9"},"nodeType":"YulFunctionCall","src":"14403:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14395:4:9"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14222:9:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14236:4:9","type":""}],"src":"14071:356:9"},{"body":{"nodeType":"YulBlock","src":"14635:286:9","statements":[{"nodeType":"YulVariableDeclaration","src":"14645:29:9","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14663:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"14668:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14659:3:9"},"nodeType":"YulFunctionCall","src":"14659:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"14672:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14655:3:9"},"nodeType":"YulFunctionCall","src":"14655:19:9"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"14649:2:9","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14690:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14705:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"14713:2:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14701:3:9"},"nodeType":"YulFunctionCall","src":"14701:15:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14683:6:9"},"nodeType":"YulFunctionCall","src":"14683:34:9"},"nodeType":"YulExpressionStatement","src":"14683:34:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14737:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"14748:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14733:3:9"},"nodeType":"YulFunctionCall","src":"14733:18:9"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"14757:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"14765:2:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14753:3:9"},"nodeType":"YulFunctionCall","src":"14753:15:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14726:6:9"},"nodeType":"YulFunctionCall","src":"14726:43:9"},"nodeType":"YulExpressionStatement","src":"14726:43:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14789:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"14800:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14785:3:9"},"nodeType":"YulFunctionCall","src":"14785:18:9"},{"name":"value2","nodeType":"YulIdentifier","src":"14805:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14778:6:9"},"nodeType":"YulFunctionCall","src":"14778:34:9"},"nodeType":"YulExpressionStatement","src":"14778:34:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14832:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"14843:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14828:3:9"},"nodeType":"YulFunctionCall","src":"14828:18:9"},{"kind":"number","nodeType":"YulLiteral","src":"14848:3:9","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14821:6:9"},"nodeType":"YulFunctionCall","src":"14821:31:9"},"nodeType":"YulExpressionStatement","src":"14821:31:9"},{"nodeType":"YulAssignment","src":"14861:54:9","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"14887:6:9"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14899:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"14910:3:9","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14895:3:9"},"nodeType":"YulFunctionCall","src":"14895:19:9"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"14869:17:9"},"nodeType":"YulFunctionCall","src":"14869:46:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14861:4:9"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14580:9:9","type":""},{"name":"value3","nodeType":"YulTypedName","src":"14591:6:9","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14599:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14607:6:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14615:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14626:4:9","type":""}],"src":"14432:489:9"},{"body":{"nodeType":"YulBlock","src":"15006:169:9","statements":[{"body":{"nodeType":"YulBlock","src":"15052:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15061:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15064:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15054:6:9"},"nodeType":"YulFunctionCall","src":"15054:12:9"},"nodeType":"YulExpressionStatement","src":"15054:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15027:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"15036:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15023:3:9"},"nodeType":"YulFunctionCall","src":"15023:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"15048:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15019:3:9"},"nodeType":"YulFunctionCall","src":"15019:32:9"},"nodeType":"YulIf","src":"15016:52:9"},{"nodeType":"YulVariableDeclaration","src":"15077:29:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15096:9:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15090:5:9"},"nodeType":"YulFunctionCall","src":"15090:16:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"15081:5:9","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15139:5:9"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"15115:23:9"},"nodeType":"YulFunctionCall","src":"15115:30:9"},"nodeType":"YulExpressionStatement","src":"15115:30:9"},{"nodeType":"YulAssignment","src":"15154:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"15164:5:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15154:6:9"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14972:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14983:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14995:6:9","type":""}],"src":"14926:249:9"},{"body":{"nodeType":"YulBlock","src":"15228:77:9","statements":[{"nodeType":"YulAssignment","src":"15238:16:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15249:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"15252:1:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15245:3:9"},"nodeType":"YulFunctionCall","src":"15245:9:9"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"15238:3:9"}]},{"body":{"nodeType":"YulBlock","src":"15277:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"15279:16:9"},"nodeType":"YulFunctionCall","src":"15279:18:9"},"nodeType":"YulExpressionStatement","src":"15279:18:9"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15269:1:9"},{"name":"sum","nodeType":"YulIdentifier","src":"15272:3:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15266:2:9"},"nodeType":"YulFunctionCall","src":"15266:10:9"},"nodeType":"YulIf","src":"15263:36:9"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"15211:1:9","type":""},{"name":"y","nodeType":"YulTypedName","src":"15214:1:9","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"15220:3:9","type":""}],"src":"15180:125:9"},{"body":{"nodeType":"YulBlock","src":"15356:74:9","statements":[{"body":{"nodeType":"YulBlock","src":"15379:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"15381:16:9"},"nodeType":"YulFunctionCall","src":"15381:18:9"},"nodeType":"YulExpressionStatement","src":"15381:18:9"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"15376:1:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15369:6:9"},"nodeType":"YulFunctionCall","src":"15369:9:9"},"nodeType":"YulIf","src":"15366:35:9"},{"nodeType":"YulAssignment","src":"15410:14:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15419:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"15422:1:9"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"15415:3:9"},"nodeType":"YulFunctionCall","src":"15415:9:9"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"15410:1:9"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"15341:1:9","type":""},{"name":"y","nodeType":"YulTypedName","src":"15344:1:9","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"15350:1:9","type":""}],"src":"15310:120:9"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_contract$_BasePaint_$1416__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        if iszero(eq(value_1, iszero(iszero(value_1)))) { revert(0, 0) }\n        value1 := value_1\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_uint256_t_uint256_t_bytes_calldata_ptr__to_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), 96)\n        mstore(add(headStart, 96), value3)\n        calldatacopy(add(headStart, 128), value2, value3)\n        mstore(add(add(headStart, value3), 128), 0)\n        tail := add(add(headStart, and(add(value3, 31), not(31))), 128)\n    }\n    function abi_encode_tuple_packed_t_uint256_t_uint256__to_t_uint256_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), value1)\n        end := add(pos, 64)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function abi_encode_stringliteral_6e9f(pos) -> end\n    {\n        mstore(pos, shl(249, 17))\n        end := add(pos, 1)\n    }\n    function abi_encode_stringliteral_8e2f(pos) -> end\n    {\n        mstore(pos, \"}\")\n        end := add(pos, 1)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_a91eddf639b0b768929589c1a9fd21dcb0107199bdd82e55c5348018a1572f52_t_stringliteral_d42a11b37d35a55052d289dce8be6fb4df3139e056ba2326837c95a847ca2be1_t_string_memory_ptr_t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb_t_stringliteral_63efc49e26c2a0691fbd118ad4ace9a69fa64a27d6ecfb0468e1c404f7b79c0a_t_stringliteral_8cdd418261319b1e50a13c3d613e3de6caa6af5d9770d631b7820c9cd330b60c_t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb_t_stringliteral_dee71bd900939e5251fa52ed0e7fadcfe3990bd7a5ea546147c85d1b972c64b6_t_string_storage_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0_t_stringliteral_8e2ffa389f3a6ded42d759b3377ac0d928e6a268d143bcc9517093d10c843bff__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"{\")\n        let _1 := 1\n        mstore(add(pos, _1), 0x226e616d65223a2022426173655061696e74205469636b657420000000000000)\n        let length := mload(value0)\n        let _2 := 0x20\n        copy_memory_to_memory_with_cleanup(add(value0, _2), add(pos, 27), length)\n        let _3 := add(pos, length)\n        let _4 := shl(242, 2187)\n        mstore(add(_3, 27), _4)\n        mstore(add(_3, 29), shl(129, 0x113232b9b1b934b83a34b7b7111d1011))\n        mstore(add(_3, 45), \"Just a ticket...\")\n        mstore(add(_3, 61), _4)\n        mstore(add(_3, 63), shl(177, 0x1134b6b0b3b2911d1011))\n        let _5 := 73\n        let ret := 0\n        let slotValue := sload(value1)\n        let length_1 := ret\n        length_1 := shr(_1, slotValue)\n        let outOfPlaceEncoding := and(slotValue, _1)\n        if iszero(outOfPlaceEncoding)\n        {\n            length_1 := and(length_1, 0x7f)\n        }\n        if eq(outOfPlaceEncoding, lt(length_1, _2))\n        {\n            mstore(ret, shl(224, 0x4e487b71))\n            mstore(4, 34)\n            revert(ret, 36)\n        }\n        switch outOfPlaceEncoding\n        case 0 {\n            mstore(add(_3, _5), and(slotValue, not(255)))\n            ret := add(add(_3, mul(length_1, iszero(iszero(length_1)))), _5)\n        }\n        case 1 {\n            let dataPos := array_dataslot_string_storage(value1)\n            let i := 0\n            for { } lt(i, length_1) { i := add(i, _2) }\n            {\n                mstore(add(add(_3, i), _5), sload(dataPos))\n                dataPos := add(dataPos, _1)\n            }\n            ret := add(add(_3, length_1), _5)\n        }\n        end := abi_encode_stringliteral_8e2f(abi_encode_stringliteral_6e9f(ret))\n    }\n    function abi_encode_tuple_packed_t_stringliteral_bccab2d885f86fda81bfd84dd4248d31f8073b473d187111d36536db073076fa_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"data:application/json;base64,\")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 29), length)\n        end := add(add(pos, length), 29)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n}","id":9,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1443":[{"length":32,"start":472},{"length":32,"start":1995},{"length":32,"start":2244},{"length":32,"start":2634},{"length":32,"start":2953},{"length":32,"start":3478}]},"linkReferences":{},"object":"6080604052600436106101c15760003560e01c806370a08231116100f7578063a2fb117511610095578063e985e9c511610064578063e985e9c5146104c3578063f02137c8146104e3578063f2fde38b14610503578063f834eeca1461052357600080fd5b8063a2fb11751461044d578063b88d4fde1461047a578063c87b56dd1461048d578063e6664cd1146104ad57600080fd5b806388f57767116100d157806388f57767146103e75780638da5cb5b146103fa57806395d89b4114610418578063a22cb4651461042d57600080fd5b806370a0823114610382578063715018a6146103a2578063815bbd83146103b757600080fd5b806315487ad71161016457806323b872dd1161013e57806323b872dd14610327578063242284f11461033a57806342842e0e1461034f5780636352211e1461036257600080fd5b806315487ad7146102d757806317c50bdf146102f757806318160ddd1461030a57600080fd5b8063081812fc116101a0578063081812fc14610269578063095ea7b3146102895780631209b1f61461029e578063135d088d146102c257600080fd5b806258fce1146101c657806301ffc9a71461021757806306fdde0314610247575b600080fd5b3480156101d257600080fd5b506101fa7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561022357600080fd5b50610237610232366004611943565b610543565b604051901515815260200161020e565b34801561025357600080fd5b5061025c610595565b60405161020e91906119b0565b34801561027557600080fd5b506101fa6102843660046119c3565b610627565b61029c6102973660046119f1565b61066b565b005b3480156102aa57600080fd5b506102b4600a5481565b60405190815260200161020e565b3480156102ce57600080fd5b5061025c61070b565b3480156102e357600080fd5b5061029c6102f23660046119c3565b610799565b61029c610305366004611a1d565b610a46565b34801561031657600080fd5b5060015460005403600019016102b4565b61029c610335366004611a8f565b610bfa565b34801561034657600080fd5b5061029c610d92565b61029c61035d366004611a8f565b610f38565b34801561036e57600080fd5b506101fa61037d3660046119c3565b610f58565b34801561038e57600080fd5b506102b461039d366004611ad0565b610f63565b3480156103ae57600080fd5b5061029c610fb2565b3480156103c357600080fd5b506102376103d23660046119c3565b600d6020526000908152604090205460ff1681565b61029c6103f53660046119f1565b610fc6565b34801561040657600080fd5b506008546001600160a01b03166101fa565b34801561042457600080fd5b5061025c611071565b34801561043957600080fd5b5061029c610448366004611aed565b611080565b34801561045957600080fd5b506102b46104683660046119c3565b600c6020526000908152604090205481565b61029c610488366004611b41565b6110ec565b34801561049957600080fd5b5061025c6104a83660046119c3565b611136565b3480156104b957600080fd5b506102b4600b5481565b3480156104cf57600080fd5b506102376104de366004611c21565b6111bd565b3480156104ef57600080fd5b5061029c6104fe3660046119c3565b6111eb565b34801561050f57600080fd5b5061029c61051e366004611ad0565b611231565b34801561052f57600080fd5b5061029c61053e366004611ad0565b6112af565b60006301ffc9a760e01b6001600160e01b03198316148061057457506380ac58cd60e01b6001600160e01b03198316145b8061058f5750635b5e139f60e01b6001600160e01b03198316145b92915050565b6060600280546105a490611c4f565b80601f01602080910402602001604051908101604052809291908181526020018280546105d090611c4f565b801561061d5780601f106105f25761010080835404028352916020019161061d565b820191906000526020600020905b81548152906001019060200180831161060057829003601f168201915b5050505050905090565b60006106328261132f565b61064f576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b600061067682610f58565b9050336001600160a01b038216146106af5761069281336111bd565b6106af576040516367d9dca160e11b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6009805461071890611c4f565b80601f016020809104026020016040519081016040528092919081815260200182805461074490611c4f565b80156107915780601f1061076657610100808354040283529160200191610791565b820191906000526020600020905b81548152906001019060200180831161077457829003601f168201915b505050505081565b6000818152600d602052604090205460ff16156107c957604051630c8d9eab60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b74e452b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084b9190611c89565b811061086a57604051630b046f8960e21b815260040160405180910390fd5b6040805160018082528183019092526000916020808301908036833701905050905081816000815181106108a0576108a0611ca2565b6020908102919091010152604051638abe099160e01b815247906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638abe0991906108f9908590600401611cb8565b600060405180830381600087803b15801561091357600080fd5b505af1158015610927573d6000803e3d6000fd5b504792506000915061093b90508383611d12565b6000868152600c60205260408082205490516331a9108f60e11b815260048101829052929350913090636352211e90602401602060405180830381865afa15801561098a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ae9190611d25565b90506000816001600160a01b03168460405160006040518083038185875af1925050503d80600081146109fd576040519150601f19603f3d011682016040523d82523d6000602084013e610a02565b606091505b5050905080610a2457604051632684a07960e01b815260040160405180910390fd5b50505060009485525050600d602052505060409020805460ff19166001179055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b74e452b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aca9190611c89565b6000818152600c6020526040908190205490516331a9108f60e11b815260048101829052919250903090636352211e90602401602060405180830381865afa158015610b1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3e9190611d25565b6001600160a01b0316336001600160a01b031614610b6f576040516330c6392160e11b815260040160405180910390fd5b600b54604051632c1e6ef360e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163b079bbcc91610bc291869189908990600401611d42565b600060405180830381600087803b158015610bdc57600080fd5b505af1158015610bf0573d6000803e3d6000fd5b5050505050505050565b6000610c0582611364565b9050836001600160a01b0316816001600160a01b031614610c385760405162a1148160e81b815260040160405180910390fd5b60008281526006602052604090208054338082146001600160a01b03881690911417610c8557610c6886336111bd565b610c8557604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b038516610cac57604051633a954ecd60e21b815260040160405180910390fd5b8015610cb757600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040812091909155600160e11b84169003610d4957600184016000818152600460205260408120549003610d47576000548114610d475760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b74e452b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e169190611c89565b6000818152600c602052604090205490915015610e465760405163097e1d9b60e01b815260040160405180910390fd5b604080514460208201529081018290526000906060016040516020818303038152906040528051906020012060001c90506000306001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb9190611c89565b610ee59083611d95565b6000848152600c602090815260409182902083905581518381529081018690529192507fa1e3d3bd6bcaf2ce1bc718cef231fcb8c9976e46b16713a3291ae4a66f79ade6910160405180910390a1505050565b610f53838383604051806020016040528060008152506110ec565b505050565b600061058f82611364565b60006001600160a01b038216610f8c576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b610fba6113da565b610fc46000611434565b565b80600003610fe757604051630c3cab0960e11b815260040160405180910390fd5b80600a54610ff59190611da9565b341461101457604051638b6ebb4d60e01b815260040160405180910390fd5b61101e3382611486565b600a54604080516001600160a01b038516815260208101849052908101919091527f7d58f5ddf17a7f65d89554f5d8144ae1dc788046467927063c090f92ed1145dc906060015b60405180910390a15050565b6060600380546105a490611c4f565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6110f7848484610bfa565b6001600160a01b0383163b156111305761111384848484611584565b611130576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b60606111418261132f565b61115e57604051634a1850bf60e11b815260040160405180910390fd5b60006111698361166f565b600960405160200161117c929190611dc0565b604051602081830303815290604052905061119681611702565b6040516020016111a69190611f26565b604051602081830303815290604052915050919050565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6111f36113da565b600a80549082905560408051828152602081018490527fd4c5e06b1ae097ba02372652a7adaa6e4a8e00be527497a3ad0ebc3f761ef3fb9101611065565b6112396113da565b6001600160a01b0381166112a35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6112ac81611434565b50565b6112b76113da565b6000816001600160a01b03164760405160006040518083038185875af1925050503d8060008114611304576040519150601f19603f3d011682016040523d82523d6000602084013e611309565b606091505b505090508061132b57604051632684a07960e01b815260040160405180910390fd5b5050565b600081600111158015611343575060005482105b801561058f575050600090815260046020526040902054600160e01b161590565b600081806001116113c1576000548110156113c15760008181526004602052604081205490600160e01b821690036113bf575b806000036113b8575060001901600081815260046020526040902054611397565b9392505050565b505b604051636f96cda160e11b815260040160405180910390fd5b6008546001600160a01b03163314610fc45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161129a565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054908290036114ab5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b03831660008181526005602090815260408083208054680100000000000000018802019055848352600490915281206001851460e11b4260a01b178317905582840190839083907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4600183015b81811461155a57808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600101611522565b508160000361157b57604051622e076360e81b815260040160405180910390fd5b60005550505050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906115b9903390899088908890600401611f6b565b6020604051808303816000875af19250505080156115f4575060408051601f3d908101601f191682019092526115f191810190611fa8565b60015b611652573d808015611622576040519150601f19603f3d011682016040523d82523d6000602084013e611627565b606091505b50805160000361164a576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b6060600061167c83611855565b600101905060008167ffffffffffffffff81111561169c5761169c611b2b565b6040519080825280601f01601f1916602001820160405280156116c6576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846116d057509392505050565b6060815160000361172157505060408051602081019091526000815290565b6000604051806060016040528060408152602001611fed60409139905060006003845160026117509190611fc5565b61175a9190611fd8565b611765906004611da9565b67ffffffffffffffff81111561177d5761177d611b2b565b6040519080825280601f01601f1916602001820160405280156117a7576020820181803683370190505b509050600182016020820185865187015b80821015611813576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453506001830192506117b8565b505060038651066001811461182f57600281146118425761184a565b603d6001830353603d600283035361184a565b603d60018303535b509195945050505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106118945772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106118c0576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106118de57662386f26fc10000830492506010015b6305f5e10083106118f6576305f5e100830492506008015b612710831061190a57612710830492506004015b6064831061191c576064830492506002015b600a831061058f5760010192915050565b6001600160e01b0319811681146112ac57600080fd5b60006020828403121561195557600080fd5b81356113b88161192d565b60005b8381101561197b578181015183820152602001611963565b50506000910152565b6000815180845261199c816020860160208601611960565b601f01601f19169290920160200192915050565b6020815260006113b86020830184611984565b6000602082840312156119d557600080fd5b5035919050565b6001600160a01b03811681146112ac57600080fd5b60008060408385031215611a0457600080fd5b8235611a0f816119dc565b946020939093013593505050565b60008060208385031215611a3057600080fd5b823567ffffffffffffffff80821115611a4857600080fd5b818501915085601f830112611a5c57600080fd5b813581811115611a6b57600080fd5b866020828501011115611a7d57600080fd5b60209290920196919550909350505050565b600080600060608486031215611aa457600080fd5b8335611aaf816119dc565b92506020840135611abf816119dc565b929592945050506040919091013590565b600060208284031215611ae257600080fd5b81356113b8816119dc565b60008060408385031215611b0057600080fd5b8235611b0b816119dc565b915060208301358015158114611b2057600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611b5757600080fd5b8435611b62816119dc565b93506020850135611b72816119dc565b925060408501359150606085013567ffffffffffffffff80821115611b9657600080fd5b818701915087601f830112611baa57600080fd5b813581811115611bbc57611bbc611b2b565b604051601f8201601f19908116603f01168101908382118183101715611be457611be4611b2b565b816040528281528a6020848701011115611bfd57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215611c3457600080fd5b8235611c3f816119dc565b91506020830135611b20816119dc565b600181811c90821680611c6357607f821691505b602082108103611c8357634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215611c9b57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6020808252825182820181905260009190848201906040850190845b81811015611cf057835183529284019291840191600101611cd4565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561058f5761058f611cfc565b600060208284031215611d3757600080fd5b81516113b8816119dc565b84815283602082015260606040820152816060820152818360808301376000818301608090810191909152601f909201601f191601019392505050565b634e487b7160e01b600052601260045260246000fd5b600082611da457611da4611d7f565b500690565b808202811582820484141761058f5761058f611cfc565b607b60f81b8152600060017f226e616d65223a2022426173655061696e74205469636b6574200000000000008184015284516020611e0482601b8701838a01611960565b61088b60f21b601b9286019283018190526f113232b9b1b934b83a34b7b7111d101160811b601d8401526f253ab9ba1030903a34b1b5b2ba17171760811b602d840152603d830152691134b6b0b3b2911d101160b11b603f830152855460499060009080861c86821680611e7957607f821691505b8582108103611e9657634e487b7160e01b84526022600452602484fd5b808015611eaa5760018114611ec357611ef4565b60ff198416888701528215158302880186019450611ef4565b60008c81526020902060005b84811015611eea5781548a8201890152908a01908801611ecf565b5050858389010194505b50505050611f19611f0c82601160f91b815260010190565b607d60f81b815260010190565b9998505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251611f5e81601d850160208701611960565b91909101601d0192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611f9e90830184611984565b9695505050505050565b600060208284031215611fba57600080fd5b81516113b88161192d565b8082018082111561058f5761058f611cfc565b600082611fe757611fe7611d7f565b50049056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220cac06bdfb2020a204147e7b935cb2543c9ae8a99c85f0f338e3c1b95c228463264736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C1 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xA2FB1175 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xE985E9C5 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x4C3 JUMPI DUP1 PUSH4 0xF02137C8 EQ PUSH2 0x4E3 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x503 JUMPI DUP1 PUSH4 0xF834EECA EQ PUSH2 0x523 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA2FB1175 EQ PUSH2 0x44D JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x47A JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x48D JUMPI DUP1 PUSH4 0xE6664CD1 EQ PUSH2 0x4AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x88F57767 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x88F57767 EQ PUSH2 0x3E7 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3FA JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x418 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x42D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x382 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3A2 JUMPI DUP1 PUSH4 0x815BBD83 EQ PUSH2 0x3B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x15487AD7 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x23B872DD GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x327 JUMPI DUP1 PUSH4 0x242284F1 EQ PUSH2 0x33A JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x34F JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x15487AD7 EQ PUSH2 0x2D7 JUMPI DUP1 PUSH4 0x17C50BDF EQ PUSH2 0x2F7 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x30A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x81812FC GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x269 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0x1209B1F6 EQ PUSH2 0x29E JUMPI DUP1 PUSH4 0x135D088D EQ PUSH2 0x2C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x58FCE1 EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x217 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x247 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FA PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x223 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x232 CALLDATASIZE PUSH1 0x4 PUSH2 0x1943 JUMP JUMPDEST PUSH2 0x543 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x20E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x253 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25C PUSH2 0x595 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20E SWAP2 SWAP1 PUSH2 0x19B0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FA PUSH2 0x284 CALLDATASIZE PUSH1 0x4 PUSH2 0x19C3 JUMP JUMPDEST PUSH2 0x627 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x19F1 JUMP JUMPDEST PUSH2 0x66B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x20E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25C PUSH2 0x70B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29C PUSH2 0x2F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x19C3 JUMP JUMPDEST PUSH2 0x799 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x305 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A1D JUMP JUMPDEST PUSH2 0xA46 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB PUSH1 0x0 NOT ADD PUSH2 0x2B4 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x335 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A8F JUMP JUMPDEST PUSH2 0xBFA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29C PUSH2 0xD92 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x35D CALLDATASIZE PUSH1 0x4 PUSH2 0x1A8F JUMP JUMPDEST PUSH2 0xF38 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FA PUSH2 0x37D CALLDATASIZE PUSH1 0x4 PUSH2 0x19C3 JUMP JUMPDEST PUSH2 0xF58 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH2 0x39D CALLDATASIZE PUSH1 0x4 PUSH2 0x1AD0 JUMP JUMPDEST PUSH2 0xF63 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29C PUSH2 0xFB2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x3D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x19C3 JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x3F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x19F1 JUMP JUMPDEST PUSH2 0xFC6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x406 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x424 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25C PUSH2 0x1071 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x439 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29C PUSH2 0x448 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AED JUMP JUMPDEST PUSH2 0x1080 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x459 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH2 0x468 CALLDATASIZE PUSH1 0x4 PUSH2 0x19C3 JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x488 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B41 JUMP JUMPDEST PUSH2 0x10EC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x499 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25C PUSH2 0x4A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x19C3 JUMP JUMPDEST PUSH2 0x1136 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B4 PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x4DE CALLDATASIZE PUSH1 0x4 PUSH2 0x1C21 JUMP JUMPDEST PUSH2 0x11BD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29C PUSH2 0x4FE CALLDATASIZE PUSH1 0x4 PUSH2 0x19C3 JUMP JUMPDEST PUSH2 0x11EB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29C PUSH2 0x51E CALLDATASIZE PUSH1 0x4 PUSH2 0x1AD0 JUMP JUMPDEST PUSH2 0x1231 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29C PUSH2 0x53E CALLDATASIZE PUSH1 0x4 PUSH2 0x1AD0 JUMP JUMPDEST PUSH2 0x12AF JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ DUP1 PUSH2 0x574 JUMPI POP PUSH4 0x80AC58CD PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST DUP1 PUSH2 0x58F JUMPI POP PUSH4 0x5B5E139F PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x5A4 SWAP1 PUSH2 0x1C4F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5D0 SWAP1 PUSH2 0x1C4F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x61D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5F2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x61D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x600 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x632 DUP3 PUSH2 0x132F JUMP JUMPDEST PUSH2 0x64F JUMPI PUSH1 0x40 MLOAD PUSH4 0x33D1C039 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x676 DUP3 PUSH2 0xF58 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ PUSH2 0x6AF JUMPI PUSH2 0x692 DUP2 CALLER PUSH2 0x11BD JUMP JUMPDEST PUSH2 0x6AF JUMPI PUSH1 0x40 MLOAD PUSH4 0x67D9DCA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH2 0x718 SWAP1 PUSH2 0x1C4F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x744 SWAP1 PUSH2 0x1C4F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x791 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x766 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x791 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x774 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x7C9 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC8D9EAB PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB74E452B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x827 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x84B SWAP2 SWAP1 PUSH2 0x1C89 JUMP JUMPDEST DUP2 LT PUSH2 0x86A JUMPI PUSH1 0x40 MLOAD PUSH4 0xB046F89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x8A0 JUMPI PUSH2 0x8A0 PUSH2 0x1CA2 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x8ABE0991 PUSH1 0xE0 SHL DUP2 MSTORE SELFBALANCE SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x8ABE0991 SWAP1 PUSH2 0x8F9 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1CB8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x913 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x927 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SELFBALANCE SWAP3 POP PUSH1 0x0 SWAP2 POP PUSH2 0x93B SWAP1 POP DUP4 DUP4 PUSH2 0x1D12 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE SWAP3 SWAP4 POP SWAP2 ADDRESS SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x98A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9AE SWAP2 SWAP1 PUSH2 0x1D25 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x9FD JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA02 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xA24 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2684A079 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP PUSH1 0x0 SWAP5 DUP6 MSTORE POP POP PUSH1 0xD PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB74E452B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xAA6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xACA SWAP2 SWAP1 PUSH2 0x1C89 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE SWAP2 SWAP3 POP SWAP1 ADDRESS SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB1A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB3E SWAP2 SWAP1 PUSH2 0x1D25 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xB6F JUMPI PUSH1 0x40 MLOAD PUSH4 0x30C63921 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xB SLOAD PUSH1 0x40 MLOAD PUSH4 0x2C1E6EF3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0xB079BBCC SWAP2 PUSH2 0xBC2 SWAP2 DUP7 SWAP2 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x1D42 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBF0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC05 DUP3 PUSH2 0x1364 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC38 JUMPI PUSH1 0x40 MLOAD PUSH3 0xA11481 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD CALLER DUP1 DUP3 EQ PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 SWAP2 EQ OR PUSH2 0xC85 JUMPI PUSH2 0xC68 DUP7 CALLER PUSH2 0x11BD JUMP JUMPDEST PUSH2 0xC85 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CE44B5F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0xCAC JUMPI PUSH1 0x40 MLOAD PUSH4 0x3A954ECD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0xCB7 JUMPI PUSH1 0x0 DUP3 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP2 DUP8 AND DUP1 DUP3 MSTORE SWAP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE TIMESTAMP PUSH1 0xA0 SHL OR PUSH1 0x1 PUSH1 0xE1 SHL OR PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0xE1 SHL DUP5 AND SWAP1 SUB PUSH2 0xD49 JUMPI PUSH1 0x1 DUP5 ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SUB PUSH2 0xD47 JUMPI PUSH1 0x0 SLOAD DUP2 EQ PUSH2 0xD47 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE JUMPDEST POP JUMPDEST DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB74E452B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDF2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE16 SWAP2 SWAP1 PUSH2 0x1C89 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xE46 JUMPI PUSH1 0x40 MLOAD PUSH4 0x97E1D9B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PREVRANDAO PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEB7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEDB SWAP2 SWAP1 PUSH2 0x1C89 JUMP JUMPDEST PUSH2 0xEE5 SWAP1 DUP4 PUSH2 0x1D95 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE DUP2 MLOAD DUP4 DUP2 MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH32 0xA1E3D3BD6BCAF2CE1BC718CEF231FCB8C9976E46B16713A3291AE4A66F79ADE6 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0xF53 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x10EC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58F DUP3 PUSH2 0x1364 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xF8C JUMPI PUSH1 0x40 MLOAD PUSH4 0x23D3AD81 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0xFBA PUSH2 0x13DA JUMP JUMPDEST PUSH2 0xFC4 PUSH1 0x0 PUSH2 0x1434 JUMP JUMPDEST JUMP JUMPDEST DUP1 PUSH1 0x0 SUB PUSH2 0xFE7 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC3CAB09 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xA SLOAD PUSH2 0xFF5 SWAP2 SWAP1 PUSH2 0x1DA9 JUMP JUMPDEST CALLVALUE EQ PUSH2 0x1014 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8B6EBB4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x101E CALLER DUP3 PUSH2 0x1486 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x7D58F5DDF17A7F65D89554F5D8144AE1DC788046467927063C090F92ED1145DC SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x5A4 SWAP1 PUSH2 0x1C4F JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x10F7 DUP5 DUP5 DUP5 PUSH2 0xBFA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x1130 JUMPI PUSH2 0x1113 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1584 JUMP JUMPDEST PUSH2 0x1130 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1141 DUP3 PUSH2 0x132F JUMP JUMPDEST PUSH2 0x115E JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1850BF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1169 DUP4 PUSH2 0x166F JUMP JUMPDEST PUSH1 0x9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x117C SWAP3 SWAP2 SWAP1 PUSH2 0x1DC0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0x1196 DUP2 PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x11A6 SWAP2 SWAP1 PUSH2 0x1F26 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x11F3 PUSH2 0x13DA JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD SWAP1 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0xD4C5E06B1AE097BA02372652A7ADAA6E4A8E00BE527497A3AD0EBC3F761EF3FB SWAP2 ADD PUSH2 0x1065 JUMP JUMPDEST PUSH2 0x1239 PUSH2 0x13DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x12A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x12AC DUP2 PUSH2 0x1434 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x12B7 PUSH2 0x13DA JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SELFBALANCE PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1304 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1309 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x132B JUMPI PUSH1 0x40 MLOAD PUSH4 0x2684A079 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 GT ISZERO DUP1 ISZERO PUSH2 0x1343 JUMPI POP PUSH1 0x0 SLOAD DUP3 LT JUMPDEST DUP1 ISZERO PUSH2 0x58F JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xE0 SHL AND ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x1 GT PUSH2 0x13C1 JUMPI PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x13C1 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 PUSH1 0x1 PUSH1 0xE0 SHL DUP3 AND SWAP1 SUB PUSH2 0x13BF JUMPI JUMPDEST DUP1 PUSH1 0x0 SUB PUSH2 0x13B8 JUMPI POP PUSH1 0x0 NOT ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1397 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6F96CDA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xFC4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x129A JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 DUP3 SWAP1 SUB PUSH2 0x14AB JUMPI PUSH1 0x40 MLOAD PUSH4 0xB562E8DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH9 0x10000000000000001 DUP9 MUL ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x4 SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x1 DUP6 EQ PUSH1 0xE1 SHL TIMESTAMP PUSH1 0xA0 SHL OR DUP4 OR SWAP1 SSTORE DUP3 DUP5 ADD SWAP1 DUP4 SWAP1 DUP4 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP2 DUP1 LOG4 PUSH1 0x1 DUP4 ADD JUMPDEST DUP2 DUP2 EQ PUSH2 0x155A JUMPI DUP1 DUP4 PUSH1 0x0 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x0 DUP1 LOG4 PUSH1 0x1 ADD PUSH2 0x1522 JUMP JUMPDEST POP DUP2 PUSH1 0x0 SUB PUSH2 0x157B JUMPI PUSH1 0x40 MLOAD PUSH3 0x2E0763 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x15B9 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1F6B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x15F4 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x15F1 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1FA8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1652 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1622 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1627 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x164A JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x167C DUP4 PUSH2 0x1855 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x169C JUMPI PUSH2 0x169C PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x16C6 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x16D0 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x0 SUB PUSH2 0x1721 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FED PUSH1 0x40 SWAP2 CODECOPY SWAP1 POP PUSH1 0x0 PUSH1 0x3 DUP5 MLOAD PUSH1 0x2 PUSH2 0x1750 SWAP2 SWAP1 PUSH2 0x1FC5 JUMP JUMPDEST PUSH2 0x175A SWAP2 SWAP1 PUSH2 0x1FD8 JUMP JUMPDEST PUSH2 0x1765 SWAP1 PUSH1 0x4 PUSH2 0x1DA9 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x177D JUMPI PUSH2 0x177D PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x17A7 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x1 DUP3 ADD PUSH1 0x20 DUP3 ADD DUP6 DUP7 MLOAD DUP8 ADD JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x1813 JUMPI PUSH1 0x3 DUP3 ADD SWAP2 POP DUP2 MLOAD PUSH1 0x3F DUP2 PUSH1 0x12 SHR AND DUP6 ADD MLOAD DUP5 MSTORE8 PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH1 0x3F DUP2 PUSH1 0xC SHR AND DUP6 ADD MLOAD DUP5 MSTORE8 PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH1 0x3F DUP2 PUSH1 0x6 SHR AND DUP6 ADD MLOAD DUP5 MSTORE8 PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH1 0x3F DUP2 AND DUP6 ADD MLOAD DUP5 MSTORE8 POP PUSH1 0x1 DUP4 ADD SWAP3 POP PUSH2 0x17B8 JUMP JUMPDEST POP POP PUSH1 0x3 DUP7 MLOAD MOD PUSH1 0x1 DUP2 EQ PUSH2 0x182F JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x1842 JUMPI PUSH2 0x184A JUMP JUMPDEST PUSH1 0x3D PUSH1 0x1 DUP4 SUB MSTORE8 PUSH1 0x3D PUSH1 0x2 DUP4 SUB MSTORE8 PUSH2 0x184A JUMP JUMPDEST PUSH1 0x3D PUSH1 0x1 DUP4 SUB MSTORE8 JUMPDEST POP SWAP2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1894 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x18C0 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x18DE JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x18F6 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x190A JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x191C JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x58F JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x12AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1955 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x13B8 DUP2 PUSH2 0x192D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x197B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1963 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x199C DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1960 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x13B8 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1984 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x12AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1A0F DUP2 PUSH2 0x19DC JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1A48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1A6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1A7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1AA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1AAF DUP2 PUSH2 0x19DC JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1ABF DUP2 PUSH2 0x19DC JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x13B8 DUP2 PUSH2 0x19DC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1B0B DUP2 PUSH2 0x19DC JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1B20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1B57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1B62 DUP2 PUSH2 0x19DC JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1B72 DUP2 PUSH2 0x19DC JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1B96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1BAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1BBC JUMPI PUSH2 0x1BBC PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1BE4 JUMPI PUSH2 0x1BE4 PUSH2 0x1B2B JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1BFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1C3F DUP2 PUSH2 0x19DC JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1B20 DUP2 PUSH2 0x19DC JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1C63 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1C83 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1CF0 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1CD4 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x58F JUMPI PUSH2 0x58F PUSH2 0x1CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x13B8 DUP2 PUSH2 0x19DC JUMP JUMPDEST DUP5 DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE DUP2 PUSH1 0x60 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x80 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x80 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1DA4 JUMPI PUSH2 0x1DA4 PUSH2 0x1D7F JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x58F JUMPI PUSH2 0x58F PUSH2 0x1CFC JUMP JUMPDEST PUSH1 0x7B PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH32 0x226E616D65223A2022426173655061696E74205469636B657420000000000000 DUP2 DUP5 ADD MSTORE DUP5 MLOAD PUSH1 0x20 PUSH2 0x1E04 DUP3 PUSH1 0x1B DUP8 ADD DUP4 DUP11 ADD PUSH2 0x1960 JUMP JUMPDEST PUSH2 0x88B PUSH1 0xF2 SHL PUSH1 0x1B SWAP3 DUP7 ADD SWAP3 DUP4 ADD DUP2 SWAP1 MSTORE PUSH16 0x113232B9B1B934B83A34B7B7111D1011 PUSH1 0x81 SHL PUSH1 0x1D DUP5 ADD MSTORE PUSH16 0x253AB9BA1030903A34B1B5B2BA171717 PUSH1 0x81 SHL PUSH1 0x2D DUP5 ADD MSTORE PUSH1 0x3D DUP4 ADD MSTORE PUSH10 0x1134B6B0B3B2911D1011 PUSH1 0xB1 SHL PUSH1 0x3F DUP4 ADD MSTORE DUP6 SLOAD PUSH1 0x49 SWAP1 PUSH1 0x0 SWAP1 DUP1 DUP7 SHR DUP7 DUP3 AND DUP1 PUSH2 0x1E79 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST DUP6 DUP3 LT DUP2 SUB PUSH2 0x1E96 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST DUP1 DUP1 ISZERO PUSH2 0x1EAA JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x1EC3 JUMPI PUSH2 0x1EF4 JUMP JUMPDEST PUSH1 0xFF NOT DUP5 AND DUP9 DUP8 ADD MSTORE DUP3 ISZERO ISZERO DUP4 MUL DUP9 ADD DUP7 ADD SWAP5 POP PUSH2 0x1EF4 JUMP JUMPDEST PUSH1 0x0 DUP13 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1EEA JUMPI DUP2 SLOAD DUP11 DUP3 ADD DUP10 ADD MSTORE SWAP1 DUP11 ADD SWAP1 DUP9 ADD PUSH2 0x1ECF JUMP JUMPDEST POP POP DUP6 DUP4 DUP10 ADD ADD SWAP5 POP JUMPDEST POP POP POP POP PUSH2 0x1F19 PUSH2 0x1F0C DUP3 PUSH1 0x11 PUSH1 0xF9 SHL DUP2 MSTORE PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x7D PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x646174613A6170706C69636174696F6E2F6A736F6E3B6261736536342C000000 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x1F5E DUP2 PUSH1 0x1D DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1960 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1D ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1F9E SWAP1 DUP4 ADD DUP5 PUSH2 0x1984 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1FBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x13B8 DUP2 PUSH2 0x192D JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x58F JUMPI PUSH2 0x58F PUSH2 0x1CFC JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1FE7 JUMPI PUSH2 0x1FE7 PUSH2 0x1D7F JUMP JUMPDEST POP DIV SWAP1 JUMP INVALID COINBASE TIMESTAMP NUMBER PREVRANDAO GASLIMIT CHAINID SELFBALANCE BASEFEE 0x49 0x4A 0x4B 0x4C 0x4D 0x4E 0x4F POP MLOAD MSTORE MSTORE8 SLOAD SSTORE JUMP JUMPI PC MSIZE GAS PUSH2 0x6263 PUSH5 0x6566676869 PUSH11 0x6B6C6D6E6F707172737475 PUSH23 0x7778797A303132333435363738392B2FA2646970667358 0x22 SLT KECCAK256 0xCA 0xC0 PUSH12 0xDFB2020A204147E7B935CB25 NUMBER 0xC9 0xAE DUP11 SWAP10 0xC8 0x5F 0xF CALLER DUP15 EXTCODECOPY SHL SWAP6 0xC2 0x28 CHAINID ORIGIN PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"912:5159:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1296:36;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;196:32:9;;;178:51;;166:2;151:18;1296:36:6;;;;;;;;9155:630:7;;;;;;;;;;-1:-1:-1;9155:630:7;;;;;:::i;:::-;;:::i;:::-;;;791:14:9;;784:22;766:41;;754:2;739:18;9155:630:7;626:187:9;10039:98:7;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;16360:214::-;;;;;;;;;;-1:-1:-1;16360:214:7;;;;;:::i;:::-;;:::i;15812:398::-;;;;;;:::i;:::-;;:::i;:::-;;1366:26:6;;;;;;;;;;;;;;;;;;;2569:25:9;;;2557:2;2542:18;1366:26:6;2423:177:9;1338:22:6;;;;;;;;;;;;;:::i;3810:707::-;;;;;;;;;;-1:-1:-1;3810:707:6;;;;;:::i;:::-;;:::i;3390:289::-;;;;;;:::i;:::-;;:::i;5894:317:7:-;;;;;;;;;;-1:-1:-1;5381:1:6;6164:12:7;5955:7;6148:13;:28;-1:-1:-1;;6148:46:7;5894:317;;19903:2764;;;;;;:::i;:::-;;:::i;2372:406:6:-;;;;;;;;;;;;;:::i;22758:187:7:-;;;;;;:::i;:::-;;:::i;11391:150::-;;;;;;;;;;-1:-1:-1;11391:150:7;;;;;:::i;:::-;;:::i;7045:230::-;;;;;;;;;;-1:-1:-1;7045:230:7;;;;;:::i;:::-;;:::i;1824:101:0:-;;;;;;;;;;;;;:::i;1586:47:6:-;;;;;;;;;;-1:-1:-1;1586:47:6;;;;;:::i;:::-;;;;;;;;;;;;;;;;2959:320;;;;;;:::i;:::-;;:::i;1201:85:0:-;;;;;;;;;;-1:-1:-1;1273:6:0;;-1:-1:-1;;;;;1273:6:0;1201:85;;10208:102:7;;;;;;;;;;;;;:::i;16901:231::-;;;;;;;;;;-1:-1:-1;16901:231:7;;;;;:::i;:::-;;:::i;1475:42:6:-;;;;;;;;;;-1:-1:-1;1475:42:6;;;;;:::i;:::-;;;;;;;;;;;;;;23526:396:7;;;;;;:::i;:::-;;:::i;4670:561:6:-;;;;;;;;;;-1:-1:-1;4670:561:6;;;;;:::i;:::-;;:::i;1398:22::-;;;;;;;;;;;;;;;;17282:162:7;;;;;;;;;;-1:-1:-1;17282:162:7;;;;;:::i;:::-;;:::i;5537:214:6:-;;;;;;;;;;-1:-1:-1;5537:214:6;;;;;:::i;:::-;;:::i;2074:198:0:-;;;;;;;;;;-1:-1:-1;2074:198:0;;;;;:::i;:::-;;:::i;5874:195:6:-;;;;;;;;;;-1:-1:-1;5874:195:6;;;;;:::i;:::-;;:::i;9155:630:7:-;9240:4;-1:-1:-1;;;;;;;;;9558:25:7;;;;:101;;-1:-1:-1;;;;;;;;;;9634:25:7;;;9558:101;:177;;;-1:-1:-1;;;;;;;;;;9710:25:7;;;9558:177;9539:196;9155:630;-1:-1:-1;;9155:630:7:o;10039:98::-;10093:13;10125:5;10118:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10039:98;:::o;16360:214::-;16436:7;16460:16;16468:7;16460;:16::i;:::-;16455:64;;16485:34;;-1:-1:-1;;;16485:34:7;;;;;;;;;;;16455:64;-1:-1:-1;16537:24:7;;;;:15;:24;;;;;:30;-1:-1:-1;;;;;16537:30:7;;16360:214::o;15812:398::-;15900:13;15916:16;15924:7;15916;:16::i;:::-;15900:32;-1:-1:-1;39523:10:7;-1:-1:-1;;;;;15947:28:7;;;15943:172;;15994:44;16011:5;39523:10;17282:162;:::i;15994:44::-;15989:126;;16065:35;;-1:-1:-1;;;16065:35:7;;;;;;;;;;;15989:126;16125:24;;;;:15;:24;;;;;;:35;;-1:-1:-1;;;;;;16125:35:7;-1:-1:-1;;;;;16125:35:7;;;;;;;;;16175:28;;16125:24;;16175:28;;;;;;;15890:320;15812:398;;:::o;1338:22:6:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3810:707::-;3871:21;;;;:15;:21;;;;;;;;3868:49;;;3901:16;;-1:-1:-1;;;3901:16:6;;;;;;;;;;;3868:49;3938:9;-1:-1:-1;;;;;3938:15:6;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3930:4;:25;3927:49;;3964:12;;-1:-1:-1;;;3964:12:6;;;;;;;;;;;3927:49;4013:16;;;4027:1;4013:16;;;;;;;;;3987:23;;4013:16;;;;;;;;;;;-1:-1:-1;4013:16:6;3987:42;;4051:4;4039:6;4046:1;4039:9;;;;;;;;:::i;:::-;;;;;;;;;;:16;4122:32;;-1:-1:-1;;;4122:32:6;;4091:21;;-1:-1:-1;;;;;4122:9:6;:24;;;;:32;;4147:6;;4122:32;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4187:21:6;;-1:-1:-1;4164:20:6;;-1:-1:-1;4237:28:6;;-1:-1:-1;4252:13:6;4187:21;4237:28;:::i;:::-;4275:22;4300:13;;;:7;:13;;;;;;;4341:28;;-1:-1:-1;;;4341:28:6;;;;;2569:25:9;;;4219:46:6;;-1:-1:-1;4300:13:6;4341:4;;:12;;2542:18:9;;4341:28:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4324:45;;4380:9;4395:6;-1:-1:-1;;;;;4395:11:6;4414:7;4395:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4379:47;;;4441:4;4437:35;;4454:18;;-1:-1:-1;;;4454:18:6;;;;;;;;;;;4437:35;-1:-1:-1;;;4482:21:6;;;;-1:-1:-1;;4482:15:6;:21;;-1:-1:-1;;4482:21:6;;;:28;;-1:-1:-1;;4482:28:6;4506:4;4482:28;;;3810:707::o;3390:289::-;3456:13;3472:9;-1:-1:-1;;;;;3472:15:6;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3499:22;3524:14;;;:7;:14;;;;;;;;3565:28;;-1:-1:-1;;;3565:28:6;;;;;2569:25:9;;;3524:14:6;;-1:-1:-1;3524:14:6;3565:4;;:12;;2542:18:9;;3565:28:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;3551:42:6;:10;-1:-1:-1;;;;;3551:42:6;;3548:65;;3602:11;;-1:-1:-1;;;3602:11:6;;;;;;;;;;;3548:65;3655:7;;3632:40;;-1:-1:-1;;;3632:40:6;;-1:-1:-1;;;;;3632:9:6;:15;;;;:40;;3648:5;;3664:7;;;;3632:40;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3446:233;;3390:289;;:::o;19903:2764:7:-;20040:27;20070;20089:7;20070:18;:27::i;:::-;20040:57;;20153:4;-1:-1:-1;;;;;20112:45:7;20128:19;-1:-1:-1;;;;;20112:45:7;;20108:86;;20166:28;;-1:-1:-1;;;20166:28:7;;;;;;;;;;;20108:86;20206:27;19036:24;;;:15;:24;;;;;19260:26;;39523:10;18673:30;;;-1:-1:-1;;;;;18370:28:7;;18651:20;;;18648:56;20389:179;;20481:43;20498:4;39523:10;17282:162;:::i;20481:43::-;20476:92;;20533:35;;-1:-1:-1;;;20533:35:7;;;;;;;;;;;20476:92;-1:-1:-1;;;;;20583:16:7;;20579:52;;20608:23;;-1:-1:-1;;;20608:23:7;;;;;;;;;;;20579:52;20774:15;20771:157;;;20912:1;20891:19;20884:30;20771:157;-1:-1:-1;;;;;21300:24:7;;;;;;;:18;:24;;;;;;21298:26;;-1:-1:-1;;21298:26:7;;;21368:22;;;;;;;;;21366:24;;-1:-1:-1;21366:24:7;;;14703:11;14678:23;14674:41;14661:63;-1:-1:-1;;;14661:63:7;21654:26;;;;:17;:26;;;;;:172;;;;-1:-1:-1;;;21943:47:7;;:52;;21939:617;;22047:1;22037:11;;22015:19;22168:30;;;:17;:30;;;;;;:35;;22164:378;;22304:13;;22289:11;:28;22285:239;;22449:30;;;;:17;:30;;;;;:52;;;22285:239;21997:559;21939:617;22600:7;22596:2;-1:-1:-1;;;;;22581:27:7;22590:4;-1:-1:-1;;;;;22581:27:7;;;;;;;;;;;20030:2637;;;19903:2764;;;:::o;2372:406:6:-;2412:13;2428:9;-1:-1:-1;;;;;2428:15:6;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2458:14;;;;:7;:14;;;;;;2412:33;;-1:-1:-1;2458:19:6;2455:45;;2486:14;;-1:-1:-1;;;2486:14:6;;;;;;;;;;;2455:45;2564:41;;;2581:16;2564:41;;;8900:19:9;8935:12;;;8928:28;;;2519:24:6;;8972:12:9;;2564:41:6;;;;;;;;;;;;2554:52;;;;;;2546:61;;2519:88;;2617:22;2661:4;-1:-1:-1;;;;;2661:16:6;;:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2642:37;;:16;:37;:::i;:::-;2689:14;;;;:7;:14;;;;;;;;;:31;;;2736:35;;9418:25:9;;;9459:18;;;9452:34;;;2689:31:6;;-1:-1:-1;2736:35:6;;9391:18:9;2736:35:6;;;;;;;2402:376;;;2372:406::o;22758:187:7:-;22899:39;22916:4;22922:2;22926:7;22899:39;;;;;;;;;;;;:16;:39::i;:::-;22758:187;;;:::o;11391:150::-;11463:7;11505:27;11524:7;11505:18;:27::i;7045:230::-;7117:7;-1:-1:-1;;;;;7140:19:7;;7136:60;;7168:28;;-1:-1:-1;;;7168:28:7;;;;;;;;;;;7136:60;-1:-1:-1;;;;;;7213:25:7;;;;;:18;:25;;;;;;1360:13;7213:55;;7045:230::o;1824:101:0:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;2959:320:6:-;3046:7;3057:1;3046:12;3043:42;;3067:18;;-1:-1:-1;;;3067:18:6;;;;;;;;;;;3043:42;3125:7;3111:11;;:21;;;;:::i;:::-;3098:9;:34;3095:66;;3141:20;;-1:-1:-1;;;3141:20:6;;;;;;;;;;;3095:66;3181:26;3187:10;3199:7;3181:5;:26::i;:::-;3260:11;;3222:50;;;-1:-1:-1;;;;;9890:32:9;;9872:51;;9954:2;9939:18;;9932:34;;;9982:18;;;9975:34;;;;3222:50:6;;9860:2:9;9845:18;3222:50:6;;;;;;;;2959:320;;:::o;10208:102:7:-;10264:13;10296:7;10289:14;;;;;:::i;16901:231::-;39523:10;16995:39;;;;:18;:39;;;;;;;;-1:-1:-1;;;;;16995:49:7;;;;;;;;;;;;:60;;-1:-1:-1;;16995:60:7;;;;;;;;;;17070:55;;766:41:9;;;16995:49:7;;39523:10;17070:55;;739:18:9;17070:55:7;;;;;;;16901:231;;:::o;23526:396::-;23695:31;23708:4;23714:2;23718:7;23695:12;:31::i;:::-;-1:-1:-1;;;;;23740:14:7;;;:19;23736:180;;23778:56;23809:4;23815:2;23819:7;23828:5;23778:30;:56::i;:::-;23773:143;;23861:40;;-1:-1:-1;;;23861:40:7;;;;;;;;;;;23773:143;23526:396;;;;:::o;4670:561:6:-;4744:13;4774:17;4782:8;4774:7;:17::i;:::-;4769:49;;4800:18;;-1:-1:-1;;;4800:18:6;;;;;;;;;;;4769:49;4829:20;4933:19;:8;:17;:19::i;:::-;5052:8;4852:240;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4829:263;;5191:22;5205:7;5191:13;:22::i;:::-;5116:107;;;;;;;;:::i;:::-;;;;;;;;;;;;;5102:122;;;4670:561;;;:::o;17282:162:7:-;-1:-1:-1;;;;;17402:25:7;;;17379:4;17402:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;17282:162::o;5537:214:6:-;1094:13:0;:11;:13::i;:::-;5638:11:6::1;::::0;;5659:23;;;;5698:46:::1;::::0;;9418:25:9;;;9474:2;9459:18;;9452:34;;;5698:46:6::1;::::0;9391:18:9;5698:46:6::1;9244:248:9::0;2074:198:0;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2162:22:0;::::1;2154:73;;;::::0;-1:-1:-1;;;2154:73:0;;13866:2:9;2154:73:0::1;::::0;::::1;13848:21:9::0;13905:2;13885:18;;;13878:30;13944:34;13924:18;;;13917:62;-1:-1:-1;;;13995:18:9;;;13988:36;14041:19;;2154:73:0::1;;;;;;;;;2237:28;2256:8;2237:18;:28::i;:::-;2074:198:::0;:::o;5874:195:6:-;1094:13:0;:11;:13::i;:::-;5953:9:6::1;5968:10;-1:-1:-1::0;;;;;5968:15:6::1;5991:21;5968:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5952:65;;;6031:4;6027:35;;6044:18;;-1:-1:-1::0;;;6044:18:6::1;;;;;;;;;;;6027:35;5942:127;5874:195:::0;:::o;17693:277:7:-;17758:4;17812:7;5381:1:6;17793:26:7;;:65;;;;;17845:13;;17835:7;:23;17793:65;:151;;;;-1:-1:-1;;17895:26:7;;;;:17;:26;;;;;;-1:-1:-1;;;17895:44:7;:49;;17693:277::o;12515:1249::-;12582:7;12616;;5381:1:6;12662:23:7;12658:1042;;12714:13;;12707:4;:20;12703:997;;;12751:14;12768:23;;;:17;:23;;;;;;;-1:-1:-1;;;12855:24:7;;:29;;12851:831;;13510:111;13517:6;13527:1;13517:11;13510:111;;-1:-1:-1;;;13587:6:7;13569:25;;;;:17;:25;;;;;;13510:111;;;13653:6;12515:1249;-1:-1:-1;;;12515:1249:7:o;12851:831::-;12729:971;12703:997;13726:31;;-1:-1:-1;;;13726:31:7;;;;;;;;;;;1359:130:0;1273:6;;-1:-1:-1;;;;;1273:6:0;39523:10:7;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;14273:2:9;1414:68:0;;;14255:21:9;;;14292:18;;;14285:30;14351:34;14331:18;;;14324:62;14403:18;;1414:68:0;14071:356:9;2426:187:0;2518:6;;;-1:-1:-1;;;;;2534:17:0;;;-1:-1:-1;;;;;;2534:17:0;;;;;;;2566:40;;2518:6;;;2534:17;2518:6;;2566:40;;2499:16;;2566:40;2489:124;2426:187;:::o;27091:2902:7:-;27163:20;27186:13;;;27213;;;27209:44;;27235:18;;-1:-1:-1;;;27235:18:7;;;;;;;;;;;27209:44;-1:-1:-1;;;;;27728:22:7;;;;;;:18;:22;;;;1495:2;27728:22;;;:71;;27766:32;27754:45;;27728:71;;;28035:31;;;:17;:31;;;;;-1:-1:-1;15123:15:7;;15097:24;15093:46;14703:11;14678:23;14674:41;14671:52;14661:63;;28035:170;;28264:23;;;;28035:31;;27728:22;;29016:25;27728:22;;28872:328;29520:1;29506:12;29502:20;29461:339;29560:3;29551:7;29548:16;29461:339;;29774:7;29764:8;29761:1;29734:25;29731:1;29728;29723:59;29612:1;29599:15;29461:339;;;29465:75;29831:8;29843:1;29831:13;29827:45;;29853:19;;-1:-1:-1;;;29853:19:7;;;;;;;;;;;29827:45;29887:13;:19;-1:-1:-1;22758:187:7;;;:::o;25948:697::-;26126:88;;-1:-1:-1;;;26126:88:7;;26106:4;;-1:-1:-1;;;;;26126:45:7;;;;;:88;;39523:10;;26193:4;;26199:7;;26208:5;;26126:88;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;26126:88:7;;;;;;;;-1:-1:-1;;26126:88:7;;;;;;;;;;;;:::i;:::-;;;26122:517;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26404:6;:13;26421:1;26404:18;26400:229;;26449:40;;-1:-1:-1;;;26449:40:7;;;;;;;;;;;26400:229;26589:6;26583:13;26574:6;26570:2;26566:15;26559:38;26122:517;-1:-1:-1;;;;;;26282:64:7;-1:-1:-1;;;26282:64:7;;-1:-1:-1;25948:697:7;;;;;;:::o;447:696:3:-;503:13;552:14;569:17;580:5;569:10;:17::i;:::-;589:1;569:21;552:38;;604:20;638:6;627:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;627:18:3;-1:-1:-1;604:41:3;-1:-1:-1;765:28:3;;;781:2;765:28;820:280;-1:-1:-1;;851:5:3;-1:-1:-1;;;985:2:3;974:14;;969:30;851:5;956:44;1044:2;1035:11;;;-1:-1:-1;1064:21:3;820:280;1064:21;-1:-1:-1;1120:6:3;447:696;-1:-1:-1;;;447:696:3:o;505:3026:1:-;563:13;795:4;:11;810:1;795:16;791:31;;-1:-1:-1;;813:9:1;;;;;;;;;-1:-1:-1;813:9:1;;;505:3026::o;791:31::-;872:19;894:6;;;;;;;;;;;;;;;;;872:28;;1303:20;1362:1;1343:4;:11;1357:1;1343:15;;;;:::i;:::-;1342:21;;;;:::i;:::-;1337:27;;:1;:27;:::i;:::-;1326:39;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1326:39:1;;1303:62;;1540:1;1533:5;1529:13;1641:2;1633:6;1629:15;1748:4;1799;1793:11;1787:4;1783:22;1711:1403;1832:6;1823:7;1820:19;1711:1403;;;1934:1;1925:7;1921:15;1910:26;;1972:7;1966:14;2615:4;2607:5;2603:2;2599:14;2595:25;2585:8;2581:40;2575:47;2564:9;2556:67;2668:1;2657:9;2653:17;2640:30;;2758:4;2750:5;2746:2;2742:14;2738:25;2728:8;2724:40;2718:47;2707:9;2699:67;2811:1;2800:9;2796:17;2783:30;;2900:4;2892:5;2889:1;2885:13;2881:24;2871:8;2867:39;2861:46;2850:9;2842:66;2953:1;2942:9;2938:17;2925:30;;3034:4;3027:5;3023:16;3013:8;3009:31;3003:38;2992:9;2984:58;;3087:1;3076:9;3072:17;3059:30;;1711:1403;;;1715:104;;3272:1;3265:4;3259:11;3255:19;3292:1;3287:120;;;;3425:1;3420:71;;;;3248:243;;3287:120;3339:4;3335:1;3324:9;3320:17;3312:32;3388:4;3384:1;3373:9;3369:17;3361:32;3287:120;;3420:71;3472:4;3468:1;3457:9;3453:17;3445:32;3248:243;-1:-1:-1;3518:6:1;;505:3026;-1:-1:-1;;;;;505:3026:1:o;10139:916:4:-;10192:7;;-1:-1:-1;;;10267:17:4;;10263:103;;-1:-1:-1;;;10304:17:4;;;-1:-1:-1;10349:2:4;10339:12;10263:103;10392:8;10383:5;:17;10379:103;;10429:8;10420:17;;;-1:-1:-1;10465:2:4;10455:12;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;-1:-1:-1;10581:2:4;10571:12;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;-1:-1:-1;10695:1:4;10685:11;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;-1:-1:-1;10808:1:4;10798:11;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;-1:-1:-1;10921:1:4;10911:11;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;11042:6;10139:916;-1:-1:-1;;10139:916:4:o;240:131:9:-;-1:-1:-1;;;;;;314:32:9;;304:43;;294:71;;361:1;358;351:12;376:245;434:6;487:2;475:9;466:7;462:23;458:32;455:52;;;503:1;500;493:12;455:52;542:9;529:23;561:30;585:5;561:30;:::i;818:250::-;903:1;913:113;927:6;924:1;921:13;913:113;;;1003:11;;;997:18;984:11;;;977:39;949:2;942:10;913:113;;;-1:-1:-1;;1060:1:9;1042:16;;1035:27;818:250::o;1073:271::-;1115:3;1153:5;1147:12;1180:6;1175:3;1168:19;1196:76;1265:6;1258:4;1253:3;1249:14;1242:4;1235:5;1231:16;1196:76;:::i;:::-;1326:2;1305:15;-1:-1:-1;;1301:29:9;1292:39;;;;1333:4;1288:50;;1073:271;-1:-1:-1;;1073:271:9:o;1349:220::-;1498:2;1487:9;1480:21;1461:4;1518:45;1559:2;1548:9;1544:18;1536:6;1518:45;:::i;1574:180::-;1633:6;1686:2;1674:9;1665:7;1661:23;1657:32;1654:52;;;1702:1;1699;1692:12;1654:52;-1:-1:-1;1725:23:9;;1574:180;-1:-1:-1;1574:180:9:o;1967:131::-;-1:-1:-1;;;;;2042:31:9;;2032:42;;2022:70;;2088:1;2085;2078:12;2103:315;2171:6;2179;2232:2;2220:9;2211:7;2207:23;2203:32;2200:52;;;2248:1;2245;2238:12;2200:52;2287:9;2274:23;2306:31;2331:5;2306:31;:::i;:::-;2356:5;2408:2;2393:18;;;;2380:32;;-1:-1:-1;;;2103:315:9:o;2605:591::-;2675:6;2683;2736:2;2724:9;2715:7;2711:23;2707:32;2704:52;;;2752:1;2749;2742:12;2704:52;2792:9;2779:23;2821:18;2862:2;2854:6;2851:14;2848:34;;;2878:1;2875;2868:12;2848:34;2916:6;2905:9;2901:22;2891:32;;2961:7;2954:4;2950:2;2946:13;2942:27;2932:55;;2983:1;2980;2973:12;2932:55;3023:2;3010:16;3049:2;3041:6;3038:14;3035:34;;;3065:1;3062;3055:12;3035:34;3110:7;3105:2;3096:6;3092:2;3088:15;3084:24;3081:37;3078:57;;;3131:1;3128;3121:12;3078:57;3162:2;3154:11;;;;;3184:6;;-1:-1:-1;2605:591:9;;-1:-1:-1;;;;2605:591:9:o;3201:456::-;3278:6;3286;3294;3347:2;3335:9;3326:7;3322:23;3318:32;3315:52;;;3363:1;3360;3353:12;3315:52;3402:9;3389:23;3421:31;3446:5;3421:31;:::i;:::-;3471:5;-1:-1:-1;3528:2:9;3513:18;;3500:32;3541:33;3500:32;3541:33;:::i;:::-;3201:456;;3593:7;;-1:-1:-1;;;3647:2:9;3632:18;;;;3619:32;;3201:456::o;3662:247::-;3721:6;3774:2;3762:9;3753:7;3749:23;3745:32;3742:52;;;3790:1;3787;3780:12;3742:52;3829:9;3816:23;3848:31;3873:5;3848:31;:::i;3914:416::-;3979:6;3987;4040:2;4028:9;4019:7;4015:23;4011:32;4008:52;;;4056:1;4053;4046:12;4008:52;4095:9;4082:23;4114:31;4139:5;4114:31;:::i;:::-;4164:5;-1:-1:-1;4221:2:9;4206:18;;4193:32;4263:15;;4256:23;4244:36;;4234:64;;4294:1;4291;4284:12;4234:64;4317:7;4307:17;;;3914:416;;;;;:::o;4335:127::-;4396:10;4391:3;4387:20;4384:1;4377:31;4427:4;4424:1;4417:15;4451:4;4448:1;4441:15;4467:1266;4562:6;4570;4578;4586;4639:3;4627:9;4618:7;4614:23;4610:33;4607:53;;;4656:1;4653;4646:12;4607:53;4695:9;4682:23;4714:31;4739:5;4714:31;:::i;:::-;4764:5;-1:-1:-1;4821:2:9;4806:18;;4793:32;4834:33;4793:32;4834:33;:::i;:::-;4886:7;-1:-1:-1;4940:2:9;4925:18;;4912:32;;-1:-1:-1;4995:2:9;4980:18;;4967:32;5018:18;5048:14;;;5045:34;;;5075:1;5072;5065:12;5045:34;5113:6;5102:9;5098:22;5088:32;;5158:7;5151:4;5147:2;5143:13;5139:27;5129:55;;5180:1;5177;5170:12;5129:55;5216:2;5203:16;5238:2;5234;5231:10;5228:36;;;5244:18;;:::i;:::-;5319:2;5313:9;5287:2;5373:13;;-1:-1:-1;;5369:22:9;;;5393:2;5365:31;5361:40;5349:53;;;5417:18;;;5437:22;;;5414:46;5411:72;;;5463:18;;:::i;:::-;5503:10;5499:2;5492:22;5538:2;5530:6;5523:18;5578:7;5573:2;5568;5564;5560:11;5556:20;5553:33;5550:53;;;5599:1;5596;5589:12;5550:53;5655:2;5650;5646;5642:11;5637:2;5629:6;5625:15;5612:46;5700:1;5695:2;5690;5682:6;5678:15;5674:24;5667:35;5721:6;5711:16;;;;;;;4467:1266;;;;;;;:::o;5738:388::-;5806:6;5814;5867:2;5855:9;5846:7;5842:23;5838:32;5835:52;;;5883:1;5880;5873:12;5835:52;5922:9;5909:23;5941:31;5966:5;5941:31;:::i;:::-;5991:5;-1:-1:-1;6048:2:9;6033:18;;6020:32;6061:33;6020:32;6061:33;:::i;6131:380::-;6210:1;6206:12;;;;6253;;;6274:61;;6328:4;6320:6;6316:17;6306:27;;6274:61;6381:2;6373:6;6370:14;6350:18;6347:38;6344:161;;6427:10;6422:3;6418:20;6415:1;6408:31;6462:4;6459:1;6452:15;6490:4;6487:1;6480:15;6344:161;;6131:380;;;:::o;6516:184::-;6586:6;6639:2;6627:9;6618:7;6614:23;6610:32;6607:52;;;6655:1;6652;6645:12;6607:52;-1:-1:-1;6678:16:9;;6516:184;-1:-1:-1;6516:184:9:o;6705:127::-;6766:10;6761:3;6757:20;6754:1;6747:31;6797:4;6794:1;6787:15;6821:4;6818:1;6811:15;6837:632;7008:2;7060:21;;;7130:13;;7033:18;;;7152:22;;;6979:4;;7008:2;7231:15;;;;7205:2;7190:18;;;6979:4;7274:169;7288:6;7285:1;7282:13;7274:169;;;7349:13;;7337:26;;7418:15;;;;7383:12;;;;7310:1;7303:9;7274:169;;;-1:-1:-1;7460:3:9;;6837:632;-1:-1:-1;;;;;;6837:632:9:o;7474:127::-;7535:10;7530:3;7526:20;7523:1;7516:31;7566:4;7563:1;7556:15;7590:4;7587:1;7580:15;7606:128;7673:9;;;7694:11;;;7691:37;;;7708:18;;:::i;7739:251::-;7809:6;7862:2;7850:9;7841:7;7837:23;7833:32;7830:52;;;7878:1;7875;7868:12;7830:52;7910:9;7904:16;7929:31;7954:5;7929:31;:::i;8205:533::-;8418:6;8407:9;8400:25;8461:6;8456:2;8445:9;8441:18;8434:34;8504:2;8499;8488:9;8484:18;8477:30;8543:6;8538:2;8527:9;8523:18;8516:34;8601:6;8593;8587:3;8576:9;8572:19;8559:49;8658:1;8628:22;;;8652:3;8624:32;;;8617:43;;;;8721:2;8700:15;;;-1:-1:-1;;8696:29:9;8681:45;8677:55;;8205:533;-1:-1:-1;;;8205:533:9:o;8995:127::-;9056:10;9051:3;9047:20;9044:1;9037:31;9087:4;9084:1;9077:15;9111:4;9108:1;9101:15;9127:112;9159:1;9185;9175:35;;9190:18;;:::i;:::-;-1:-1:-1;9224:9:9;;9127:112::o;9497:168::-;9570:9;;;9601;;9618:15;;;9612:22;;9598:37;9588:71;;9639:18;;:::i;10393:2800::-;-1:-1:-1;;;11503:3:9;11496:16;11478:3;11531:1;11562:66;11557:2;11552:3;11548:12;11541:88;11658:6;11652:13;11684:4;11697:73;11763:6;11758:2;11753:3;11749:12;11744:2;11736:6;11732:15;11697:73;:::i;:::-;-1:-1:-1;;;11862:2:9;11789:16;;;11854:11;;;11847:23;;;-1:-1:-1;;;11894:2:9;11886:11;;11879:65;-1:-1:-1;;;11968:2:9;11960:11;;11953:39;12016:2;12008:11;;12001:23;-1:-1:-1;;;12048:2:9;12040:11;;12033:53;12154:13;;12105:2;;-1:-1:-1;;12216:18:9;;;12269;;;;12296:93;;12374:4;12364:8;12360:19;12348:31;;12296:93;12437:2;12427:8;12424:16;12404:18;12401:40;12398:163;;-1:-1:-1;;;12464:33:9;;12520:2;12517:1;12510:13;12548:2;12471:3;12536:15;12398:163;12577:18;12604:153;;;;12771:1;12766:340;;;;12570:536;;12604:153;-1:-1:-1;;12645:24:9;;12632:11;;;12625:45;12723:16;;12716:24;12702:39;;12694:48;;12690:57;;;-1:-1:-1;12604:153:9;;12766:340;10093:1;10086:14;;;10130:4;10117:18;;12861:1;12875:175;12889:8;12886:1;12883:15;12875:175;;;12977:14;;12960:10;;;12956:19;;12949:43;13020:16;;;;12906:10;;12875:175;;;12879:3;;13093:2;13082:8;13078:2;13074:17;13070:26;13063:33;;12570:536;;;;;13122:65;13152:34;13182:3;-1:-1:-1;;;10211:25:9;;10261:1;10252:11;;10146:123;13152:34;-1:-1:-1;;;10339:16:9;;10380:1;10371:11;;10274:114;13122:65;13115:72;10393:2800;-1:-1:-1;;;;;;;;;10393:2800:9:o;13198:461::-;13460:31;13455:3;13448:44;13430:3;13521:6;13515:13;13537:75;13605:6;13600:2;13595:3;13591:12;13584:4;13576:6;13572:17;13537:75;:::i;:::-;13632:16;;;;13650:2;13628:25;;13198:461;-1:-1:-1;;13198:461:9:o;14432:489::-;-1:-1:-1;;;;;14701:15:9;;;14683:34;;14753:15;;14748:2;14733:18;;14726:43;14800:2;14785:18;;14778:34;;;14848:3;14843:2;14828:18;;14821:31;;;14626:4;;14869:46;;14895:19;;14887:6;14869:46;:::i;:::-;14861:54;14432:489;-1:-1:-1;;;;;;14432:489:9:o;14926:249::-;14995:6;15048:2;15036:9;15027:7;15023:23;15019:32;15016:52;;;15064:1;15061;15054:12;15016:52;15096:9;15090:16;15115:30;15139:5;15115:30;:::i;15180:125::-;15245:9;;;15266:10;;;15263:36;;;15279:18;;:::i;15310:120::-;15350:1;15376;15366:35;;15381:18;;:::i;:::-;-1:-1:-1;15415:9:9;;15310:120::o"},"gasEstimates":{"creation":{"codeDepositCost":"1658000","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2635","basePaint()":"infinite","brushId()":"2406","buyTickets(address,uint256)":"infinite","claimedEarnings(uint256)":"2540","getApproved(uint256)":"6926","imageURI()":"infinite","isApprovedForAll(address,address)":"infinite","name()":"infinite","owner()":"2387","ownerOf(uint256)":"infinite","paint(bytes)":"infinite","renounceOwnership()":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26690","startRaffle()":"infinite","supportsInterface(bytes4)":"590","symbol()":"infinite","ticketPrice()":"2385","tokenURI(uint256)":"infinite","totalSupply()":"4497","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"infinite","updateTicketPrice(uint256)":"28016","winners(uint256)":"2483","withdawEarnings(uint256)":"infinite","withdrawTicketSales(address)":"infinite"},"internal":{"_startTokenId()":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","basePaint()":"0058fce1","brushId()":"e6664cd1","buyTickets(address,uint256)":"88f57767","claimedEarnings(uint256)":"815bbd83","getApproved(uint256)":"081812fc","imageURI()":"135d088d","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","paint(bytes)":"17c50bdf","renounceOwnership()":"715018a6","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","startRaffle()":"242284f1","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","ticketPrice()":"1209b1f6","tokenURI(uint256)":"c87b56dd","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b","updateTicketPrice(uint256)":"f02137c8","winners(uint256)":"a2fb1175","withdawEarnings(uint256)":"15487ad7","withdrawTicketSales(address)":"f834eeca"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basePaintAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_brushId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_imageURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyDrawn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectEthAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWinner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroTicketAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"RaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedPrice\",\"type\":\"uint256\"}],\"name\":\"TicketPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TicketsPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePaint\",\"outputs\":[{\"internalType\":\"contract BasePaint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brushId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedEarnings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_pixels\",\"type\":\"bytes\"}],\"name\":\"paint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"updateTicketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"withdawEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawTicketSales\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0xNader\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ConsecutiveTransfer(uint256,uint256,address,address)\":{\"details\":\"Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"buyTickets(address,uint256)\":{\"params\":{\"_amount\":\"Number of tickets to purchase\",\"_recipient\":\"Address that recieves the tickets\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"paint(bytes)\":{\"params\":{\"_pixels\":\"The target pixels paint\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"params\":{\"_tokenId\":\"the id of the token\"},\"returns\":{\"_0\":\"metadata Encoded JSON metadata for a given token\"}},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateTicketPrice(uint256)\":{\"params\":{\"_newPrice\":\"The new price\"}},\"withdawEarnings(uint256)\":{\"params\":{\"_day\":\"The basepaint day\"}},\"withdrawTicketSales(address)\":{\"params\":{\"_recipient\":\"The address to withdraw to\"}}},\"title\":\"BasePaint Raffle Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{\"buyTickets(address,uint256)\":{\"notice\":\"Stores if a winner has claimed their earnings\"},\"claimedEarnings(uint256)\":{\"notice\":\"Stores if a winner has claimed their earnings\"},\"paint(bytes)\":{\"notice\":\"Raffle winner uses this function to paint\"},\"startRaffle()\":{\"notice\":\"Starts the raffle, can only be called once a day\"},\"tokenURI(uint256)\":{\"notice\":\"Token Metadata getter\"},\"updateTicketPrice(uint256)\":{\"notice\":\"Used by owner to update the ticket price\"},\"winners(uint256)\":{\"notice\":\"Stores the winning raffle ticket\"},\"withdawEarnings(uint256)\":{\"notice\":\"Called by winner to withdraw earnings after painting mint is completed\"},\"withdrawTicketSales(address)\":{\"notice\":\"Used by owner to withdraw ETH from ticket sales\"}},\"notice\":\"Buy tickets and win a brush for the day\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BasePaintRaffle.sol\":\"BasePaintRaffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/BasePaintRaffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n//    ___                  ___         _       __    ___         ___ ___ __    \\n//   / _ ) ___ _ ___ ___  / _ \\\\ ___ _ (_)___  / /_  / _ \\\\ ___ _ / _// _// /___ \\n//  / _  |/ _ `/(_-</ -_)/ ___// _ `// // _ \\\\/ __/ / , _// _ `// _// _// // -_)\\n// /____/ \\\\_,_//___/\\\\__//_/    \\\\_,_//_//_//_/\\\\__/ /_/|_| \\\\_,_//_/ /_/ /_/ \\\\__/ \\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\n\\ninterface BasePaint {\\n    function today() external view returns (uint256);\\n    function authorWithdraw(uint256[] calldata indexes) external;\\n    function paint(uint256 day, uint256 tokenId, bytes calldata pixels) external;\\n}\\n\\n/// @title BasePaint Raffle Contract\\n/// @author 0xNader\\n/// @notice Buy tickets and win a brush for the day\\ncontract BasePaintRaffle is ERC721A, Ownable {\\n    using Strings for uint256;\\n\\n// *********** Errors *********** //\\n    error NotWinner();\\n    error AlreadyDrawn();\\n    error ZeroTicketAmount();\\n    error IncorrectEthAmount();\\n    error FailedToWithdraw();\\n    error AlreadyClaimed();\\n    error NonExistentToken();\\n    error InvalidDay();\\n\\n// *********** Variables *********** //\\n    BasePaint public immutable basePaint;\\n    string public imageURI;\\n    uint256 public ticketPrice;\\n    uint256 public brushId;\\n\\n    ///@notice Stores the winning raffle ticket\\n    mapping(uint256 => uint256) public winners;\\n\\n    /// @notice Stores if a winner has claimed their earnings\\n    mapping(uint256 => bool) public claimedEarnings;\\n\\n// *********** Events *********** //\\n    event TicketsPurchased(address recipent, uint256 amount, uint256 price);\\n    event TicketPriceUpdated(uint256 prevPrice, uint256 updatedPrice);\\n    event RaffleWinner(uint256 winningTokenId, uint256 day);\\n\\n// *********** Constructor *********** //\\n    constructor(\\n        address _basePaintAddress, \\n        uint256 _brushId, \\n        uint256 _ticketPrice, \\n        string memory _imageURI\\n    ) ERC721A(\\\"BasePaint Tickets\\\", \\\"BPT\\\") {\\n        basePaint = BasePaint(_basePaintAddress);\\n        brushId = _brushId;\\n        ticketPrice = _ticketPrice;\\n        imageURI = _imageURI;\\n    }\\n\\n// *********** Functions *********** //\\n    /// @notice Starts the raffle, can only be called once a day\\n    function startRaffle() public {\\n        uint256 today = basePaint.today();\\n        if(winners[today] != 0) revert AlreadyDrawn();\\n        \\n        uint256 semiRandomNumber = uint256(keccak256(abi.encodePacked(block.prevrandao, today)));\\n        uint256 winningTokenId = semiRandomNumber % this.totalSupply();\\n        winners[today] = winningTokenId;\\n\\n        emit RaffleWinner(winningTokenId, today);\\n    }\\n\\n    /// @notice Stores if a winner has claimed their earnings\\n    /// @param _recipient Address that recieves the tickets\\n    /// @param _amount Number of tickets to purchase\\n    function buyTickets(address _recipient, uint256 _amount) external payable {\\n        if(_amount == 0) revert ZeroTicketAmount();\\n        if(msg.value != ticketPrice * _amount) revert IncorrectEthAmount();\\n        \\n\\n        _mint(msg.sender, _amount);\\n        emit TicketsPurchased(_recipient, _amount, ticketPrice);\\n    }\\n\\n    /// @notice Raffle winner uses this function to paint\\n    /// @param _pixels The target pixels paint\\n    function paint(bytes calldata _pixels) external payable {\\n        uint256 today = basePaint.today();\\n        uint256 winningTokenId = winners[today];\\n        if(msg.sender != this.ownerOf(winningTokenId)) revert NotWinner();\\n        \\n        basePaint.paint(today, brushId, _pixels);\\n    }\\n\\n    /// @notice Called by winner to withdraw earnings after painting mint is completed\\n    /// @param _day The basepaint day\\n    function withdawEarnings(uint256 _day) external {\\n        if(claimedEarnings[_day]) revert AlreadyClaimed();\\n        if(_day >= basePaint.today()) revert InvalidDay();\\n\\n        uint256[] memory dayArr = new uint256[](1);\\n        dayArr[0] = _day; \\n\\n        uint256 balanceBefore = address(this).balance;\\n        basePaint.authorWithdraw(dayArr);\\n        uint256 balanceAfter = address(this).balance;\\n\\n        uint256 earning = balanceAfter - balanceBefore;\\n        uint256 winningTokenId = winners[_day];\\n\\n        address winner = this.ownerOf(winningTokenId);\\n        (bool sent, ) = winner.call{value: earning}(\\\"\\\");\\n\\n        if(!sent) revert FailedToWithdraw();\\n        claimedEarnings[_day] = true;\\n    }\\n\\n    /// @notice Token Metadata getter\\n    /// @param _tokenId the id of the token\\n    /// @return metadata Encoded JSON metadata for a given token\\n    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(_tokenId)) revert NonExistentToken();\\n\\n        bytes memory dataURI = abi.encodePacked(\\n            '{',\\n                '\\\"name\\\": \\\"BasePaint Ticket ', _tokenId.toString(), '\\\",',\\n                '\\\"description\\\": \\\"', \\\"Just a ticket...\\\", '\\\",',\\n                '\\\"image\\\": \\\"', imageURI, '\\\"',\\n            '}'\\n        );\\n        return string(abi.encodePacked(\\n            \\\"data:application/json;base64,\\\",\\n            Base64.encode(dataURI)\\n        ));\\n    }\\n\\n    /// @notice Override to start tokenIds at 1 instead of 0\\n    function _startTokenId() internal pure override returns (uint256) {\\n        return 1;\\n    }\\n\\n// *********** Owner Functions *********** //\\n    /// @notice Used by owner to update the ticket price\\n    /// @param _newPrice The new price\\n    function updateTicketPrice(uint256 _newPrice) external onlyOwner {\\n        uint256 prevTicketPrice = ticketPrice;\\n        ticketPrice = _newPrice;\\n\\n        emit TicketPriceUpdated(prevTicketPrice, _newPrice);\\n    }\\n\\n    /// @notice Used by owner to withdraw ETH from ticket sales\\n    /// @param _recipient The address to withdraw to\\n    function withdrawTicketSales(address _recipient) external onlyOwner {\\n        (bool sent, ) = _recipient.call{value: address(this).balance}(\\\"\\\");\\n        if(!sent) revert FailedToWithdraw();\\n    }\\n}\\n\",\"keccak256\":\"0x0f977d359efc51c62d16aba9b7959d793206d2c86436c1c0cfa3a083a3fcd6af\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23116c16976b7d8c0c714ba1b38ae6b16c16fc90ec69b568fb1ebf1bc063e01c\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1946,"contract":"contracts/BasePaintRaffle.sol:BasePaintRaffle","label":"_currentIndex","offset":0,"slot":"0","type":"t_uint256"},{"astId":1948,"contract":"contracts/BasePaintRaffle.sol:BasePaintRaffle","label":"_burnCounter","offset":0,"slot":"1","type":"t_uint256"},{"astId":1950,"contract":"contracts/BasePaintRaffle.sol:BasePaintRaffle","label":"_name","offset":0,"slot":"2","type":"t_string_storage"},{"astId":1952,"contract":"contracts/BasePaintRaffle.sol:BasePaintRaffle","label":"_symbol","offset":0,"slot":"3","type":"t_string_storage"},{"astId":1956,"contract":"contracts/BasePaintRaffle.sol:BasePaintRaffle","label":"_packedOwnerships","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1960,"contract":"contracts/BasePaintRaffle.sol:BasePaintRaffle","label":"_packedAddressData","offset":0,"slot":"5","type":"t_mapping(t_address,t_uint256)"},{"astId":1965,"contract":"contracts/BasePaintRaffle.sol:BasePaintRaffle","label":"_tokenApprovals","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_struct(TokenApprovalRef)1878_storage)"},{"astId":1971,"contract":"contracts/BasePaintRaffle.sol:BasePaintRaffle","label":"_operatorApprovals","offset":0,"slot":"7","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":7,"contract":"contracts/BasePaintRaffle.sol:BasePaintRaffle","label":"_owner","offset":0,"slot":"8","type":"t_address"},{"astId":1445,"contract":"contracts/BasePaintRaffle.sol:BasePaintRaffle","label":"imageURI","offset":0,"slot":"9","type":"t_string_storage"},{"astId":1447,"contract":"contracts/BasePaintRaffle.sol:BasePaintRaffle","label":"ticketPrice","offset":0,"slot":"10","type":"t_uint256"},{"astId":1449,"contract":"contracts/BasePaintRaffle.sol:BasePaintRaffle","label":"brushId","offset":0,"slot":"11","type":"t_uint256"},{"astId":1454,"contract":"contracts/BasePaintRaffle.sol:BasePaintRaffle","label":"winners","offset":0,"slot":"12","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1459,"contract":"contracts/BasePaintRaffle.sol:BasePaintRaffle","label":"claimedEarnings","offset":0,"slot":"13","type":"t_mapping(t_uint256,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_bool)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_struct(TokenApprovalRef)1878_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct ERC721A.TokenApprovalRef)","numberOfBytes":"32","value":"t_struct(TokenApprovalRef)1878_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(TokenApprovalRef)1878_storage":{"encoding":"inplace","label":"struct ERC721A.TokenApprovalRef","members":[{"astId":1877,"contract":"contracts/BasePaintRaffle.sol:BasePaintRaffle","label":"value","offset":0,"slot":"0","type":"t_address"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"ApprovalCallerNotOwnerNorApproved()":[{"notice":"The caller must own the token or be an approved operator."}],"ApprovalQueryForNonexistentToken()":[{"notice":"The token does not exist."}],"BalanceQueryForZeroAddress()":[{"notice":"Cannot query the balance for the zero address."}],"MintERC2309QuantityExceedsLimit()":[{"notice":"The `quantity` minted with ERC2309 exceeds the safety limit."}],"MintToZeroAddress()":[{"notice":"Cannot mint to the zero address."}],"MintZeroQuantity()":[{"notice":"The quantity of tokens minted must be more than zero."}],"OwnerQueryForNonexistentToken()":[{"notice":"The token does not exist."}],"OwnershipNotInitializedForExtraData()":[{"notice":"The `extraData` cannot be set on an unintialized ownership slot."}],"TransferCallerNotOwnerNorApproved()":[{"notice":"The caller must own the token or be an approved operator."}],"TransferFromIncorrectOwner()":[{"notice":"The token must be owned by `from`."}],"TransferToNonERC721ReceiverImplementer()":[{"notice":"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."}],"TransferToZeroAddress()":[{"notice":"Cannot transfer to the zero address."}],"URIQueryForNonexistentToken()":[{"notice":"The token does not exist."}]},"kind":"user","methods":{"buyTickets(address,uint256)":{"notice":"Stores if a winner has claimed their earnings"},"claimedEarnings(uint256)":{"notice":"Stores if a winner has claimed their earnings"},"paint(bytes)":{"notice":"Raffle winner uses this function to paint"},"startRaffle()":{"notice":"Starts the raffle, can only be called once a day"},"tokenURI(uint256)":{"notice":"Token Metadata getter"},"updateTicketPrice(uint256)":{"notice":"Used by owner to update the ticket price"},"winners(uint256)":{"notice":"Stores the winning raffle ticket"},"withdawEarnings(uint256)":{"notice":"Called by winner to withdraw earnings after painting mint is completed"},"withdrawTicketSales(address)":{"notice":"Used by owner to withdraw ETH from ticket sales"}},"notice":"Buy tickets and win a brush for the day","version":1}}},"erc721a/contracts/ERC721A.sol":{"ERC721A":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ApprovalCallerNotOwnerNorApproved","type":"error"},{"inputs":[],"name":"ApprovalQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"BalanceQueryForZeroAddress","type":"error"},{"inputs":[],"name":"MintERC2309QuantityExceedsLimit","type":"error"},{"inputs":[],"name":"MintToZeroAddress","type":"error"},{"inputs":[],"name":"MintZeroQuantity","type":"error"},{"inputs":[],"name":"OwnerQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"OwnershipNotInitializedForExtraData","type":"error"},{"inputs":[],"name":"TransferCallerNotOwnerNorApproved","type":"error"},{"inputs":[],"name":"TransferFromIncorrectOwner","type":"error"},{"inputs":[],"name":"TransferToNonERC721ReceiverImplementer","type":"error"},{"inputs":[],"name":"TransferToZeroAddress","type":"error"},{"inputs":[],"name":"URIQueryForNonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"toTokenId","type":"uint256"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"ConsecutiveTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721) Non-Fungible Token Standard, including the Metadata extension. Optimized for lower gas during batch mints. Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...) starting from `_startTokenId()`. Assumptions: - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply. - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"ConsecutiveTransfer(uint256,uint256,address,address)":{"details":"Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in `owner`'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Equivalent to `safeTransferFrom(from, to, tokenId, '')`."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"totalSupply()":{"details":"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC721A","version":1},"evm":{"bytecode":{"functionDebugData":{"@_1992":{"entryPoint":null,"id":1992,"parameterSlots":2,"returnSlots":0},"@_startTokenId_2001":{"entryPoint":null,"id":2001,"parameterSlots":0,"returnSlots":1},"abi_decode_string_fromMemory":{"entryPoint":116,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":291,"id":null,"parameterSlots":2,"returnSlots":2},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":457,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":540,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":397,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":94,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4144:9","statements":[{"nodeType":"YulBlock","src":"6:3:9","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:9"},"nodeType":"YulFunctionCall","src":"66:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:9"},"nodeType":"YulFunctionCall","src":"56:31:9"},"nodeType":"YulExpressionStatement","src":"56:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:9","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:9"},"nodeType":"YulFunctionCall","src":"96:15:9"},"nodeType":"YulExpressionStatement","src":"96:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:9"},"nodeType":"YulFunctionCall","src":"120:15:9"},"nodeType":"YulExpressionStatement","src":"120:15:9"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:9"},{"body":{"nodeType":"YulBlock","src":"210:776:9","statements":[{"body":{"nodeType":"YulBlock","src":"259:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"268:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"271:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"261:6:9"},"nodeType":"YulFunctionCall","src":"261:12:9"},"nodeType":"YulExpressionStatement","src":"261:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"238:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"246:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"234:3:9"},"nodeType":"YulFunctionCall","src":"234:17:9"},{"name":"end","nodeType":"YulIdentifier","src":"253:3:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"230:3:9"},"nodeType":"YulFunctionCall","src":"230:27:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"223:6:9"},"nodeType":"YulFunctionCall","src":"223:35:9"},"nodeType":"YulIf","src":"220:55:9"},{"nodeType":"YulVariableDeclaration","src":"284:23:9","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"300:6:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"294:5:9"},"nodeType":"YulFunctionCall","src":"294:13:9"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"288:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"316:28:9","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:2:9","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"338:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"330:3:9"},"nodeType":"YulFunctionCall","src":"330:10:9"},{"kind":"number","nodeType":"YulLiteral","src":"342:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"326:3:9"},"nodeType":"YulFunctionCall","src":"326:18:9"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"320:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"367:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"369:16:9"},"nodeType":"YulFunctionCall","src":"369:18:9"},"nodeType":"YulExpressionStatement","src":"369:18:9"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"359:2:9"},{"name":"_2","nodeType":"YulIdentifier","src":"363:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"356:2:9"},"nodeType":"YulFunctionCall","src":"356:10:9"},"nodeType":"YulIf","src":"353:36:9"},{"nodeType":"YulVariableDeclaration","src":"398:17:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"412:2:9","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"408:3:9"},"nodeType":"YulFunctionCall","src":"408:7:9"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"402:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"424:23:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:9","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"438:5:9"},"nodeType":"YulFunctionCall","src":"438:9:9"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"428:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"456:71:9","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"478:6:9"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"502:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"506:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"498:3:9"},"nodeType":"YulFunctionCall","src":"498:13:9"},{"name":"_3","nodeType":"YulIdentifier","src":"513:2:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"494:3:9"},"nodeType":"YulFunctionCall","src":"494:22:9"},{"kind":"number","nodeType":"YulLiteral","src":"518:2:9","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"490:3:9"},"nodeType":"YulFunctionCall","src":"490:31:9"},{"name":"_3","nodeType":"YulIdentifier","src":"523:2:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"486:3:9"},"nodeType":"YulFunctionCall","src":"486:40:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"474:3:9"},"nodeType":"YulFunctionCall","src":"474:53:9"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"460:10:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"586:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"588:16:9"},"nodeType":"YulFunctionCall","src":"588:18:9"},"nodeType":"YulExpressionStatement","src":"588:18:9"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"545:10:9"},{"name":"_2","nodeType":"YulIdentifier","src":"557:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"542:2:9"},"nodeType":"YulFunctionCall","src":"542:18:9"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"565:10:9"},{"name":"memPtr","nodeType":"YulIdentifier","src":"577:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"562:2:9"},"nodeType":"YulFunctionCall","src":"562:22:9"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"539:2:9"},"nodeType":"YulFunctionCall","src":"539:46:9"},"nodeType":"YulIf","src":"536:72:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"624:2:9","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"628:10:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"617:6:9"},"nodeType":"YulFunctionCall","src":"617:22:9"},"nodeType":"YulExpressionStatement","src":"617:22:9"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"655:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"663:2:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:9"},"nodeType":"YulFunctionCall","src":"648:18:9"},"nodeType":"YulExpressionStatement","src":"648:18:9"},{"nodeType":"YulVariableDeclaration","src":"675:14:9","value":{"kind":"number","nodeType":"YulLiteral","src":"685:4:9","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"679:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"735:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"744:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"747:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"737:6:9"},"nodeType":"YulFunctionCall","src":"737:12:9"},"nodeType":"YulExpressionStatement","src":"737:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"712:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"720:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"708:3:9"},"nodeType":"YulFunctionCall","src":"708:15:9"},{"name":"_4","nodeType":"YulIdentifier","src":"725:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"704:3:9"},"nodeType":"YulFunctionCall","src":"704:24:9"},{"name":"end","nodeType":"YulIdentifier","src":"730:3:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"701:2:9"},"nodeType":"YulFunctionCall","src":"701:33:9"},"nodeType":"YulIf","src":"698:53:9"},{"nodeType":"YulVariableDeclaration","src":"760:10:9","value":{"kind":"number","nodeType":"YulLiteral","src":"769:1:9","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"764:1:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"825:87:9","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"854:6:9"},{"name":"i","nodeType":"YulIdentifier","src":"862:1:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"850:3:9"},"nodeType":"YulFunctionCall","src":"850:14:9"},{"name":"_4","nodeType":"YulIdentifier","src":"866:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"846:3:9"},"nodeType":"YulFunctionCall","src":"846:23:9"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"885:6:9"},{"name":"i","nodeType":"YulIdentifier","src":"893:1:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"881:3:9"},"nodeType":"YulFunctionCall","src":"881:14:9"},{"name":"_4","nodeType":"YulIdentifier","src":"897:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"877:3:9"},"nodeType":"YulFunctionCall","src":"877:23:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"871:5:9"},"nodeType":"YulFunctionCall","src":"871:30:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"839:6:9"},"nodeType":"YulFunctionCall","src":"839:63:9"},"nodeType":"YulExpressionStatement","src":"839:63:9"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"790:1:9"},{"name":"_1","nodeType":"YulIdentifier","src":"793:2:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"787:2:9"},"nodeType":"YulFunctionCall","src":"787:9:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"797:19:9","statements":[{"nodeType":"YulAssignment","src":"799:15:9","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"808:1:9"},{"name":"_4","nodeType":"YulIdentifier","src":"811:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:9"},"nodeType":"YulFunctionCall","src":"804:10:9"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"799:1:9"}]}]},"pre":{"nodeType":"YulBlock","src":"783:3:9","statements":[]},"src":"779:133:9"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"936:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"944:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"932:3:9"},"nodeType":"YulFunctionCall","src":"932:15:9"},{"name":"_4","nodeType":"YulIdentifier","src":"949:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"928:3:9"},"nodeType":"YulFunctionCall","src":"928:24:9"},{"kind":"number","nodeType":"YulLiteral","src":"954:1:9","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"921:6:9"},"nodeType":"YulFunctionCall","src":"921:35:9"},"nodeType":"YulExpressionStatement","src":"921:35:9"},{"nodeType":"YulAssignment","src":"965:15:9","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"974:6:9"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"965:5:9"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"184:6:9","type":""},{"name":"end","nodeType":"YulTypedName","src":"192:3:9","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"200:5:9","type":""}],"src":"146:840:9"},{"body":{"nodeType":"YulBlock","src":"1109:444:9","statements":[{"body":{"nodeType":"YulBlock","src":"1155:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1164:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1167:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1157:6:9"},"nodeType":"YulFunctionCall","src":"1157:12:9"},"nodeType":"YulExpressionStatement","src":"1157:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1130:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"1139:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1126:3:9"},"nodeType":"YulFunctionCall","src":"1126:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"1151:2:9","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1122:3:9"},"nodeType":"YulFunctionCall","src":"1122:32:9"},"nodeType":"YulIf","src":"1119:52:9"},{"nodeType":"YulVariableDeclaration","src":"1180:30:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1200:9:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1194:5:9"},"nodeType":"YulFunctionCall","src":"1194:16:9"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1184:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1219:28:9","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1237:2:9","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1241:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1233:3:9"},"nodeType":"YulFunctionCall","src":"1233:10:9"},{"kind":"number","nodeType":"YulLiteral","src":"1245:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1229:3:9"},"nodeType":"YulFunctionCall","src":"1229:18:9"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1223:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1274:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1283:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1286:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1276:6:9"},"nodeType":"YulFunctionCall","src":"1276:12:9"},"nodeType":"YulExpressionStatement","src":"1276:12:9"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1262:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"1270:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1259:2:9"},"nodeType":"YulFunctionCall","src":"1259:14:9"},"nodeType":"YulIf","src":"1256:34:9"},{"nodeType":"YulAssignment","src":"1299:71:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1342:9:9"},{"name":"offset","nodeType":"YulIdentifier","src":"1353:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1338:3:9"},"nodeType":"YulFunctionCall","src":"1338:22:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1362:7:9"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1309:28:9"},"nodeType":"YulFunctionCall","src":"1309:61:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1299:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"1379:41:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1405:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1416:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1401:3:9"},"nodeType":"YulFunctionCall","src":"1401:18:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1395:5:9"},"nodeType":"YulFunctionCall","src":"1395:25:9"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1383:8:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1449:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1458:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1461:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1451:6:9"},"nodeType":"YulFunctionCall","src":"1451:12:9"},"nodeType":"YulExpressionStatement","src":"1451:12:9"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1435:8:9"},{"name":"_1","nodeType":"YulIdentifier","src":"1445:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1432:2:9"},"nodeType":"YulFunctionCall","src":"1432:16:9"},"nodeType":"YulIf","src":"1429:36:9"},{"nodeType":"YulAssignment","src":"1474:73:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1517:9:9"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1528:8:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1513:3:9"},"nodeType":"YulFunctionCall","src":"1513:24:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1539:7:9"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1484:28:9"},"nodeType":"YulFunctionCall","src":"1484:63:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1474:6:9"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1067:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1078:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1090:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1098:6:9","type":""}],"src":"991:562:9"},{"body":{"nodeType":"YulBlock","src":"1613:325:9","statements":[{"nodeType":"YulAssignment","src":"1623:22:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1637:1:9","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1640:4:9"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1633:3:9"},"nodeType":"YulFunctionCall","src":"1633:12:9"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1623:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"1654:38:9","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1684:4:9"},{"kind":"number","nodeType":"YulLiteral","src":"1690:1:9","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1680:3:9"},"nodeType":"YulFunctionCall","src":"1680:12:9"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1658:18:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"1731:31:9","statements":[{"nodeType":"YulAssignment","src":"1733:27:9","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1747:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"1755:4:9","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1743:3:9"},"nodeType":"YulFunctionCall","src":"1743:17:9"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1733:6:9"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1711:18:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1704:6:9"},"nodeType":"YulFunctionCall","src":"1704:26:9"},"nodeType":"YulIf","src":"1701:61:9"},{"body":{"nodeType":"YulBlock","src":"1821:111:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1842:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1849:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1854:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1845:3:9"},"nodeType":"YulFunctionCall","src":"1845:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1835:6:9"},"nodeType":"YulFunctionCall","src":"1835:31:9"},"nodeType":"YulExpressionStatement","src":"1835:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1886:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1889:4:9","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1879:6:9"},"nodeType":"YulFunctionCall","src":"1879:15:9"},"nodeType":"YulExpressionStatement","src":"1879:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1914:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1917:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1907:6:9"},"nodeType":"YulFunctionCall","src":"1907:15:9"},"nodeType":"YulExpressionStatement","src":"1907:15:9"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1777:18:9"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1800:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"1808:2:9","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1797:2:9"},"nodeType":"YulFunctionCall","src":"1797:14:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1774:2:9"},"nodeType":"YulFunctionCall","src":"1774:38:9"},"nodeType":"YulIf","src":"1771:161:9"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1593:4:9","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1602:6:9","type":""}],"src":"1558:380:9"},{"body":{"nodeType":"YulBlock","src":"1999:65:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2016:1:9","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"2019:3:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2009:6:9"},"nodeType":"YulFunctionCall","src":"2009:14:9"},"nodeType":"YulExpressionStatement","src":"2009:14:9"},{"nodeType":"YulAssignment","src":"2032:26:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2050:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2053:4:9","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2040:9:9"},"nodeType":"YulFunctionCall","src":"2040:18:9"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"2032:4:9"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1982:3:9","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"1990:4:9","type":""}],"src":"1943:121:9"},{"body":{"nodeType":"YulBlock","src":"2150:464:9","statements":[{"body":{"nodeType":"YulBlock","src":"2183:425:9","statements":[{"nodeType":"YulVariableDeclaration","src":"2197:11:9","value":{"kind":"number","nodeType":"YulLiteral","src":"2207:1:9","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2201:2:9","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2228:2:9"},{"name":"array","nodeType":"YulIdentifier","src":"2232:5:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2221:6:9"},"nodeType":"YulFunctionCall","src":"2221:17:9"},"nodeType":"YulExpressionStatement","src":"2221:17:9"},{"nodeType":"YulVariableDeclaration","src":"2251:31:9","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2273:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"2277:4:9","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2263:9:9"},"nodeType":"YulFunctionCall","src":"2263:19:9"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"2255:4:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2295:57:9","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2318:4:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2328:1:9","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2335:10:9"},{"kind":"number","nodeType":"YulLiteral","src":"2347:2:9","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2331:3:9"},"nodeType":"YulFunctionCall","src":"2331:19:9"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2324:3:9"},"nodeType":"YulFunctionCall","src":"2324:27:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2314:3:9"},"nodeType":"YulFunctionCall","src":"2314:38:9"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"2299:11:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2389:23:9","statements":[{"nodeType":"YulAssignment","src":"2391:19:9","value":{"name":"data","nodeType":"YulIdentifier","src":"2406:4:9"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"2391:11:9"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2371:10:9"},{"kind":"number","nodeType":"YulLiteral","src":"2383:4:9","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2368:2:9"},"nodeType":"YulFunctionCall","src":"2368:20:9"},"nodeType":"YulIf","src":"2365:47:9"},{"nodeType":"YulVariableDeclaration","src":"2425:41:9","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2439:4:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2449:1:9","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2456:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"2461:2:9","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2452:3:9"},"nodeType":"YulFunctionCall","src":"2452:12:9"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2445:3:9"},"nodeType":"YulFunctionCall","src":"2445:20:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2435:3:9"},"nodeType":"YulFunctionCall","src":"2435:31:9"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2429:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2479:24:9","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"2492:11:9"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"2483:5:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2577:21:9","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2586:5:9"},{"name":"_1","nodeType":"YulIdentifier","src":"2593:2:9"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2579:6:9"},"nodeType":"YulFunctionCall","src":"2579:17:9"},"nodeType":"YulExpressionStatement","src":"2579:17:9"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2527:5:9"},{"name":"_2","nodeType":"YulIdentifier","src":"2534:2:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2524:2:9"},"nodeType":"YulFunctionCall","src":"2524:13:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2538:26:9","statements":[{"nodeType":"YulAssignment","src":"2540:22:9","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2553:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"2560:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2549:3:9"},"nodeType":"YulFunctionCall","src":"2549:13:9"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2540:5:9"}]}]},"pre":{"nodeType":"YulBlock","src":"2520:3:9","statements":[]},"src":"2516:82:9"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2166:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"2171:2:9","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2163:2:9"},"nodeType":"YulFunctionCall","src":"2163:11:9"},"nodeType":"YulIf","src":"2160:448:9"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2122:5:9","type":""},{"name":"len","nodeType":"YulTypedName","src":"2129:3:9","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2134:10:9","type":""}],"src":"2069:545:9"},{"body":{"nodeType":"YulBlock","src":"2704:81:9","statements":[{"nodeType":"YulAssignment","src":"2714:65:9","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2729:4:9"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2747:1:9","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"2750:3:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2743:3:9"},"nodeType":"YulFunctionCall","src":"2743:11:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2760:1:9","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2756:3:9"},"nodeType":"YulFunctionCall","src":"2756:6:9"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2739:3:9"},"nodeType":"YulFunctionCall","src":"2739:24:9"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2735:3:9"},"nodeType":"YulFunctionCall","src":"2735:29:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2725:3:9"},"nodeType":"YulFunctionCall","src":"2725:40:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2771:1:9","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"2774:3:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2767:3:9"},"nodeType":"YulFunctionCall","src":"2767:11:9"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2722:2:9"},"nodeType":"YulFunctionCall","src":"2722:57:9"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"2714:4:9"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2681:4:9","type":""},{"name":"len","nodeType":"YulTypedName","src":"2687:3:9","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"2695:4:9","type":""}],"src":"2619:166:9"},{"body":{"nodeType":"YulBlock","src":"2886:1256:9","statements":[{"nodeType":"YulVariableDeclaration","src":"2896:24:9","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2916:3:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2910:5:9"},"nodeType":"YulFunctionCall","src":"2910:10:9"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"2900:6:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"2963:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2965:16:9"},"nodeType":"YulFunctionCall","src":"2965:18:9"},"nodeType":"YulExpressionStatement","src":"2965:18:9"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2935:6:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2951:2:9","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2955:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2947:3:9"},"nodeType":"YulFunctionCall","src":"2947:10:9"},{"kind":"number","nodeType":"YulLiteral","src":"2959:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2943:3:9"},"nodeType":"YulFunctionCall","src":"2943:18:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2932:2:9"},"nodeType":"YulFunctionCall","src":"2932:30:9"},"nodeType":"YulIf","src":"2929:56:9"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3038:4:9"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3076:4:9"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3070:5:9"},"nodeType":"YulFunctionCall","src":"3070:11:9"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"3044:25:9"},"nodeType":"YulFunctionCall","src":"3044:38:9"},{"name":"newLen","nodeType":"YulIdentifier","src":"3084:6:9"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"2994:43:9"},"nodeType":"YulFunctionCall","src":"2994:97:9"},"nodeType":"YulExpressionStatement","src":"2994:97:9"},{"nodeType":"YulVariableDeclaration","src":"3100:18:9","value":{"kind":"number","nodeType":"YulLiteral","src":"3117:1:9","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"3104:9:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3127:23:9","value":{"kind":"number","nodeType":"YulLiteral","src":"3146:4:9","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"3131:11:9","type":""}]},{"nodeType":"YulAssignment","src":"3159:24:9","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3172:11:9"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3159:9:9"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"3229:656:9","statements":[{"nodeType":"YulVariableDeclaration","src":"3243:35:9","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3262:6:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3274:2:9","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3270:3:9"},"nodeType":"YulFunctionCall","src":"3270:7:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3258:3:9"},"nodeType":"YulFunctionCall","src":"3258:20:9"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"3247:7:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3291:49:9","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3335:4:9"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"3305:29:9"},"nodeType":"YulFunctionCall","src":"3305:35:9"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"3295:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3353:10:9","value":{"kind":"number","nodeType":"YulLiteral","src":"3362:1:9","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3357:1:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"3440:172:9","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3465:6:9"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3483:3:9"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3488:9:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3479:3:9"},"nodeType":"YulFunctionCall","src":"3479:19:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3473:5:9"},"nodeType":"YulFunctionCall","src":"3473:26:9"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3458:6:9"},"nodeType":"YulFunctionCall","src":"3458:42:9"},"nodeType":"YulExpressionStatement","src":"3458:42:9"},{"nodeType":"YulAssignment","src":"3517:24:9","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3531:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"3539:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3527:3:9"},"nodeType":"YulFunctionCall","src":"3527:14:9"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3517:6:9"}]},{"nodeType":"YulAssignment","src":"3558:40:9","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3575:9:9"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3586:11:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3571:3:9"},"nodeType":"YulFunctionCall","src":"3571:27:9"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3558:9:9"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3387:1:9"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"3390:7:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3384:2:9"},"nodeType":"YulFunctionCall","src":"3384:14:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3399:28:9","statements":[{"nodeType":"YulAssignment","src":"3401:24:9","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3410:1:9"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3413:11:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3406:3:9"},"nodeType":"YulFunctionCall","src":"3406:19:9"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3401:1:9"}]}]},"pre":{"nodeType":"YulBlock","src":"3380:3:9","statements":[]},"src":"3376:236:9"},{"body":{"nodeType":"YulBlock","src":"3660:166:9","statements":[{"nodeType":"YulVariableDeclaration","src":"3678:43:9","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3705:3:9"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3710:9:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3701:3:9"},"nodeType":"YulFunctionCall","src":"3701:19:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3695:5:9"},"nodeType":"YulFunctionCall","src":"3695:26:9"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"3682:9:9","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3745:6:9"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"3757:9:9"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3784:1:9","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"3787:6:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3780:3:9"},"nodeType":"YulFunctionCall","src":"3780:14:9"},{"kind":"number","nodeType":"YulLiteral","src":"3796:3:9","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3776:3:9"},"nodeType":"YulFunctionCall","src":"3776:24:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3806:1:9","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3802:3:9"},"nodeType":"YulFunctionCall","src":"3802:6:9"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3772:3:9"},"nodeType":"YulFunctionCall","src":"3772:37:9"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3768:3:9"},"nodeType":"YulFunctionCall","src":"3768:42:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3753:3:9"},"nodeType":"YulFunctionCall","src":"3753:58:9"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3738:6:9"},"nodeType":"YulFunctionCall","src":"3738:74:9"},"nodeType":"YulExpressionStatement","src":"3738:74:9"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"3631:7:9"},{"name":"newLen","nodeType":"YulIdentifier","src":"3640:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3628:2:9"},"nodeType":"YulFunctionCall","src":"3628:19:9"},"nodeType":"YulIf","src":"3625:201:9"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3846:4:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3860:1:9","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"3863:6:9"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3856:3:9"},"nodeType":"YulFunctionCall","src":"3856:14:9"},{"kind":"number","nodeType":"YulLiteral","src":"3872:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3852:3:9"},"nodeType":"YulFunctionCall","src":"3852:22:9"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3839:6:9"},"nodeType":"YulFunctionCall","src":"3839:36:9"},"nodeType":"YulExpressionStatement","src":"3839:36:9"}]},"nodeType":"YulCase","src":"3222:663:9","value":{"kind":"number","nodeType":"YulLiteral","src":"3227:1:9","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"3902:234:9","statements":[{"nodeType":"YulVariableDeclaration","src":"3916:14:9","value":{"kind":"number","nodeType":"YulLiteral","src":"3929:1:9","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3920:5:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"3965:67:9","statements":[{"nodeType":"YulAssignment","src":"3983:35:9","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4002:3:9"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4007:9:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:9"},"nodeType":"YulFunctionCall","src":"3998:19:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3992:5:9"},"nodeType":"YulFunctionCall","src":"3992:26:9"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3983:5:9"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"3946:6:9"},"nodeType":"YulIf","src":"3943:89:9"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4052:4:9"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4111:5:9"},{"name":"newLen","nodeType":"YulIdentifier","src":"4118:6:9"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"4058:52:9"},"nodeType":"YulFunctionCall","src":"4058:67:9"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4045:6:9"},"nodeType":"YulFunctionCall","src":"4045:81:9"},"nodeType":"YulExpressionStatement","src":"4045:81:9"}]},"nodeType":"YulCase","src":"3894:242:9","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3202:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"3210:2:9","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3199:2:9"},"nodeType":"YulFunctionCall","src":"3199:14:9"},"nodeType":"YulSwitch","src":"3192:944:9"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"2871:4:9","type":""},{"name":"src","nodeType":"YulTypedName","src":"2877:3:9","type":""}],"src":"2790:1352:9"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        mstore(add(add(memPtr, _1), _4), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":9,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b506040516200104e3803806200104e833981016040819052620000349162000123565b60026200004283826200021c565b5060036200005182826200021c565b50506000805550620002e8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008657600080fd5b81516001600160401b0380821115620000a357620000a36200005e565b604051601f8301601f19908116603f01168101908282118183101715620000ce57620000ce6200005e565b81604052838152602092508683858801011115620000eb57600080fd5b600091505b838210156200010f5785820183015181830184015290820190620000f0565b600093810190920192909252949350505050565b600080604083850312156200013757600080fd5b82516001600160401b03808211156200014f57600080fd5b6200015d8683870162000074565b935060208501519150808211156200017457600080fd5b50620001838582860162000074565b9150509250929050565b600181811c90821680620001a257607f821691505b602082108103620001c357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021757600081815260208120601f850160051c81016020861015620001f25750805b601f850160051c820191505b818110156200021357828155600101620001fe565b5050505b505050565b81516001600160401b038111156200023857620002386200005e565b62000250816200024984546200018d565b84620001c9565b602080601f8311600181146200028857600084156200026f5750858301515b600019600386901b1c1916600185901b17855562000213565b600085815260208120601f198616915b82811015620002b95788860151825594840194600190910190840162000298565b5085821015620002d85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610d5680620002f86000396000f3fe6080604052600436106100dd5760003560e01c80636352211e1161007f578063a22cb46511610059578063a22cb46514610224578063b88d4fde14610244578063c87b56dd14610257578063e985e9c51461027757600080fd5b80636352211e146101cf57806370a08231146101ef57806395d89b411461020f57600080fd5b8063095ea7b3116100bb578063095ea7b31461017157806318160ddd1461018657806323b872dd146101a957806342842e0e146101bc57600080fd5b806301ffc9a7146100e257806306fdde0314610117578063081812fc14610139575b600080fd5b3480156100ee57600080fd5b506101026100fd3660046109c6565b6102c0565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b5061012c610312565b60405161010e9190610a33565b34801561014557600080fd5b50610159610154366004610a46565b6103a4565b6040516001600160a01b03909116815260200161010e565b61018461017f366004610a7b565b6103e8565b005b34801561019257600080fd5b50600154600054035b60405190815260200161010e565b6101846101b7366004610aa5565b610488565b6101846101ca366004610aa5565b610620565b3480156101db57600080fd5b506101596101ea366004610a46565b610640565b3480156101fb57600080fd5b5061019b61020a366004610ae1565b61064b565b34801561021b57600080fd5b5061012c61069a565b34801561023057600080fd5b5061018461023f366004610afc565b6106a9565b610184610252366004610b4e565b610715565b34801561026357600080fd5b5061012c610272366004610a46565b61075f565b34801561028357600080fd5b50610102610292366004610c2a565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b60006301ffc9a760e01b6001600160e01b0319831614806102f157506380ac58cd60e01b6001600160e01b03198316145b8061030c5750635b5e139f60e01b6001600160e01b03198316145b92915050565b60606002805461032190610c5d565b80601f016020809104026020016040519081016040528092919081815260200182805461034d90610c5d565b801561039a5780601f1061036f5761010080835404028352916020019161039a565b820191906000526020600020905b81548152906001019060200180831161037d57829003601f168201915b5050505050905090565b60006103af826107f0565b6103cc576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006103f382610640565b9050336001600160a01b0382161461042c5761040f8133610292565b61042c576040516367d9dca160e11b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600061049382610817565b9050836001600160a01b0316816001600160a01b0316146104c65760405162a1148160e81b815260040160405180910390fd5b60008281526006602052604090208054338082146001600160a01b03881690911417610513576104f68633610292565b61051357604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03851661053a57604051633a954ecd60e21b815260040160405180910390fd5b801561054557600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040812091909155600160e11b841690036105d7576001840160008181526004602052604081205490036105d55760005481146105d55760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b61063b83838360405180602001604052806000815250610715565b505050565b600061030c82610817565b60006001600160a01b038216610674576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b60606003805461032190610c5d565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610720848484610488565b6001600160a01b0383163b156107595761073c8484848461087e565b610759576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b606061076a826107f0565b61078757604051630a14c4b560e41b815260040160405180910390fd5b600061079e60408051602081019091526000815290565b905080516000036107be57604051806020016040528060008152506107e9565b806107c884610969565b6040516020016107d9929190610c97565b6040516020818303038152906040525b9392505050565b600080548210801561030c575050600090815260046020526040902054600160e01b161590565b6000816000548110156108655760008181526004602052604081205490600160e01b82169003610863575b806000036107e9575060001901600081815260046020526040902054610842565b505b604051636f96cda160e11b815260040160405180910390fd5b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906108b3903390899088908890600401610cc6565b6020604051808303816000875af19250505080156108ee575060408051601f3d908101601f191682019092526108eb91810190610d03565b60015b61094c573d80801561091c576040519150601f19603f3d011682016040523d82523d6000602084013e610921565b606091505b508051600003610944576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a9004806109835750819003601f19909101908152919050565b6001600160e01b0319811681146109c357600080fd5b50565b6000602082840312156109d857600080fd5b81356107e9816109ad565b60005b838110156109fe5781810151838201526020016109e6565b50506000910152565b60008151808452610a1f8160208601602086016109e3565b601f01601f19169290920160200192915050565b6020815260006107e96020830184610a07565b600060208284031215610a5857600080fd5b5035919050565b80356001600160a01b0381168114610a7657600080fd5b919050565b60008060408385031215610a8e57600080fd5b610a9783610a5f565b946020939093013593505050565b600080600060608486031215610aba57600080fd5b610ac384610a5f565b9250610ad160208501610a5f565b9150604084013590509250925092565b600060208284031215610af357600080fd5b6107e982610a5f565b60008060408385031215610b0f57600080fd5b610b1883610a5f565b915060208301358015158114610b2d57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610b6457600080fd5b610b6d85610a5f565b9350610b7b60208601610a5f565b925060408501359150606085013567ffffffffffffffff80821115610b9f57600080fd5b818701915087601f830112610bb357600080fd5b813581811115610bc557610bc5610b38565b604051601f8201601f19908116603f01168101908382118183101715610bed57610bed610b38565b816040528281528a6020848701011115610c0657600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215610c3d57600080fd5b610c4683610a5f565b9150610c5460208401610a5f565b90509250929050565b600181811c90821680610c7157607f821691505b602082108103610c9157634e487b7160e01b600052602260045260246000fd5b50919050565b60008351610ca98184602088016109e3565b835190830190610cbd8183602088016109e3565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610cf990830184610a07565b9695505050505050565b600060208284031215610d1557600080fd5b81516107e9816109ad56fea264697066735822122044591560d812de1cb8874b48d799cb6e8addb5a79a4fa0133ed888beca80833d64736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x104E CODESIZE SUB DUP1 PUSH3 0x104E DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x123 JUMP JUMPDEST PUSH1 0x2 PUSH3 0x42 DUP4 DUP3 PUSH3 0x21C JUMP JUMPDEST POP PUSH1 0x3 PUSH3 0x51 DUP3 DUP3 PUSH3 0x21C JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SSTORE POP PUSH3 0x2E8 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0xA3 JUMPI PUSH3 0xA3 PUSH3 0x5E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0xCE JUMPI PUSH3 0xCE PUSH3 0x5E JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0xEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x10F JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0xF0 JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP2 ADD SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x137 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x14F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x15D DUP7 DUP4 DUP8 ADD PUSH3 0x74 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x174 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x183 DUP6 DUP3 DUP7 ADD PUSH3 0x74 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x1A2 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x1C3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x217 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x1F2 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x213 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x1FE JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x238 JUMPI PUSH3 0x238 PUSH3 0x5E JUMP JUMPDEST PUSH3 0x250 DUP2 PUSH3 0x249 DUP5 SLOAD PUSH3 0x18D JUMP JUMPDEST DUP5 PUSH3 0x1C9 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x288 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x26F JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x213 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x2B9 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x298 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x2D8 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0xD56 DUP1 PUSH3 0x2F8 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDD JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x244 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x277 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x20F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xBB JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x171 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x139 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0x9C6 JUMP JUMPDEST PUSH2 0x2C0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x123 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12C PUSH2 0x312 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10E SWAP2 SWAP1 PUSH2 0xA33 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH2 0x154 CALLDATASIZE PUSH1 0x4 PUSH2 0xA46 JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x184 PUSH2 0x17F CALLDATASIZE PUSH1 0x4 PUSH2 0xA7B JUMP JUMPDEST PUSH2 0x3E8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x184 PUSH2 0x1B7 CALLDATASIZE PUSH1 0x4 PUSH2 0xAA5 JUMP JUMPDEST PUSH2 0x488 JUMP JUMPDEST PUSH2 0x184 PUSH2 0x1CA CALLDATASIZE PUSH1 0x4 PUSH2 0xAA5 JUMP JUMPDEST PUSH2 0x620 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH2 0x1EA CALLDATASIZE PUSH1 0x4 PUSH2 0xA46 JUMP JUMPDEST PUSH2 0x640 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19B PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0xAE1 JUMP JUMPDEST PUSH2 0x64B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12C PUSH2 0x69A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x184 PUSH2 0x23F CALLDATASIZE PUSH1 0x4 PUSH2 0xAFC JUMP JUMPDEST PUSH2 0x6A9 JUMP JUMPDEST PUSH2 0x184 PUSH2 0x252 CALLDATASIZE PUSH1 0x4 PUSH2 0xB4E JUMP JUMPDEST PUSH2 0x715 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12C PUSH2 0x272 CALLDATASIZE PUSH1 0x4 PUSH2 0xA46 JUMP JUMPDEST PUSH2 0x75F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x283 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x292 CALLDATASIZE PUSH1 0x4 PUSH2 0xC2A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ DUP1 PUSH2 0x2F1 JUMPI POP PUSH4 0x80AC58CD PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST DUP1 PUSH2 0x30C JUMPI POP PUSH4 0x5B5E139F PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x321 SWAP1 PUSH2 0xC5D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x34D SWAP1 PUSH2 0xC5D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x39A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x36F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x39A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x37D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AF DUP3 PUSH2 0x7F0 JUMP JUMPDEST PUSH2 0x3CC JUMPI PUSH1 0x40 MLOAD PUSH4 0x33D1C039 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F3 DUP3 PUSH2 0x640 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ PUSH2 0x42C JUMPI PUSH2 0x40F DUP2 CALLER PUSH2 0x292 JUMP JUMPDEST PUSH2 0x42C JUMPI PUSH1 0x40 MLOAD PUSH4 0x67D9DCA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x493 DUP3 PUSH2 0x817 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0xA11481 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD CALLER DUP1 DUP3 EQ PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 SWAP2 EQ OR PUSH2 0x513 JUMPI PUSH2 0x4F6 DUP7 CALLER PUSH2 0x292 JUMP JUMPDEST PUSH2 0x513 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CE44B5F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x53A JUMPI PUSH1 0x40 MLOAD PUSH4 0x3A954ECD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x545 JUMPI PUSH1 0x0 DUP3 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP2 DUP8 AND DUP1 DUP3 MSTORE SWAP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE TIMESTAMP PUSH1 0xA0 SHL OR PUSH1 0x1 PUSH1 0xE1 SHL OR PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0xE1 SHL DUP5 AND SWAP1 SUB PUSH2 0x5D7 JUMPI PUSH1 0x1 DUP5 ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SUB PUSH2 0x5D5 JUMPI PUSH1 0x0 SLOAD DUP2 EQ PUSH2 0x5D5 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE JUMPDEST POP JUMPDEST DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x63B DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x715 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30C DUP3 PUSH2 0x817 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x674 JUMPI PUSH1 0x40 MLOAD PUSH4 0x23D3AD81 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x321 SWAP1 PUSH2 0xC5D JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x720 DUP5 DUP5 DUP5 PUSH2 0x488 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x759 JUMPI PUSH2 0x73C DUP5 DUP5 DUP5 DUP5 PUSH2 0x87E JUMP JUMPDEST PUSH2 0x759 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x76A DUP3 PUSH2 0x7F0 JUMP JUMPDEST PUSH2 0x787 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA14C4B5 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x79E PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x7BE JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7E9 JUMP JUMPDEST DUP1 PUSH2 0x7C8 DUP5 PUSH2 0x969 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x7D9 SWAP3 SWAP2 SWAP1 PUSH2 0xC97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 LT DUP1 ISZERO PUSH2 0x30C JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xE0 SHL AND ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x865 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 PUSH1 0x1 PUSH1 0xE0 SHL DUP3 AND SWAP1 SUB PUSH2 0x863 JUMPI JUMPDEST DUP1 PUSH1 0x0 SUB PUSH2 0x7E9 JUMPI POP PUSH1 0x0 NOT ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x842 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6F96CDA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x8B3 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xCC6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x8EE JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x8EB SWAP2 DUP2 ADD SWAP1 PUSH2 0xD03 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x94C JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x91C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x921 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x944 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xA0 PUSH1 0x40 MLOAD ADD DUP1 PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 SUB SWAP2 POP POP PUSH1 0x0 DUP2 MSTORE DUP1 DUP3 JUMPDEST PUSH1 0x1 DUP4 SUB SWAP3 POP PUSH1 0xA DUP2 MOD PUSH1 0x30 ADD DUP4 MSTORE8 PUSH1 0xA SWAP1 DIV DUP1 PUSH2 0x983 JUMPI POP DUP2 SWAP1 SUB PUSH1 0x1F NOT SWAP1 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x9C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7E9 DUP2 PUSH2 0x9AD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9FE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x9E6 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xA1F DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x9E3 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x7E9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xA07 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA97 DUP4 PUSH2 0xA5F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xABA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAC3 DUP5 PUSH2 0xA5F JUMP JUMPDEST SWAP3 POP PUSH2 0xAD1 PUSH1 0x20 DUP6 ADD PUSH2 0xA5F JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7E9 DUP3 PUSH2 0xA5F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB18 DUP4 PUSH2 0xA5F JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xB2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6D DUP6 PUSH2 0xA5F JUMP JUMPDEST SWAP4 POP PUSH2 0xB7B PUSH1 0x20 DUP7 ADD PUSH2 0xA5F JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xBB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xBC5 JUMPI PUSH2 0xBC5 PUSH2 0xB38 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xBED JUMPI PUSH2 0xBED PUSH2 0xB38 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xC06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC46 DUP4 PUSH2 0xA5F JUMP JUMPDEST SWAP2 POP PUSH2 0xC54 PUSH1 0x20 DUP5 ADD PUSH2 0xA5F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xC71 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xC91 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0xCA9 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x9E3 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0xCBD DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x9E3 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xCF9 SWAP1 DUP4 ADD DUP5 PUSH2 0xA07 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x7E9 DUP2 PUSH2 0x9AD JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PREVRANDAO MSIZE ISZERO PUSH1 0xD8 SLT 0xDE SHR 0xB8 DUP8 0x4B BASEFEE 0xD7 SWAP10 0xCB PUSH15 0x8ADDB5A79A4FA0133ED888BECA8083 RETURNDATASIZE PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"895:40452:7:-:0;;;4946:154;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5012:5;:13;5020:5;5012;:13;:::i;:::-;-1:-1:-1;5035:7:7;:17;5045:7;5035;:17;:::i;:::-;-1:-1:-1;;5482:7:7;5062:31;;-1:-1:-1;895:40452:7;;14:127:9;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:840;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:9;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:9;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;954:1;932:15;;;928:24;;;921:35;;;;936:6;146:840;-1:-1:-1;;;;146:840:9:o;991:562::-;1090:6;1098;1151:2;1139:9;1130:7;1126:23;1122:32;1119:52;;;1167:1;1164;1157:12;1119:52;1194:16;;-1:-1:-1;;;;;1259:14:9;;;1256:34;;;1286:1;1283;1276:12;1256:34;1309:61;1362:7;1353:6;1342:9;1338:22;1309:61;:::i;:::-;1299:71;;1416:2;1405:9;1401:18;1395:25;1379:41;;1445:2;1435:8;1432:16;1429:36;;;1461:1;1458;1451:12;1429:36;;1484:63;1539:7;1528:8;1517:9;1513:24;1484:63;:::i;:::-;1474:73;;;991:562;;;;;:::o;1558:380::-;1637:1;1633:12;;;;1680;;;1701:61;;1755:4;1747:6;1743:17;1733:27;;1701:61;1808:2;1800:6;1797:14;1777:18;1774:38;1771:161;;1854:10;1849:3;1845:20;1842:1;1835:31;1889:4;1886:1;1879:15;1917:4;1914:1;1907:15;1771:161;;1558:380;;;:::o;2069:545::-;2171:2;2166:3;2163:11;2160:448;;;2207:1;2232:5;2228:2;2221:17;2277:4;2273:2;2263:19;2347:2;2335:10;2331:19;2328:1;2324:27;2318:4;2314:38;2383:4;2371:10;2368:20;2365:47;;;-1:-1:-1;2406:4:9;2365:47;2461:2;2456:3;2452:12;2449:1;2445:20;2439:4;2435:31;2425:41;;2516:82;2534:2;2527:5;2524:13;2516:82;;;2579:17;;;2560:1;2549:13;2516:82;;;2520:3;;;2160:448;2069:545;;;:::o;2790:1352::-;2910:10;;-1:-1:-1;;;;;2932:30:9;;2929:56;;;2965:18;;:::i;:::-;2994:97;3084:6;3044:38;3076:4;3070:11;3044:38;:::i;:::-;3038:4;2994:97;:::i;:::-;3146:4;;3210:2;3199:14;;3227:1;3222:663;;;;3929:1;3946:6;3943:89;;;-1:-1:-1;3998:19:9;;;3992:26;3943:89;-1:-1:-1;;2747:1:9;2743:11;;;2739:24;2735:29;2725:40;2771:1;2767:11;;;2722:57;4045:81;;3192:944;;3222:663;2016:1;2009:14;;;2053:4;2040:18;;-1:-1:-1;;3258:20:9;;;3376:236;3390:7;3387:1;3384:14;3376:236;;;3479:19;;;3473:26;3458:42;;3571:27;;;;3539:1;3527:14;;;;3406:19;;3376:236;;;3380:3;3640:6;3631:7;3628:19;3625:201;;;3701:19;;;3695:26;-1:-1:-1;;3784:1:9;3780:14;;;3796:3;3776:24;3772:37;3768:42;3753:58;3738:74;;3625:201;-1:-1:-1;;;;;3872:1:9;3856:14;;;3852:22;3839:36;;-1:-1:-1;2790:1352:9:o;:::-;895:40452:7;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfers_2862":{"entryPoint":null,"id":2862,"parameterSlots":4,"returnSlots":0},"@_baseURI_2259":{"entryPoint":null,"id":2259,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfers_2849":{"entryPoint":null,"id":2849,"parameterSlots":4,"returnSlots":0},"@_checkContractOnERC721Received_2917":{"entryPoint":2174,"id":2917,"parameterSlots":4,"returnSlots":1},"@_exists_2601":{"entryPoint":2032,"id":2601,"parameterSlots":1,"returnSlots":1},"@_extraData_3423":{"entryPoint":null,"id":3423,"parameterSlots":3,"returnSlots":1},"@_getApprovedSlotAndAddress_2634":{"entryPoint":null,"id":2634,"parameterSlots":1,"returnSlots":2},"@_isSenderApprovedOrOwner_2615":{"entryPoint":null,"id":2615,"parameterSlots":3,"returnSlots":1},"@_msgSenderERC721A_3466":{"entryPoint":null,"id":3466,"parameterSlots":0,"returnSlots":1},"@_nextExtraData_3456":{"entryPoint":null,"id":3456,"parameterSlots":3,"returnSlots":1},"@_packOwnershipData_2453":{"entryPoint":null,"id":2453,"parameterSlots":2,"returnSlots":1},"@_packedOwnershipOf_2387":{"entryPoint":2071,"id":2387,"parameterSlots":1,"returnSlots":1},"@_startTokenId_2001":{"entryPoint":null,"id":2001,"parameterSlots":0,"returnSlots":1},"@_toString_3476":{"entryPoint":2409,"id":3476,"parameterSlots":1,"returnSlots":1},"@approve_2508":{"entryPoint":1000,"id":2508,"parameterSlots":2,"returnSlots":0},"@balanceOf_2074":{"entryPoint":1611,"id":2074,"parameterSlots":1,"returnSlots":1},"@getApproved_2531":{"entryPoint":932,"id":2531,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_2575":{"entryPoint":null,"id":2575,"parameterSlots":2,"returnSlots":1},"@name_2197":{"entryPoint":786,"id":2197,"parameterSlots":0,"returnSlots":1},"@ownerOf_2279":{"entryPoint":1600,"id":2279,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_2798":{"entryPoint":1568,"id":2798,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_2836":{"entryPoint":1813,"id":2836,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_2557":{"entryPoint":1705,"id":2557,"parameterSlots":2,"returnSlots":0},"@supportsInterface_2187":{"entryPoint":704,"id":2187,"parameterSlots":1,"returnSlots":1},"@symbol_2207":{"entryPoint":1690,"id":2207,"parameterSlots":0,"returnSlots":1},"@tokenURI_2250":{"entryPoint":1887,"id":2250,"parameterSlots":1,"returnSlots":1},"@totalSupply_2026":{"entryPoint":null,"id":2026,"parameterSlots":0,"returnSlots":1},"@transferFrom_2779":{"entryPoint":1160,"id":2779,"parameterSlots":3,"returnSlots":0},"abi_decode_address":{"entryPoint":2655,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":2785,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":3114,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":2725,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":2894,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":2812,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":2683,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":2502,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":3331,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":2630,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":2567,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":3223,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":3270,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2611,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":2531,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":3165,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x41":{"entryPoint":2872,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":2477,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:6407:9","statements":[{"nodeType":"YulBlock","src":"6:3:9","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:87:9","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:9"},"nodeType":"YulFunctionCall","src":"125:12:9"},"nodeType":"YulExpressionStatement","src":"125:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:9"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"108:10:9","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"99:3:9"},"nodeType":"YulFunctionCall","src":"99:20:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:9"},"nodeType":"YulFunctionCall","src":"88:32:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:9"},"nodeType":"YulFunctionCall","src":"78:43:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:9"},"nodeType":"YulFunctionCall","src":"71:51:9"},"nodeType":"YulIf","src":"68:71:9"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:9","type":""}],"src":"14:131:9"},{"body":{"nodeType":"YulBlock","src":"219:176:9","statements":[{"body":{"nodeType":"YulBlock","src":"265:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"274:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"277:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"267:6:9"},"nodeType":"YulFunctionCall","src":"267:12:9"},"nodeType":"YulExpressionStatement","src":"267:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"240:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"249:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"236:3:9"},"nodeType":"YulFunctionCall","src":"236:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"261:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"232:3:9"},"nodeType":"YulFunctionCall","src":"232:32:9"},"nodeType":"YulIf","src":"229:52:9"},{"nodeType":"YulVariableDeclaration","src":"290:36:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"316:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"303:12:9"},"nodeType":"YulFunctionCall","src":"303:23:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"294:5:9","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"359:5:9"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"335:23:9"},"nodeType":"YulFunctionCall","src":"335:30:9"},"nodeType":"YulExpressionStatement","src":"335:30:9"},{"nodeType":"YulAssignment","src":"374:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"384:5:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"374:6:9"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"185:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"196:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"208:6:9","type":""}],"src":"150:245:9"},{"body":{"nodeType":"YulBlock","src":"495:92:9","statements":[{"nodeType":"YulAssignment","src":"505:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"517:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"528:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"513:3:9"},"nodeType":"YulFunctionCall","src":"513:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"505:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"547:9:9"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"572:6:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"565:6:9"},"nodeType":"YulFunctionCall","src":"565:14:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"558:6:9"},"nodeType":"YulFunctionCall","src":"558:22:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"540:6:9"},"nodeType":"YulFunctionCall","src":"540:41:9"},"nodeType":"YulExpressionStatement","src":"540:41:9"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"464:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"475:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"486:4:9","type":""}],"src":"400:187:9"},{"body":{"nodeType":"YulBlock","src":"658:184:9","statements":[{"nodeType":"YulVariableDeclaration","src":"668:10:9","value":{"kind":"number","nodeType":"YulLiteral","src":"677:1:9","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"672:1:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"737:63:9","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"762:3:9"},{"name":"i","nodeType":"YulIdentifier","src":"767:1:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"758:3:9"},"nodeType":"YulFunctionCall","src":"758:11:9"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"781:3:9"},{"name":"i","nodeType":"YulIdentifier","src":"786:1:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:9"},"nodeType":"YulFunctionCall","src":"777:11:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"771:5:9"},"nodeType":"YulFunctionCall","src":"771:18:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"751:6:9"},"nodeType":"YulFunctionCall","src":"751:39:9"},"nodeType":"YulExpressionStatement","src":"751:39:9"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"698:1:9"},{"name":"length","nodeType":"YulIdentifier","src":"701:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"695:2:9"},"nodeType":"YulFunctionCall","src":"695:13:9"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"709:19:9","statements":[{"nodeType":"YulAssignment","src":"711:15:9","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"720:1:9"},{"kind":"number","nodeType":"YulLiteral","src":"723:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"716:3:9"},"nodeType":"YulFunctionCall","src":"716:10:9"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"711:1:9"}]}]},"pre":{"nodeType":"YulBlock","src":"691:3:9","statements":[]},"src":"687:113:9"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"820:3:9"},{"name":"length","nodeType":"YulIdentifier","src":"825:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"816:3:9"},"nodeType":"YulFunctionCall","src":"816:16:9"},{"kind":"number","nodeType":"YulLiteral","src":"834:1:9","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"809:6:9"},"nodeType":"YulFunctionCall","src":"809:27:9"},"nodeType":"YulExpressionStatement","src":"809:27:9"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"636:3:9","type":""},{"name":"dst","nodeType":"YulTypedName","src":"641:3:9","type":""},{"name":"length","nodeType":"YulTypedName","src":"646:6:9","type":""}],"src":"592:250:9"},{"body":{"nodeType":"YulBlock","src":"897:221:9","statements":[{"nodeType":"YulVariableDeclaration","src":"907:26:9","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"927:5:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"921:5:9"},"nodeType":"YulFunctionCall","src":"921:12:9"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"911:6:9","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"949:3:9"},{"name":"length","nodeType":"YulIdentifier","src":"954:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"942:6:9"},"nodeType":"YulFunctionCall","src":"942:19:9"},"nodeType":"YulExpressionStatement","src":"942:19:9"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1009:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"1016:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1005:3:9"},"nodeType":"YulFunctionCall","src":"1005:16:9"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1027:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"1032:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1023:3:9"},"nodeType":"YulFunctionCall","src":"1023:14:9"},{"name":"length","nodeType":"YulIdentifier","src":"1039:6:9"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"970:34:9"},"nodeType":"YulFunctionCall","src":"970:76:9"},"nodeType":"YulExpressionStatement","src":"970:76:9"},{"nodeType":"YulAssignment","src":"1055:57:9","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1070:3:9"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1083:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"1091:2:9","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1079:3:9"},"nodeType":"YulFunctionCall","src":"1079:15:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1100:2:9","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1096:3:9"},"nodeType":"YulFunctionCall","src":"1096:7:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1075:3:9"},"nodeType":"YulFunctionCall","src":"1075:29:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1066:3:9"},"nodeType":"YulFunctionCall","src":"1066:39:9"},{"kind":"number","nodeType":"YulLiteral","src":"1107:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1062:3:9"},"nodeType":"YulFunctionCall","src":"1062:50:9"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1055:3:9"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"874:5:9","type":""},{"name":"pos","nodeType":"YulTypedName","src":"881:3:9","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"889:3:9","type":""}],"src":"847:271:9"},{"body":{"nodeType":"YulBlock","src":"1244:99:9","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1261:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1272:2:9","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1254:6:9"},"nodeType":"YulFunctionCall","src":"1254:21:9"},"nodeType":"YulExpressionStatement","src":"1254:21:9"},{"nodeType":"YulAssignment","src":"1284:53:9","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1310:6:9"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1322:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1333:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1318:3:9"},"nodeType":"YulFunctionCall","src":"1318:18:9"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1292:17:9"},"nodeType":"YulFunctionCall","src":"1292:45:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1284:4:9"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1213:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1224:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1235:4:9","type":""}],"src":"1123:220:9"},{"body":{"nodeType":"YulBlock","src":"1418:110:9","statements":[{"body":{"nodeType":"YulBlock","src":"1464:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1473:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1476:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1466:6:9"},"nodeType":"YulFunctionCall","src":"1466:12:9"},"nodeType":"YulExpressionStatement","src":"1466:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1439:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"1448:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1435:3:9"},"nodeType":"YulFunctionCall","src":"1435:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"1460:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1431:3:9"},"nodeType":"YulFunctionCall","src":"1431:32:9"},"nodeType":"YulIf","src":"1428:52:9"},{"nodeType":"YulAssignment","src":"1489:33:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1512:9:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1499:12:9"},"nodeType":"YulFunctionCall","src":"1499:23:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1489:6:9"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1384:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1395:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1407:6:9","type":""}],"src":"1348:180:9"},{"body":{"nodeType":"YulBlock","src":"1634:102:9","statements":[{"nodeType":"YulAssignment","src":"1644:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1656:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"1667:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1652:3:9"},"nodeType":"YulFunctionCall","src":"1652:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1644:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1686:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1701:6:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1717:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1722:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1713:3:9"},"nodeType":"YulFunctionCall","src":"1713:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"1726:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1709:3:9"},"nodeType":"YulFunctionCall","src":"1709:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1697:3:9"},"nodeType":"YulFunctionCall","src":"1697:32:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1679:6:9"},"nodeType":"YulFunctionCall","src":"1679:51:9"},"nodeType":"YulExpressionStatement","src":"1679:51:9"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1603:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1614:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1625:4:9","type":""}],"src":"1533:203:9"},{"body":{"nodeType":"YulBlock","src":"1790:124:9","statements":[{"nodeType":"YulAssignment","src":"1800:29:9","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1822:6:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1809:12:9"},"nodeType":"YulFunctionCall","src":"1809:20:9"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1800:5:9"}]},{"body":{"nodeType":"YulBlock","src":"1892:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1901:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1904:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1894:6:9"},"nodeType":"YulFunctionCall","src":"1894:12:9"},"nodeType":"YulExpressionStatement","src":"1894:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1851:5:9"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1862:5:9"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1877:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1882:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1873:3:9"},"nodeType":"YulFunctionCall","src":"1873:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"1886:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1869:3:9"},"nodeType":"YulFunctionCall","src":"1869:19:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1858:3:9"},"nodeType":"YulFunctionCall","src":"1858:31:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1848:2:9"},"nodeType":"YulFunctionCall","src":"1848:42:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1841:6:9"},"nodeType":"YulFunctionCall","src":"1841:50:9"},"nodeType":"YulIf","src":"1838:70:9"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1769:6:9","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1780:5:9","type":""}],"src":"1741:173:9"},{"body":{"nodeType":"YulBlock","src":"2006:167:9","statements":[{"body":{"nodeType":"YulBlock","src":"2052:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2061:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2064:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2054:6:9"},"nodeType":"YulFunctionCall","src":"2054:12:9"},"nodeType":"YulExpressionStatement","src":"2054:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2027:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"2036:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2023:3:9"},"nodeType":"YulFunctionCall","src":"2023:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"2048:2:9","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2019:3:9"},"nodeType":"YulFunctionCall","src":"2019:32:9"},"nodeType":"YulIf","src":"2016:52:9"},{"nodeType":"YulAssignment","src":"2077:39:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2106:9:9"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2087:18:9"},"nodeType":"YulFunctionCall","src":"2087:29:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2077:6:9"}]},{"nodeType":"YulAssignment","src":"2125:42:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2152:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2163:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2148:3:9"},"nodeType":"YulFunctionCall","src":"2148:18:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2135:12:9"},"nodeType":"YulFunctionCall","src":"2135:32:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2125:6:9"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1964:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1975:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1987:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1995:6:9","type":""}],"src":"1919:254:9"},{"body":{"nodeType":"YulBlock","src":"2279:76:9","statements":[{"nodeType":"YulAssignment","src":"2289:26:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2301:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2312:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2297:3:9"},"nodeType":"YulFunctionCall","src":"2297:18:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2289:4:9"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2331:9:9"},{"name":"value0","nodeType":"YulIdentifier","src":"2342:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2324:6:9"},"nodeType":"YulFunctionCall","src":"2324:25:9"},"nodeType":"YulExpressionStatement","src":"2324:25:9"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2248:9:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2259:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2270:4:9","type":""}],"src":"2178:177:9"},{"body":{"nodeType":"YulBlock","src":"2464:224:9","statements":[{"body":{"nodeType":"YulBlock","src":"2510:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2519:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2522:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2512:6:9"},"nodeType":"YulFunctionCall","src":"2512:12:9"},"nodeType":"YulExpressionStatement","src":"2512:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2485:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"2494:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2481:3:9"},"nodeType":"YulFunctionCall","src":"2481:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"2506:2:9","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2477:3:9"},"nodeType":"YulFunctionCall","src":"2477:32:9"},"nodeType":"YulIf","src":"2474:52:9"},{"nodeType":"YulAssignment","src":"2535:39:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2564:9:9"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2545:18:9"},"nodeType":"YulFunctionCall","src":"2545:29:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2535:6:9"}]},{"nodeType":"YulAssignment","src":"2583:48:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2616:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2627:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2612:3:9"},"nodeType":"YulFunctionCall","src":"2612:18:9"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2593:18:9"},"nodeType":"YulFunctionCall","src":"2593:38:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2583:6:9"}]},{"nodeType":"YulAssignment","src":"2640:42:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2667:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2678:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2663:3:9"},"nodeType":"YulFunctionCall","src":"2663:18:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2650:12:9"},"nodeType":"YulFunctionCall","src":"2650:32:9"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2640:6:9"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2414:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2425:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2437:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2445:6:9","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2453:6:9","type":""}],"src":"2360:328:9"},{"body":{"nodeType":"YulBlock","src":"2763:116:9","statements":[{"body":{"nodeType":"YulBlock","src":"2809:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2818:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2821:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2811:6:9"},"nodeType":"YulFunctionCall","src":"2811:12:9"},"nodeType":"YulExpressionStatement","src":"2811:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2784:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"2793:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2780:3:9"},"nodeType":"YulFunctionCall","src":"2780:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"2805:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2776:3:9"},"nodeType":"YulFunctionCall","src":"2776:32:9"},"nodeType":"YulIf","src":"2773:52:9"},{"nodeType":"YulAssignment","src":"2834:39:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2863:9:9"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2844:18:9"},"nodeType":"YulFunctionCall","src":"2844:29:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2834:6:9"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2729:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2740:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2752:6:9","type":""}],"src":"2693:186:9"},{"body":{"nodeType":"YulBlock","src":"2968:263:9","statements":[{"body":{"nodeType":"YulBlock","src":"3014:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3023:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3026:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3016:6:9"},"nodeType":"YulFunctionCall","src":"3016:12:9"},"nodeType":"YulExpressionStatement","src":"3016:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2989:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"2998:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2985:3:9"},"nodeType":"YulFunctionCall","src":"2985:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"3010:2:9","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2981:3:9"},"nodeType":"YulFunctionCall","src":"2981:32:9"},"nodeType":"YulIf","src":"2978:52:9"},{"nodeType":"YulAssignment","src":"3039:39:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3068:9:9"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3049:18:9"},"nodeType":"YulFunctionCall","src":"3049:29:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3039:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"3087:45:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3117:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"3128:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3113:3:9"},"nodeType":"YulFunctionCall","src":"3113:18:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3100:12:9"},"nodeType":"YulFunctionCall","src":"3100:32:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3091:5:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"3185:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3194:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3197:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3187:6:9"},"nodeType":"YulFunctionCall","src":"3187:12:9"},"nodeType":"YulExpressionStatement","src":"3187:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3154:5:9"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3175:5:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3168:6:9"},"nodeType":"YulFunctionCall","src":"3168:13:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3161:6:9"},"nodeType":"YulFunctionCall","src":"3161:21:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3151:2:9"},"nodeType":"YulFunctionCall","src":"3151:32:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3144:6:9"},"nodeType":"YulFunctionCall","src":"3144:40:9"},"nodeType":"YulIf","src":"3141:60:9"},{"nodeType":"YulAssignment","src":"3210:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"3220:5:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3210:6:9"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2926:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2937:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2949:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2957:6:9","type":""}],"src":"2884:347:9"},{"body":{"nodeType":"YulBlock","src":"3268:95:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3285:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3292:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3297:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3288:3:9"},"nodeType":"YulFunctionCall","src":"3288:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3278:6:9"},"nodeType":"YulFunctionCall","src":"3278:31:9"},"nodeType":"YulExpressionStatement","src":"3278:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3325:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3328:4:9","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3318:6:9"},"nodeType":"YulFunctionCall","src":"3318:15:9"},"nodeType":"YulExpressionStatement","src":"3318:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3349:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3352:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3342:6:9"},"nodeType":"YulFunctionCall","src":"3342:15:9"},"nodeType":"YulExpressionStatement","src":"3342:15:9"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3236:127:9"},{"body":{"nodeType":"YulBlock","src":"3498:1008:9","statements":[{"body":{"nodeType":"YulBlock","src":"3545:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3554:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3557:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3547:6:9"},"nodeType":"YulFunctionCall","src":"3547:12:9"},"nodeType":"YulExpressionStatement","src":"3547:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3519:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"3528:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3515:3:9"},"nodeType":"YulFunctionCall","src":"3515:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"3540:3:9","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3511:3:9"},"nodeType":"YulFunctionCall","src":"3511:33:9"},"nodeType":"YulIf","src":"3508:53:9"},{"nodeType":"YulAssignment","src":"3570:39:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3599:9:9"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3580:18:9"},"nodeType":"YulFunctionCall","src":"3580:29:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3570:6:9"}]},{"nodeType":"YulAssignment","src":"3618:48:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3651:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"3662:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3647:3:9"},"nodeType":"YulFunctionCall","src":"3647:18:9"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3628:18:9"},"nodeType":"YulFunctionCall","src":"3628:38:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3618:6:9"}]},{"nodeType":"YulAssignment","src":"3675:42:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3702:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"3713:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3698:3:9"},"nodeType":"YulFunctionCall","src":"3698:18:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3685:12:9"},"nodeType":"YulFunctionCall","src":"3685:32:9"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3675:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"3726:46:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3757:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"3768:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3753:3:9"},"nodeType":"YulFunctionCall","src":"3753:18:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3740:12:9"},"nodeType":"YulFunctionCall","src":"3740:32:9"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3730:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3781:28:9","value":{"kind":"number","nodeType":"YulLiteral","src":"3791:18:9","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3785:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"3836:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3845:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3848:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3838:6:9"},"nodeType":"YulFunctionCall","src":"3838:12:9"},"nodeType":"YulExpressionStatement","src":"3838:12:9"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3824:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"3832:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3821:2:9"},"nodeType":"YulFunctionCall","src":"3821:14:9"},"nodeType":"YulIf","src":"3818:34:9"},{"nodeType":"YulVariableDeclaration","src":"3861:32:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3875:9:9"},{"name":"offset","nodeType":"YulIdentifier","src":"3886:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3871:3:9"},"nodeType":"YulFunctionCall","src":"3871:22:9"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3865:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"3941:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3950:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3953:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3943:6:9"},"nodeType":"YulFunctionCall","src":"3943:12:9"},"nodeType":"YulExpressionStatement","src":"3943:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3920:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"3924:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3916:3:9"},"nodeType":"YulFunctionCall","src":"3916:13:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3931:7:9"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3912:3:9"},"nodeType":"YulFunctionCall","src":"3912:27:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3905:6:9"},"nodeType":"YulFunctionCall","src":"3905:35:9"},"nodeType":"YulIf","src":"3902:55:9"},{"nodeType":"YulVariableDeclaration","src":"3966:26:9","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3989:2:9"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3976:12:9"},"nodeType":"YulFunctionCall","src":"3976:16:9"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3970:2:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"4015:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4017:16:9"},"nodeType":"YulFunctionCall","src":"4017:18:9"},"nodeType":"YulExpressionStatement","src":"4017:18:9"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4007:2:9"},{"name":"_1","nodeType":"YulIdentifier","src":"4011:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4004:2:9"},"nodeType":"YulFunctionCall","src":"4004:10:9"},"nodeType":"YulIf","src":"4001:36:9"},{"nodeType":"YulVariableDeclaration","src":"4046:17:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4060:2:9","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4056:3:9"},"nodeType":"YulFunctionCall","src":"4056:7:9"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"4050:2:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4072:23:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4092:2:9","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4086:5:9"},"nodeType":"YulFunctionCall","src":"4086:9:9"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4076:6:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4104:71:9","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4126:6:9"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4150:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"4154:4:9","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4146:3:9"},"nodeType":"YulFunctionCall","src":"4146:13:9"},{"name":"_4","nodeType":"YulIdentifier","src":"4161:2:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4142:3:9"},"nodeType":"YulFunctionCall","src":"4142:22:9"},{"kind":"number","nodeType":"YulLiteral","src":"4166:2:9","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4138:3:9"},"nodeType":"YulFunctionCall","src":"4138:31:9"},{"name":"_4","nodeType":"YulIdentifier","src":"4171:2:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4134:3:9"},"nodeType":"YulFunctionCall","src":"4134:40:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4122:3:9"},"nodeType":"YulFunctionCall","src":"4122:53:9"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"4108:10:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"4234:22:9","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4236:16:9"},"nodeType":"YulFunctionCall","src":"4236:18:9"},"nodeType":"YulExpressionStatement","src":"4236:18:9"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4193:10:9"},{"name":"_1","nodeType":"YulIdentifier","src":"4205:2:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4190:2:9"},"nodeType":"YulFunctionCall","src":"4190:18:9"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4213:10:9"},{"name":"memPtr","nodeType":"YulIdentifier","src":"4225:6:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4210:2:9"},"nodeType":"YulFunctionCall","src":"4210:22:9"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4187:2:9"},"nodeType":"YulFunctionCall","src":"4187:46:9"},"nodeType":"YulIf","src":"4184:72:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4272:2:9","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4276:10:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4265:6:9"},"nodeType":"YulFunctionCall","src":"4265:22:9"},"nodeType":"YulExpressionStatement","src":"4265:22:9"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4303:6:9"},{"name":"_3","nodeType":"YulIdentifier","src":"4311:2:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4296:6:9"},"nodeType":"YulFunctionCall","src":"4296:18:9"},"nodeType":"YulExpressionStatement","src":"4296:18:9"},{"body":{"nodeType":"YulBlock","src":"4360:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4369:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4372:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4362:6:9"},"nodeType":"YulFunctionCall","src":"4362:12:9"},"nodeType":"YulExpressionStatement","src":"4362:12:9"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4337:2:9"},{"name":"_3","nodeType":"YulIdentifier","src":"4341:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4333:3:9"},"nodeType":"YulFunctionCall","src":"4333:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"4346:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4329:3:9"},"nodeType":"YulFunctionCall","src":"4329:20:9"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4351:7:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4326:2:9"},"nodeType":"YulFunctionCall","src":"4326:33:9"},"nodeType":"YulIf","src":"4323:53:9"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4402:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"4410:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4398:3:9"},"nodeType":"YulFunctionCall","src":"4398:15:9"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4419:2:9"},{"kind":"number","nodeType":"YulLiteral","src":"4423:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4415:3:9"},"nodeType":"YulFunctionCall","src":"4415:11:9"},{"name":"_3","nodeType":"YulIdentifier","src":"4428:2:9"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4385:12:9"},"nodeType":"YulFunctionCall","src":"4385:46:9"},"nodeType":"YulExpressionStatement","src":"4385:46:9"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4455:6:9"},{"name":"_3","nodeType":"YulIdentifier","src":"4463:2:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4451:3:9"},"nodeType":"YulFunctionCall","src":"4451:15:9"},{"kind":"number","nodeType":"YulLiteral","src":"4468:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4447:3:9"},"nodeType":"YulFunctionCall","src":"4447:24:9"},{"kind":"number","nodeType":"YulLiteral","src":"4473:1:9","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4440:6:9"},"nodeType":"YulFunctionCall","src":"4440:35:9"},"nodeType":"YulExpressionStatement","src":"4440:35:9"},{"nodeType":"YulAssignment","src":"4484:16:9","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4494:6:9"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4484:6:9"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3440:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3451:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3463:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3471:6:9","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3479:6:9","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3487:6:9","type":""}],"src":"3368:1138:9"},{"body":{"nodeType":"YulBlock","src":"4598:173:9","statements":[{"body":{"nodeType":"YulBlock","src":"4644:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4653:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4656:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4646:6:9"},"nodeType":"YulFunctionCall","src":"4646:12:9"},"nodeType":"YulExpressionStatement","src":"4646:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4619:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"4628:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4615:3:9"},"nodeType":"YulFunctionCall","src":"4615:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"4640:2:9","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4611:3:9"},"nodeType":"YulFunctionCall","src":"4611:32:9"},"nodeType":"YulIf","src":"4608:52:9"},{"nodeType":"YulAssignment","src":"4669:39:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4698:9:9"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4679:18:9"},"nodeType":"YulFunctionCall","src":"4679:29:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4669:6:9"}]},{"nodeType":"YulAssignment","src":"4717:48:9","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4750:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"4761:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4746:3:9"},"nodeType":"YulFunctionCall","src":"4746:18:9"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4727:18:9"},"nodeType":"YulFunctionCall","src":"4727:38:9"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4717:6:9"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4556:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4567:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4579:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4587:6:9","type":""}],"src":"4511:260:9"},{"body":{"nodeType":"YulBlock","src":"4831:325:9","statements":[{"nodeType":"YulAssignment","src":"4841:22:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4855:1:9","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"4858:4:9"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4851:3:9"},"nodeType":"YulFunctionCall","src":"4851:12:9"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4841:6:9"}]},{"nodeType":"YulVariableDeclaration","src":"4872:38:9","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4902:4:9"},{"kind":"number","nodeType":"YulLiteral","src":"4908:1:9","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4898:3:9"},"nodeType":"YulFunctionCall","src":"4898:12:9"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"4876:18:9","type":""}]},{"body":{"nodeType":"YulBlock","src":"4949:31:9","statements":[{"nodeType":"YulAssignment","src":"4951:27:9","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4965:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"4973:4:9","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4961:3:9"},"nodeType":"YulFunctionCall","src":"4961:17:9"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4951:6:9"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4929:18:9"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4922:6:9"},"nodeType":"YulFunctionCall","src":"4922:26:9"},"nodeType":"YulIf","src":"4919:61:9"},{"body":{"nodeType":"YulBlock","src":"5039:111:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5060:1:9","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5067:3:9","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5072:10:9","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5063:3:9"},"nodeType":"YulFunctionCall","src":"5063:20:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5053:6:9"},"nodeType":"YulFunctionCall","src":"5053:31:9"},"nodeType":"YulExpressionStatement","src":"5053:31:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5104:1:9","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5107:4:9","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5097:6:9"},"nodeType":"YulFunctionCall","src":"5097:15:9"},"nodeType":"YulExpressionStatement","src":"5097:15:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5132:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5135:4:9","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5125:6:9"},"nodeType":"YulFunctionCall","src":"5125:15:9"},"nodeType":"YulExpressionStatement","src":"5125:15:9"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4995:18:9"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5018:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"5026:2:9","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5015:2:9"},"nodeType":"YulFunctionCall","src":"5015:14:9"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4992:2:9"},"nodeType":"YulFunctionCall","src":"4992:38:9"},"nodeType":"YulIf","src":"4989:161:9"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"4811:4:9","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"4820:6:9","type":""}],"src":"4776:380:9"},{"body":{"nodeType":"YulBlock","src":"5348:309:9","statements":[{"nodeType":"YulVariableDeclaration","src":"5358:27:9","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5378:6:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5372:5:9"},"nodeType":"YulFunctionCall","src":"5372:13:9"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5362:6:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5433:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"5441:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5429:3:9"},"nodeType":"YulFunctionCall","src":"5429:17:9"},{"name":"pos","nodeType":"YulIdentifier","src":"5448:3:9"},{"name":"length","nodeType":"YulIdentifier","src":"5453:6:9"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"5394:34:9"},"nodeType":"YulFunctionCall","src":"5394:66:9"},"nodeType":"YulExpressionStatement","src":"5394:66:9"},{"nodeType":"YulVariableDeclaration","src":"5469:29:9","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5486:3:9"},{"name":"length","nodeType":"YulIdentifier","src":"5491:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5482:3:9"},"nodeType":"YulFunctionCall","src":"5482:16:9"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"5473:5:9","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5507:29:9","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5529:6:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5523:5:9"},"nodeType":"YulFunctionCall","src":"5523:13:9"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"5511:8:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5584:6:9"},{"kind":"number","nodeType":"YulLiteral","src":"5592:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5580:3:9"},"nodeType":"YulFunctionCall","src":"5580:17:9"},{"name":"end_1","nodeType":"YulIdentifier","src":"5599:5:9"},{"name":"length_1","nodeType":"YulIdentifier","src":"5606:8:9"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"5545:34:9"},"nodeType":"YulFunctionCall","src":"5545:70:9"},"nodeType":"YulExpressionStatement","src":"5545:70:9"},{"nodeType":"YulAssignment","src":"5624:27:9","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"5635:5:9"},{"name":"length_1","nodeType":"YulIdentifier","src":"5642:8:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5631:3:9"},"nodeType":"YulFunctionCall","src":"5631:20:9"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5624:3:9"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5316:3:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5321:6:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5329:6:9","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5340:3:9","type":""}],"src":"5161:496:9"},{"body":{"nodeType":"YulBlock","src":"5865:286:9","statements":[{"nodeType":"YulVariableDeclaration","src":"5875:29:9","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5893:3:9","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5898:1:9","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5889:3:9"},"nodeType":"YulFunctionCall","src":"5889:11:9"},{"kind":"number","nodeType":"YulLiteral","src":"5902:1:9","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5885:3:9"},"nodeType":"YulFunctionCall","src":"5885:19:9"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5879:2:9","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5920:9:9"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5935:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"5943:2:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5931:3:9"},"nodeType":"YulFunctionCall","src":"5931:15:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5913:6:9"},"nodeType":"YulFunctionCall","src":"5913:34:9"},"nodeType":"YulExpressionStatement","src":"5913:34:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5967:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"5978:2:9","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5963:3:9"},"nodeType":"YulFunctionCall","src":"5963:18:9"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5987:6:9"},{"name":"_1","nodeType":"YulIdentifier","src":"5995:2:9"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5983:3:9"},"nodeType":"YulFunctionCall","src":"5983:15:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5956:6:9"},"nodeType":"YulFunctionCall","src":"5956:43:9"},"nodeType":"YulExpressionStatement","src":"5956:43:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6019:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"6030:2:9","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6015:3:9"},"nodeType":"YulFunctionCall","src":"6015:18:9"},{"name":"value2","nodeType":"YulIdentifier","src":"6035:6:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6008:6:9"},"nodeType":"YulFunctionCall","src":"6008:34:9"},"nodeType":"YulExpressionStatement","src":"6008:34:9"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6062:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"6073:2:9","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6058:3:9"},"nodeType":"YulFunctionCall","src":"6058:18:9"},{"kind":"number","nodeType":"YulLiteral","src":"6078:3:9","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6051:6:9"},"nodeType":"YulFunctionCall","src":"6051:31:9"},"nodeType":"YulExpressionStatement","src":"6051:31:9"},{"nodeType":"YulAssignment","src":"6091:54:9","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"6117:6:9"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6129:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"6140:3:9","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6125:3:9"},"nodeType":"YulFunctionCall","src":"6125:19:9"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"6099:17:9"},"nodeType":"YulFunctionCall","src":"6099:46:9"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6091:4:9"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5810:9:9","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5821:6:9","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5829:6:9","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5837:6:9","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5845:6:9","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5856:4:9","type":""}],"src":"5662:489:9"},{"body":{"nodeType":"YulBlock","src":"6236:169:9","statements":[{"body":{"nodeType":"YulBlock","src":"6282:16:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6291:1:9","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6294:1:9","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6284:6:9"},"nodeType":"YulFunctionCall","src":"6284:12:9"},"nodeType":"YulExpressionStatement","src":"6284:12:9"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6257:7:9"},{"name":"headStart","nodeType":"YulIdentifier","src":"6266:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6253:3:9"},"nodeType":"YulFunctionCall","src":"6253:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"6278:2:9","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6249:3:9"},"nodeType":"YulFunctionCall","src":"6249:32:9"},"nodeType":"YulIf","src":"6246:52:9"},{"nodeType":"YulVariableDeclaration","src":"6307:29:9","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6326:9:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6320:5:9"},"nodeType":"YulFunctionCall","src":"6320:16:9"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6311:5:9","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6369:5:9"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"6345:23:9"},"nodeType":"YulFunctionCall","src":"6345:30:9"},"nodeType":"YulExpressionStatement","src":"6345:30:9"},{"nodeType":"YulAssignment","src":"6384:15:9","value":{"name":"value","nodeType":"YulIdentifier","src":"6394:5:9"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6384:6:9"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6202:9:9","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6213:7:9","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6225:6:9","type":""}],"src":"6156:249:9"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n}","id":9,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106100dd5760003560e01c80636352211e1161007f578063a22cb46511610059578063a22cb46514610224578063b88d4fde14610244578063c87b56dd14610257578063e985e9c51461027757600080fd5b80636352211e146101cf57806370a08231146101ef57806395d89b411461020f57600080fd5b8063095ea7b3116100bb578063095ea7b31461017157806318160ddd1461018657806323b872dd146101a957806342842e0e146101bc57600080fd5b806301ffc9a7146100e257806306fdde0314610117578063081812fc14610139575b600080fd5b3480156100ee57600080fd5b506101026100fd3660046109c6565b6102c0565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b5061012c610312565b60405161010e9190610a33565b34801561014557600080fd5b50610159610154366004610a46565b6103a4565b6040516001600160a01b03909116815260200161010e565b61018461017f366004610a7b565b6103e8565b005b34801561019257600080fd5b50600154600054035b60405190815260200161010e565b6101846101b7366004610aa5565b610488565b6101846101ca366004610aa5565b610620565b3480156101db57600080fd5b506101596101ea366004610a46565b610640565b3480156101fb57600080fd5b5061019b61020a366004610ae1565b61064b565b34801561021b57600080fd5b5061012c61069a565b34801561023057600080fd5b5061018461023f366004610afc565b6106a9565b610184610252366004610b4e565b610715565b34801561026357600080fd5b5061012c610272366004610a46565b61075f565b34801561028357600080fd5b50610102610292366004610c2a565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b60006301ffc9a760e01b6001600160e01b0319831614806102f157506380ac58cd60e01b6001600160e01b03198316145b8061030c5750635b5e139f60e01b6001600160e01b03198316145b92915050565b60606002805461032190610c5d565b80601f016020809104026020016040519081016040528092919081815260200182805461034d90610c5d565b801561039a5780601f1061036f5761010080835404028352916020019161039a565b820191906000526020600020905b81548152906001019060200180831161037d57829003601f168201915b5050505050905090565b60006103af826107f0565b6103cc576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006103f382610640565b9050336001600160a01b0382161461042c5761040f8133610292565b61042c576040516367d9dca160e11b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600061049382610817565b9050836001600160a01b0316816001600160a01b0316146104c65760405162a1148160e81b815260040160405180910390fd5b60008281526006602052604090208054338082146001600160a01b03881690911417610513576104f68633610292565b61051357604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03851661053a57604051633a954ecd60e21b815260040160405180910390fd5b801561054557600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040812091909155600160e11b841690036105d7576001840160008181526004602052604081205490036105d55760005481146105d55760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b61063b83838360405180602001604052806000815250610715565b505050565b600061030c82610817565b60006001600160a01b038216610674576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b60606003805461032190610c5d565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610720848484610488565b6001600160a01b0383163b156107595761073c8484848461087e565b610759576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b606061076a826107f0565b61078757604051630a14c4b560e41b815260040160405180910390fd5b600061079e60408051602081019091526000815290565b905080516000036107be57604051806020016040528060008152506107e9565b806107c884610969565b6040516020016107d9929190610c97565b6040516020818303038152906040525b9392505050565b600080548210801561030c575050600090815260046020526040902054600160e01b161590565b6000816000548110156108655760008181526004602052604081205490600160e01b82169003610863575b806000036107e9575060001901600081815260046020526040902054610842565b505b604051636f96cda160e11b815260040160405180910390fd5b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906108b3903390899088908890600401610cc6565b6020604051808303816000875af19250505080156108ee575060408051601f3d908101601f191682019092526108eb91810190610d03565b60015b61094c573d80801561091c576040519150601f19603f3d011682016040523d82523d6000602084013e610921565b606091505b508051600003610944576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a9004806109835750819003601f19909101908152919050565b6001600160e01b0319811681146109c357600080fd5b50565b6000602082840312156109d857600080fd5b81356107e9816109ad565b60005b838110156109fe5781810151838201526020016109e6565b50506000910152565b60008151808452610a1f8160208601602086016109e3565b601f01601f19169290920160200192915050565b6020815260006107e96020830184610a07565b600060208284031215610a5857600080fd5b5035919050565b80356001600160a01b0381168114610a7657600080fd5b919050565b60008060408385031215610a8e57600080fd5b610a9783610a5f565b946020939093013593505050565b600080600060608486031215610aba57600080fd5b610ac384610a5f565b9250610ad160208501610a5f565b9150604084013590509250925092565b600060208284031215610af357600080fd5b6107e982610a5f565b60008060408385031215610b0f57600080fd5b610b1883610a5f565b915060208301358015158114610b2d57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610b6457600080fd5b610b6d85610a5f565b9350610b7b60208601610a5f565b925060408501359150606085013567ffffffffffffffff80821115610b9f57600080fd5b818701915087601f830112610bb357600080fd5b813581811115610bc557610bc5610b38565b604051601f8201601f19908116603f01168101908382118183101715610bed57610bed610b38565b816040528281528a6020848701011115610c0657600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215610c3d57600080fd5b610c4683610a5f565b9150610c5460208401610a5f565b90509250929050565b600181811c90821680610c7157607f821691505b602082108103610c9157634e487b7160e01b600052602260045260246000fd5b50919050565b60008351610ca98184602088016109e3565b835190830190610cbd8183602088016109e3565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610cf990830184610a07565b9695505050505050565b600060208284031215610d1557600080fd5b81516107e9816109ad56fea264697066735822122044591560d812de1cb8874b48d799cb6e8addb5a79a4fa0133ed888beca80833d64736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDD JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x244 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x257 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x277 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x20F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xBB JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x171 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x139 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0x9C6 JUMP JUMPDEST PUSH2 0x2C0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x123 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12C PUSH2 0x312 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10E SWAP2 SWAP1 PUSH2 0xA33 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH2 0x154 CALLDATASIZE PUSH1 0x4 PUSH2 0xA46 JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x184 PUSH2 0x17F CALLDATASIZE PUSH1 0x4 PUSH2 0xA7B JUMP JUMPDEST PUSH2 0x3E8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x184 PUSH2 0x1B7 CALLDATASIZE PUSH1 0x4 PUSH2 0xAA5 JUMP JUMPDEST PUSH2 0x488 JUMP JUMPDEST PUSH2 0x184 PUSH2 0x1CA CALLDATASIZE PUSH1 0x4 PUSH2 0xAA5 JUMP JUMPDEST PUSH2 0x620 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x159 PUSH2 0x1EA CALLDATASIZE PUSH1 0x4 PUSH2 0xA46 JUMP JUMPDEST PUSH2 0x640 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19B PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0xAE1 JUMP JUMPDEST PUSH2 0x64B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12C PUSH2 0x69A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x184 PUSH2 0x23F CALLDATASIZE PUSH1 0x4 PUSH2 0xAFC JUMP JUMPDEST PUSH2 0x6A9 JUMP JUMPDEST PUSH2 0x184 PUSH2 0x252 CALLDATASIZE PUSH1 0x4 PUSH2 0xB4E JUMP JUMPDEST PUSH2 0x715 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12C PUSH2 0x272 CALLDATASIZE PUSH1 0x4 PUSH2 0xA46 JUMP JUMPDEST PUSH2 0x75F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x283 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x292 CALLDATASIZE PUSH1 0x4 PUSH2 0xC2A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ DUP1 PUSH2 0x2F1 JUMPI POP PUSH4 0x80AC58CD PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST DUP1 PUSH2 0x30C JUMPI POP PUSH4 0x5B5E139F PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x321 SWAP1 PUSH2 0xC5D JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x34D SWAP1 PUSH2 0xC5D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x39A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x36F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x39A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x37D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AF DUP3 PUSH2 0x7F0 JUMP JUMPDEST PUSH2 0x3CC JUMPI PUSH1 0x40 MLOAD PUSH4 0x33D1C039 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F3 DUP3 PUSH2 0x640 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ PUSH2 0x42C JUMPI PUSH2 0x40F DUP2 CALLER PUSH2 0x292 JUMP JUMPDEST PUSH2 0x42C JUMPI PUSH1 0x40 MLOAD PUSH4 0x67D9DCA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP6 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x493 DUP3 PUSH2 0x817 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4C6 JUMPI PUSH1 0x40 MLOAD PUSH3 0xA11481 PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD CALLER DUP1 DUP3 EQ PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 SWAP2 EQ OR PUSH2 0x513 JUMPI PUSH2 0x4F6 DUP7 CALLER PUSH2 0x292 JUMP JUMPDEST PUSH2 0x513 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CE44B5F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x53A JUMPI PUSH1 0x40 MLOAD PUSH4 0x3A954ECD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x545 JUMPI PUSH1 0x0 DUP3 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP2 DUP8 AND DUP1 DUP3 MSTORE SWAP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE TIMESTAMP PUSH1 0xA0 SHL OR PUSH1 0x1 PUSH1 0xE1 SHL OR PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0xE1 SHL DUP5 AND SWAP1 SUB PUSH2 0x5D7 JUMPI PUSH1 0x1 DUP5 ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SUB PUSH2 0x5D5 JUMPI PUSH1 0x0 SLOAD DUP2 EQ PUSH2 0x5D5 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE JUMPDEST POP JUMPDEST DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x63B DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x715 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30C DUP3 PUSH2 0x817 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x674 JUMPI PUSH1 0x40 MLOAD PUSH4 0x23D3AD81 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x321 SWAP1 PUSH2 0xC5D JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x720 DUP5 DUP5 DUP5 PUSH2 0x488 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x759 JUMPI PUSH2 0x73C DUP5 DUP5 DUP5 DUP5 PUSH2 0x87E JUMP JUMPDEST PUSH2 0x759 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x76A DUP3 PUSH2 0x7F0 JUMP JUMPDEST PUSH2 0x787 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA14C4B5 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x79E PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x7BE JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7E9 JUMP JUMPDEST DUP1 PUSH2 0x7C8 DUP5 PUSH2 0x969 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x7D9 SWAP3 SWAP2 SWAP1 PUSH2 0xC97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 LT DUP1 ISZERO PUSH2 0x30C JUMPI POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xE0 SHL AND ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x865 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 PUSH1 0x1 PUSH1 0xE0 SHL DUP3 AND SWAP1 SUB PUSH2 0x863 JUMPI JUMPDEST DUP1 PUSH1 0x0 SUB PUSH2 0x7E9 JUMPI POP PUSH1 0x0 NOT ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x842 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6F96CDA1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x8B3 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xCC6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x8EE JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x8EB SWAP2 DUP2 ADD SWAP1 PUSH2 0xD03 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x94C JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x91C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x921 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x944 JUMPI PUSH1 0x40 MLOAD PUSH4 0x68D2BF6B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xA0 PUSH1 0x40 MLOAD ADD DUP1 PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 SUB SWAP2 POP POP PUSH1 0x0 DUP2 MSTORE DUP1 DUP3 JUMPDEST PUSH1 0x1 DUP4 SUB SWAP3 POP PUSH1 0xA DUP2 MOD PUSH1 0x30 ADD DUP4 MSTORE8 PUSH1 0xA SWAP1 DIV DUP1 PUSH2 0x983 JUMPI POP DUP2 SWAP1 SUB PUSH1 0x1F NOT SWAP1 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x9C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7E9 DUP2 PUSH2 0x9AD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9FE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x9E6 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xA1F DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x9E3 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x7E9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xA07 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA97 DUP4 PUSH2 0xA5F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xABA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAC3 DUP5 PUSH2 0xA5F JUMP JUMPDEST SWAP3 POP PUSH2 0xAD1 PUSH1 0x20 DUP6 ADD PUSH2 0xA5F JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7E9 DUP3 PUSH2 0xA5F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB18 DUP4 PUSH2 0xA5F JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xB2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6D DUP6 PUSH2 0xA5F JUMP JUMPDEST SWAP4 POP PUSH2 0xB7B PUSH1 0x20 DUP7 ADD PUSH2 0xA5F JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xBB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xBC5 JUMPI PUSH2 0xBC5 PUSH2 0xB38 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xBED JUMPI PUSH2 0xBED PUSH2 0xB38 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xC06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC46 DUP4 PUSH2 0xA5F JUMP JUMPDEST SWAP2 POP PUSH2 0xC54 PUSH1 0x20 DUP5 ADD PUSH2 0xA5F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xC71 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xC91 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0xCA9 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x9E3 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0xCBD DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x9E3 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xCF9 SWAP1 DUP4 ADD DUP5 PUSH2 0xA07 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x7E9 DUP2 PUSH2 0x9AD JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PREVRANDAO MSIZE ISZERO PUSH1 0xD8 SLT 0xDE SHR 0xB8 DUP8 0x4B BASEFEE 0xD7 SWAP10 0xCB PUSH15 0x8ADDB5A79A4FA0133ED888BECA8083 RETURNDATASIZE PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"895:40452:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9155:630;;;;;;;;;;-1:-1:-1;9155:630:7;;;;;:::i;:::-;;:::i;:::-;;;565:14:9;;558:22;540:41;;528:2;513:18;9155:630:7;;;;;;;;10039:98;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;16360:214::-;;;;;;;;;;-1:-1:-1;16360:214:7;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1697:32:9;;;1679:51;;1667:2;1652:18;16360:214:7;1533:203:9;15812:398:7;;;;;;:::i;:::-;;:::i;:::-;;5894:317;;;;;;;;;;-1:-1:-1;6164:12:7;;5955:7;6148:13;:28;5894:317;;;2324:25:9;;;2312:2;2297:18;5894:317:7;2178:177:9;19903:2764:7;;;;;;:::i;:::-;;:::i;22758:187::-;;;;;;:::i;:::-;;:::i;11391:150::-;;;;;;;;;;-1:-1:-1;11391:150:7;;;;;:::i;:::-;;:::i;7045:230::-;;;;;;;;;;-1:-1:-1;7045:230:7;;;;;:::i;:::-;;:::i;10208:102::-;;;;;;;;;;;;;:::i;16901:231::-;;;;;;;;;;-1:-1:-1;16901:231:7;;;;;:::i;:::-;;:::i;23526:396::-;;;;;;:::i;:::-;;:::i;10411:313::-;;;;;;;;;;-1:-1:-1;10411:313:7;;;;;:::i;:::-;;:::i;17282:162::-;;;;;;;;;;-1:-1:-1;17282:162:7;;;;;:::i;:::-;-1:-1:-1;;;;;17402:25:7;;;17379:4;17402:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;17282:162;9155:630;9240:4;-1:-1:-1;;;;;;;;;9558:25:7;;;;:101;;-1:-1:-1;;;;;;;;;;9634:25:7;;;9558:101;:177;;;-1:-1:-1;;;;;;;;;;9710:25:7;;;9558:177;9539:196;9155:630;-1:-1:-1;;9155:630:7:o;10039:98::-;10093:13;10125:5;10118:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10039:98;:::o;16360:214::-;16436:7;16460:16;16468:7;16460;:16::i;:::-;16455:64;;16485:34;;-1:-1:-1;;;16485:34:7;;;;;;;;;;;16455:64;-1:-1:-1;16537:24:7;;;;:15;:24;;;;;:30;-1:-1:-1;;;;;16537:30:7;;16360:214::o;15812:398::-;15900:13;15916:16;15924:7;15916;:16::i;:::-;15900:32;-1:-1:-1;39523:10:7;-1:-1:-1;;;;;15947:28:7;;;15943:172;;15994:44;16011:5;39523:10;17282:162;:::i;15994:44::-;15989:126;;16065:35;;-1:-1:-1;;;16065:35:7;;;;;;;;;;;15989:126;16125:24;;;;:15;:24;;;;;;:35;;-1:-1:-1;;;;;;16125:35:7;-1:-1:-1;;;;;16125:35:7;;;;;;;;;16175:28;;16125:24;;16175:28;;;;;;;15890:320;15812:398;;:::o;19903:2764::-;20040:27;20070;20089:7;20070:18;:27::i;:::-;20040:57;;20153:4;-1:-1:-1;;;;;20112:45:7;20128:19;-1:-1:-1;;;;;20112:45:7;;20108:86;;20166:28;;-1:-1:-1;;;20166:28:7;;;;;;;;;;;20108:86;20206:27;19036:24;;;:15;:24;;;;;19260:26;;39523:10;18673:30;;;-1:-1:-1;;;;;18370:28:7;;18651:20;;;18648:56;20389:179;;20481:43;20498:4;39523:10;17282:162;:::i;20481:43::-;20476:92;;20533:35;;-1:-1:-1;;;20533:35:7;;;;;;;;;;;20476:92;-1:-1:-1;;;;;20583:16:7;;20579:52;;20608:23;;-1:-1:-1;;;20608:23:7;;;;;;;;;;;20579:52;20774:15;20771:157;;;20912:1;20891:19;20884:30;20771:157;-1:-1:-1;;;;;21300:24:7;;;;;;;:18;:24;;;;;;21298:26;;-1:-1:-1;;21298:26:7;;;21368:22;;;;;;;;;21366:24;;-1:-1:-1;21366:24:7;;;14703:11;14678:23;14674:41;14661:63;-1:-1:-1;;;14661:63:7;21654:26;;;;:17;:26;;;;;:172;;;;-1:-1:-1;;;21943:47:7;;:52;;21939:617;;22047:1;22037:11;;22015:19;22168:30;;;:17;:30;;;;;;:35;;22164:378;;22304:13;;22289:11;:28;22285:239;;22449:30;;;;:17;:30;;;;;:52;;;22285:239;21997:559;21939:617;22600:7;22596:2;-1:-1:-1;;;;;22581:27:7;22590:4;-1:-1:-1;;;;;22581:27:7;;;;;;;;;;;20030:2637;;;19903:2764;;;:::o;22758:187::-;22899:39;22916:4;22922:2;22926:7;22899:39;;;;;;;;;;;;:16;:39::i;:::-;22758:187;;;:::o;11391:150::-;11463:7;11505:27;11524:7;11505:18;:27::i;7045:230::-;7117:7;-1:-1:-1;;;;;7140:19:7;;7136:60;;7168:28;;-1:-1:-1;;;7168:28:7;;;;;;;;;;;7136:60;-1:-1:-1;;;;;;7213:25:7;;;;;:18;:25;;;;;;1360:13;7213:55;;7045:230::o;10208:102::-;10264:13;10296:7;10289:14;;;;;:::i;16901:231::-;39523:10;16995:39;;;;:18;:39;;;;;;;;-1:-1:-1;;;;;16995:49:7;;;;;;;;;;;;:60;;-1:-1:-1;;16995:60:7;;;;;;;;;;17070:55;;540:41:9;;;16995:49:7;;39523:10;17070:55;;513:18:9;17070:55:7;;;;;;;16901:231;;:::o;23526:396::-;23695:31;23708:4;23714:2;23718:7;23695:12;:31::i;:::-;-1:-1:-1;;;;;23740:14:7;;;:19;23736:180;;23778:56;23809:4;23815:2;23819:7;23828:5;23778:30;:56::i;:::-;23773:143;;23861:40;;-1:-1:-1;;;23861:40:7;;;;;;;;;;;23773:143;23526:396;;;;:::o;10411:313::-;10484:13;10514:16;10522:7;10514;:16::i;:::-;10509:59;;10539:29;;-1:-1:-1;;;10539:29:7;;;;;;;;;;;10509:59;10579:21;10603:10;11045:9;;;;;;;;;-1:-1:-1;11045:9:7;;;10969:92;10603:10;10579:34;;10636:7;10630:21;10655:1;10630:26;:87;;;;;;;;;;;;;;;;;10683:7;10692:18;10702:7;10692:9;:18::i;:::-;10666:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;10630:87;10623:94;10411:313;-1:-1:-1;;;10411:313:7:o;17693:277::-;17758:4;17845:13;;17835:7;:23;17793:151;;;;-1:-1:-1;;17895:26:7;;;;:17;:26;;;;;;-1:-1:-1;;;17895:44:7;:49;;17693:277::o;12515:1249::-;12582:7;12616;12714:13;;12707:4;:20;12703:997;;;12751:14;12768:23;;;:17;:23;;;;;;;-1:-1:-1;;;12855:24:7;;:29;;12851:831;;13510:111;13517:6;13527:1;13517:11;13510:111;;-1:-1:-1;;;13587:6:7;13569:25;;;;:17;:25;;;;;;13510:111;;12851:831;12729:971;12703:997;13726:31;;-1:-1:-1;;;13726:31:7;;;;;;;;;;;25948:697;26126:88;;-1:-1:-1;;;26126:88:7;;26106:4;;-1:-1:-1;;;;;26126:45:7;;;;;:88;;39523:10;;26193:4;;26199:7;;26208:5;;26126:88;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;26126:88:7;;;;;;;;-1:-1:-1;;26126:88:7;;;;;;;;;;;;:::i;:::-;;;26122:517;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26404:6;:13;26421:1;26404:18;26400:229;;26449:40;;-1:-1:-1;;;26449:40:7;;;;;;;;;;;26400:229;26589:6;26583:13;26574:6;26570:2;26566:15;26559:38;26122:517;-1:-1:-1;;;;;;26282:64:7;-1:-1:-1;;;26282:64:7;;-1:-1:-1;25948:697:7;;;;;;:::o;39637:1708::-;39702:17;40130:4;40123;40117:11;40113:22;40220:1;40214:4;40207:15;40293:4;40290:1;40286:12;40279:19;;;40373:1;40368:3;40361:14;40474:3;40708:5;40690:419;40755:1;40750:3;40746:11;40739:18;;40923:2;40917:4;40913:13;40909:2;40905:22;40900:3;40892:36;41015:2;41005:13;;41070:25;40690:419;41070:25;-1:-1:-1;41137:13:7;;;-1:-1:-1;;41250:14:7;;;41310:19;;;41250:14;39637:1708;-1:-1:-1;39637:1708:7:o;14:131:9:-;-1:-1:-1;;;;;;88:32:9;;78:43;;68:71;;135:1;132;125:12;68:71;14:131;:::o;150:245::-;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:250::-;677:1;687:113;701:6;698:1;695:13;687:113;;;777:11;;;771:18;758:11;;;751:39;723:2;716:10;687:113;;;-1:-1:-1;;834:1:9;816:16;;809:27;592:250::o;847:271::-;889:3;927:5;921:12;954:6;949:3;942:19;970:76;1039:6;1032:4;1027:3;1023:14;1016:4;1009:5;1005:16;970:76;:::i;:::-;1100:2;1079:15;-1:-1:-1;;1075:29:9;1066:39;;;;1107:4;1062:50;;847:271;-1:-1:-1;;847:271:9:o;1123:220::-;1272:2;1261:9;1254:21;1235:4;1292:45;1333:2;1322:9;1318:18;1310:6;1292:45;:::i;1348:180::-;1407:6;1460:2;1448:9;1439:7;1435:23;1431:32;1428:52;;;1476:1;1473;1466:12;1428:52;-1:-1:-1;1499:23:9;;1348:180;-1:-1:-1;1348:180:9:o;1741:173::-;1809:20;;-1:-1:-1;;;;;1858:31:9;;1848:42;;1838:70;;1904:1;1901;1894:12;1838:70;1741:173;;;:::o;1919:254::-;1987:6;1995;2048:2;2036:9;2027:7;2023:23;2019:32;2016:52;;;2064:1;2061;2054:12;2016:52;2087:29;2106:9;2087:29;:::i;:::-;2077:39;2163:2;2148:18;;;;2135:32;;-1:-1:-1;;;1919:254:9:o;2360:328::-;2437:6;2445;2453;2506:2;2494:9;2485:7;2481:23;2477:32;2474:52;;;2522:1;2519;2512:12;2474:52;2545:29;2564:9;2545:29;:::i;:::-;2535:39;;2593:38;2627:2;2616:9;2612:18;2593:38;:::i;:::-;2583:48;;2678:2;2667:9;2663:18;2650:32;2640:42;;2360:328;;;;;:::o;2693:186::-;2752:6;2805:2;2793:9;2784:7;2780:23;2776:32;2773:52;;;2821:1;2818;2811:12;2773:52;2844:29;2863:9;2844:29;:::i;2884:347::-;2949:6;2957;3010:2;2998:9;2989:7;2985:23;2981:32;2978:52;;;3026:1;3023;3016:12;2978:52;3049:29;3068:9;3049:29;:::i;:::-;3039:39;;3128:2;3117:9;3113:18;3100:32;3175:5;3168:13;3161:21;3154:5;3151:32;3141:60;;3197:1;3194;3187:12;3141:60;3220:5;3210:15;;;2884:347;;;;;:::o;3236:127::-;3297:10;3292:3;3288:20;3285:1;3278:31;3328:4;3325:1;3318:15;3352:4;3349:1;3342:15;3368:1138;3463:6;3471;3479;3487;3540:3;3528:9;3519:7;3515:23;3511:33;3508:53;;;3557:1;3554;3547:12;3508:53;3580:29;3599:9;3580:29;:::i;:::-;3570:39;;3628:38;3662:2;3651:9;3647:18;3628:38;:::i;:::-;3618:48;;3713:2;3702:9;3698:18;3685:32;3675:42;;3768:2;3757:9;3753:18;3740:32;3791:18;3832:2;3824:6;3821:14;3818:34;;;3848:1;3845;3838:12;3818:34;3886:6;3875:9;3871:22;3861:32;;3931:7;3924:4;3920:2;3916:13;3912:27;3902:55;;3953:1;3950;3943:12;3902:55;3989:2;3976:16;4011:2;4007;4004:10;4001:36;;;4017:18;;:::i;:::-;4092:2;4086:9;4060:2;4146:13;;-1:-1:-1;;4142:22:9;;;4166:2;4138:31;4134:40;4122:53;;;4190:18;;;4210:22;;;4187:46;4184:72;;;4236:18;;:::i;:::-;4276:10;4272:2;4265:22;4311:2;4303:6;4296:18;4351:7;4346:2;4341;4337;4333:11;4329:20;4326:33;4323:53;;;4372:1;4369;4362:12;4323:53;4428:2;4423;4419;4415:11;4410:2;4402:6;4398:15;4385:46;4473:1;4468:2;4463;4455:6;4451:15;4447:24;4440:35;4494:6;4484:16;;;;;;;3368:1138;;;;;;;:::o;4511:260::-;4579:6;4587;4640:2;4628:9;4619:7;4615:23;4611:32;4608:52;;;4656:1;4653;4646:12;4608:52;4679:29;4698:9;4679:29;:::i;:::-;4669:39;;4727:38;4761:2;4750:9;4746:18;4727:38;:::i;:::-;4717:48;;4511:260;;;;;:::o;4776:380::-;4855:1;4851:12;;;;4898;;;4919:61;;4973:4;4965:6;4961:17;4951:27;;4919:61;5026:2;5018:6;5015:14;4995:18;4992:38;4989:161;;5072:10;5067:3;5063:20;5060:1;5053:31;5107:4;5104:1;5097:15;5135:4;5132:1;5125:15;4989:161;;4776:380;;;:::o;5161:496::-;5340:3;5378:6;5372:13;5394:66;5453:6;5448:3;5441:4;5433:6;5429:17;5394:66;:::i;:::-;5523:13;;5482:16;;;;5545:70;5523:13;5482:16;5592:4;5580:17;;5545:70;:::i;:::-;5631:20;;5161:496;-1:-1:-1;;;;5161:496:9:o;5662:489::-;-1:-1:-1;;;;;5931:15:9;;;5913:34;;5983:15;;5978:2;5963:18;;5956:43;6030:2;6015:18;;6008:34;;;6078:3;6073:2;6058:18;;6051:31;;;5856:4;;6099:46;;6125:19;;6117:6;6099:46;:::i;:::-;6091:54;5662:489;-1:-1:-1;;;;;;5662:489:9:o;6156:249::-;6225:6;6278:2;6266:9;6257:7;6253:23;6249:32;6246:52;;;6294:1;6291;6284:12;6246:52;6326:9;6320:16;6345:30;6369:5;6345:30;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"682800","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2640","getApproved(uint256)":"6925","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26607","supportsInterface(bytes4)":"534","symbol()":"infinite","tokenURI(uint256)":"infinite","totalSupply()":"4432","transferFrom(address,address,uint256)":"infinite"},"internal":{"_afterTokenTransfers(address,address,uint256,uint256)":"infinite","_baseURI()":"infinite","_beforeTokenTransfers(address,address,uint256,uint256)":"infinite","_burn(uint256)":"infinite","_burn(uint256,bool)":"infinite","_checkContractOnERC721Received(address,address,uint256,bytes memory)":"infinite","_exists(uint256)":"4337","_extraData(address,address,uint24)":"infinite","_getApprovedSlotAndAddress(uint256)":"infinite","_getAux(address)":"infinite","_initializeOwnershipAt(uint256)":"infinite","_isSenderApprovedOrOwner(address,address,address)":"infinite","_mint(address,uint256)":"infinite","_mintERC2309(address,uint256)":"infinite","_msgSenderERC721A()":"infinite","_nextExtraData(address,address,uint256)":"infinite","_nextInitializedFlag(uint256)":"infinite","_nextTokenId()":"infinite","_numberBurned(address)":"infinite","_numberMinted(address)":"infinite","_ownershipAt(uint256)":"infinite","_ownershipOf(uint256)":"infinite","_packOwnershipData(address,uint256)":"infinite","_packedOwnershipOf(uint256)":"infinite","_safeMint(address,uint256)":"infinite","_safeMint(address,uint256,bytes memory)":"infinite","_setAux(address,uint64)":"infinite","_setExtraDataAt(uint256,uint24)":"infinite","_startTokenId()":"infinite","_toString(uint256)":"infinite","_totalBurned()":"infinite","_totalMinted()":"infinite","_unpackedOwnership(uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721) Non-Fungible Token Standard, including the Metadata extension. Optimized for lower gas during batch mints. Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...) starting from `_startTokenId()`. Assumptions: - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply. - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ConsecutiveTransfer(uint256,uint256,address,address)\":{\"details\":\"Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC721A\",\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"erc721a/contracts/ERC721A.sol\":\"ERC721A\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23116c16976b7d8c0c714ba1b38ae6b16c16fc90ec69b568fb1ebf1bc063e01c\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1946,"contract":"erc721a/contracts/ERC721A.sol:ERC721A","label":"_currentIndex","offset":0,"slot":"0","type":"t_uint256"},{"astId":1948,"contract":"erc721a/contracts/ERC721A.sol:ERC721A","label":"_burnCounter","offset":0,"slot":"1","type":"t_uint256"},{"astId":1950,"contract":"erc721a/contracts/ERC721A.sol:ERC721A","label":"_name","offset":0,"slot":"2","type":"t_string_storage"},{"astId":1952,"contract":"erc721a/contracts/ERC721A.sol:ERC721A","label":"_symbol","offset":0,"slot":"3","type":"t_string_storage"},{"astId":1956,"contract":"erc721a/contracts/ERC721A.sol:ERC721A","label":"_packedOwnerships","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1960,"contract":"erc721a/contracts/ERC721A.sol:ERC721A","label":"_packedAddressData","offset":0,"slot":"5","type":"t_mapping(t_address,t_uint256)"},{"astId":1965,"contract":"erc721a/contracts/ERC721A.sol:ERC721A","label":"_tokenApprovals","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_struct(TokenApprovalRef)1878_storage)"},{"astId":1971,"contract":"erc721a/contracts/ERC721A.sol:ERC721A","label":"_operatorApprovals","offset":0,"slot":"7","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_struct(TokenApprovalRef)1878_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct ERC721A.TokenApprovalRef)","numberOfBytes":"32","value":"t_struct(TokenApprovalRef)1878_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(TokenApprovalRef)1878_storage":{"encoding":"inplace","label":"struct ERC721A.TokenApprovalRef","members":[{"astId":1877,"contract":"erc721a/contracts/ERC721A.sol:ERC721A","label":"value","offset":0,"slot":"0","type":"t_address"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"ApprovalCallerNotOwnerNorApproved()":[{"notice":"The caller must own the token or be an approved operator."}],"ApprovalQueryForNonexistentToken()":[{"notice":"The token does not exist."}],"BalanceQueryForZeroAddress()":[{"notice":"Cannot query the balance for the zero address."}],"MintERC2309QuantityExceedsLimit()":[{"notice":"The `quantity` minted with ERC2309 exceeds the safety limit."}],"MintToZeroAddress()":[{"notice":"Cannot mint to the zero address."}],"MintZeroQuantity()":[{"notice":"The quantity of tokens minted must be more than zero."}],"OwnerQueryForNonexistentToken()":[{"notice":"The token does not exist."}],"OwnershipNotInitializedForExtraData()":[{"notice":"The `extraData` cannot be set on an unintialized ownership slot."}],"TransferCallerNotOwnerNorApproved()":[{"notice":"The caller must own the token or be an approved operator."}],"TransferFromIncorrectOwner()":[{"notice":"The token must be owned by `from`."}],"TransferToNonERC721ReceiverImplementer()":[{"notice":"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."}],"TransferToZeroAddress()":[{"notice":"Cannot transfer to the zero address."}],"URIQueryForNonexistentToken()":[{"notice":"The token does not exist."}]},"kind":"user","methods":{},"version":1}},"ERC721A__IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of ERC721 token receiver.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of ERC721 token receiver.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"erc721a/contracts/ERC721A.sol\":\"ERC721A__IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23116c16976b7d8c0c714ba1b38ae6b16c16fc90ec69b568fb1ebf1bc063e01c\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"erc721a/contracts/IERC721A.sol":{"IERC721A":{"abi":[{"inputs":[],"name":"ApprovalCallerNotOwnerNorApproved","type":"error"},{"inputs":[],"name":"ApprovalQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"BalanceQueryForZeroAddress","type":"error"},{"inputs":[],"name":"MintERC2309QuantityExceedsLimit","type":"error"},{"inputs":[],"name":"MintToZeroAddress","type":"error"},{"inputs":[],"name":"MintZeroQuantity","type":"error"},{"inputs":[],"name":"OwnerQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"OwnershipNotInitializedForExtraData","type":"error"},{"inputs":[],"name":"TransferCallerNotOwnerNorApproved","type":"error"},{"inputs":[],"name":"TransferFromIncorrectOwner","type":"error"},{"inputs":[],"name":"TransferToNonERC721ReceiverImplementer","type":"error"},{"inputs":[],"name":"TransferToZeroAddress","type":"error"},{"inputs":[],"name":"URIQueryForNonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"toTokenId","type":"uint256"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"ConsecutiveTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"Interface of ERC721A.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"ConsecutiveTransfer(uint256,uint256,address,address)":{"details":"Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in `owner`'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Equivalent to `safeTransferFrom(from, to, tokenId, '')`."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"totalSupply()":{"details":"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of ERC721A.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ConsecutiveTransfer(uint256,uint256,address,address)\":{\"details\":\"Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"erc721a/contracts/IERC721A.sol\":\"IERC721A\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"ApprovalCallerNotOwnerNorApproved()":[{"notice":"The caller must own the token or be an approved operator."}],"ApprovalQueryForNonexistentToken()":[{"notice":"The token does not exist."}],"BalanceQueryForZeroAddress()":[{"notice":"Cannot query the balance for the zero address."}],"MintERC2309QuantityExceedsLimit()":[{"notice":"The `quantity` minted with ERC2309 exceeds the safety limit."}],"MintToZeroAddress()":[{"notice":"Cannot mint to the zero address."}],"MintZeroQuantity()":[{"notice":"The quantity of tokens minted must be more than zero."}],"OwnerQueryForNonexistentToken()":[{"notice":"The token does not exist."}],"OwnershipNotInitializedForExtraData()":[{"notice":"The `extraData` cannot be set on an unintialized ownership slot."}],"TransferCallerNotOwnerNorApproved()":[{"notice":"The caller must own the token or be an approved operator."}],"TransferFromIncorrectOwner()":[{"notice":"The token must be owned by `from`."}],"TransferToNonERC721ReceiverImplementer()":[{"notice":"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."}],"TransferToZeroAddress()":[{"notice":"Cannot transfer to the zero address."}],"URIQueryForNonexistentToken()":[{"notice":"The token does not exist."}]},"kind":"user","methods":{},"version":1}}}}}}